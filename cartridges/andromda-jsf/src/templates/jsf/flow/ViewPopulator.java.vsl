#if ($stringUtils.isNotBlank($view.packageName))
package $view.packageName;
#end

import java.io.IOException;

import javax.faces.context.FacesContext;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

/**
 * This filter handles the population of forms for the <em>$view.name</code>
 * view.
 */
public class $view.populator
    implements Filter
{
    /**
     * @see javax.servlet.Filter${esc.hash}setFilterConfig(FilterConfig)
     */
    public void init(FilterConfig config)
    {
    }

    /**
     * @see javax.servlet.Filter${esc.hash}doFilter(javax.servlet.ServletRequest,
     *      javax.servlet.ServletResponse, javax.servlet.FilterChain)
     */
    public void doFilter(
        ServletRequest request,
        ServletResponse response,
        FilterChain chain) throws IOException, ServletException
    {
        this.populateFormAndViewVariables(request, response, null);
        chain.doFilter(request, response);
    }
    
    private void populateFormAndViewVariables(final ServletRequest request, final ServletResponse response, Object form)
        throws ServletException
    {
        // - we need to retrieve the faces context different than normal because we're outside of the
        //   faces servlet
#set ($facesContextUtilsFullyQualifiedName = "FacesContextUtils")
#if ($stringUtils.isNotBlank($managedBeansPackage))
#set($facesContextUtilsFullyQualifiedName = "${managedBeansPackage}.${facesContextUtilsFullyQualifiedName}")
#end
        final FacesContext facesContext = ${facesContextUtilsFullyQualifiedName}.getFacesContext(request, response);
                
        oracle.adf.view.faces.context.AdfFacesContext adfContext = oracle.adf.view.faces.context.AdfFacesContext.getCurrentInstance();
        final javax.faces.el.VariableResolver variableResolver = facesContext.getApplication().getVariableResolver();
        final javax.servlet.http.HttpSession session = ((javax.servlet.http.HttpServletRequest)request).getSession();
        if (form == null)
        {  
            // - first try getting the form from the ADF processScope
            form = adfContext.getProcessScope().get("$view.formKey");
            // - if the form is null, try getting the current adfContext from the session (and then remove it from the session)
            if (form == null)
            {
                final ${managedBeansPackage}.AdfFacesContextWrapper contextWrapper = 
                    (${managedBeansPackage}.AdfFacesContextWrapper)session.getAttribute("$adfContextAttributeName");
                adfContext = contextWrapper != null ? contextWrapper.getCurrentInstance() : null;    
                form = adfContext != null ? adfContext.getProcessScope().get("$view.formKey") : null;   
#if ($formSerialization) 
                // - if the form is still null, see if we can get it from a serialized state
                if (form == null)
                {
                    form = ${managedBeansPackage}.JsfUtils.getSerializedForm(session);
                }
#end
                if (form != null)
                {
                    // - add the form to the current process scope since it wasn't in the current one to begin with
                    oracle.adf.view.faces.context.AdfFacesContext.getCurrentInstance().getProcessScope().put("$view.formKey", form);   
                }
            }
            else
            {
                // - remove the ADF context in the event that its present
                session.removeAttribute("AndroMDAADFContext");
            }
        }
        else
        {
            // - since the form argument is not null, set it as the "$view.formKey" in the processScope 
            //   (to replace the existing "$view.formKey" attribute)
            adfContext.getProcessScope().put("$view.formKey", form);
        }
        try
        {
#if (!$view.formActions.empty)
            // - populate the forms
            if (form != null)
            {    
#foreach ($action in $view.formActions) 
                $action.fullyQualifiedFormImplementationName $action.formBeanName =
                    ($action.fullyQualifiedFormImplementationName)variableResolver.resolveVariable(
                    facesContext,
                    "$action.formBeanName");
                // - populate the $action.formBeanName with any parameters from the previous form
                ${managedBeansPackage}.${formPopulatorName}.populateForm(form, $action.formBeanName);
                request.setAttribute("$action.formBeanName", $action.formBeanName);
#end
            }
#end
#if ($formSerialization)
            // - serialize the form
            if (form != null)
            {
                ${managedBeansPackage}.JsfUtils.serializeForm(session, form);
            }
#end
#if (!$view.variables.empty || !$view.backingValueVariables.empty)
            // - populate the view variables
            populateViewVariablesFromForm(request, form);
#end
        }
        catch (final Throwable throwable)
        {
            throw new ServletException(throwable);
        }
    }
    
#if (!$view.variables.empty || !$view.backingValueVariables.empty)
    /**
     * Populates all view variables represented by this populator from the given <code>form</code>.
     * This operation can be used from within controller operations in order to populate view variables (if its
     * required to populate them outside of the normal filter execution).
     *
     * @param request the current request (to which view variables are populated)
     * @param form the form from which to retrieve the view variables.
     */
    static void populateViewVariablesFromForm(final ServletRequest request, final Object form)
        throws Exception
    {
        if (form != null)
        {    
#foreach ($variable in $view.variables)
#set ($readableVariable = "${variable.name}Readable")
            final boolean $readableVariable = org.apache.commons.beanutils.PropertyUtils.isReadable(form, "$variable.name");
            if ($readableVariable)
            {
                request.setAttribute("$variable.name", org.apache.commons.beanutils.PropertyUtils.getProperty(form, "$variable.name"));
            }
#end
#foreach ($variable in $view.backingValueVariables)
#if (!$variable.complex)
#renderBackingValuePopulation($variable "")
#end
#foreach ($attribute in $variable.attributes)
#if ($attribute.isSelectable($variable) || $attribute.isBackingValueRequired($variable))
#renderBackingValuePopulation($attribute $variable)
#end
#end
#end
        }
    }
    
#end
    /**
     * @see javax.servlet.Filter${esc.hash}destroy()
     */
    public void destroy()
    {
    }
}