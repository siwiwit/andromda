// license-header java merge-point
/** Autogenerated by AndroMDA (ManageableServiceRemote.vsl) - do not edit */
#set ($generatedFile = "${manageable.manageableServiceFullPath}.java")
#set ($memberList = $manageable.listManageableMembers(true))
#if (!$manageable.identifiers.empty)
#**##set ($identifier = $manageable.manageableIdentifier)
#end
package $manageable.manageablePackageName;

public interface $manageable.manageableServiceName
{
#if ($manageable.create)
    public $manageable.fullyQualifiedEntityName create($memberList)
        throws ${manageable.fullyQualifiedManageableServiceCreateExceptionName};

#end
#if ($manageable.read)
    public java.util.List read($memberList)
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName};

    public java.util.List readAll()
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName};

#**##foreach ($member in $manageable.manageableAttributes)
#*  *##if ($member.manageableGetterAvailable)
    public $member.type.fullyQualifiedName ${member.getterName}($identifier.type.fullyQualifiedName $identifier.name)
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName};

#*  *##end
#**##end
#**##if (!$manageable.manageableAssociationEnds.empty)
    public java.util.Map readBackingLists()
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName};

#**##end
#end
#if ($manageable.update)
    public $manageable.fullyQualifiedEntityImplementationName update($memberList)
        throws ${manageable.fullyQualifiedManageableServiceUpdateExceptionName};

#end
#if ($manageable.delete)
    public void delete(${identifier.type.fullyQualifiedName}[] ids)
        throws ${manageable.fullyQualifiedManageableServiceDeleteExceptionName};

#end
}
