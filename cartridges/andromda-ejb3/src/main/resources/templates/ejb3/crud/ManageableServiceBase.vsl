// license-header java merge-point
/* Autogenerated by AndroMDA (ManageableServiceBase.vsl) - do not edit */
#set ($generatedFile = "${manageable.manageableServiceBaseFullPath}.java")
#set ($memberList = $manageable.listManageableMembers(true))
#set ($memberListArguments = $manageable.listManageableMembers(false))
#if (!$manageable.identifiers.empty)
#**##set ($identifier = $manageable.manageableIdentifier)
#end
package $manageable.manageablePackageName;

$manageable.identifiers.empty
identifier = $identifier
name = $identifier.name
type = $identifier.type
$manageable.manageableIdentifier

THE IDENTIFIER IS $manageable.getIdentifiers(true).iterator().next()
$manageable.getIdentifiers(true).iterator().next().name

/**
 * Autogenerated EJB manageable session bean class ${manageable.manageableServiceName}.
 *
 */
/**
 * Do not specify the javax.ejb.${service.type} annotation
 * Instead, define the session bean in the ejb-jar.xml descriptor
 * javax.ejb.${service.type}
 */
@javax.ejb.TransactionAttribute(javax.ejb.TransactionAttributeType.REQUIRED)
@javax.ejb.Remote({${manageable.fullyQualifiedManageableServiceName}.class})
public final class $manageable.manageableServiceBaseName
    implements $manageable.manageableServiceName
{
    // ------ Session Context Injection ------
    
    @javax.annotation.Resource
    protected javax.ejb.SessionContext context;
    
    // ------ Persistence Context Injection --------

    /**
     * Inject persistence context #if ($manageable.defaultPersistenceContextUnitName)${manageable.defaultPersistenceContextUnitName}#end
     
     */
    @javax.persistence.PersistenceContext#if ($service.persistenceContextUnitName)(unitName = "${manageable.defaultPersistenceContextUnitName}")#end
    
    protected javax.persistence.EntityManager emanager;
    
    // ------------ CRUD Operations -------------
    
#if ($manageable.create)
    /**
     * Create operations
     *
     * @return $manageable.fullyQualifiedEntityName
     * @throws $manageable.fullyQualifiedManageableServiceCreateExceptionName
     */
    public $manageable.fullyQualifiedEntityName create($memberList)
        throws ${manageable.fullyQualifiedManageableServiceCreateExceptionName}
    {
#**##foreach ($member in $manageable.manageableMembers)
#*  *##if ($member.required && !$member.type.primitive && !($member.identifier && !$member.display))
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.create(${memberList}) - '${member.name}' can not be null");
        }

#*  *##end
#**##end
        final ${manageable.fullyQualifiedEntityName} entity = new ${manageable.fullyQualifiedEntityName}();
#**##foreach ($member in $manageable.manageableAttributes)
        entity.${member.setterName}($member.name);
#**##end
#**##foreach ($member in $manageable.manageableAssociationEnds)
#*  *##if ($member.many)
#*    *##set ($memberEntityName = "${member.name}Entities")

        java.util.Set $memberEntityName = null;
        if ($member.name != null && ${member.name}.length > 0)
        {
            $memberEntityName = this.find${member.type.name}ByIds($member.name);
        }
#*  *##else
#*    *##set ($memberEntityName = "${member.name}Entity")

        $member.type.fullyQualifiedName $memberEntityName = null;
        if ($member.name != null)
        {
            $memberEntityName = ($member.type.fullyQualifiedName)emanager.getReference(${member.type.fullyQualifiedName}.class, #if ($member.type.primitive)new ${member.type.wrapperName}($member.name)#else${member.name}#end);
        }
#*  *##end
#*  *##if ($member.required)
        entity.${member.setterName}($memberEntityName);
#*  *##else
        if ($memberEntityName != null)
        {
            entity.${member.setterName}($memberEntityName);
#*    *##if ($member.many)
#*      *##if ($member.otherEnd.navigable)
            // set the other ends of the many2many association too
            for (final java.util.Iterator iterator = ${memberEntityName}.iterator(); iterator.hasNext();)
            {
                final $member.type.fullyQualifiedName element = ($member.type.fullyQualifiedName)iterator.next();
                element.${member.otherEnd.getterName}().add(entity);
            }
#*      *##else
            // we ought to be setting the other end of the many2many association here
            // but the navigability on the other end has been disabled, therefore doing
            // the following would break compilation: element.${member.otherEnd.getterName}()
            // the result is that only one end of this association will be set
#*      *##end
#*    *##end
        }
#*  *##end
#**##end

        emanager.persist(entity);
        emanager.refresh(entity);
        return entity;
    }

#end
#if ($manageable.read)
    /**
     * Read operation
     *
     * @return java.util.List
     * @throws $manageable.fullyQualifiedManageableServiceReadExceptionName
     */
    public java.util.List read($memberList)
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
        return toValueObjects(dao.read($memberListArguments));
    }

    /**
     * Read all operation
     *
     * @return java.util.List
     * @throws $manageable.fullyQualifiedManageableServiceReadExceptionName
     */
    public java.util.List readAll()
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
        return toValueObjects(dao.readAll());
    }

#**##foreach ($member in $manageable.manageableAttributes)
#*  *##if ($member.manageableGetterAvailable)
    /**
     * Read BLOB type fields
     *
     * @return $member.type.fullyQualifiedName
     * @throws $manageable.fullyQualifiedManageableServiceReadExceptionName
     */
    public $member.type.fullyQualifiedName ${member.getterName}($identifier.type.fullyQualifiedName $identifier.name)
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
#*    *##if (!$member.type.primitive)
        if ($identifier.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.${member.getterName}($identifier.type.fullyQualifiedName $identifier.name) - '${identifier.name}' can not be null");
        }

#*    *##end
        try
        {
            $member.type.fullyQualifiedName value = $member.type.javaNullString;

            final javax.persistence.Query queryObject = emanager.createNativeQuery("SELECT entity.${member.name} FROM $manageable.entityName AS entity where entity.${identifier.name} = :$identifier.name");
#*    *##if ($identifier.type.primitive)
            queryObject.setParameter("$identifier.name", new ${identifier.type.wrapperName}($identifier.name));
#*    *##else
            queryObject.setParameter("$identifier.name", $identifier.name);
#*    *##end
            final java.util.Iterator iterator = queryObject.iterate();
            if (iterator.hasNext())
            {
                value = ($member.type.fullyQualifiedName)iterator.next();
            }

            return value;
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

#*  *##end
#**##end
#**##if (!$manageable.manageableAssociationEnds.empty)
    /**
     * Read backing list operation
     *
     * @return java.util.Map
     * @throws $manageable.fullyQualifiedManageableServiceReadExceptionName
     */
    public java.util.Map readBackingLists()
        throws ${manageable.fullyQualifiedManageableServiceReadExceptionName}
    {
        return getDao().readBackingLists();
    }

#**##end
#end
#if ($manageable.update)
    /**
     * Update Operation
     *
     * @return $manageable.fullyQualifiedEntityName
     * @throws $manageable.fullyQualifiedManageableServiceUpdateExceptionName
     */
    public $manageable.fullyQualifiedEntityName update($memberList)
        throws ${manageable.fullyQualifiedManageableServiceUpdateExceptionName}
    {
#**##foreach ($member in $manageable.manageableMembers)
#*  *##if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.update($memberList) - '${member.name}' can not be null");
        }

#*  *##end
#**##end
#**##set ($identifier = $manageable.manageableIdentifier)
        final $manageable.fullyQualifiedEntityName entity = (${manageable.fullyQualifiedEntityName})emanager.getReference(${manageable.fullyQualifiedEntityName}.class, #if ($identifier.type.primitive)new ${identifier.type.wrapperName}($identifier.name)#else${identifier.name}#end);

#**##foreach ($member in $manageable.manageableAttributes)
#*  *##if (!$member.identifier)## the identifier is already present since we loaded the entity
        entity.${member.setterName}(${member.name});
#*  *##end
#**##end
#**##foreach ($member in $manageable.manageableAssociationEnds)
#*  *##if ($member.many)
#*    *##set ($memberEntityName = "${member.name}Entities")

        java.util.Set $memberEntityName = null;
        if ($member.name != null && ${member.name}.length > 0)
        {
            $memberEntityName = this.find${member.type.name}ByIds($member.name);
        }
#*  *##else
#*    *##set ($memberEntityName = "${member.name}Entity")

        $member.type.fullyQualifiedName $memberEntityName = null;
        if ($member.name != null)
        {
            $memberEntityName = (${member.type.fullyQualifiedName})emanager.getReference(${member.type.fullyQualifiedName}.class, #if ($memeber.type.primitive)new ${member.type.wrapperName}($member.name)#else${member.name}#end);
        }
#*  *##end
#*  *##if ($member.required)
        entity.${member.setterName}($memberEntityName);
#*  *##else
        if ($memberEntityName != null)
        {
            entity.${member.setterName}($memberEntityName);
#*    *##if ($member.many)
#*      *##if ($member.otherEnd.navigable)
            // set the other ends of the many2many association too
            for (final java.util.Iterator iterator = ${memberEntityName}.iterator(); iterator.hasNext();)
            {
                final $member.type.fullyQualifiedName element = ($member.type.fullyQualifiedName)iterator.next();
                element.${member.otherEnd.getterName}().add(entity);
            }
#*      *##else
            // we ought to be setting the other end of the many2many association here
            // but the navigability on the other end has been disabled, therefore doing
            // the following would break compilation: element.${member.otherEnd.getterName}()
            // the result is that only one end of this association will be set
#*      *##end
#*    *##end
        }
#*  *##end
#**##end

        emanager.merge(entity);
        return entity;
    }

#end
#if ($manageable.delete)
    /**
     * Delete operation
     *
     * @throws $manageable.fullyQualifiedManageableServiceDeleteExceptionName
     */
    public void delete(${identifier.type.fullyQualifiedName}[] ids)
        throws ${manageable.fullyQualifiedManageableServiceDeleteExceptionName}
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.delete(${identifier.type.fullyQualifiedName}[] ids) - 'ids' can not be null");
        }

        try
        {
            final javax.persistence.Query queryObject =
                emanager.createQuery("DELETE FROM $manageable.name WHERE $identifier.name in (:ids)");
            queryObject.setParameter("ids", ids);
            queryObject.executeUpdate();
        }
        catch (Exception ex)
        {
            throw new ${manageable.fullyQualifiedManageableServiceDeleteExceptionName}(ex);
        }
    }

#end
}