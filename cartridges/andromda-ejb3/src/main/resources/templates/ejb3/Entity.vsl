// license-header java merge-point
/* Autogenerated by AndroMDA (EntityImpl.vsl)*/
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($entity.fullyQualifiedEntityName,'.','/')}.java")

#set ($identifier = $entity.identifiers.iterator().next())
/**
 * Autogenerated POJO EJB3 implementation class for ${entity.entityName}.
 *
 * Add any manual implementation within this class.  This class will NOT
 * be overwritten with incremental changes.
 *
$entity.getDocumentation(" * ")
 *
 */


@javax.persistence.Entity#if ($entity.accessType)(access = javax.persistence.AccessType.${entity.accessType})#end

@javax.persistence.Table(name = "${entity.tableName}")
#if ($entity.listenerEnabled)
@javax.persistence.EntityListener(${entity.fullyQualifiedEntityListenerName}.class)
#end
public#if ($entity.abstract) abstract#end class ${entity.entityName}
    extends ${entity.fullyQualifiedEntityEmbeddableName}
    implements java.io.Serializable
{

    /**
     * The serial version UID of this class required for serialization.
     */
    private static final long serialVersionUID = ${entity.serialVersionUID}L;

    // --------------- constructors -----------------
    
    /**
     * Default ${entity.name} constructor
     */
    public ${entity.entityName}()
    { 
        super();
    }
    
## Autogenerate a constructor implementation with all attributes.
#set ($allAttributes = $transform.filterByVisibility($entity.allInstanceAttributes, "public"))
#if ($entity.syntheticCreateMethodAllowed && !$transform.filterUpdatableAttributes($allAttributes, $entity.compositePrimaryKeyPresent).empty)
    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this/super class to the
     * values provided by the parameters.
     *
#**##foreach($attribute in $transform.filterUpdatableAttributes($allAttributes))
     * @param $attribute.name Value for the ${attribute.name} property
#**##end
     */
    public ${entity.entityName}($entity.getAttributesAsList($allAttributes, true, true, false)) 
    {
        super($entity.getAttributesAsList($allAttributes, false, true, false));
    }
    
#end
#set ($relations = $entity.allEntityRelations)
#if (!$relations.empty)
#**##if ($entity.syntheticCreateMethodAllowed)
    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
#*  *##foreach($attribute in $transform.filterUpdatableAttributes($allAttributes, $entity.compositePrimaryKeyPresent))
     * @param $attribute.name Value for the ${attribute.name} property
#*  *##end
#*  *##foreach ($relation in $relations)
     * @param $relation.otherEnd.name Value for the ${relation.otherEnd.name} relation role
#*  *##end
     */
    public ${entity.entityName}($entity.getAttributesAsList($allAttributes, true, true, false)#if(!$allAttributes.empty), #end#foreach ($relation in $relations)${relation.otherEnd.getterSetterTypeName} $relation.otherEnd.name#if($velocityCount != $relations.size()), #end#end)
    {
        super($entity.getAttributesAsList($allAttributes, false, true, false)#if(!$allAttributes.empty), #end#foreach ($relation in $relations)$relation.otherEnd.name#if($velocityCount != $relations.size()), #end#end);
    }
    
#**##end
#end
#foreach ($operation in $entity.getCreateMethods(true))
#**##set ($opArguments = $transform.getArgumentsAsList(${operation.argumentNames}))
    /**
     * Explicitly defined constuctor with specified args list.
$operation.getDocumentation("    * ")
#**##foreach($attribute in $opArguments)
     * @param $attribute Value for the $attribute property
#**##end
     */
    public ${entity.entityName}(${operation.typedArgumentList}) 
    {
        super(${operation.argumentNames});
    }
    
#end
#set ($operations = $entity.businessOperations)
#if (!$operations.empty)

    // -------------- Entity Methods -----------------
    
#**##foreach ($operation in $operations)
#*  *##set ($signature = $operation.signature)
#*  *##set ($visibility = $operation.visibility.toString())
#*  *##set ($returnType = $operation.returnType.fullyQualifiedName)
    /**
$operation.getDocumentation("     * ")
     */
    $visibility #if ($operation.static)static#end $returnType $signature
#*  *##if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#*  *##end
    {
        // TODO put your implementation here.
#*  *##if ($operation.returnTypePresent)
        return $operation.returnType.javaNullString;
#*  *##else
        throw new java.lang.UnsupportedOperationException("${entity.fullyQualifiedName}.${operation.signature} Not implemented!");
#*  *##end
    }
    
#**##end
#end
}