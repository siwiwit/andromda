// license-header java merge-point
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($service.fullyQualifiedServiceImplementationName,'.','/')}.java")

/**
 * @see ${service.fullyQualifiedServiceName}
 */
public class ${service.serviceImplementationName} 
    extends ${service.fullyQualifiedServiceName} 
{
    // --------------- Constructors ---------------
    
## Default create method with no arguments.
    public ${service.serviceImplementationName}()
    {
        super();
    }
#foreach ($operation in $service.getCreateMethods(false))

    /**
$operation.getDocumentation("     * ")
     *
     */
    public ${service.serviceImplementationName}($operation.typedArgumentList)
    {
        // implementation
    }
#end
## Autogenerated create method with all attributes. Only present for stateful beans.
#set ($allAttributes = $service.allInstanceAttributes)
#if (!$allAttributes.empty)

    /**
     * Constructor with all attribute values.
#**##foreach($attribute in $allAttributes)
     * @param $attribute.name Value for the ${attribute.name} property
#**##end
     */
    public ${service.serviceImplementationName}(${service.getAttributesAsList($allAttributes, true, true)})
    {
#**##if(!$allAttributes.empty)
        super($service.getAttributesAsList($allAttributes, false, true));
#**##end
    }
#end
#set ($operations = $service.businessOperations)
#if (!$operations.empty)

    // -------- Business Methods Impl --------------
    
#**##foreach ($operation in $operations)
#*  *##if (!$operation.lifecycleCallback)
    /**
     * @see ${service.fullyQualifiedServiceName}#${operation.getSignature(false)}
     */
#*    *##set ($abstract = $service.abstract && $operation.abstract)
    protected#if ($abstract) abstract#end $operation.returnType.fullyQualifiedName $operation.implementationSignature
#*    *##if ($abstract)
        throws java.lang.Exception;
#*    *##else
        throws java.lang.Exception
    {
        //TODO: put your implementation here.
#*      *##if ($operation.returnTypePresent)
        // Dummy return value, just that the file compiles
        return $operation.returnType.javaNullString;
#*      *##else
        throw new java.lang.UnsupportedOperationException("${service.fullyQualifiedServiceName}.${operation.implementationSignature} Not implemented!");
#*      *##end
    }
#*    *##end

#*  *##end
#**##end
#end
#if (!$operations.empty)

    // -------- Lifecycle Callback Impl --------------
    
#**##foreach ($operation in $operations)
#*  *##if ($operation.lifecycleCallback)
    /**
     * @see ${service.fullyQualifiedServiceName}#${operation.name}()
     */
    protected void handle${stringUtils.capitalize(${operation.name})}()
    {
        // TODO put your lifecycle callback implementation here.
    }
    
#*  *##end
#**##end
#end
#if ($service.stateful)

    // ----------- Remove Method Impl -----------
    
    /**
     * @see ${service.fullyQualifiedServiceName}#remove()
     */
    protected void handleRemove()
    {
        //TODO: put your implementation here
    }
#end
}
