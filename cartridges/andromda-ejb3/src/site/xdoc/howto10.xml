<?xml version="1.0" encoding="iso-8859-1"?>
<document>
    <properties>
        <author email="vancek@users.sourceforge.net">Vance Karimi</author>
        <title>AndroMDA - EJB3 - Message Driven Beans</title>
    </properties>
    <body>
        <section name="Message Driven Beans">
            <p>
                A message driven bean is simply an 'asynchronous message consumer'.  It is invoked by the container
                when a message is received at the destination that the MDB services.  There is no client side
                visibility or conversational state with MDBs and the lifetime of the MDB instance is totally
                controlled by the container.
            </p>
            <p>
                The EJB 3.0 spec states:
                <i>
                    <p>
                        A message-driven bean instance has no state for a specific client.  However, the instance
                        variables of the message-driven bean instance can contain state accross the handling of 
                        client messages.  Examples of such state include an open database connection and a reference
                        to an enterprise bean.
                    </p>
                    <p>
                        A further goal of the message-driven bean model is to allow for the concurrent processing of
                        a stream of messages by means of container-provided pooling of message-driven bean
                        instances.
                    </p>
                </i>
            </p>
            <p>
                Like a session bean, the EJB3 cartridge generates a message driven bean class which should NOT be
                modified manually and a corresponding implementation class that requires the business logic
                for message processing.  The MDB class contains all the necessary annotations.  The MDB 
                implementation class extends the MDB class.
            </p>
            <p>
                Currently, EJB3 cartridge does not generate the <code>@MessageDriven</code> metadata annotation in the
                MDB class.  Instead, the <code>ejb-jar.xml</code> and <code>jboss.xml</code> deployment
                descriptors contain the necessary metadata, due to the design of separation by inheritance where the
                business logic is separated in the subclass from the auto-generated code in the base class.
            </p>
            <p>
                The <code>abstract</code> message-driven bean class defines all the business methods as
                abstract.  The message-driven bean implementation class requires the business method implementations.
                The implementation class also contains the implementation of the <code>onMessage</code>
                callback in the <code>MessageListener</code>.
            </p>
            <p>
                The following examples illustrates how the EJB3 cartridge will generate the message-drive bean
                related classes and the required references in the session bean classes.  The
                <code>PaymentProcessor</code> is the message-driven bean that is servicing the <code>Queue</code>
                which is located at <code>queue/howtomodel/howto10a</code>.  The tagged values used are
                explained further down.
            </p>
			<p>
				<img src="images/org/andromda/test/10/a/uml.gif"/>
			</p>
			<p>
				<ul>
					<li class="gen"><p>Auto-generated source that does not need manual editing</p></li>
					<li class="impl"><p>Auto-generated source that should be edited manually</p></li>
					<li class="changed"><p>File that is affected by the modifications applied in this section</p></li>
				</ul>
			</p>
            <p>
                <ul>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/CarEmbeddable.java"><code>CarEmbeddable.java</code></a></p></li>
                    <li class="impl"><p><a href="src/org/andromda/test/howto10/a/Car.java"><code>Car.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/CarType.java"><code>CarType.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/CarDao.java"><code>CarDao.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto10/a/CarDaoBase.java"><code>CarDaoBase.java</code></a></p></li>
                    <li class="impl"><p><a href="src/org/andromda/test/howto10/a/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/CarDaoException.java"><code>CarDaoException.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/Person.java"><code>Person.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/PersonDao.java"><code>PersonDao.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/PersonDaoBase.java"><code>PersonDaoBase.java</code></a></p></li>
                    <li class="impl"><p><a href="src/org/andromda/test/howto10/a/PersonDaoImpl.java"><code>PersonDaoImpl.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/PersonDaoException.java"><code>PersonDaoException.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto10/a/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/RentalServiceRemote.java"><code>RentalServiceRemote.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/RentalServiceDelegate.java"><code>RentalServiceDelegate.java</code></a></p></li>
                    <li class="impl"><p><a href="src/org/andromda/test/howto10/a/RentalServiceBean.java"><code>RentalServiceBeanImpl.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/RentalServiceException.java"><code>RentalServiceException.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto10/a/RentalException.java"><code>RentalException.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto10/a/PaymentServiceBase.java"><code>PaymentServiceBase.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto10/a/PaymentServiceRemote.java"><code>PaymentServiceRemote.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto10/a/PaymentServiceDelegate.java"><code>PaymentServiceDelegate.java</code></a></p></li>
                    <li class="impl"><p><a class="changed" href="src/org/andromda/test/howto10/a/PaymentServiceBean.java"><code>PaymentServiceBean.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto10/a/PaymentServiceException.java"><code>PaymentServiceException.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto10/a/PaymentProcessorMDBBean.java"><code>PaymentProcessorMDBBean.java</code></a></p></li>
                    <li class="impl"><p><a class="changed" href="src/org/andromda/test/howto10/a/PaymentProcessorMDBBeanImpl.java"><code>PaymentProcessorMDBBeanImpl.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto10/a/ejb-jar.xml"><code>ejb-jar.xml</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto10/a/jboss.xml"><code>jboss.xml</code></a></p></li>
                </ul>
            </p>
            <p>
                The dependency from the <code>RentalService</code> session bean to the <code>PaymentProcessor</code>
                MDB injects the required connection factory and destination objects into the session bean.
                Similarly, the dependency from the <code>PaymentProcessor</code> MDB to the <code>PaymentService</code>
                session bean injects the EJB instance of the session bean into the MDB.
            </p>
            <a name="Destination_Type"/>
            <subsection name="Destination Type">
                <p>
                    For every message-driven bean, you <i>MUST</i> specify the destination type for the servicing
                    MDB.  This is achieved by simply modelling the <code>@andromda.ejb.mdb.destination.type</code>
                    tagged value on the MDB class.  Your options are:
                    <ul>
                        <li>
                            <p>
                                <b>javax.jms.Queue</b>
                            </p>
                            <p>
                                If you have only ONE listener on a destination, then you specify the destination
                                type as a Queue.
                            </p>
                        </li>
                        <li>
                            <p>
                                <b>javax.jms.Topic</b>
                            </p>
                            <p>
                                If you have multiple subscribers on a destination, then you specify the destination
                                as a Topic.
                            </p>
                        </li>
                    </ul>
                </p>
            </subsection>
            <a name="Destination"/>
            <subsection name="Destination">
                <p>
                    For every message-driven bean, you <i>MUST</i> specify the destination queue or topic name
                    that the MDB is associated with.  This is achieved by modelling the
                    <code>@andromda.ejb.mdb.destination</code> tagged value.
                </p>
            </subsection>
            <a name="Acknowledge_Mode"/>
            <subsection name="Acknowledge Mode">
                <p>
                    To specify the acknowledge mode for a JMS message driven bean, simply model the
                    <code>@andromda.ejb.mdb.acknowledge.mode</code> tagged value on the class.
                    This only needs to be specified if <code>DUPS_OK_ACKNOWLEDGE</code> mode is required since 
                    the default is <code>AUTO_ACKNOWLEDGE</code>.
                </p>
            </subsection>
            <a name="Message_Selector"/>
            <subsection name="Message Selector">
                <p>
                    By specifying a message selector constraint, you can limit the messages that a message-driven
                    bean is configured to received.  To set a message selector, simply model the
                    <code>@andromda.ejb.mdb.selector</code> tagged value on the MDB class.
                </p>
            </subsection>
            <a name="Subscription_Durability"/>
            <subsection name="Subscription Durability">
                <p>
                    You can specify the message-driven bean subscription durability by modelling the
                    <code>@andromda.ejb.mdb.subscription.durability</code> tagged value on the MDB class.
                    Queues are always durable by default.  The durability only needs to specified on Topics.
                    By default, Topics are <b>non-durable</b>.
                    Your options are:
                    <ul>
                        <li><p>Durable</p></li>
                        <li><p>NonDurable</p></li>
                    </ul>
                </p>
            </subsection>
            <a name="Listener_Interceptor"/>
            <subsection name="Listener Interceptor">
                <p>
                    Message driven beans have lifecycle callback interceptor methods or regular interceptors which 
                    can be defined in a separate interceptor class using the EJB3 cartridge.  To find out more 
                    information on interceptors, click on <a href="howto13.html">interceptors</a>.  
                    To find out more information on lifecycle callbacks, click on
                    <a href="howto14.html">lifecycle callbacks</a>.
                </p>
            </subsection>
            <a name="Transaction_Context"/>
            <subsection name="Transaction Context">
                <p>
                    Like session beans, message-driven beans can use container-managed or bean-managed
                    transaction demarcation.  By default and if unspecified, the container-managed transaction
                    demarcation is adopted.  However, you can specify bean-managed transaction demarcation by
                    modelling the <code>@andromda.ejb.transaction.management</code> tagged value to
                    <code>BEAN</code> on the message-driven class.
                </p>
                <p>
                    If the MDB is specified using container-managed transaction demarcation, you can specify
                    the transaction attribute type to either:
                    <ul>
                        <li><p>REQUIRED</p></li>
                        <li><p>NOT_SUPPORTED</p></li>
                    </ul>
                    By default, the EJB3 cartridge will generate the <code>@TransactionAttribute</code>
                    annotation, setting the attribute type to <code>REQUIRED</code>.  To override this default
                    value, you can model the <code>@andromda.ejb.transaction.type</code> tagged value on
                    the MDB class.
                </p>
            </subsection>
            <a name="Security"/>
            <subsection name="Security">
                <p>
                    Because message-driven beans lifecycle is totally controlled by the container, a client is
                    NOT calling the <code>onMessage</code> method directly.  Therefore, the security identity
                    for the execution of methods in the MDB is controlled via the <code>@RunAs</code>
                    annotation.  This can easily be set by following the security howto
                    <a href="howto8.html#Modelling">here</a>.
                </p>
            </subsection>
            <a name="Message_Driven_Context"/>
            <subsection name="Message Driven Context">
                The EJB3 cartridge injects the <code>MessageDrivenContext</code> into every MDB using the
                <code>@Resource</code> annotation by default.  The <code>MessageDrivenContext</code> instance, 
                named <code>context</code>, provides the following methods:
                <ul>
                    <li><p>setRollbackOnly</p></li>
                    <li><p>getRollbackOnly</p></li>
                    <li><p>getUserTransaction</p></li>
                    <li><p>getTimerService</p></li>
                    <li><p>getCallerPrincipal</p></li>
                    <li><p>isCallerInRole</p></li>
                    <li><p>getEJBHome</p></li>
                    <li><p>getEJBLocalHome</p></li>
                    <li><p>lookup</p></li>
                </ul>
            </subsection>
            <a name="Session_Bean_Injection"/>
            <subsection name="Session Bean Injection">
                To inject a session bean into the MDB, model a dependency from the MDB to the destination
                session bean.  As a result, the <code>EJB</code> annotation will be generation on the
                attribute declaring the injected destination session bean.
            </subsection>
            <a name="Resource_Injection"/>
            <subsection name="Resource Injections">
                <p>
                    To inject an environment entry resource value, model an attribute with classifer scope
                    and set the attribute stereotype to <![CDATA[<<EnvEntry>>]]>.  The environment
                    entries will be defined in the MDB class and configured in the ejb-jar.xml 
                    deployment descriptor.
                    You must define a default value for these attributes in the model.  Refer to 
                    <a href="howto11.html">Environment Entry Injections</a> for further information. 
                </p>
            </subsection>
        </section>
        <section name="Next">
            <p>
                To find out how to inject environment entries to session and message driven beans, click
                <a href="howto11.html">here</a>.
            </p>
        </section>
    </body>
</document>
