<?xml version="1.0" encoding="UTF-8"?>

<document>
      <properties>
        <title>Spring Cartridge Modeling</title>
      </properties>
      <body>
        <section name="Spring Cartridge Modeling">
            <p>
                The page describes the modeling standards one must follow to in order
                to use the Spring Cartridge.
            </p>
            <subsection name="Supported Stereotypes">
                <table>
                    <tr>
                        <th>Stereotype</th>
                        <th nowrap="nowrap">Model Element</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                      <a name="Entity"/>
                        <td>
                            <strong><![CDATA[<<Entity>>]]></strong>
                        </td>
                        <td>
                            Classifier
                        </td>
                        <td>
                            Produces Hibernate entities (interfaces and classes)
                          and Spring Data Access Objects.
                        </td>
                    </tr>
                    <tr>
                      <a name="Criteria"/>
                        <td>
                            <strong><![CDATA[<<Criteria>>]]></strong>
                        </td>
                        <td>
                            Classifier
                        </td>
                        <td>
                            Produces a criteria search facility consisting of three helper classes being written
                            to the package for extra spring classes and a criteria value object. If you add a finder
                            method to a Hibernate entity, giving it a parameter that is of a class that is stereotyped
                            as a <![CDATA[<<Criteria>>]]>, the finder will contain code to construct a Hibernate
                            criteria query.
                        </td>
                    </tr>
                    <tr>
                        <a name="Service"/>
                        <td>
                            <strong><![CDATA[<<Service>>]]></strong>
                        </td>
                        <td>
                            Classifier
                        </td>
                        <td>
                            Creates POJO service facades (and optionally
                            Session EJB facades).
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <a name="Enumeration"/>
                            <strong><![CDATA[<<Enumeration>>]]></strong>
                        </td>
                        <td>
                            Classifier
                        </td>
                        <td>
                            Indicates that the class will be a persistent type-safe enumeration, implemented by means
                            of a Hibernate UserType.  Any attribute modeled on this entity will result in an enumeration
                            literal. You may assign an <code>initial value</code> to such an attribute, Hibernate will persist
                            that specified value for the corresponding literal. If no such value is specified the name
                            of the attribute is assumed. Make sure there are no naming collisions between the
                            initial values and the attribute names you model. <i>Please note: these enumerations
                            use a <code>String</code> in order to persist their unique value.</i>
                        </td>
                    </tr>
                    <tr>
                          <td>
                            <a name="Identifier"/>
                              <strong><![CDATA[<<Identifier>>]]></strong>
                          </td>
                        <td>
                            Attribute
                        </td>
                          <td>
                              Identifies an attribute as an identifier.
                          </td>
                    </tr>
                    <tr>
                          <td>
                            <a name="Unique"/>
                              <strong><![CDATA[<<Unique>>]]></strong>
                          </td>
                        <td>
                            Attribute
                        </td>
                          <td>
                              Identifies an attribute as unique.
                          </td>
                    </tr>
                    <tr>
                        <a name="Nullable"/>
                          <td>
                              <strong><![CDATA[<<Nullable>>]]></strong>
                          </td>
                        <td>
                            Parameter
                        </td>
                          <td>
                              Allows you to define whether or not service operation parameters can be <code>null</code>.
                            By default all service operation parameters are checked for null, if you want
                            a parameter to allow nulls, you'd add this stereotype to the parameter.
                          </td>
                    </tr>
                </table>
            </subsection>
            <subsection name="Supported Tagged Values">
                  <table>
                    <tr>
                        <th>Tagged Value</th>
						<th>Used With</th>
						<th>Description</th>
                    </tr>
                    <tr>
                        <td>
                            @andromda.persistence.table
                        </td>
                        <td>
                            <a href="#Entity"><![CDATA[<<Entity>>]]></a> or 
                            a many-to many association.
                        </td>
                        <td>
                            Defines the relational table name for entity persistence.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @andromda.persistence.column
                        </td>
                        <td>
                            Attribute
                        </td>
                        <td>
                            Represents the column name for entity persistence.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @andromda.persistence.column.length
                        </td>
                        <td>
                            Attribute
                        </td>
                        <td>
                            Represents the column length for entity persistence.
                        </td>
                    </tr>
                    <tr>
                        <a name="@andromda.persistence.column.index"/>
                          <td>
                              @andromda.persistence.column.index
                          </td>
                        <td>
                            Attribute
                        </td>
                          <td>
                              The name of an index to create on an entity attribute/column.
                          </td>
                    </tr>
                    <tr>
                        <a name="@andromda.persistence.foreign.identifier"/>
                        <td>
                            @andromda.persistence.foreign.identifier
                        </td>
                        <td>
                            AssociationEnd connecting two entities
                        </td>
                        <td>
                            Indicates whether or not the entity should use 
                            the identifier of the foreign entity.  This has
                            the same effect as if you set <em>@andromda.hibernate.generator.class</em> 
                            to <em>foreign</em>. 
                            <strong>NOTE:</strong>
                            that this can only be applied to the child end of a 
                            parent-child (one end is marked as composition) 
                            one-to-one association.
                        </td>
                    </tr>
                    <tr>
                        <a name="@andromda.hibernate.query"/>
                        <td>
                            @andromda.hibernate.query
                        </td>
                        <td>
                            An Entity operation marked as a <code>query</code>.
                        </td>
                        <td>
                            Defines a hibernate query expression.  Note that it's encouraged
                            to model your query body as an OCL constraint (instead of using
                            this tagged value).
                        </td>
                    </tr>
                    <tr>
                        <a name="@andromda.hibernate.generator.class"/>
                        <td>
                            @andromda.hibernate.generator.class
                        </td>
                        <td>
                            <a href="#Entity"><![CDATA[<<Entity>>]]></a>
                        </td>
                        <td>
                            Used to define the generator class used for the hibernate entity.
                            Any of the hibernate generator classes may be used.  
                            <ul>
                                The possible options are:
                                <li>increment</li>
                                <li>identity</li>
                                <li>sequence</li>
                                <li>hilo</li>
                                <li>seqhilo</li>
                                <li>uuid.hex</li>
                                <li>uuid.string</li>
                                <li>native</li>
                                <li>assigned</li>
                                <li>foreign</li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <a name="@andromda.hibernate.lazy"/>
                        <td>
                            @andromda.hibernate.lazy
                        </td>
                        <td>
                            Association ends between <a href="#Entity"><![CDATA[<<Entity>>]]></a> classes
                        </td>
                        <td>
                            Used to denote how a relationship must be loaded: <code>true</code> for <code>lazy</code>,
                            <code>false</code> for <code>eager</code>. Defaults to <code>false</code> for composite
                            relationships and defaults to <code>true</code> for the other kinds.
                        </td>
                    </tr>
					<tr>
						<a name="@andromda.hibernate.outerjoin"/>
			          	<td>
			          		@andromda.hibernate.outerjoin
			          	</td>
						<td>
							Association ends between <a href="#Entity"><![CDATA[<<Entity>>]]></a> classes
						</td>
			          	<td>
			          		Defines if Hibernate will use a outer join for fetching the given assocation end. 
			          		<ul>
                                Permited values are:
								<li>auto</li>
								<li>true</li>
								<li>false</li>
							</ul>
			          	</td>
					</tr>
                    <tr>
                        <a name="@andromda.role.name"/>
                          <td>
                              @andromda.role.name
                          </td>
                        <td>
                            An actor with a dependency to a 
                            <a href="Service"><![CDATA[<<Service>>]]></a> or
                            a <a href="Service"><![CDATA[<<Service>>]]></a> operation.
                        </td>
                        <td>
                            Provides the ability to specify the name to be used
                            (if different than the actual name of the actor).
                        </td>
                    </tr>
                    <tr>
						<a name="@andromda.spring.service.remoting.type"/>
						<td>
							@andromda.spring.service.remoting.type
						</td>
                        <td>
							<a href="#Service"><![CDATA[<<Service>>]]></a>
                        </td>
						<td>
							Services marked with this stereotype will be exported using Spring's remoting
							architecture. You can choose among the following remoting protocols:
	                        <ul>
	                        	<li>none</li>
	                        	<li>rmi</li>
	                        	<li>httpinvoker</li>
	                        	<li>burlap</li>
	                        	<li>hessian</li>
	                        </ul>
	                        by setting the namespace property <code>serviceRemotingType</code>.
						</td>
                    </tr>
                    <tr>
						<a name="@andromda.spring.service.remote.port"/>
						<td>
							@andromda.spring.service.remote.port
						</td>
                        <td>
							<a href="#Service"><![CDATA[<<Service>>]]></a>
                        </td>
						<td>
							Sets the port this service will be exported on. You must also tag the
							service using <a href="#@andromda.spring.service.remote.port">@andromda.spring.service.remote.port</a>.
						</td>
                    </tr>
                    <tr>
						<a name="@andromda.hibernate.criteria.attribute"/>
						<td>
							@andromda.hibernate.criteria.attribute
						</td>
                        <td>
							<a href="#Criteria">an attribute of a <![CDATA[<<Criteria>>]]> class</a>
                        </td>
						<td>
							Sets the name of the attribute on the hibernate entity that should be added to a criteria
							search. If the attribute you want to search for is not in the entity itself, but rather in
							an associated class, you can use a fully qualified name here. Assume you have two entites
							<code>Person</code> and <code>Address</code>, the address being referenced as a one-to-one
							relationship with the role name <code>homeAddress</code> and the address having an attribute
							named "city". If you want to retrieve all people living in Hamburg, simply set the value of 
							this tagged value to <code>homeAddress.city</code>.
							
							If you ommit this tagged value, the name of the attribute in the criteria class will be used.
						</td>
                    </tr>
                    <tr>
                        <a name="@andromda.hibernate.criteria.nullable"/>
                        <td>
                            @andromda.hibernate.criteria.nullable
                        </td>
                        <td>
                            <a href="#Criteria">an attribute of a <![CDATA[<<Criteria>>]]> class</a>
                        </td>
                        <td>
                            If this tagged value is set to <code>true</code>, the tagged attribute will be considered in the
                            search even if it is <code>null</code>. Use this feature to query entities that have attributes
                            that may be <code>NULL</code> (in the sense of SQL).
                        </td>
                    </tr>
                    <tr>
                        <a name="@andromda.hibernate.criteria.comparator"/>
                        <td>
                            @andromda.hibernate.criteria.comparator
                        </td>
                        <td>
                            <a href="#Criteria">an attribute of a <![CDATA[<<Criteria>>]]> class</a>
                        </td>
                        <td>
                            Using this tagged value to define the logical condition for the underlying attribute in the query is set.
                            Possible values are
                            <ul>
                                <li>like</li>
                                <li>equal</li>
                                <li>greater</li>
                                <li>greater_equal</li>
                                <li>less</li>
                                <li>less_equal</li>
                            </ul>
                            
                            If you ommit this tagged value and the underlying attribute is a <code>String</code>, 
                            <code>like</code> will be used. If the underlying attribute is anything else but a 
                            <code>String</code>, <code>equal</code> will be used.
                        </td>
                    </tr>
                    <tr>
                        <a name="@andromda.hibernate.criteria.matchmode"/>
                        <td>
                            @andromda.hibernate.criteria.matchmode
                        </td>
                        <td>
                            <a href="#Criteria">an attribute of a <![CDATA[<<Criteria>>]]> class</a>
                        </td>
                        <td>
                        	Use this value to denote the hibernate matchmode to be used for comparing strings.
                            Possible values are
                            <ul>
                                <li>anywhere</li>
                                <li>start</li>
                                <li>end</li>
                                <li>exact</li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <a name="andromda.spring.transaction.type"/>
                        <td>
                            @andromda.spring.transaction.type
                        </td>
                        <td>
                            Service Operation
                        </td>
                        <td>
                            Defines a Spring transaction type for the service operation 
                            (when <strong>NOT</strong> wrapped by EJBs).
                            <ul>
                                Permitted values are:
                                <li>PROPAGATION_NEVER</li>
                                <li>PROPAGATION_NESTED</li>
                                <li>PROPAGATION_MANDATORY</li>
                                <li>PROPAGATION_REQUIRED</li>
                                <li>PROPAGATION_REQUIRES_NEW</li>
                                <li>PROPAGATION_SUPPORTS</li>
                                <li>PROPAGATION_NOT_SUPPORTED</li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <a name="andromda.ejb.transaction.type"/>
                        <td>
                            @andromda.ejb.transaction.type
                        </td>
                        <td>
                            Service Operation
                        </td>
                        <td>
                            Defines an EJB transaction type for the service operation (when wrapped
                            by EJBs)
                            <ul>
                                Permitted values are:
                                <li>NotSupported</li>
                                <li>Supports</li>
                                <li>Required</li>
                                <li>RequiresNew</li>
                                <li>Mandatory</li>
                                <li>Never</li>
                            </ul>
                        </td>
                    </tr>
                </table>
            </subsection>
            <subsection name="Additional Remarks">
                <p>
                    Dependencies can be used between Services and Entities, they
                    won't need any stereotype assigned to them. These dependencies
                    are used to produce entity references (from a entity or service)
                    in the Spring applicationContext.xml and within
                    the Spring base classes (i.e. DaoBase and ServiceBase),
                    or to produce service references (from another service)
                    in the Spring applicationContext.xml and within
                    the ServiceBase classes.
                </p>
                <p>
                    Entity business operations can be set to <code>classifier</code> scope
                    instead of the usual <code>instance</code> scope. By doing so they
                    will be generated into the corresponding DAO for that entity instead
                    of the entity implementation class.
                </p>
                <p>
                    Entity query operations (i.e. finders) can be denoted by setting the
                    query flag on the modeled operation to true 
                    (they do not require any stereotypes).
                </p>
                <p>
                    Actors represent roles within your model.  To designate that a role 
                    has access to a given service you must draw a dependency from an Actor 
                    to the <a href="Service"><![CDATA[<<Service>>]]></a>.  To designate the 
                    role has access to to a given operation, you must draw a dependency from 
                    an Actor to the operation.
                </p>
            </subsection>
        </section>
      </body>
</document>