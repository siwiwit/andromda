#parse("templates/spring/SpringGlobals.vm")
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package $service.packageName;

#set ($superService = $service.generalization)
/**
 * <p>
 * Spring Service base class for <code>$service.fullyQualifiedName</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see $service.fullyQualifiedName
 */
public abstract class $service.baseName
#if($superService)
    extends $superService.fullyQualifiedImplementationName
#end
    implements $service.fullyQualifiedName
{

#foreach($serviceRef in $service.serviceReferences)
#set ($targetElement = $serviceRef.targetElement)
    private $targetElement.fullyQualifiedName $serviceRef.name;

    /**
     * Sets the reference to <code>$serviceRef.name</code>.
     */
    public void ${serviceRef.setterName}(${targetElement.fullyQualifiedName} $serviceRef.name)
    {
        this.$serviceRef.name = $serviceRef.name;
    }

    /**
     * Gets the reference to <code>$serviceRef.name</code>.
     */
    protected $targetElement.fullyQualifiedName ${serviceRef.getterName}()
    {
        return this.$serviceRef.name;
    }

#end
#foreach($entityRef in $service.entityReferences)
#set ($targetElement = $entityRef.targetElement)
    private $targetElement.fullyQualifiedDaoName $entityRef.name;

    /**
     * Sets the reference to <code>$entityRef.name</code>'s DAO.
     */
    public void ${entityRef.setterName}(${targetElement.fullyQualifiedDaoName} $entityRef.name)
    {
        this.$entityRef.name = $entityRef.name;
    }

    /**
     * Gets the reference to <code>$entityRef.name</code>'s DAO.
     */
    protected $targetElement.fullyQualifiedDaoName get${targetElement.daoName}()
    {
        return this.$entityRef.name;
    }

#end
#foreach ( $operation in $service.operations )
    /**
     * @see ${service.fullyQualifiedName}#${operation.getSignature(false)}
     */
    $operation.visibility $operation.returnType.fullyQualifiedName $operation.signature
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
#if ($serviceParameterRequiredCheck.equalsIgnoreCase('true'))
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${service.fullyQualifiedName}.${operation.signature} - '${argument.name}' can not be null");
        }
#end
#end
#end
        try
        {
#set ($call = "this.${operation.implementationCall};")
#if ($operation.returnTypePresent)
            return $call
#else
            $call
#end
        }
#foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#end
        catch (Throwable th)
        {
            throw new ${service.fullyQualifiedDefaultExceptionName}(
                "Error performing '${service.fullyQualifiedName}.${operation.signature}' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #${operation.getSignature(false)}}
      */
    $operation.visibility abstract $operation.returnType.fullyQualifiedName $operation.implementationSignature
        throws java.lang.Exception;

#end
#if ($ejbsEnabled)
    private javax.ejb.SessionContext sessionContext;

    /**
     * Sets the current <code>sessionContext</code>.  Used by the 
     * Session EJB wrappers to pass the sessionContext to this base 
     * service class (so that we can retrieve the current principal).
     *
     * @param sessionContext the current EJB wrapper session context.
     */
    public void setSessionContext(javax.ejb.SessionContext sessionContext)
    {
        this.sessionContext = sessionContext;
    }

#end
    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    public java.security.Principal getPrincipal()
    {
#if ($ejbsEnabled)
        return this.sessionContext.getCallerPrincipal();
#else
#set ($principalStoreCall = "${principalStoreName}.get();")
#if($stringUtils.isNotEmpty($springTypesPackage))
#set ($principalStoreCall = "${springTypesPackage}.${principalStoreCall}")
#end
        return $principalStoreCall
#end
    }
}