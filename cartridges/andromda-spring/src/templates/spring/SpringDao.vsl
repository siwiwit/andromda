//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package $entity.packageName;

#set ($superclass = $entity.generalization)
/**
 * @see $entity.fullyQualifiedEntityName
 */
public interface $entity.daoName
#if($superclass)
    extends $superclass.fullyQualifiedDaoName
#end
{

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * Creates an instance of $entity.fullyQualifiedEntityName and adds it to the persistent store.
     */
    public $entity.fullyQualifiedEntityName create($entity.fullyQualifiedEntityName $argumentName);

#set ($attributes = $entity.getAttributes(true,false))
#if (!$attributes.empty)
   /**
    * Creates a new <code>$entity.fullyQualifiedEntityName</code>
    * instance from <strong>all</strong> attributes and adds it to
    * the persistent store.
    */
    public $entity.fullyQualifiedEntityName create(
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else);#end

#end
#set ($requiredAttributes = $entity.getRequiredAttributes(true,false))
#if (!$requiredAttributes.empty && $attributes.size() != $requiredAttributes.size())

   /**
    * Creates a new <code>$entity.fullyQualifiedEntityName</code>
    * instance from only <strong>required</strong> attributes and
    * adds it to the persistent store.
    */
    public $entity.fullyQualifiedEntityName create(
#foreach($attribute in $requiredAttributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $requiredAttributes.size()),#else);#end

#end
#end

#end
    /**
     * Updates the <code>${argumentName}</code> instance in the persistent store.
     */ 
    public void update($entity.fullyQualifiedEntityName $argumentName);

    /**
     * Loads an instance of $entity.fullyQualifiedEntityName from the persistent store.
     */
     public $entity.fullyQualifiedEntityName load($identifier.type.fullyQualifiedName $identifier.name);
     
    /**
     *  <p> 
     *    Does the same thing as {@link #load($identifier.type.fullyQualifiedName)} with an
     *    additional flag called <code>transform</code>. 
     *  </p>
     *  <p>
     *    if this flag is set to <code>false</code> then
     *    the returned entity will <strong>not</strong> be transformed during retrieval.  If this flag is 
     *    <code>true</code> then the entity <strong>WILL BE</strong> passed through an operation 
     *    which can optionally transform the entity (into a value object for example).  By default, 
     *    transformation does not occur.
     *  </p>
     * 
     * @param $identifier.name the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
     public Object load(boolean transform, $identifier.type.fullyQualifiedName $identifier.name);

    /**
     * Removes the instance of $entity.fullyQualifiedEntityName from the persistent store.
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName);

    /**
     * Removes the instance of $entity.fullyQualifiedEntityName having the given
     * <code>identifier</code> from the persistent store.
     */
    public void remove($identifier.type.fullyQualifiedName $identifier.name);

    /**
     * Removes all entities in the given <code>entities<code> collection.
     */
    public void remove(java.util.Collection entities);

#end
#foreach ( $operation in $entity.operations )
#set ($returnType = $operation.returnType.fullyQualifiedName)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType $operation.signature;
#end
#if ($operation.query)

    /**
     * <p>
     *   Does the same thing as {@link #${operation.getSignature(false)}} with an
     *   additional argument called <code>queryString</code>, this <code>queryString</code>
     *   argument allows you to override the query string defined in {@link #${operation.getSignature(false)}}. 
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.query && !$operation.returnType.collectionType)
#set ($returnType = "Object")
#end

    /**
     * <p>
     *   Does the same thing as {@link #${operation.getSignature(false)}} with an
     *   additional flag called <code>transform</code> if this flag is set to <code>false</code> then
     *   finder results will not be transformed during retrieval.  If this flag is <code>true</code>
     *   then finder results <strong>WILL BE</strong> passed through an operation which can optionally 
     *   transform the entities (into value objects for example).  By default, transformation does 
     *   not occur.
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(boolean transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(boolean transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

    /**
     * <p>
     *   Does the same thing as {@link #${operation.name}(boolean#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     *   additional argument called <code>queryString</code>, this <code>queryString</code>
     *   argument allows you to override the query string defined in {@link #${operation.name}(boolean, ${operation.argumentTypeNames})}. 
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(boolean transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(boolean transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end
#end

#end
}
