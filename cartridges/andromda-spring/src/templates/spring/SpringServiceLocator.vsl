#parse("templates/spring/SpringGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $serviceLocatorName
{

    private ${serviceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
     * The shared instance of this ${serviceLocatorName}.
     */
    private final static ${serviceLocatorName} instance = new ${serviceLocatorName}();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final $serviceLocatorName instance()
    {
        return instance;
    }

    /**
     * The bean factory reference instance.
     */
    private org.springframework.beans.factory.access.BeanFactoryReference beanFactoryReference;
    
    /**
     * The bean factory reference location.
     */
    private String beanFactoryReferenceLocation;
    
    /**
     * The bean factory reference id.
     */
    private String beanRefFactoryReferenceId;

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocation the location of the beanRefFactory reference.
     */
    public synchronized void init(final String beanFactoryReferenceLocation, final String beanRefFactoryReferenceId)
    {
        this.beanFactoryReferenceLocation = beanFactoryReferenceLocation;
        this.beanRefFactoryReferenceId = beanRefFactoryReferenceId;
        this.beanFactoryReference = null;
    }

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocation the location of the beanRefFactory reference.
     */
    public synchronized void init(final String beanFactoryReferenceLocation)
    {
        this.beanFactoryReferenceLocation = beanFactoryReferenceLocation;
        this.beanFactoryReference = null;
    }
    
#if ($ejbsEnabled)
#set ($factoryId = $beanRefFactoryEjbId)
#else
#set ($factoryId = $beanRefFactoryId)
#end
    /**
     * The default bean reference factory location.
     */
    private final String DEFAULT_BEAN_REFERENCE_LOCATION = "$beanRefFactory";
    
    /**
     * The default bean reference factory ID.
     */
    private final String DEFAULT_BEAN_REFERENCE_ID = "$factoryId";

    /**
     * Gets the Spring ApplicationContext.
     */
    protected synchronized org.springframework.context.ApplicationContext getContext()
    {
        if (this.beanFactoryReference == null)
        {
            if (this.beanFactoryReferenceLocation == null)
            {
                this.beanFactoryReferenceLocation = DEFAULT_BEAN_REFERENCE_LOCATION;
            }
            if (this.beanRefFactoryReferenceId == null)
            {
                this.beanRefFactoryReferenceId = DEFAULT_BEAN_REFERENCE_ID;
            }
            org.springframework.beans.factory.access.BeanFactoryLocator beanFactoryLocator =
                org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance(
                    this.beanFactoryReferenceLocation);
            this.beanFactoryReference = beanFactoryLocator.useBeanFactory(this.beanRefFactoryReferenceId);
        }
        return (org.springframework.context.ApplicationContext)this.beanFactoryReference.getFactory();
    }

    /**
     * Shuts down the ServiceLocator and releases any used resources.
     */
    public synchronized void shutdown()
    {
        if (this.beanFactoryReference != null)
        {
            this.beanFactoryReference.release();
            this.beanFactoryReference = null;
        }
    }
#if ($ejbsEnabled)

    /**
     * Helper for setting jndiEnvironment property of SimpleRemoteStatelessSessionProxyFactoryBean
     * through PropertyOverrideConfigurer
     */
    static final public class JndiEnvironment
        extends java.util.Properties
    {
        private static final long serialVersionUID = 1L;

        /**
         * Convienience method for setting servername and protocol without "jnp"
         */
        public void setServer(String servername)
        {
            setProperty(javax.naming.Context.PROVIDER_URL, "jnp://" + servername);
        }

        public void setProviderUrl(String providerUrl)
        {
            setProperty(javax.naming.Context.PROVIDER_URL, providerUrl);
        }

        public void setInitialContextFactory(String initialContextFactory)
        {
            setProperty(javax.naming.Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);
        }

        public void setUrlPkgPrefixes(String urlPkgPrefixes)
        {
            setProperty(javax.naming.Context.URL_PKG_PREFIXES, urlPkgPrefixes);
        }
    }
#end

#foreach ($service in $services)
    /**
     * Gets an instance of {@link $service.fullyQualifiedName}.
     */
    public final $service.fullyQualifiedName get${service.name}()
    {
        return ($service.fullyQualifiedName)
            getContext().getBean("$service.beanName");
    }

#end
}