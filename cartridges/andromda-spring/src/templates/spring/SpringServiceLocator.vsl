#parse("templates/spring/SpringGlobals.vm")
#if (!$ejbsEnabled)
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class ServiceLocator
{
    /**
     * The default application context location.
     */
    private final String[] DEFAULT_CONTEXT_LOCATIONS = 
        new String[] 
        {
            "$applicationContext", 
            "$applicationContextDataSource"
        };

    /**
     * The spring application context shared instance.
     */
    private org.springframework.context.support.ClassPathXmlApplicationContext context = null;

    /**
     * The application context location.
     */
    private String[] applicationContextLocations;

    private ServiceLocator()
    {
        // shouldn't be instantiated
    }

    /**
     * The shared instance of this ServiceLocator.
     */
    private final static ServiceLocator instance = new ServiceLocator();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final ServiceLocator instance()
    {
        return instance;
    }

    /**
     * Initializes the Spring application context from
     * the given <code>applicationContextLocation</code>.  If <code>null</code>
     * is specified for the <code>applicationContextLocation</code>
     * then the default application context will be used.
     *
     * @param contextLocation the location of the context
     */
    public synchronized void init(String[] applicationContextLocations)
    {
        this.applicationContextLocations = applicationContextLocations;
        context = null;
    }

    /**
     * Gets the Spring ApplicationContext.
     */
    protected synchronized org.springframework.context.ApplicationContext getContext()
    {
        if (context == null)
        {
            if (this.applicationContextLocations == null)
            {
                this.applicationContextLocations = DEFAULT_CONTEXT_LOCATIONS;
            }
            context = new org.springframework.context.support.ClassPathXmlApplicationContext(applicationContextLocations);
        }
        return context;
    }

#foreach ($service in $services)
    /**
     * Gets an instance of {@link $service.fullyQualifiedName}
     */
    public final ${service.fullyQualifiedName} get${service.name}()
    {
        return (${service.fullyQualifiedName})
            getContext().getBean("$service.beanName");
    }

#end
}
#end