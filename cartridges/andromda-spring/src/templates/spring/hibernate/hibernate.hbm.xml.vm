##
##  This macro will render any <subclass/> elements for the given $entity.
##
#set ($indent = "	    ")    
#macro (renderSubClass $entity)
	    <subclass
		    name="$entity.fullyQualifiedEntityImplementationName"
		    discriminator-value="$entity.entityImplementationName">
#renderPropertiesAndAssociations($entity)		
#foreach ($entity in $entity.specializations)
#renderSubClass($entity)
#end
	    </subclass>
	
#end
##
##  This macro will render any properties and associations 
##  for the given $entity.
##
#macro (renderPropertiesAndAssociations $entity)
#foreach ($attribute in $entity.attributes)
#if (!$attribute.identifier)
		<property name="$attribute.name" type="$attribute.type.fullyQualifiedHibernateType">
		    <column name="$attribute.columnName" not-null="$attribute.required" unique="$attribute.unique" sql-type="$attribute.sqlType"/>
		</property>
#end
#end
#foreach ($associationEnd in $entity.associationEnds)
#set ($sourceEnd = $associationEnd)
#set ($otherEnd = $associationEnd.otherEnd)
#if ($otherEnd.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
#if ($sourceEnd.one2One)
#if (($associationEnd.child && $entity.foreignHibernateGeneratorClass) || $otherEnd.type.foreignHibernateGeneratorClass)
		<one-to-one name="$otherEnd.name" class="$otherEnd.type.fullyQualifiedEntityImplementationName"#if ($otherEnd.child) cascade="$cascade"#end constrained="false"/>
#else
#if($sourceEnd.one2OnePrimary)
        <many-to-one name="$otherEnd.name" class="$otherEnd.type.fullyQualifiedEntityImplementationName" unique="true"#if ($otherEnd.child) cascade="$cascade"#end>
            <column name="$otherEnd.columnName"/>             
        </many-to-one>
#else
        <one-to-one name="$otherEnd.name" class="$otherEnd.type.fullyQualifiedEntityImplementationName" property-ref="$sourceEnd.name"/>
#end
#end
#end
#if ($sourceEnd.one2Many)
		<set name="$otherEnd.name" order-by="$sourceEnd.columnName" lazy="$otherEnd.lazy" inverse="true"#if ($otherEnd.child) cascade="$cascade"#end>
            <key>
            	<column name="$sourceEnd.columnName"/>
            </key>
            <one-to-many class="$otherEnd.type.fullyQualifiedEntityImplementationName"/>
        </set>    
#elseif ($sourceEnd.many2One)
        <many-to-one name="$otherEnd.name" class="$otherEnd.type.fullyQualifiedEntityImplementationName"#if ($otherEnd.child) cascade="$cascade"#end#if ($sourceEnd.required) not-null="true"#end >
            <column name="$otherEnd.columnName"/>
        </many-to-one>
#elseif ($sourceEnd.many2Many)
        <set name="$otherEnd.name" order-by="$otherEnd.columnName" lazy="$otherEnd.lazy" inverse="true"#if ($otherEnd.child) cascade="$cascade"#end>
            <key>
                <column name="$otherEnd.columnName"/>
            </key>
            <many-to-many class="$otherEnd.type.fullyQualifiedEntityImplementationName"/>
        </set>    
#end
#end
#end

#end