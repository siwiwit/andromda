#parse("templates/spring/SpringGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSearchConfiguration.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${criteriaSearchBaseName}Configuration.java")
#if($stringUtils.isNotEmpty($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Contains configuration parameters for a <code>${criteriaSearchBaseName}</code>.
 * 
 * @author Stefan Reichert
 * @author Peter Friese
 */
public class ${criteriaSearchBaseName}Configuration 
{

	/**
	 * If a parameter refers to a childEntity and <code>forceEagerLoading</code> is
	 * <code>true</code>, the childEntity is always loaded. If <code>forceEagerLoading</code> is
	 * <code>false</code>, the loading depends on the persister-configuration of the parentEntity.
	 */
    private boolean forceEagerLoading;

    /**
     * If <code>maximumResultSize</code> is not <code>null</code> it limits the maximum size of
     * the resultList.
     */
    private Integer maximumResultSize;

    public ${criteriaSearchBaseName}Configuration() 
    {
        super();
        forceEagerLoading = false;
        maximumResultSize = null;
    }

    public boolean isForceEagerLoading() 
    {
        return forceEagerLoading;
    }

    public void setForceEagerLoading(boolean forceFetch) 
    {
        this.forceEagerLoading = forceFetch;
    }

    public Integer getMaximumResultSize() 
    {
        return maximumResultSize;
    }

    public void setMaximumResultSize(Integer resultSize) 
    {
        this.maximumResultSize = resultSize;
    }
}
