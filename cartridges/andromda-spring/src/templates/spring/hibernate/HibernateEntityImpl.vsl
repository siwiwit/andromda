#set ($generatedFile = "${entity.packagePath}/${entity.entityImplementationName}.java")
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntityImpl.vsl in andromda-spring-cartridge.
//
package $entity.packageName;

/**
 * @see $entity.fullyQualifiedEntityName
 */
public class ${entity.entityImplementationName}
#set ($superEntity = $entity.generalization)
#if($superEntity)  
	extends ${superEntity.fullyQualifiedEntityImplementationName}
#end
    implements $entity.fullyQualifiedEntityName
{
#if (!$entity.properties.empty)

    public ${entity.entityImplementationName}()
    {
    }
#end

    /**
     * Constructor taking all properties.
     */ 
#set ($parenthesis = "(")
#if ($entity.properties.empty)
#set ($parenthesis = "()")
#end
    public ${entity.entityImplementationName}${parenthesis}
#foreach ($property in $entity.properties)
#if ($property.type.fullyQualifiedEntityName)
#set ($typeName = $property.type.fullyQualifiedEntityName)
#else
#set ($typeName = $property.type.fullyQualifiedName)
#end
#if ($property.many)
#set($typeName = "java.util.Collection")
#if ($target.ordered)
#set($typeName = "java.util.List")
#end
#end
        $typeName ${property.name}#if($velocityCount != $entity.properties.size()),#else)
#end

#end
    {
#foreach ($property in $entity.properties)
        this.${property.name} = ${property.name};
#end
    }

    /**
     * Copies constructor from other ${entity.name}
     */ 
    public ${entity.entityImplementationName}($entity.entityName otherEntity) 
    {
        if (otherEntity != null) 
        {
#foreach ( $property in $entity.properties)
            this.${property.name} = otherEntity.${property.getterName}();
#end
        }
    }

#foreach ( $attribute in $entity.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
    private $typeName $attribute.name;

    /**
     * @see $entity.fullyQualifiedName#${attribute.getterName}()
     */
    $attribute.visibility $typeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

    $attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name)
    {
        this.${attribute.name} = $attribute.name;
    }

#end
## Generate the relation methods.
#foreach ( $associationEnd in $entity.associationEnds )
#set ($target = $associationEnd.otherEnd)
#if ($target.type.fullyQualifiedEntityName)
#set ($targetTypeName = $target.type.fullyQualifiedEntityName)
#else
#set ($targetTypeName = $target.type.fullyQualifiedName)
#end
#if ($target.navigable)
#if ($target.many)
#set($targetTypeName = "java.util.Collection")
#if ($target.ordered)
#set($targetTypeName = "java.util.Set")
#end
#end
    private $targetTypeName $target.name;
   
    /**
     * @see $entity.fullyQualifiedName#${target.getterName}()
     */
    public $targetTypeName ${target.getterName}()
    {
        return this.${target.name};
    }

    public void ${target.setterName}($targetTypeName ${target.name})
    {
        this.${target.name} = ${target.name};
    }
    
#end
#end
}
