#set ($generatedFile = "${crud.serviceFullPath}.java")
// license-header java merge-point
##
#set ($criteriaList = $crud.listCriteria(true,false))
#set ($criteriaListCollections = $crud.listCriteria(true,true))
#set ($criteriaListArguments = $crud.listCriteria(false,false))
##
package $crud.crudPackageName;

public final class $crud.serviceName
{
    private $crud.fullyQualifiedCrudDaoName dao;

    public void setDao($crud.fullyQualifiedCrudDaoName dao)
    {
        this.dao = dao;
    }

    protected $crud.fullyQualifiedCrudDaoName getDao()
    {
        return this.dao;
    }

#if ($crud.create)
    public void create($criteriaList)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end
    {
#foreach ($argument in $crud.criteria)
#if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${crud.fullyQualifiedServiceName}.create(${criteriaList}) - '${argument.name}' can not be null");
        }
#end
#end

        final $crud.fullyQualifiedEntityName entity = new $crud.fullyQualifiedEntityName();
#foreach ($attribute in $crud.attributes)
        entity.${attribute.setterName}($attribute.name);
#end
#foreach ($associationEnd in $crud.manageableAssociationEnds)
        entity.${associationEnd.setterName}($associationEnd.name);
#end

        dao.create($criteriaListArguments);
    }

#end
#if ($crud.read)
    public java.util.List read($criteriaList)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end
    {
        return dao.read($criteriaListArguments);
    }

#end
#if ($crud.update)
    public void update(Collection ids, $criteriaListCollections)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${crud.fullyQualifiedServiceName}.update(Collection ids, $criteriaListCollections) - 'ids' can not be null");
        }
#foreach ($argument in $crud.criteria)
#if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${crud.fullyQualifiedServiceName}.update(Collection ids, $criteriaListCollections) - '${argument.name}' can not be null");
        }
#end
#end

        dao.update(ids, $criteriaListArguments);
    }

#end
#if ($crud.delete)
    public void delete(Collection ids)
        throws Exception#if ($ejbViewType.equalsIgnoreCase("remote")), java.rmi.RemoteException#end
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${crud.fullyQualifiedServiceName}.delete(Collection ids) - 'ids' can not be null");
        }

        dao.update(ids);
    }

#end
}
