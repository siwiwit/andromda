#set ($generatedFile = "${crud.crudServiceBaseFullPath}.java")
// license-header java merge-point
##
#set ($memberList = $crud.listCrudMembers(true,false))
#set ($memberListCollections = $crud.listCrudMembers(true,true))
#set ($memberListArguments = $crud.listCrudMembers(false,false))
##
package $crud.crudPackageName;

public final class $crud.crudServiceBaseName
    implements $crud.crudServiceName
{
    private $crud.fullyQualifiedCrudDaoName dao;

    public void setDao($crud.fullyQualifiedCrudDaoName dao)
    {
        this.dao = dao;
    }

    protected $crud.fullyQualifiedCrudDaoName getDao()
    {
        return this.dao;
    }

#if ($crud.create)
    public void create($memberList)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
#foreach ($member in $crud.crudMembers)
#if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${crud.fullyQualifiedCrudServiceName}.create(${memberList}) - '${member.name}' can not be null");
        }
#end
#end

        dao.create($memberListArguments);
    }

#end
#if ($crud.read)
    public java.util.List read($memberList)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return toValueObjects(dao.read($memberListArguments));
    }

    public java.util.List readAll()
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return toValueObjects(dao.readAll());
    }

#end
#if ($crud.update)
    public void update(Collection ids, $memberListCollections)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${crud.fullyQualifiedCrudServiceName}.update(Collection ids, $memberListCollections) - 'ids' can not be null");
        }
#foreach ($member in $crud.crudMembers)
#if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${crud.fullyQualifiedCrudServiceName}.update(Collection ids, $memberListCollections) - '${member.name}' can not be null");
        }
#end
#end

        dao.update(ids, $memberListArguments);
    }

#end
#if ($crud.delete)
    public void delete(Collection ids)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${crud.fullyQualifiedCrudServiceName}.delete(Collection ids) - 'ids' can not be null");
        }

        dao.update(ids);
    }

#end

    private java.util.List toValueObjects(java.util.Collection entities)
    {
        final java.util.List list = new java.util.ArrayList();

        for (java.util.Iterator iterator = entities.iterator(); iterator.hasNext();)
        {
            list.add(toValueObject(($crud.fullyQualifiedEntityName)iterator.next()));
        }

        return list;
    }

    private $crud.fullyQualifiedCrudValueObjectName toValueObject($crud.fullyQualifiedEntityName entity)
    {
        final $crud.fullyQualifiedCrudValueObjectName valueObject = new ${crud.fullyQualifiedCrudValueObjectName}();

#foreach ($member in $crud.attributes)
        valueObject.${member.setterName}(entity.${member.getterName}());
#end
#foreach ($member in $crud.manageableAssociationEnds)
#if ($member.crudType)
        $member.type.fullyQualifiedName $member.name = entity.${member.getterName}();
        if ($member.name != null)
        {
            valueObject.${member.crudSetterName}(${member.name}.${identifiers.iterator().next().getterName}());
        }
#end
#end

        return valueObject;
    }
}
