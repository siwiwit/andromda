#set ($generatedFile = "${manageable.manageableServiceBaseFullPath}.java")
// license-header java merge-point
##
#set ($memberList = $manageable.listManageableMembers(true))
#set ($memberListArguments = $manageable.listManageableMembers(false))
#if (!$manageable.identifiers.empty)
#set ($identifier = $manageable.identifiers.iterator().next())
#end
##
package $manageable.manageablePackageName;

public final class $manageable.manageableServiceBaseName
    implements $manageable.manageableServiceName
{
    private $manageable.fullyQualifiedManageableDaoName dao;

    public void setDao($manageable.fullyQualifiedManageableDaoName dao)
    {
        this.dao = dao;
    }

    protected $manageable.fullyQualifiedManageableDaoName getDao()
    {
        return this.dao;
    }

#if ($manageable.create)
    public void create($memberList)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
#foreach ($member in $manageable.manageableMembers)
#if ($member.required && !$member.type.primitive && !($member.identifier && !$member.display))
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.create(${memberList}) - '${member.name}' can not be null");
        }

#end
#end
        dao.create($memberListArguments);
    }

#end
#if ($manageable.read)
    public java.util.List read($memberList)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return toValueObjects(dao.read($memberListArguments));
    }

    public java.util.List readAll()
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return toValueObjects(dao.readAll());
    }

#if (!$manageable.manageableAssociationEnds.empty)
    public java.util.Map readBackingLists()
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return getDao().readBackingLists();
    }

#end
#end
#if ($manageable.update)
    public void update($memberList)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
#foreach ($member in $manageable.manageableMembers)
#if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.update($memberList) - '${member.name}' can not be null");
        }

#end
#end
        dao.update($memberListArguments);
    }

#end
#if ($manageable.delete)
    public void delete(${identifier.type.fullyQualifiedName}[] ids)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.delete(${identifier.type.fullyQualifiedName}[] ids) - 'ids' can not be null");
        }

        dao.delete(ids);
    }

#end

    private java.util.List toValueObjects(java.util.Collection entities)
    {
        final java.util.List list = new java.util.ArrayList();

        for (java.util.Iterator iterator = entities.iterator(); iterator.hasNext();)
        {
            list.add(toValueObject(($manageable.fullyQualifiedEntityName)iterator.next()));
        }

        return list;
    }

    private $manageable.fullyQualifiedManageableValueObjectName toValueObject($manageable.fullyQualifiedEntityName entity)
    {
        final $manageable.fullyQualifiedManageableValueObjectName valueObject = new ${manageable.fullyQualifiedManageableValueObjectName}();

#foreach ($member in $manageable.attributes)
        valueObject.${member.setterName}(entity.${member.getterName}());
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.manageableIdentifier)
        final $member.type.fullyQualifiedName $member.name = entity.${member.getterName}();

#if (!$member.type.primitive)
        if ($member.name != null)
#end
        {
            valueObject.${member.setterName}(${member.name}.${member.manageableIdentifier.getterName}());
#if ($member.type.displayAttribute.name != $member.manageableIdentifier.name)
            valueObject.${member.setterName}Label(${member.name}.${member.type.displayAttribute.getterName}());
#end
        }
#end
#end

        return valueObject;
    }
}
