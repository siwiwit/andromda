package org.andromda.cartridges.testsuite;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.andromda.core.common.AndroMDALogger;
import org.apache.log4j.Logger;

/**
 * This class is the main class of the cartridge test suite for AndroMDA. The
 * test checks for a list of expected files that a file with the same name and
 * the same package was generated by AndroMDA and that the APIs of the expected
 * file and the generated file are equal. <code>CartridgeTest</code> acts as
 * the test director which creates the list of files to be compared. The actual
 * API comparison is carried out by instances of {@link JavaSourceComparator}.
 * 
 * @author Ralf Wirdemann
 * @author Chad Brandon
 */
public class CartridgeTest
    extends TestCase
{

    private static final Logger logger = Logger.getLogger(CartridgeTest.class);

    /**
     * Points to the directory were the expected files are stored which will be
     * compared to the generated ones.
     */
    public static final String EXPECTED_DIRECTORY = "expected.dir";

    /**
     * Points to the directory were the generated files are located.
     */
    public static final String ACTUAL_DIRECTORY = "actual.dir";

    private static File expectedDir = getDirectory(EXPECTED_DIRECTORY);
    private static File actualDir = getDirectory(ACTUAL_DIRECTORY);

    static
    {
        AndroMDALogger.configure();
    }

    public CartridgeTest(
        String name)
    {
        super(name);
    }

    public static Test suite()
    {
        TestSuite suite = new TestSuite();

        // Add the tests which compares all existing expected files against the
        // generated ones. This makes sure that for each expected an appropriate
        // file was generated.
        addTests(suite);

        return suite;
    }

    private static void addTests(TestSuite suite)
    {
        List actualFiles = new ArrayList();
        getAllFiles(actualDir, actualFiles);
        Iterator iterator = actualFiles.iterator();
        logger.info(" --- Files Generated: '" + actualFiles.size() + "' --- ");
        for (int ctr = 1; iterator.hasNext(); ctr++)
        {
            File actualFile = (File)iterator.next();
            File expectedFile = getExpectedFile(actualFile);
            logger.info(ctr + ")");
            logger.info("expected --> '" + expectedFile + "'");
            logger.info("actual   --> '" + actualFile + "'");
            if (expectedFile.getName().endsWith(".java"))
            {
                suite.addTest(new JavaSourceComparator(
                    "testAPIEquals",
                    expectedFile,
                    actualFile));
            }
            else if (expectedFile.getName().endsWith(".xml"))
            {
                suite.addTest(new XMLComparator(
                    "testXMLEquals",
                    expectedFile,
                    actualFile));
            }
        }
    }

    private static File getExpectedFile(File file)
    {
        String expectedFile;
        String path = file.getPath();

        if (file.getPath().startsWith(expectedDir.getPath()))
        {
            expectedFile = path.substring(expectedDir.getPath().length(), path
                .length());
            expectedFile = actualDir + expectedFile;
        }
        else
        {
            expectedFile = path.substring(actualDir.getPath().length(), path
                .length());
            expectedFile = expectedDir + expectedFile;
        }
        return new File(expectedFile);
    }

    private static String getDirectoryName(String propertyKey)
    {
        String dirName = System.getProperty(propertyKey);
        if (dirName == null)
        {
            throw new RuntimeException("system property <" + propertyKey
                + "> not set");
        }

        // Replace the path-separator character in the given directory name
        // by the path-separator character used by the actual system
        char ch = dirName.indexOf('\\') != -1 ? '\\' : '/';
        dirName = dirName.replace(ch, File.separatorChar);
        return dirName;
    }

    private static File getDirectory(String propertyKey)
    {
        String dirName = getDirectoryName(propertyKey);
        File dir = new File(dirName);
        if (!dir.exists() || !dir.isDirectory())
        {
            throw new RuntimeException("directory <" + dirName
                + "> doesn't exist");
        }
        return dir;
    }

    /**
     * Loads all files find in the <code>directory</code> and adds them to the
     * <code>fileList</code>.
     * 
     * @param directory the directory from which to load all files.
     * @param fileList the List of files to which we'll add the found files.
     */
    private static void getAllFiles(File directory, List fileList)
    {
        File[] files = directory.listFiles();
        for (int i = 0; i < files.length; i++)
        {
            File file = files[i];
            if (!file.isDirectory())
            {
                fileList.add(file);
            }
            else
            {
                getAllFiles(file, fileList);
            }
        }
    }
}