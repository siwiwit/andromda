#set ($className = "HibernateEnumerationType")
#set ($generatedFile = "$str.replace($customTypesPackage, '.', '/')/${className}.java")
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEnumerationType.vsl in andromda-hibernate-cartridge.
//
package $customTypesPackage;

import net.sf.hibernate.Hibernate;
import net.sf.hibernate.HibernateException;
import net.sf.hibernate.UserType;

import java.io.Serializable;
import java.sql.Types;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;
import java.util.HashMap;

/**
 * A user defined hibernate type for persistent enumerations, type safety is also ensured.
 * The backed value is a String instance.
 */
public abstract class $className
    implements Serializable, Comparable, UserType
{
    protected static final Map INSTANCES = new HashMap();

    private static final int[] SQL_TYPES = {Types.VARCHAR};
    private final String enumCode;

    /**
     * Default constructor.  Hibernate needs the default constructor
     * to retrieve an instance of the enum from a JDBC resultset.
     * The instance will be converted to the correct enum instance
     * in {@link #nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)}.
     */
    protected ${className}()
    {
        // 0x90
    }

    protected ${className}(String enumCode)
    {
        this.enumCode = enumCode;
    }

    public String toString()
    {
        return this.enumCode;
    }

    protected static Object internalFromString(String enumCode)
    {
        return INSTANCES.get(enumCode);
    }

    /**
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    public int compareTo(Object that)
    {
        return (this == that) ? 0 : this.toString().compareTo(that.toString());
    }

    /**
     *  @see net.sf.hibernate.UserType#sqlTypes()
     */
    public int[] sqlTypes()
    {
        return SQL_TYPES;
    }

    /**
     *  @see net.sf.hibernate.UserType#deepCopy(java.lang.Object)
     */
    public Object deepCopy(Object value) throws HibernateException
    {
        // Enums are immutable - nothing to be done to deeply clone it
        return value;
    }

    /**
     *  @see net.sf.hibernate.UserType#isMutable()
     */
    public boolean isMutable()
    {
        // Enums are immutable
        return false;
    }

    /**
     * @see net.sf.hibernate.UserType#returnedClass()
     */
    public abstract Class returnedClass();

    /**
     *  @see net.sf.hibernate.UserType#equals(java.lang.Object, java.lang.Object)
     */
    public boolean equals(Object x, Object y) throws HibernateException
    {
        return x == y;
    }

    /**
     *  @see net.sf.hibernate.UserType#nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)
     */
    public Object nullSafeGet(ResultSet resultSet, String[] names, Object owner) throws HibernateException, SQLException
    {
        String name = resultSet.getString(names[0]);
        return resultSet.wasNull() ? null : internalFromString(name);
    }

    /**
     * @see net.sf.hibernate.UserType#nullSafeSet(java.sql.PreparedStatement, java.lang.Object, int)
     */
    public void nullSafeSet(PreparedStatement statement, Object value, int index) throws HibernateException, SQLException
    {
        if (value == null)
        {
            statement.setNull(index, Types.VARCHAR);
        }
        else
        {
            statement.setString(index, value.toString());
        }
    }
}
