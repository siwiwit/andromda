/**
 * Attention: Generated source! Do not modify by hand!
 */
package $entity.packageName;

/**
 * <p>
 * Factory class.
 * Is able to find and create objects of type ${entity.name}.
 * Those can be described as follows:
 * </p>
 * @see $entity.fullyQualifiedName
 */
public abstract class ${entity.name}Factory {

#if (!$entity.abstract)
   // ---------------- create method --------------------

   /**
    * Creates a(n) ${entity.name} object.
    *
#set ($attributes = $entity.getAttributes(true))
#foreach ( $attribute in $attributes)
#if (!$attribute.identifier)
    * @param ${attribute.name}
#end
#end
    * @return ${entity.name} the created object
    */
    public static ${entity.name} create $entity.getOperationCallFromAttributes(false, true)
    {
        ${entity.name} object = new ${entity.name}Impl();

#foreach ( $attribute in $attributes)
#if (!$attribute.identifier)
        object.${attribute.setterName} ($attribute.name);
#end
#end

        return object;
    }
    
#end
    // ---------------- finder methods  ----------------------

#set ($primaryKey = $entity.getIdentifiers(true).iterator().next())
#set ($primaryKeyTypeName = $primaryKey.type.fullyQualifiedName)
    /**
     *
     * Finds ${entity.name} object by its primary key.
     * In Hibernate, this is just a call to load().
     *
     */
    public static $entity.name findByPrimaryKey (net.sf.hibernate.Session session, $primaryKeyTypeName ${primaryKey.name})
        throws net.sf.hibernate.HibernateException
    {
        ${entity.name} object = (${entity.name}) session.load(${entity.name}Impl.class, ${primaryKey.name});
        return object;
    }

#foreach ( $finder in $entity.getFinders(true))
#set ($returnType = $finder.returnType.fullyQualifiedName)
##
#set ($parameterList = $finder.typedArgumentList)
#if ($finder.arguments.empty)
#set ($parameters = "net.sf.hibernate.Session session")
#else
#set ($parameters = "net.sf.hibernate.Session session, ${parameterList}")
#end
##
    /**
$finder.getDocumentation("     * ")
     *
     * Finds ${entity.name} instance(s) using a query.
     */
    $finder.visibility static $returnType ${finder.name}($parameters)
        throws net.sf.hibernate.HibernateException
    {
        net.sf.hibernate.Query query = session.createQuery("$finder.query");
##
#foreach($argument in $finder.arguments)
#set ($index = $velocityCount - 1)
		query.${argument.queryArgumentNameSetter}(${index}, ${argument.name});
#end
##
        return query.list();
    }

#end##foreach operation
}
