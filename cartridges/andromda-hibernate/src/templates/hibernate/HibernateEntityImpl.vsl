/**
 * This class is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package $entity.packageName;

/**
#set ($generateImpl = (!(($leafImpl == "true") && !$entity.specializations.empty) ))
#set ($inheritance = $entity.inheritanceStrategy)
#if ( $generateImpl )
#if ($inheritance == "class" )
 * @hibernate.subclass
 *    discriminator-value="${entity.name}Impl"
#elseif ($inheritance == "subclass")
 * @hibernate.joined-subclass
 *     table="$tableNamePrefix$entity.tableName"
 * @hibernate.joined-subclass-key
 *     column="$entity.identifierColumn"
#else
 * @hibernate.class
 *     table="$tableNamePrefix$entity.tableName"
#end
#else
 * @deprecated by leafImpl true and this class is not a leaf class.
#end
 */
#if ($entity.abstract || !$generateImpl )
public abstract class ${entity.name}Impl
#else
public class ${entity.name}Impl
#end
#if ($inheritance == "interface" )
    implements ${entity.name}
#else
    extends ${entity.name}
#end
{
#if ( $generateImpl )
    // concrete business methods that were declared
    // abstract in class ${entity.name} ...
#if ( $leafImpl == "true" ) 
    // and its superclasses ...
#end
#set ( $businessOperations = $entity.allBusinessOperations )
#else
#set ( $businessOperations = $entity.businessOperations )
#end
##
#foreach ( $operation in $businessOperations)
#set ($msig = $operation.signature)
#set ($returnType = $operation.returnType.fullyQualifiedName)
#if ($operation.exceptionsPresent)
#set ($throws = " throws $operation.exceptionList")
#else
#set ($throws = "")
#end
  /**
$operation.getDocumentation("   * ")
   * @return $returnType
   */
#if ($operation.abstract)
    $operation.visibility abstract $returnType $msig$throws;

#else
    $operation.visibility $returnType $msig$throws
    {
        // TODO: put your implementation here.
#if ($operation.returnTypePresent)

        // Dummy return value, just that the file compiles
#if (!$returnType.primitive)
        return null;
#elseif ("boolean" == $returnType)
        return false;
#else
        return ($returnType)0;
#end
#end
    }

#end ## operation.abstract
#end ## foreach
}
