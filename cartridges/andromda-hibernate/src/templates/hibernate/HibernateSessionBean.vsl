package $service.packageName;

import javax.ejb.EJBException;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Session;
import net.sf.hibernate.SessionFactory;
import net.sf.hibernate.cfg.Configuration;

import ${customTypesPackage}.HibernateUtils;

#foreach ( $serviceRef in $service.serviceReferences )
import ${serviceRef.targetElement.fullyQualifiedName}Home;
#end

##
#if (!$service.attributes.empty)
#set ($stateful = true)
#else
#set ($stateful = false)
#end
##
/**
$service.getDocumentation(" * ")
 *
 * @ejb.bean 
 *        name="$service.name"
#if ($stateful)
 *        type="Stateful"
#else
 *        type="Stateless"
#end
 *        jndi-name="$service.jndiName"
 *        local-jndi-name="${service.jndiName}/Local"
 *        view-type="both"
 * @ejb.interface 
 *        generate="local,remote"
 *        remote-class="${service.fullyQualifiedName}"
 *        local-class="${service.fullyQualifiedName}Local"
 * @ejb.home 
 *        generate="local,remote"
 *        remote-class="${service.fullyQualifiedName}Home"
 *        local-class="${service.fullyQualifiedName}LocalHome"
 * @ejb.util generate="physical"
#foreach ( $serviceRef in $service.serviceReferences )
#set ($serviceRef = $serviceRef.targetElement)
 * @ejb.ejb-ref 
 *        ejb-name="$serviceRef.name" 
 *        view-type="$serviceRef.viewType" 
 *        ref-name="ejb/${serviceRef.name}BeanRef"
#end
#foreach ( $tgv in $service.taggedValues )
#if ($tgv.name != "documentation")
#if ($tgv.name == "---")
    #set ($tag = "")
#else
    #set ($tag = $tgv.name)
#end
 * $tag    $tgv.value
#end
#end
 */
public abstract class ${service.name}Bean 
#if ($service.generalization) 
	extends ${service.generalization.fullyQualifiedName}BeanImpl
#end
    implements javax.ejb.SessionBean
{

#if ($stateful)
    // --------------- attributes ---------------------
#foreach ( $attribute in $service.attributes )
#set ($attributeTypeName = $attribute.type.fullyQualifiedName)

   protected $attributeTypeName $attribute.name;

   /**
$attribute.getDocumentation("     * ")
    *
    * @ejb.interface-method view-type="both"
    * @ejb.transaction      type="Required"
    *
    */
    public $attributeTypeName ${attribute.getterName}() 
    {
        return $attribute.name;
    }
    
   /**
    * @ejb.interface-method view-type="both"
    * @ejb.transaction      type="Required"
    */
    public void ${attribute.setterName}($attributeTypeName newValue) 
    {
        $attribute.name = newValue;
    }

#end
#end
    // ---------------- business methods  ----------------------
#foreach ($operation in $service.operations)
##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $operation.typedArgumentList)
#if ($parameterList.length() == 0)
#set ($parameters = "net.sf.hibernate.Session session")
#else
#set ($parameters = "net.sf.hibernate.Session session, ${parameterList}")
#end
#if ($operation.hasExceptions())
    protected abstract $operation.returnType.fullyQualifiedName handle${str.capitalize(${operation.name})} ($parameters)
        throws $operation.exceptionList;
#else
    protected abstract $operation.returnType.fullyQualifiedName handle${str.capitalize(${operation.name})} ($parameters);
#end

    /**
$operation.getDocumentation("     * ")
     *
     * @ejb.interface-method view-type="both"
     * @ejb.transaction type="Required"
     */
#if ($operation.hasExceptions())
    $operation.visibility $operation.returnType.fullyQualifiedName $operation.signature
        throws $operation.exceptionList
#else
    $operation.visibility $operation.returnType.fullyQualifiedName $operation.signature
#end
    {
        Session session = null;
        try
        {
            session = getSession();
##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $operation.argumentNames)
#if ($parameterList.length() == 0)
#set ($parameters = "session")
#else
#set ($parameters = "session, ${parameterList}")
#end
##
#if ("void" != $operation.returnType.fullyQualifiedName)
            return handle${str.capitalize($operation.name)}($parameters);
#else
            handle${str.capitalize($operation.name)}($parameters);
#end
        }
#foreach ( $exception in $operation.exceptions )
        catch ($exception.fullyQualifiedName e)
        {
           _ctx.setRollbackOnly();
           throw e;
        }
#end
        catch (Throwable th)
        {
            throw new EJBException("${service.name}Bean.${operation.name}: " + th.toString());
        }
        finally
        {
            if (session != null)
            {
                try
                {
                    session.flush();
                    session.close();
                }
                catch (HibernateException he)
                {
                    throw new EJBException("${service.name}Bean.${operation.name}: " + he.getMessage());
                }
            }
        }
    }
    
#end
   // ---------------- create methods -------------------------

   /**
    * @ejb.create-method
    * @ejb.transaction type="Required"
    */
    public void ejbCreate ()
           throws javax.ejb.CreateException
    {
    }

    public void ejbPostCreate ()
           throws javax.ejb.CreateException
    {
    }

#if ($stateful)
   // ---------------- create methods with separate attributes --------------------

   /**
    * @ejb.create-method
    * @ejb.transaction type="Required"
    */
    public void ejbCreate $service.operationCallFromAttributes
           throws javax.ejb.CreateException
    {
#foreach ( $attribute in $service.attributes)
        ${attribute.setterName} (${attribute.name});
#end
    }

    public void ejbPostCreate $service.operationCallFromAttributes
           throws javax.ejb.CreateException
    {
    }

#end
   // ---------------- Hibernate helpers -------------------------

    protected javax.ejb.SessionContext _ctx = null;

    private static SessionFactory _sessionFactory = null;
    
    public void setSessionContext( javax.ejb.SessionContext ctx )
    {
        _ctx = ctx;
    }

    private SessionFactory getSessionFactory() throws HibernateException, NamingException
    {
        if( _sessionFactory == null )
        {
            _sessionFactory = HibernateUtils.getSessionFactory();
        }
        return _sessionFactory;
    }

    private Session getSession() throws HibernateException, NamingException
    {
        return getSessionFactory().openSession();
    }

    // ---------------- accessor methods for (session!) bean references ---------------
#foreach ( $serviceRef in $service.serviceReferences )
   #set ($service = $serviceRef.targetElement)
   #set ($homeInterfaceName = "${service.name}Home")
   /**
    * This is to get the reference to the ${service.name} bean.
    * Obtains local home interface from default initial context
    * @return Local home interface for ${service.name}. Lookup using bean ref name.
    */
    protected static ${homeInterfaceName} get${homeInterfaceName}() throws NamingException
    {
        InitialContext initialContext = new InitialContext();
        try {
            // Local homes shouldn't be narrowed, as there is no RMI involved.
            $homeInterfaceName home = (${homeInterfaceName}) initialContext.lookup("java:comp/env/ejb/${service.name}BeanRef");
            return home;
        } finally {
            initialContext.close();
        }
    }

#end
}
