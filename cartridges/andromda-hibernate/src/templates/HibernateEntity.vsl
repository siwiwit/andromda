/**
 * Attention: Generated source! Do not modify by hand!
 */
package $class.packageName;

#set ($primKey = $class.identifiers().iterator().next())
#set ($primKeyTypeName = $primKey.type.fullyQualifiedName)
##
#foreach ( $dep in $class.dependencies )
    #set ($class2 = $dep.targetType)
    #if ($dep.hasStereotype("Exception"))
        #set ($defaultException = $class2)
    #end
#end

/**
$class.getDocumentation(" ")
 *
 * @hibernate.class
 *     table="HIB_$class.tableName"
 *
 * @hibernate.discriminator
 *     column="class"
 * 
 *
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag != "documentation")
#if ($tgv.tag == "---")
    #set ($tag = "")
#else
    #set ($tag = $tgv.tag)
#end
 * $tag    $tgv.value
#end
#end
 *
 */
public abstract class ${class.name} {

    // --------------- attributes ---------------------
#foreach ( $att in $class.attributes )
#set ($atttypename = $att.type.fullyQualifiedName)

    private $atttypename ${att.name};
   
   /**
$att.getDocumentation("     ")
    *
#set ($attcolumnname = $att.columnName)
#set ($attjdbctype   = $attr.jdbcType)
#set ($attsqltype    = $att.sqlType)
#if ($att.identifier)
    * @hibernate.id 
    *     generator-class="uuid.hex"
#else
    * @hibernate.property
#end
    *     column="$attcolumnname"
    *
    * @hibernate.column
    *     name="$attcolumnname"
    *     sql-type="$attsqltype"
    *
    */
    public $atttypename get${str.upperCaseFirstLetter(${att.name})}()
    {
        return this.${att.name};
    }
    
    public void set${str.upperCaseFirstLetter(${att.name})}(${atttypename} newValue)
    {
        this.${att.name} = newValue;
    }


#end

    // ------------- relations ------------------

#set ($sep = "_")
#set ($suffix = "_FK")
#foreach ( $associationEnd in $class.associationEnds )
	#set ($target = $associationEnd.target)
    #set ($sourceType = $associationEnd.type)
    #set ($targetType = $associationEnd.otherEnd.type)
    #set ($targetTypeName = $targetType.fullyQualifiedName)
#if ($target.navigable == "true")
   /**
$target.getDocumentation("     ")
##    * multiplicity:     $adata.multiplicities
##    * source navigable: $adata.source.navigable
##    * target navigable: $adata.target.navigable
    *
#if ($target.one2Many)
    * @hibernate.set
    *     role="$target.name"
    *     lazy="true"
    * @hibernate.collection-key
    *     column="$target.columnName"
    * @hibernate.collection-one-to-many
    *     class="$targetTypeName"
    */
    public java.util.Collection ${target.getterName}()
    {
        return this.${target.name};
    }

    public void ${target.setterName}(java.util.Collection ${target.name})
    {
        this.${target.name} = ${target.name};
    }

    private java.util.Collection ${target.name};
    
#end
#if ($target.many2Many)
##
    * @hibernate.set
    *     lazy="true"
    *     table="HIB_${associationEnd.association.relationName}"
    * @hibernate.collection-key
    *     column="$associationEnd.columnName"
    * @hibernate.collection-many-to-many
    *     column="$target.columnName"
    *     class="$targetTypeName"
    */
    public java.util.Collection get${str.upperCaseFirstLetter($adata.target.roleName)}()
    {
        return this.${adata.target.roleName};
    }

    public void set${str.upperCaseFirstLetter($adata.target.roleName)}(java.util.Collection ${adata.target.roleName})
    {
        this.${adata.target.roleName} = ${adata.target.roleName};
    }

    private java.util.Collection ${adata.target.roleName};
    
#end
#if ($adata.isOne2One() || $adata.isMany2One())
#if ($adata.isMany2One())
    *   @hibernate.many-to-one
#end
#if ($adata.isOne2One())
    *   @hibernate.one-to-one
#end
#set($foreignKeyColumn = "${str.toDatabaseAttributeName(${adata.target.roleName}, $sep)}$suffix")
    *       column="${foreignKeyColumn}"
    */
    public ${targettypename} get${str.upperCaseFirstLetter($adata.target.roleName)}()
    {
        return this.${adata.target.roleName};
    }
    
    public void set${str.upperCaseFirstLetter($adata.target.roleName)}(${targettypename} ${adata.target.roleName})
    {
        this.${adata.target.roleName} = ${adata.target.roleName};
    }

    private ${targettypename} ${adata.target.roleName};

#end


#end
#end

    // ---------------- business methods  ----------------------

#foreach ( $op in $class.operations)
#if (!$op.hasStereotype("FinderMethod"))
   /**
$op.getDocumentation("     ")
    *
    */
#set ($msig = $op.signature)
#set ($returntype = $op.type.fullyQualifiedName)
#if ($defaultException)
    $op.visibility abstract $returntype ${msig}
        throws $defaultException.name;
#else
    $op.visibility abstract $returntype ${msig};
#end
#end
#end

}
