#set ($packagename = $transform.findPackageName($class.package))
package $packagename;

import java.sql.SQLException;

import javax.ejb.EJBException;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Session;
import net.sf.hibernate.SessionFactory;

#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
##
#foreach ( $dep in $class.dependencies )
    #set ($class2 = $transform.findClassById($dep.targetType))
    #if ($class2)
        #if ($transform.getStereotype($dep.id) == "ServiceRef")
	        #set ($class2packagename = $transform.findPackageName(${class2.package}))
	        #if ($class2packagename != $packagename)
import ${class2packagename}.$transform.getHomeInterfaceName(${class2});
	        #end
	    #end
    #end
    #if ($transform.getStereotype($dep.id) == "Exception")
        #set ($defaultException = $class2)
    #end
#end
##
#if ($class.attributes.size() > 0)
#set ($stateful = true)
#else
#set ($stateful = false)
#end
##
/**
#generateDocumentation ($class " ")
 *
 * @ejb.bean name="$class.name"
#if ($stateful)
 *       type="Stateful"
#else
 *       type="Stateless"
#end
 *       local-jndi-name="${packagename}/${class.name}/LocalHome"
 *           jndi-name="${packagename}/${class.name}/Home"
 *       view-type="both"
 * @ejb.interface generate="local,remote"
 *        remote-class="${packagename}.${class.name}"
 *        local-class="${packagename}.${class.name}Local"
 * @ejb.home generate="local, remote"
 *        remote-class="${packagename}.${class.name}Home"
 *        local-class="${packagename}.${class.name}LocalHome"
 * @ejb.util generate="physical"
#foreach ( $dep in $class.dependencies )
#if ($transform.getStereotype($dep.id) == "ServiceRef")
 #set ($class2 = $transform.findClassById($dep.targetType))
 * @ejb.ejb-ref ejb-name="${class2.name}" view-type="$transform.getEjbRefViewType(${class2})" ref-name="ejb/${class2.name}BeanRef"
#end
#end
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag != "documentation")
#if ($tgv.tag == "---")
    #set ($tag = "")
#else
    #set ($tag = $tgv.tag)
#end
 * $tag    $tgv.value
#end
#end
 *
 */
public abstract class ${class.name}Bean implements javax.ejb.SessionBean {

#if ($stateful)
    // --------------- attributes ---------------------
#foreach ( $att in $class.attributes )
#set ($atttypename = $transform.findFullyQualifiedName($att.type))

   protected ${atttypename} ${att.name};

   /**
#generateDocumentation ($att "    ")
    *
    * @ejb.interface-method view-type="both"
    * @ejb.transaction      type="Required"
    *
    */
    public $atttypename get${str.upperCaseFirstLetter(${att.name})}() {
        return ${att.name};
    }
   /**
    * @ejb.interface-method view-type="both"
    * @ejb.transaction      type="Required"
    */
    public void set${str.upperCaseFirstLetter(${att.name})}(${atttypename} newValue) {
        ${att.name} = newValue;
    }

#end
#end
    // ---------------- business methods  ----------------------

#foreach ($op in $class.operations)
#set ($msig = $transform.getOperationSignature($op))

##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $transform.getOperationTypedParameterList($op))
#if ($parameterList.length() == 0)
#set ($parameters = "net.sf.hibernate.Session sess")
#else
#set ($parameters = "net.sf.hibernate.Session sess, ${parameterList}")
#end

#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#if ($defaultException)
    protected abstract $returntype handle${str.upperCaseFirstLetter(${op.name})} ($parameters)
        throws $defaultException.name;
#else
    protected abstract $returntype handle${str.upperCaseFirstLetter(${op.name})} ($parameters);
#end

   /**
#generateDocumentation ($op "    ")
    *
    * @ejb.interface-method view-type="both"
    * @ejb.transaction type="Required"
    */
#if ($defaultException)
    $op.visibility $returntype $msig
        throws $defaultException.name
#else
    $op.visibility $returntype $msig
#end
    {
        Session sess = null;
        try
        {
            sess = getSession();
##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $transform.getOperationParameterNames($op))
#if ($parameterList.length() == 0)
#set ($parameters = "sess")
#else
#set ($parameters = "sess, ${parameterList}")
#end
##
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#if ("void" != $returntype)
            return handle${str.upperCaseFirstLetter($op.name)}($parameters);
#else
            handle${str.upperCaseFirstLetter($op.name)}($parameters);
#end
        }
#if ($defaultException)
        catch ($defaultException.name e)
        {
           _ctx.setRollbackOnly();
           throw e;
        }
#end
        catch (HibernateException he)
        {
            throw new EJBException("${class.name}Bean.${op.name}: " + he.getMessage());
        }
        catch (NamingException ne)
        {
            throw new EJBException("${class.name}Bean.${op.name}: " + ne.getMessage());
        }
        finally
        {
            if (sess != null)
            {
                try
                {
                    sess.flush();
                    sess.close();
                }
                catch (HibernateException he)
                {
                    throw new EJBException("${class.name}Bean.${op.name}: " + he.getMessage());
                }
            }
        }
    }
#end

   // ---------------- create methods -------------------------

   /**
    * @ejb.create-method
    * @ejb.transaction type="Required"
    */
    public void ejbCreate ()
           throws javax.ejb.CreateException
    {
    }

    public void ejbPostCreate ()
           throws javax.ejb.CreateException
    {
    }

#if ($stateful)
   // ---------------- create methods with separate attributes --------------------

   /**
    * @ejb.create-method
    * @ejb.transaction type="Required"
    */
    public void ejbCreate $transform.getAttributesAsList($class, true, false)
           throws javax.ejb.CreateException
    {
#foreach ( $att in $class.attributes)
        set${str.upperCaseFirstLetter(${att.name})} (${att.name});
#end
    }

    public void ejbPostCreate $transform.getAttributesAsList($class, true, false)
           throws javax.ejb.CreateException
    {
    }

#end
   // ---------------- Hibernate helpers -------------------------

    protected javax.ejb.SessionContext _ctx = null;

    private SessionFactory _sessionFactory = null;

    public void setSessionContext( javax.ejb.SessionContext ctx )
    {
        _ctx = ctx;
        _sessionFactory = null;
    }

    private SessionFactory getSessionFactory() throws NamingException
    {
        if( _sessionFactory == null )
        {
            InitialContext ic = new InitialContext();

            _sessionFactory = ( SessionFactory )
                              ic.lookup( "java:/hibernate/SessionFactory" );
        }

        return _sessionFactory;
    }

    private Session getSession() throws HibernateException, NamingException
    {
        return getSessionFactory().openSession();
    }

    // ---------------- accessor methods for (session!) bean references ---------------

#foreach ( $dep in $class.dependencies )
#if ($transform.getStereotype($dep.id) == "ServiceRef")
   #set ($referencedClass = $transform.findClassById($dep.targetType))
   #set ($homeInterfaceName = $transform.getHomeInterfaceName($referencedClass))
   /**
    * This is to get the reference to the ${referencedClass.name} bean.
    * Obtains local home interface from default initial context
    * @return Local home interface for ${referencedClass.name}. Lookup using bean ref name.
    */
    protected static ${homeInterfaceName} get${homeInterfaceName}() throws NamingException
    {
        InitialContext initialContext = new InitialContext();
        try {
            // Local homes shouldn't be narrowed, as there is no RMI involved.
            ${homeInterfaceName} home = (${homeInterfaceName}) initialContext.lookup("java:comp/env/ejb/${referencedClass.name}BeanRef");
            return home;
        } finally {
            initialContext.close();
        }
    }

#end
#end
}
