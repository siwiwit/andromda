// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Enumeration.vsl in andromda-java-cartridge.
//
#if ($stringUtils.isNotBlank($enumeration.packageName))
package $enumeration.packageName;
#end

/**
$enumeration.getDocumentation(" * ")
 */
public class $enumeration.name
#if($enumeration.generalization)
    extends ${enumeration.generalization.fullyQualifiedName}
#elseif ($serializable == 'true')
    implements java.io.Serializable
#end
{
#foreach ($literal in $enumeration.literals)
    /**
$literal.getDocumentation("     * ")
     */
    public static final $enumeration.name $literal.name = new ${enumeration.name}($literal.enumerationValue);

#end
    private $enumeration.literalType.fullyQualifiedName value;

    private ${enumeration.name}($enumeration.literalType.fullyQualifiedName value)
    {
        this.value = value;
    }
    
    /**
     * The default constructor allowing
     * super classes to access it.
     */
    protected ${enumeration.name}()
    {
    }

    /**
     * @see java.lang.Object#toString()
     */
    public String toString()
    {
        return "" + value;
    }

    /**
     * Creates an instance of $enumeration.name from <code>value</code>.
     *
     * @param value the value to create the $enumeration.name from.
     */
    public static $enumeration.name $enumeration.fromOperationSignature
    {
#set ($value = "value")
#if($enumeration.literalType.primitive)
#set ($value = "new ${enumeration.literalType.wrapperName}(value);")
#end
        if (!literals.contains($value))
        {
            throw new IllegalArgumentException(
                "invalid value '" + value + "', possible values are: " + values);
        }
        return new ${enumeration.name}(value);
    }
    
    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals as defined by this enumeration, this list can
     *      not be modified.
     */
    public static java.util.List literals()
    {
        return literals;
    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object object)
    {
        return object != null &&
            object.toString().equals(
                this.toString());
    }

    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode()
    {
        return toString().hashCode();
    }
    
    private static final java.util.Map values = new java.util.HashMap();
    private static java.util.List literals = new java.util.ArrayList();
    
    /**
     * Initializes the values.
     */ 
    static
    {
#foreach ($literal in $enumeration.literals)
#set ($value = "${literal.name}.value")
#if($literal.type.primitive)
#set ($value = "new ${literal.type.wrapperName}(value)")
#end
        values.put($value, $literal.name);
        literals.add($value);
#end
        literals = java.util.Collections.unmodifiableList(literals);
    }
}