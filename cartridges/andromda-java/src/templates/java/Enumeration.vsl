//
// Attention: Generated code! Do not modify by hand!
// Generated by: Enumeration.vsl in andromda-java-cartridge.
//
#set ($packagename = $class.packageName)
package $packagename;

/**
$class.getDocumentation(" * ")
 */
public class ${class.name} 
#if($class.generalization)  
	extends ${class.generalization.fullyQualifiedName}
#else
    implements java.io.Serializable 
#end
{
    private static java.util.Collection values = new java.util.ArrayList();

#foreach ( $attribute in $class.attributes )
#set ($attributeType = $attribute.type)
#set ($fromMethodName = "from${stringUtils.capitalize($attribute.type.name)}")
	/**
$attribute.getDocumentation("     * ") 
	 */
    public static final $class.name $attribute.name = new ${class.name}($attribute.defaultValue);
   
#end
	private $attributeType.fullyQualifiedName value;
	
#set ($valueTypeDef = "${attributeType.fullyQualifiedName} valueType = value;")
#if($attributeType.primitiveType)
#set ($valueTypeDef = "${attributeType.wrapperName} valueType = new ${attributeType.wrapperName}(value);")
#end	
	private ${class.name}($attributeType.fullyQualifiedName value) 
	{   
        $valueTypeDef
        if (!values.contains(valueType)) 
        {
            values.add(valueType);
        }
		this.value = value;
	}
	
	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString() 
	{
		return "" + value;
	}
	
	/**
	 * Creates an instance of ${class.name} from <code>value</code>.
	 *
	 * @param value the value to create the ${class.name} from. 
	 */
	public static $class.name ${fromMethodName}($attributeType.fullyQualifiedName value) 
	{
        $valueTypeDef
        if (!values.contains(valueType)) 
        {
            throw new IllegalArgumentException(
                "invalid value, possible values are: " + values);   
        }
		return new ${class.name}(value);
	}
	
	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
    public boolean equals(Object object) 
    {
        return object != null && 
            object.toString().equals(
                this.toString());
    }
    
    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode() 
    { 
        return toString().hashCode();
    }	   
}