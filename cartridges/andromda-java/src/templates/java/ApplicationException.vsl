#if ($umlUtils.shouldOutput($class))
## IMPORTANT!!! We can remove this when we upgrade to AndroMDA 3.4
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!!
// Generated by: ApplicationException.vsl in andromda-java-cartridge.
//
#if ($stringUtils.isNotBlank($class.packageName))
package $class.packageName;
#end
#set ($webFault=$class.hasStereotype("WebFault"))
#if ($webFault)
## Assume the only Exception AssociationEnd class is the faultBean
#if ($class.associationEnds.empty)
## Create a new FaultBean class at the same time as processing this Exception
#set ($faultDetails="Object")
#else
#set ($faultDetails=$class.associationEnds.get(0).otherEnd.getterSetterTypeName)
#end
#end

#parse("templates/java/ExceptionUtilsImports.vm")

/**
$class.getDocumentation(" * ")
 */
#if ($XMLBindingAnnotations)
    @XmlRootElement(name="${class.name}")
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name="$stringUtils.uncapitalize(${class.name})")
#if ($webFault)
    @WebFault( name="${class.name}", faultBean="$faultDetails", targetNamespace="http://$javaUtils.reversePackage($class.packageName)")
#end
#end
public#if($class.abstract) abstract#end class ${class.name}
#if($class.generalization)
    extends ${class.generalization.fullyQualifiedName}
#else
    extends Exception
#end
#if (!$class.interfaceAbstractions.empty)
    implements $class.implementedInterfaceList
#end
{
#if ($serializable)
    /** The serial version UID of this class. Throwable implements Serializable so declaration not needed. */
    private static final long serialVersionUID = 1L;

#if ($webFault)
    /** The Class with attributes populated with Exception Details, modeled as ValueObject, to fully describe the fault.
        Exception throwable and message are stored in the Exception class, identifying details such as name and id are in FaultDetails */
    private $faultDetails details;

#end
#end
    /**
     * The default constructor.
     */
    public ${class.name}()
    {
        super();
        // Avoid compiler warning from uncommented empty method
    }

    /**
     * Constructs a new instance of ${class.name}
     *
     * @param throwable the parent Throwable
     */
    public ${class.name}(Throwable throwable)
    {
        super(findRootCause(throwable));
    }

    /**
     * Constructs a new instance of ${class.name}
     *
     * @param message the throwable message.
     */
    public ${class.name}(String message)
    {
        super(message);
    }

    /**
     * Constructs a new instance of ${class.name}
     *
     * @param message the throwable message.
     * @param throwable the parent of this Throwable.
     */
    public ${class.name}(String message, Throwable throwable)
    {
        super(message, findRootCause(throwable));
    }

    private Object[] messageArguments;

    /**
     * Gets the message arguments that can be used by message resources (in
     * something like the presentation tier)
     *
     * @return
     */
    public Object[] getMessageArguments()
    {
        return messageArguments;
    }

    /**
     * Sets the message arguments that can be used by message resources (in
     * something like the presentation tier)
     *
     * @param messageArguments
     */
    public void setMessageArguments(Object[] messageArguments)
    {
        this.messageArguments = messageArguments;
    }

#if ($webFault)
    /**
     * Constructs a new instance of ${class.name} with WebFault details
     *
     * @param throwable the parent Throwable
     * @param detailsIn $faultDetails WebFault details
     */
    public ${class.name}(Throwable throwable, $faultDetails detailsIn)
    {
        super(findRootCause(throwable));
        this.details = detailsIn;
    }

    /**
     * Constructs a new instance of ${class.name} with WebFault details
     *
     * @param message the throwable message.
     * @param detailsIn $faultDetails WebFault details
     */
    public ${class.name}(String message, $faultDetails detailsIn)
    {
        super(message);
        this.details = detailsIn;
    }

    /**
     * Constructs a new instance of ${class.name} with WebFault details
     *
     * @param message the throwable message.
     * @param throwable the parent of this Throwable.
     * @param detailsIn $faultDetails WebFault details
     */
    public ${class.name}(String message, Throwable throwable, $faultDetails detailsIn)
    {
        super(message, findRootCause(throwable));
        this.details = detailsIn;
    }

    /**
     * Returns the WebFault details
     *
     * @return details $faultDetails WebFault details
     */
    public $faultDetails getFaultInfo() {
        return this.details;
    }
#end

#parse("templates/java/ExceptionUtils.vm")

}
#end