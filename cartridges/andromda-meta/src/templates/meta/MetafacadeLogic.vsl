#set ($generatedFile = $metafacade.logicFile)
//
// Attention: generated code (by MetafacadeLogic.vsl) - do not modify!
//
#if ($metafacade.logicPackageName)
package $metafacade.logicPackageName;
#end

## calculate metaclass and superMetafacade
#if ($metafacade.metaclassDirectDependency)
#set ($metaclassTypeName = $metafacade.metaclass.fullyQualifiedName)
#else
#if ($metafacade.constructorRequiresMetaclassCast)
#set ($constructorRequiresMetaclassCast = true)
#end
#set ($metaclassTypeName = "Object")
#end
##
#set ($superMetafacade = $metafacade.generalization)
##
/**
 * MetafacadeLogic for $metafacade.fullyQualifiedName
 *
 * @see $metafacade.fullyQualifiedName
 */
public abstract class $metafacade.logicName
#if ($superMetafacade && !$metafacade.requiresInheritanceDelegatation)
    extends $superMetafacade.fullyQualifiedLogicImplName
#else
    extends org.andromda.core.metafacade.MetafacadeBase
#end
    implements $metafacade.fullyQualifiedName
{

    protected $metaclassTypeName metaObject;

    public ${metafacade.logicName}($metaclassTypeName metaObject, String context)
    {
#if ($metafacade.requiresInheritanceDelegatation)
        super(metaObject, getContext(context));
#foreach ($link in $metafacade.generalizationLinks)
        this.${link.name} =
           ($link.parent.fullyQualifiedName)
            org.andromda.core.metafacade.MetafacadeFactory.getInstance().createFacadeImpl(
                    "$link.parent.fullyQualifiedName",
                    metaObject,
                    getContext(context));
#end
#else
#set ($metaObjectArgument = "metaObject")
#if ($constructorRequiresMetaclassCast)
#set ($metaObjectArgument = "($metafacade.metaclass.fullyQualifiedName)metaObject")
#end
        super($metaObjectArgument, getContext(context));
#end
        this.metaObject = metaObject;
    }

    /**
     * Gets the context for this metafacade logic instance.
     */
    private static String getContext(String context)
    {
        if (context == null)
        {
            context = "$metafacade.fullyQualifiedName";
        }
        return context;
    }

#if ($metafacade.requiresInheritanceDelegatation)
#foreach ($link in $metafacade.generalizationLinks)
    private $link.parent.fullyQualifiedName $link.name;
#set ($initializedCheck = "${link.name}Initialized")
    private boolean $initializedCheck = false;

    /**
     * Gets the $link.parent.fullyQualifiedName parent instance.
     */
    $link.getterNameVisibility $link.parent.fullyQualifiedName ${link.getterName}()
    {
        if (!this.$initializedCheck)
        {
            ((org.andromda.core.metafacade.MetafacadeBase)${link.name}).setMetafacadeContext(this.getMetafacadeContext());
            this.$initializedCheck = true;
        }
        return $link.name;
    }

#end
#end
##
#if (!$metafacade.attributes.empty)
    // --------------- attributes ---------------------

#foreach ($attribute in $metafacade.attributes)
##
#set ($memberTypeName = $attribute.type.fullyQualifiedName)
#set ($memberType = $attribute.type)
#set ($methodName = $attribute.getterName)
#set ($memberName = "${attribute.name}${velocityCount}a")## postfix with counter to avoid collisions with other members
#set ($typedArgumentList = "")
#set ($handleMethodPreCondition = "${attribute.implementationOperationName}${velocityCount}aPreCondition()")## postfix with counter to avoid collisions with other members
#set ($handleMethodPostCondition = "${attribute.implementationOperationName}${velocityCount}aPostCondition()")## postfix with counter to avoid collisions with other members
   /**
    * @see ${metafacade.fullyQualifiedName}#${methodName}()
    */
    protected abstract $memberTypeName ${attribute.implementationOperationName}($typedArgumentList);

    private void $handleMethodPreCondition
    {
#renderTranslation ($attribute "pre")
    }

    private void $handleMethodPostCondition
    {
#renderTranslation ($attribute "post")
    }

#if ($attribute.readOnly)
    private $memberTypeName __$memberName;
    private boolean __${memberName}Set = false;

#end
    public final $memberTypeName ${methodName}()
    {
#if ($attribute.readOnly)
        $memberTypeName $memberName = this.__$memberName;
        if (!this.__${memberName}Set)
        {
#set ($indent = "    ")
#else
        $memberTypeName $memberName = $memberType.javaNullString;
#set ($indent = "")
#end
        ${indent}$handleMethodPreCondition;
        ${indent}$memberName = ${attribute.implementationOperationName}($typedArgumentList);
        ${indent}$handleMethodPostCondition;
#if ($attribute.readOnly)
            this.__$memberName = $memberName;
            if (isMetafacadePropertyCachingEnabled())
            {
                this.__${memberName}Set = true;
            }
        }
#end
        return $memberName;
    }

#end
#end
#if (!$metafacade.operations.empty)
    // ---------------- business methods ----------------------

#foreach ($operation in $metafacade.operations)
#set ($hasArguments = (!$operation.arguments.empty))
#set ($memberTypeName = $operation.returnType.fullyQualifiedName)
#set ($methodName = $operation.name)
#set ($memberName = "${methodName}${velocityCount}o")## postfix with counter to avoid collisions with other members
#set ($typedArgumentList = $operation.typedArgumentList)
#set ($handleMethodPreCondition = "${operation.implementationName}${velocityCount}oPreCondition()")## postfix with counter to avoid collisions with other members
#set ($handleMethodPostCondition = "${operation.implementationName}${velocityCount}oPostCondition()")## postfix with counter to avoid collisions with other members
    protected abstract $memberTypeName ${operation.implementationName}($typedArgumentList);

    private void $handleMethodPreCondition
    {
#renderTranslation ($operation "pre")
    }

    private void $handleMethodPostCondition
    {
#renderTranslation ($operation "post")
    }

    $operation.visibility $memberTypeName ${methodName}($typedArgumentList)
    {
        $handleMethodPreCondition;
#if($operation.returnTypePresent)
        $memberTypeName returnValue = ${operation.implementationName}($operation.argumentNames);
#else
        ${operation.implementationName}($operation.argumentNames);
#end
        ${handleMethodPostCondition};
#if($operation.returnTypePresent)
        return returnValue;
#end
    }

#end
#end
##
#if (!$metafacade.associationEnds.empty)
    // ------------- associations ------------------

#foreach ($associationEnd in $metafacade.associationEnds)
#set ($otherEnd = $associationEnd.otherEnd)
#if ($otherEnd.navigable)
##
#set ($memberTypeName = $otherEnd.getterSetterTypeName)
#set ($memberType = $otherEnd.type)
#set ($methodName = $otherEnd.getterName)
#set ($memberName = "${methodName}${velocityCount}r")## postfix with counter to avoid collisions with other members
#set ($typedArgumentList = "")
#set ($handleMethodPreCondition = "${otherEnd.implementationOperationName}${velocityCount}rPreCondition()")## postfix with counter to avoid collisions with other members
#set ($handleMethodPostCondition = "${otherEnd.implementationOperationName}${velocityCount}rPostCondition()")## postfix with counter to avoid collisions with other members
##
    private void $handleMethodPreCondition
    {
#renderTranslation ($associationEnd "pre")
    }

    private void $handleMethodPostCondition
    {
#renderTranslation ($associationEnd "post")
    }

#if ($otherEnd.readOnly)
    private $memberTypeName __$memberName;
    private boolean __${memberName}Set = false;

#end
    public final $memberTypeName ${methodName}()
    {
#if ($otherEnd.readOnly)
        $memberTypeName $memberName = this.__$memberName;
        if (!this.__${memberName}Set)
        {
#set ($indent = "    ")
#else
#set ($indent = "")
        $memberTypeName $memberName = $memberType.javaNullString;
#end
        ${indent}$handleMethodPreCondition;
#if ($otherEnd.many)
        ${indent}Object result = this.shieldedElements(${otherEnd.implementationOperationName}($typedArgumentList));
#else
        ${indent}Object result = this.shieldedElement(${otherEnd.implementationOperationName}($typedArgumentList));
#end
        ${indent}try
        ${indent}{
        ${indent}    $memberName = ($memberTypeName)result;
        ${indent}}
        ${indent}catch (ClassCastException ex)
        ${indent}{
        ${indent}    // ignore since the metafacade shouldn't
        ${indent}    // be set if its not of the correct type
        ${indent}}
        ${indent}$handleMethodPostCondition;
#if ($otherEnd.readOnly)
            this.__$memberName = $memberName;
            if (isMetafacadePropertyCachingEnabled())
            {
                this.__${memberName}Set = true;
            }
        }
#end
        return $memberName;
    }

#if ($otherEnd.many)
    protected abstract $otherEnd.getterSetterTypeName ${otherEnd.implementationOperationName}($typedArgumentList);
#else
    protected abstract java.lang.Object ${otherEnd.implementationOperationName}($typedArgumentList);
#end

#end
#end
#end
##
#if ($metafacade.requiresInheritanceDelegatation)
#foreach ($link in $metafacade.generalizationLinks)
#set ($generalizationCount = $velocityCount)
    // ----------- delegates to $link.parent.fullyQualifiedName ------------
#foreach ($method in $metafacade.getMethodDataForPSM($link.parent))
    // from $method.metafacadeName
    $method.buildMethodDeclaration(true)
    {
#if ($method.returnTypePresent)
        return this.${link.getterName}().${method.buildMethodCall()};
#else
        this.${link.getterName}().${method.buildMethodCall()};
#end
    }

#end
#end
#end
#if ($metafacade.requiresInheritanceDelegatation)
    /**
     * @see org.andromda.core.metafacade.MetafacadeBase#initialize()
     */
    public void initialize()
    {
#foreach ($link in $metafacade.generalizationLinks)
        this.${link.getterName}().initialize();
#end
    }

    /**
     * @see org.andromda.core.metafacade.MetafacadeBase#getValidationOwner()
     */
    public Object getValidationOwner()
    {
#foreach ($link in $metafacade.generalizationLinks)
#if ($velocityCount == 1)
        Object owner = this.${link.getterName}().getValidationOwner();
#else
        if (owner == null)
        {
            owner = this.${link.getterName}().getValidationOwner();
        }
#end
#if ($velocityCount == $metafacade.generalizationCount)
        return owner;
#end
#end
    }

    /**
     * @see org.andromda.core.metafacade.MetafacadeBase#getValidationName()
     */
    public String getValidationName()
    {
#foreach ($link in $metafacade.generalizationLinks)
#if ($velocityCount == 1)
        String name = this.${link.getterName}().getValidationName();
#else
        if (name == null)
        {
            name = this.${link.getterName}().getValidationName();
        }
#end
#if ($velocityCount == $metafacade.generalizationCount)
        return name;
#end
#end
    }

#end
    /**
     * @see org.andromda.core.metafacade.MetafacadeBase#validateInvariants(java.util.Collection)
     */
    public void validateInvariants(java.util.Collection validationMessages)
    {
#if ($metafacade.requiresInheritanceDelegatation)
#foreach ($link in $metafacade.generalizationLinks)
        this.${link.getterName}().validateInvariants(validationMessages);
#end
#elseif ($superMetafacade)
        super.validateInvariants(validationMessages);
#end
#renderTranslation ($metafacade "inv")
    }
    
    /**
     * The property that stores the name of the metafacade.
     */
    private static final String NAME_PROPERTY = "name";
    
    /**
     * @see java.lang.Object#toString()
     */
    public String toString()
    {
        final StringBuffer toString = new StringBuffer(this.getClass().getName());
        toString.append("[");
        try
        {
            toString.append(org.andromda.core.common.Introspector.instance().getProperty(this, NAME_PROPERTY));
        }
        catch (final Throwable throwable)
        {
            // - just ignore when the metafacade doesn't have a name property
        }
        toString.append("]");
        return toString.toString();
    }
}