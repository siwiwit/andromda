//
// Attention: generated code (by Metafacade.vsl) - do not modify!
//
#set ($packagename = $class.package.fullyQualifiedName)
package $packagename;

## calculate metaclass and superclass
#set ($decoratedMetaclass = $class.metaclass)
#set ($decoratedMetaclassTypeName = $decoratedMetaclass.fullyQualifiedName)
##
#set ($superclass = $class.superclass)
#if ($superclass)
    #set ($superclassName = "${superclass.fullyQualifiedName}Impl")
#else
    #set ($superclassName = $class.implSuperclassName)
#end
##
/**
$class.getDocumentation(" ")
 *
 * Metaclass decorator for $decoratedMetaclassTypeName
 *
 */
public abstract class $class.name
       extends    $superclassName
       implements $class.fullyQualifiedInterfaceName
{
    // -------- link to decorated metaobject ----------
    
    protected $decoratedMetaclassTypeName  metaObject;

    public ${class.name} ($decoratedMetaclassTypeName metaObject)
    {
        super (metaObject);
        this.metaObject = metaObject;
    }

##
    // --------------- attributes ---------------------
#foreach ( $att in $class.attributes )
#set ($atttypename = $att.type.fullyQualifiedName)

   /**
$att.getDocumentation("    ")
    *
    */
    public abstract $atttypename ${att.getterName}();
#end


    // ---------------- real business methods ----------------------

#foreach ( $op in $class.operations)
   /**
$op.getDocumentation("    ")
    *
    */
    $op.visibility abstract $op.type.fullyQualifiedName ${op.signature};
    
#end
    // ------------- relations ------------------
    
#foreach ( $assocEnd in $class.associationEnds )
#if ($assocEnd.otherEnd.navigable)
##
#set ($sourcetype = $assocEnd.type)
#set ($targettype = $assocEnd.otherEnd.type)
#if ($targettype.hasStereotype("Decorator"))
#set ($targettypename = $targettype.fullyQualifiedInterfaceName)
#else
#set ($targettypename = $targettype.fullyQualifiedName)
#end
##
#set ($trn = $assocEnd.otherEnd.name)
#set ($utrn = $str.upperCaseFirstLetter($trn))
##
#if ($assocEnd.one2Many || $assocEnd.many2Many)
#set ($returnType = "java.util.Collection")
## if the association end is 'ordered', then return a List
#if ($assocEnd.ordered)
#set ($returnType = "java.util.List")
#end
    protected abstract $returnType handleGet${utrn}();
    
   /**
$assocEnd.otherEnd.getDocumentation("    ")
##    * source navigable: $assocEnd.navigable
##    * target navigable: $assocEnd.otherEnd.navigable
    *
    */
    public java.util.Collection get${utrn}()
    {
        return decoratedElements(handleGet${utrn}());
    }
#end
#if ($assocEnd.one2One || $assocEnd.many2One)
    protected abstract org.omg.uml.foundation.core.ModelElement handleGet${utrn}();

   /**
$assocEnd.otherEnd.getDocumentation("    ")
##    * source navigable: $assocEnd.source.navigable
##    * target navigable: $assocEnd.otherEnd.navigable
    *
    */
    public ${targettypename} get${utrn}()
    {
        return (${targettypename}) decoratedElement(handleGet${utrn}());
    }
#end

    // ------------------------------------------------------------

#end
#end

}
