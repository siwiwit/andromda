#set ($packagename = $transform.findPackageName(${class.package}))
package $packagename;

#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end

#foreach ( $dep in $class.dependencies )
    #set ($class2 = $transform.findClassById($dep.targetType))
    #if ($transform.getStereotype($class2) == "metaclass")
        #set ($extendedMetaclass = $class2)
        #set ($extendedMetaclassTypeName = $transform.findFullyQualifiedName($extendedMetaclass))
    #end
#end

/**
#generateDocumentation ($class " ")
 *
 * Metaclass decorator for $extendedMetaclassTypeName
 *
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag != "documentation")
#if ($tgv.tag == "---")
    #set ($tag = "")
#else
    #set ($tag = $tgv.tag)
#end
 * $tag    $tgv.value
#end
#end
 *
 */
public abstract class ${class.name}
#if ($extendedMetaclassTypeName != "org.omg.uml.foundation.core.ModelElement")
       extends    ModelElementDecorator
#else
       extends    DecoratorBase
#end
       implements $extendedMetaclassTypeName
{
    // -------- link to decorated metaobject ----------
    
    private $extendedMetaclassTypeName  metaObject;

    public ${class.name} ($extendedMetaclassTypeName metaObject)
    {
        super (metaObject);
        this.metaObject = metaObject;
    }
    
    // --------------- taggedValues ---------------------
#foreach ( $att in $class.attributes )
#set ($atttypename = $transform.findFullyQualifiedName($att.type))

   /**
#generateDocumentation ($att "    ")
    *
    */
    public abstract $atttypename get${str.upperCaseFirstLetter(${att.name})}();
#end


    // ---------------- decorating methods ----------------------
    
#foreach ($dm in $transform.getMethods($extendedMetaclassTypeName))
    // from $dm.parentInterfaceName
    $dm.getDeclaration(true)
    {
#if ($dm.hasReturnType())
        return metaObject.${dm.getMethodCall()};
#else
        metaObject.${dm.getMethodCall()};
#end    
    }

#end
    // ---------------- real business methods ----------------------

#foreach ( $op in $class.operations)
   /**
#generateDocumentation ($op "    ")
    *
    */
#set ($msig = $transform.getOperationSignature($op))
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
    $op.visibility abstract $returntype ${msig};
    
#end
    // ------------- relations ------------------
    
#foreach ( $assoc in $class.associationLinks )
#set ($adata = $transform.getAssociationData($assoc))
#if ($adata.target.navigable == "true")
##
#set ($sourcetype = $adata.source.type)
#set ($targettype = $adata.target.type)
#set ($targettypename = $transform.findFullyQualifiedName($targettype))
##
#set ($trn = $adata.target.roleName)
#set ($utrn = $str.upperCaseFirstLetter($trn))
##
#if ($adata.isOne2Many() || $adata.isMany2Many())
    protected abstract java.util.Collection handleGet${utrn}();
    
   /**
#generateDocumentation ($adata.target.end "    ")
##    * multiplicity:     $adata.multiplicities
##    * source navigable: $adata.source.navigable
##    * target navigable: $adata.target.navigable
    *
    */
    public java.util.Collection get${utrn}()
    {
        return decoratedElements(handleGet${utrn}());
    }
#end
#if ($adata.isOne2One() || $adata.isMany2One())
    protected abstract ${targettypename} get${utrn}();

   /**
#generateDocumentation ($adata.target.end "    ")
##    * multiplicity:     $adata.multiplicities
##    * source navigable: $adata.source.navigable
##    * target navigable: $adata.target.navigable
    *
    */
    public ${targettypename} get${utrn}()
    {
        return (${targettypename}) decoratedElement(handleGet${utrn}());
    }
#end

    // ------------------------------------------------------------

#end
#end
}
