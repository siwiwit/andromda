#set ($generatedFile = $metafacade.getLogicImplFile($metamodelVersionPackage))
#set ($packageName = $metafacade.getLogicPackageName($metamodelVersionPackage))
#if ($packageName)
package $packageName;
#end

#if ($metafacade.metaclassDirectDependency)
#set ($shieldedMetaclassTypeName = $metafacade.metaclass.fullyQualifiedName)
#else
#set ($shieldedMetaclassTypeName = "Object")
#end

/**
 * MetafacadeLogic implementation for $metafacade.fullyQualifiedName.
 *
 * @see $metafacade.fullyQualifiedName
 */
public class ${metafacade.logicImplName}
       extends ${metafacade.name}Logic
       implements ${metafacade.fullyQualifiedName}
{
    // ---------------- constructor -------------------------------

    public ${metafacade.logicImplName} ($shieldedMetaclassTypeName metaObject, String context)
    {
        super (metaObject, context);
    }
#set ($attributes = $metafacade.attributes)
#if (!$attributes.empty)

    // --------------- attributes ---------------------
#foreach ( $attribute in $attributes )
#set ($methodName = $attribute.getterName)
#set ($handleMethodName = "handle$str.upperCaseFirstLetter($methodName)")
#set ($typedArgumentList = "")
#set ($returnTypeName = $attribute.type.fullyQualifiedName)

    public $returnTypeName ${handleMethodName}($typedArgumentList) {
        // TODO: put your implementation here.
#if ("void" != $returnTypeName)

        // Dummy return value, just that the file compiles
#if (!$atttribute.type.primitiveType)
        return null;
#elseif ("boolean" == $returnTypeName)
        return false;
#else
        return ($returnTypeName)0;
#end
#end
    }
#end
#end
##
#set ($ops = $metafacade.operations)
#if (!$ops.empty)
    // -------------------- business methods ----------------------
#foreach ( $op in $ops)
##
#set ($methodName = $op.name)
#set ($handleMethodName = "handle$str.upperCaseFirstLetter($methodName)")
#set ($typedArgumentList = $op.typedArgumentList)
##
#set ($msig = $op.signature)
#set ($returnTypeName = $op.returnType.fullyQualifiedName)
#if ($defaultException)
    $op.visibility $returnTypeName ${handleMethodName}($typedArgumentList)
        throws $defaultException.name {
#else
    /**
     * @see ${metafacade.fullyQualifiedName}#${op.name}(${op.argumentTypeNames})
     */
    $op.visibility $returnTypeName ${handleMethodName}($typedArgumentList) 
    {
#end
        // TODO: put your implementation here.
#if ("void" != $returnTypeName)

        // Dummy return value, just that the file compiles
#if (!$op.returnType.primitiveType)
        return null;
#elseif ("boolean" == $returnTypeName)
        return false;
#else
        return ($returnTypeName)0;
#end
#end
    }

#end
#end
##
#set ($assocEnds = $metafacade.associationEnds)
#if (!$assocEnds.empty)
    // ------------- relations ------------------

#foreach ( $assocEnd in $assocEnds )
#if ($assocEnd.otherEnd.navigable)
##
#set ($memberTypeName = $assocEnd.getterSetterTypeName)
#set ($methodName = "get$str.upperCaseFirstLetter($assocEnd.otherEnd.name)")
#set ($handleMethodName = "handle$str.upperCaseFirstLetter($methodName)")
#set ($typedArgumentList = "")
##
#set ($trn = $assocEnd.otherEnd.name)
#set ($utrn = $str.upperCaseFirstLetter($trn))
##
#if ($assocEnd.one2Many || $assocEnd.many2Many)
#set ($returnTypeName = $assocEnd.getterSetterTypeName)
#else
#set ($returnTypeName = "java.lang.Object")
#end
    public $returnTypeName ${handleMethodName}($typedArgumentList)
    {
        // TODO: add your implementation here!
        return null;
    }

#end
#end
#end
}
