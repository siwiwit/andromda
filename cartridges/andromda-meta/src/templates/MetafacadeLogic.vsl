//
// Attention: generated code (by MetafacadeLogic.vsl) - do not modify!
//
#set ($packagename = $class.package.fullyQualifiedName)
package $packagename;

import java.util.Map;
import java.util.HashMap;

## calculate metaclass and superclass
#if ($class.metaclassDirectDependency)
#set ($shieldedMetaclassTypeName = $class.metaclass.fullyQualifiedName)
#else
#set ($shieldedMetaclassTypeName = "java.lang.Object")
#end
##
#set ($superclass = $class.generalization)
##
/**
 * MetafacadeLogic for $class.fullyQualifiedInterfaceName
 *
 * @see $class.fullyQualifiedInterfaceName
 */
public abstract class ${class.name}Logic
       extends        org.andromda.core.metafacade.MetafacadeBase
       implements     $class.fullyQualifiedInterfaceName
{
    protected $shieldedMetaclassTypeName metaObject;
#if ($superclass)
    private $superclass.fullyQualifiedInterfaceName super_;
#end

    public ${class.name}Logic ($shieldedMetaclassTypeName metaObject, java.lang.String context) {
        super (metaObject, getContext(context));
#if ($superclass)
        this.super_ =
           (${superclass.fullyQualifiedInterfaceName})
            org.andromda.core.metafacade.MetafacadeFactory
                .getInstance()
                .createFacadeImpl(
                    "${superclass.fullyQualifiedInterfaceName}",
                    metaObject,
                    getContext(context));
#end
        this.metaObject = metaObject;
    }

    /**
     * Gets the context for this metafacade logic instance.
     */
    private static String getContext(String context) {
    	if (context == null) {
            context = "${class.fullyQualifiedInterfaceName}";
        }
        return context;
    }

##

#set ($atts = $class.attributes)
#if (!$atts.empty)
    // --------------- attributes ---------------------
#foreach ( $att in $atts )
##
#set ($memberTypeName = $att.type.fullyQualifiedName)
#set ($methodName = $att.getterName)
#set ($memberName = "${att.name}${velocityCount}a")## postfix with counter to avoid collisions with other members
#set ($handleMethodName = "handle$str.upperCaseFirstLetter($methodName)")
#set ($typedArgumentList = "")
#set ($handleMethodPreCondition = "${handleMethodName}${velocityCount}PreCondition()")
#set ($handleMethodPostCondition = "${handleMethodName}${velocityCount}PostCondition()")
##
   /**
	* @see ${memberTypeName}#${methodName}()
    */
    public abstract $memberTypeName ${handleMethodName}($typedArgumentList);

    private boolean ${memberName}Set = false;
    private $memberTypeName $memberName;

    private void $handleMethodPreCondition
    {
    }

    private void $handleMethodPostCondition
    {
    }

    public final $memberTypeName ${methodName}()
    {
        // if (${memberName}Set) return $memberName;
        ${handleMethodPreCondition};
        $memberName = ${handleMethodName}($typedArgumentList);
        ${handleMethodPostCondition};
        ${memberName}Set = true;
        return $memberName;
    }

#end
#end
#set ($ops = $class.operations)
#if (!$ops.empty)
    // ---------------- real business methods ----------------------

#foreach ( $op in $ops)
#set ($hasArguments = ($op.arguments.isEmpty()==false))
#set ($memberTypeName = $op.type.fullyQualifiedName)
#set ($methodName = $op.name)
#set ($memberName = "${methodName}${velocityCount}o")## postfix with counter to avoid collisions with other members
#set ($handleMethodName = "handle$str.upperCaseFirstLetter($methodName)")
#set ($typedArgumentList = $op.typedArgumentList)
#set ($handleMethodPreCondition = "${handleMethodName}${velocityCount}PreCondition()")
#set ($handleMethodPostCondition = "${handleMethodName}${velocityCount}PostCondition()")
#set ($innerClassKey = "$str.upperCaseFirstLetter(${memberName})Key")
#set ($innerClassValue = "$str.upperCaseFirstLetter(${memberName})Value")

    $op.visibility abstract $memberTypeName ${handleMethodName}($typedArgumentList);

#if ($op.hasReturnType())
#if ($hasArguments)
    private final Map $memberName = new HashMap(4);

    private class $innerClassKey
    {
#foreach ($param in $op.arguments)
        private $param.type.fullyQualifiedName $param.name;
#end

        public $innerClassKey($typedArgumentList)
        {
#foreach ($param in $op.arguments)
            this.$param.name = $param.name;
#end
        }

        public boolean equals(Object object)
        {
            if (object instanceof $innerClassKey)
            {
                $innerClassKey that = ($innerClassKey)object;
                return true
#foreach ($param in $op.arguments)
                    && (this.$param.name == that.$param.name)
#end
                    ;
            }
            else
            {
                return false;
            }
        }

        /**
         * @todo: implement hashCode()
         */
    }

    private class $innerClassValue
    {
        private $memberTypeName value;

        public $innerClassValue($memberTypeName value)
        {
            this.value = value;
        }

        public $memberTypeName getValue()
        {
            return this.value;
        }
    }

#else
    private boolean ${memberName}Set = false;
    private $memberTypeName $memberName;
#end
#end

    private void $handleMethodPreCondition
    {
    }

    private void $handleMethodPostCondition
    {
    }

    public final $memberTypeName ${methodName}($typedArgumentList)
    {
#if($op.hasReturnType())
#if ($hasArguments)
        final Object key = new $innerClassKey($op.argumentNames);
        if (${memberName}.containsKey(key))
            return (($innerClassValue)${memberName}.get(key)).getValue();
#else
        if (${memberName}Set) return $memberName;
#end
#end
        ${handleMethodPreCondition};
#if($op.hasReturnType())
#if ($hasArguments)
        ${memberName}.put(key, new $innerClassValue(${handleMethodName}($op.argumentNames)));
#else
        $memberName = ${handleMethodName}($op.argumentNames);
#end
#else
        ${handleMethodName}($op.argumentNames);
#end
        ${handleMethodPostCondition};
#if($op.hasReturnType())
#if ($hasArguments)
        return (($innerClassValue)${memberName}.get(key)).getValue();
#else
        ${memberName}Set = true;
        return $memberName;
#end
#end
    }

#end
#end
##
#set ($assocEnds = $class.associationEnds)
#if (!$assocEnds.empty)
    // ------------- relations ------------------

#foreach ( $assocEnd in $assocEnds )
#if ($assocEnd.otherEnd.navigable)
##
#set ($memberTypeName = $assocEnd.getterSetterTypeName)
#set ($methodName = "get$str.upperCaseFirstLetter($assocEnd.otherEnd.name)")
#set ($memberName = "${methodName}${velocityCount}r")## postfix with counter to avoid collisions with other members
#set ($handleMethodName = "handle$str.upperCaseFirstLetter($methodName)")
#set ($typedArgumentList = "")
#set ($handleMethodPreCondition = "${handleMethodName}${velocityCount}PreCondition()")
#set ($handleMethodPostCondition = "${handleMethodName}${velocityCount}PostCondition()")
##
    private boolean ${memberName}Set = false;
    private $memberTypeName $memberName;

    private void $handleMethodPreCondition
    {
    }

    private void $handleMethodPostCondition
    {
    }

#if ($assocEnd.one2Many || $assocEnd.many2Many)
    protected abstract java.util.Collection ${handleMethodName}($typedArgumentList);
#else
    protected abstract java.lang.Object ${handleMethodName}($typedArgumentList);
#end

    public final $memberTypeName ${methodName}()
    {
        // if (${memberName}Set) return $memberName;
        ${handleMethodPreCondition};
#if ($assocEnd.one2Many || $assocEnd.many2Many)
        $memberName = shieldedElements(${handleMethodName}($typedArgumentList));
#else
        $memberName = ($memberTypeName)shieldedElement(${handleMethodName}($typedArgumentList));
#end
        ${handleMethodPostCondition};
        ${memberName}Set = true;
        return $memberName;
    }

#end
#end
#end
##
#if ($superclass)
    // ----------- delegates to "superclass" ------------

#foreach ( $method in $superclass.getMethodDataForPSM(true) )
    // from ${method.interfaceName}
	${method.buildMethodDeclaration(true)} {
#if ($method.hasReturnType())
        return super_.${method.buildMethodCall()};
#else
        super_.${method.buildMethodCall()};
#end
	}
#end
#end
##
}
