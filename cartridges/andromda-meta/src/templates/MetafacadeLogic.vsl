//
// Attention: generated code (by MetafacadeLogic.vsl) - do not modify!
//
##
##  This macro will render the approriate java validation code
##
##      o   $modelElement: the element from which for are going to translate constraints
##      o   $constraintKind: "pre", "post", "inv", ...
##
#macro (renderTranslation $modelElement $constraintKind)
#foreach ($constraint in $modelElement.getConstraints($constraintKind))
#set ($constraintTranslation = $constraint.getTranslation("validation.Java"))
#set ($constraintDocumentation = $constraint.getDocumentation("",9999,false))
#if (!$constraintDocumentation || $constraintDocumentation.trim().length()==0)
#set ($constraintDocumentation = $constraintTranslation)
#end
        if (!$constraintTranslation)
            validationMessages.add(
                new org.andromda.core.metafacade.ModelValidationMessage(
                    this.getClass(),
                    this.getName(),
                    "$str.toSingleLine($constraintDocumentation)"));
#set ($constraintDocumentation = false)## reset to make sure we do not reuse the documentation of previous constraints
#end##foreach constraint
#set ($constraint = false)## reset to make sure we do not reuse the last constraint
#end##macro
##
##
##
#set ($generatedFile = $metafacade.getLogicFile($metamodelVersionPackage))
#set ($packageName = $metafacade.getLogicPackageName($metamodelVersionPackage))
#if ($packageName)
package $packageName;
#end

## calculate metaclass and superMetafacade
#if ($metafacade.metaclassDirectDependency)
#set ($shieldedMetaclassTypeName = $metafacade.metaclass.fullyQualifiedName)
#else
#set ($shieldedMetaclassTypeName = "Object")
#end
##
#set ($superMetafacade = $metafacade.generalization)
##
/**
 * MetafacadeLogic for $metafacade.fullyQualifiedName
 *
 * @see $metafacade.fullyQualifiedName
 */
public abstract class ${metafacade.logicName}
       extends        org.andromda.core.metafacade.MetafacadeBase
       implements     $metafacade.fullyQualifiedName
{
    protected $shieldedMetaclassTypeName metaObject;
#if ($superMetafacade)
    private $superMetafacade.fullyQualifiedName super_;
#end

    public $metafacade.logicName ($shieldedMetaclassTypeName metaObject, String context) {
        super (metaObject, getContext(context));
#if ($superMetafacade)
        this.super_ =
           (${superMetafacade.fullyQualifiedName})
            org.andromda.core.metafacade.MetafacadeFactory
                .getInstance()
                .createFacadeImpl(
                    "${superMetafacade.fullyQualifiedName}",
                    metaObject,
                    getContext(context));
#end
        this.metaObject = metaObject;
    }

    /**
     * Gets the context for this metafacade logic instance.
     */
    private static String getContext(String context) {
    	if (context == null) {
            context = "${metafacade.fullyQualifiedName}";
        }
        return context;
    }

##

#set ($atts = $metafacade.attributes)
#if (!$atts.empty)
    // --------------- attributes ---------------------
#foreach ( $att in $atts )
##
#set ($memberTypeName = $att.type.fullyQualifiedName)
#set ($methodName = $att.getterName)
#set ($memberName = "${att.name}${velocityCount}a")## postfix with counter to avoid collisions with other members
#set ($handleMethodName = "handle$str.upperCaseFirstLetter($methodName)")
#set ($typedArgumentList = "")
#set ($handleMethodPreCondition = "${handleMethodName}${velocityCount}PreCondition()")
#set ($handleMethodPostCondition = "${handleMethodName}${velocityCount}PostCondition()")
##
   /**
	* @see ${memberTypeName}#${methodName}()
    */
    public abstract $memberTypeName ${handleMethodName}($typedArgumentList);

    private boolean ${memberName}Set = false;
    private $memberTypeName $memberName;

    private void $handleMethodPreCondition
    {
#renderTranslation ($att "pre")
    }

    private void $handleMethodPostCondition
    {
#renderTranslation ($att "post")
    }

    public final $memberTypeName ${methodName}()
    {
        // if (${memberName}Set) return $memberName;
        ${handleMethodPreCondition};
        $memberName = ${handleMethodName}($typedArgumentList);
        ${handleMethodPostCondition};
        ${memberName}Set = true;
        return $memberName;
    }

#end
#end
#set ($ops = $metafacade.operations)
#if (!$ops.empty)
    // ---------------- real business methods ----------------------

#foreach ($op in $ops)
#set ($hasArguments = (!$op.arguments.empty))
#set ($memberTypeName = $op.returnType.fullyQualifiedName)
#set ($methodName = $op.name)
#set ($memberName = "${methodName}${velocityCount}o")## postfix with counter to avoid collisions with other members
#set ($handleMethodName = "handle$str.upperCaseFirstLetter($methodName)")
#set ($typedArgumentList = $op.typedArgumentList)
#set ($handleMethodPreCondition = "${handleMethodName}${velocityCount}PreCondition()")
#set ($handleMethodPostCondition = "${handleMethodName}${velocityCount}PostCondition()")
#set ($innerClassKey = "$str.upperCaseFirstLetter(${memberName})Key")
#set ($innerClassValue = "$str.upperCaseFirstLetter(${memberName})Value")

    $op.visibility abstract $memberTypeName ${handleMethodName}($typedArgumentList);

#if ($op.hasReturnType())
#if ($hasArguments)
    private final java.util.Map $memberName = new java.util.HashMap(4);

    private class $innerClassKey
    {
#foreach ($param in $op.arguments)
        private $param.type.fullyQualifiedName $param.name;
#end

        public $innerClassKey($typedArgumentList)
        {
#foreach ($param in $op.arguments)
            this.$param.name = $param.name;
#end
        }

        public boolean equals(Object object)
        {
            if (object instanceof $innerClassKey)
            {
                $innerClassKey that = ($innerClassKey)object;
                return true
#foreach ($param in $op.arguments)
#if ($param.type.isArrayType() || $param.type.isPrimitiveType())
                    && (this.$param.name == that.$param.name)
#else
                    && ( ((this.$param.name==null)&&(that.$param.name==null)) || ((this.$param.name!=null)&&(this.${param.name}.equals(that.$param.name))) )
#end
#end
                    ;
            }
            return false;
        }

        /**
         * @todo: implement hashCode()
         */
    }

    private class $innerClassValue
    {
        private $memberTypeName value;

        public $innerClassValue($memberTypeName value)
        {
            this.value = value;
        }

        public $memberTypeName getValue()
        {
            return this.value;
        }
    }

#else
    private boolean ${memberName}Set = false;
    private $memberTypeName $memberName;
#end
#end

    private void $handleMethodPreCondition
    {
#renderTranslation ($op "pre")
    }

    private void $handleMethodPostCondition
    {
#renderTranslation ($op "post")
    }

    public final $memberTypeName ${methodName}($typedArgumentList)
    {
#if($op.hasReturnType())
#if ($hasArguments)
        final Object key = new $innerClassKey($op.argumentNames);
        if (${memberName}.containsKey(key))
            return (($innerClassValue)${memberName}.get(key)).getValue();
#else
        if (${memberName}Set) return $memberName;
#end
#end
        ${handleMethodPreCondition};
#if($op.hasReturnType())
#if ($hasArguments)
        ${memberName}.put(key, new $innerClassValue(${handleMethodName}($op.argumentNames)));
#else
        $memberName = ${handleMethodName}($op.argumentNames);
#end
#else
        ${handleMethodName}($op.argumentNames);
#end
        ${handleMethodPostCondition};
#if($op.hasReturnType())
#if ($hasArguments)
        return (($innerClassValue)${memberName}.get(key)).getValue();
#else
        ${memberName}Set = true;
        return $memberName;
#end
#end
    }

#end
#end
##
#set ($assocEnds = $metafacade.associationEnds)
#if (!$assocEnds.empty)
    // ------------- relations ------------------

#foreach ( $assocEnd in $assocEnds )
#if ($assocEnd.otherEnd.navigable)
##
#set ($memberTypeName = $assocEnd.getterSetterTypeName)
#set ($methodName = "get$str.upperCaseFirstLetter($assocEnd.otherEnd.name)")
#set ($memberName = "${methodName}${velocityCount}r")## postfix with counter to avoid collisions with other members
#set ($handleMethodName = "handle$str.upperCaseFirstLetter($methodName)")
#set ($typedArgumentList = "")
#set ($handleMethodPreCondition = "${handleMethodName}${velocityCount}PreCondition()")
#set ($handleMethodPostCondition = "${handleMethodName}${velocityCount}PostCondition()")
##
    private boolean ${memberName}Set = false;
    private $memberTypeName $memberName;

    private void $handleMethodPreCondition
    {
#renderTranslation ($assocEnd "pre")
    }

    private void $handleMethodPostCondition
    {
#renderTranslation ($assocEnd "post")
    }

#if ($assocEnd.one2Many || $assocEnd.many2Many)
    protected abstract java.util.Collection ${handleMethodName}($typedArgumentList);
#else
    protected abstract java.lang.Object ${handleMethodName}($typedArgumentList);
#end

    public final $memberTypeName ${methodName}()
    {
        // if (${memberName}Set) return $memberName;
        ${handleMethodPreCondition};
#if ($assocEnd.one2Many || $assocEnd.many2Many)
        $memberName = shieldedElements(${handleMethodName}($typedArgumentList));
#else
        $memberName = ($memberTypeName)shieldedElement(${handleMethodName}($typedArgumentList));
#end
        ${handleMethodPostCondition};
        ${memberName}Set = true;
        return $memberName;
    }

#end
#end
#end
##
#if ($superMetafacade)
    // ----------- delegates to "superMetafacade" ------------
#foreach ( $method in $superMetafacade.getMethodDataForPSM(true) )
    // from ${method.metafacadeName}
	${method.buildMethodDeclaration(true)}
	{
#if ($method.hasReturnType())
        return super_.${method.buildMethodCall()};
#else
        super_.${method.buildMethodCall()};
#end
	}
#end

     /**
      * @see java.lang.Object#toString()
      */
    public String toString()
    {
        return super_.toString();
    }
#end
##

    /**
     * @see org.andromda.core.metafacades.MetafacadeBase#handleInvariants(java.util.Collection)
     */
    protected void handleInvariants(java.util.Collection validationMessages)
    {
#if ($superMetafacade)
        super_.validateInvariants(validationMessages);
#end
#renderTranslation ($metafacade "inv")
    }
}
