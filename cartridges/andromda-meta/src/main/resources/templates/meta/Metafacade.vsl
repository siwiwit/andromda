// license-header java merge-point
//
// Attention: generated code (by Metafacade.vsl) - do not modify!
//
#if ($stringUtils.isNotBlank($metafacade.packageName))
package $metafacade.packageName;
#set ($pkg = "${metafacade.packageName}.")
#else
#set ($pkg = "")
#end

#if ($metafacade.generalizations.empty)
import java.util.Collection;
import org.andromda.core.metafacade.ModelValidationMessage;

#end
/**
$metafacade.getDocumentation(" * ")
 *
 * Metafacade interface to be used by AndroMDA cartridges.
 */
public interface $metafacade.name
#if (!$metafacade.generalizations.empty)
    extends $metafacade.generalizationList.replace($pkg, "")
#end
{
    /**
     * Indicates the metafacade type (used for metafacade mappings).
     *
     * @return boolean always <code>true</code>
     */
    public boolean is${metafacade.name}MetaType();
#if ($metafacade.generalizations.empty)

    /**
     * Provides any required initialization of the metafacade.
     */
    void initialize();

    /**
     * Gets the metafacade that acts as the <code>owner</code> of this metafacade.
     * (for example: an operation is an owner of its parameters, etc). This is used
     * by AndroMDA's validation framework to provide more context as to where the
     * error has occurred.
     * @return Object the Validation Owner
     */
    public Object getValidationOwner();

    /**
     * Gets the name of the metafacade used within validation messages.  This provides
     * the full name of the metafacade.
     * @return String the Validation Name
     */
    public String getValidationName();

    /**
     * Performs validation of any invariants found on this model element
     * and stores the messages within the <code>validationMessages</code>
     * collection.
     *
     * @param validationMessages the collection of messages to which additional
     *        validation messages will be added if invariants are broken.
     */
    void validateInvariants(Collection<ModelValidationMessage> validationMessages);
#end
#foreach ($method in $metafacade.methodDataForPSM)

    /**
$method.documentation
#foreach ($argument in $method.arguments)
     * @param $argument.name $argument.fullyQualifiedTypeName
#end
#if (!$method.returnTypeName.equals("void"))
     * @return $method.returnTypeName
#end
#foreach ($exception in $method.exceptions)
     * @throws $exception.typeName
#end
     */
    ${method.buildMethodDeclaration(true)};
#end
}
