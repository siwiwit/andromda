##
## Package declaration and imports
##
package $class.packageName;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.ValidatorForm;

import javax.servlet.http.HttpServletRequest;

##
## Specific global constants
##
#set ($formName = $str.toJavaMethodName($class.formBeanName))
/**
$class.getDocumentation(" ")
 *
 * @struts.form
 *        name="$formName"
 */
public final class $class.name extends ValidatorForm
{
#foreach ($inputField in $class.inputFields)
    /**
$inputField.getDocumentation("     ")
     */
#if ($inputField.defaultValue)
    private $inputField.type.fullyQualifiedName $inputField.name = $inputField.defaultValue;
#else
    private $inputField.type.fullyQualifiedName $inputField.name;
#end
#if ($inputField.backingPropertyName)
    private java.util.Collection $inputField.backingPropertyName = null;
#end
#end

    private java.lang.String trigger = null;

    public void setTrigger(java.lang.String trigger)
    {
        this.trigger = trigger;
    }

    public java.lang.String getTrigger()
    {
        return trigger;
    }

#foreach ($inputField in $class.inputFields)
    /**
#if ($inputField.isRequired())
#set ($required = "required")
#else
#set ($required = "")
#end
#if ($inputField.maskPattern)
#set ($mask = "mask")
#else
#set ($mask = "")
#end
#if ($inputField.isRequired() && $inputField.maskPattern)
#set ($commaOne = ",")
#else
#set ($commaOne = "")
#end
     * @struts.validator
     *    type="$required$commaOne$mask"
     *
#if ($inputField.maskPattern)
     * @struts.validator-var
     *    name="$mask"
     *    value="$inputField.maskPattern"
     *
#end
     */
    public void ${inputField.setterName}($inputField.type.fullyQualifiedName $inputField.name)
    {
        this.$inputField.name = $inputField.name;
    }

    public $inputField.type.fullyQualifiedName ${inputField.getterName}()
    {
        return $inputField.name;
    }

#if ($inputField.backingPropertyName)
#set ($getterName = "get$str.upperCaseFirstLetter(${inputField.backingPropertyName})")
#set ($setterName = "set$str.upperCaseFirstLetter(${inputField.backingPropertyName})")
    public void ${setterName}(java.util.Collection ${inputField.backingPropertyName})
    {
        this.${inputField.backingPropertyName} = ${inputField.backingPropertyName};
    }

    public java.util.Collection ${getterName}()
    {
        return ${inputField.backingPropertyName};
    }

#end
#end
    public ActionErrors validate(ActionMapping mapping, HttpServletRequest request)
    {
        return null;
    }

    public void reset(ActionMapping mapping, HttpServletRequest request)
    {
#foreach ($inputField in $class.resetInputFields)
        this.$inputField.name = $inputField.name;
#end
    }
}
