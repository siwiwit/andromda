#parse("templates/StrutsAction.vm")
#set ($generatedFile = "${action.fullActionPath}.java")
##
##  CONSTANTS
##
#set ($controllerClass = $action.controller)
#set ($formBeanClassName = $action.activityGraph.useCase.formBeanClassName)
#set ($roles = $action.actionRoles)
#set ($actionForwards = $action.actionForwards)
#set ($actionExceptions = $action.actionExceptions)
#set ($actionStates = $action.actionStates)
#set ($decisionTransitions = $action.decisionTransitions)
#set ($security = ($security=="true") && ($roles != "") )
##
##  START TEMPLATE
##
package $action.packageName;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionForward;

import java.util.Set;
import java.util.Map;
import java.util.Iterator;
import java.util.LinkedHashMap;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

#if ($action.successMessagePresent)
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

#end
/**
$action.getDocumentation(" * ")
 *
 * @struts.action
 *        path="$action.actionPath"
 *        name="$action.actionName"
#if ($action.useCaseStart == false)
 *       input="${action.input.fullPath}.jsp"
#end
#set ($validationDesired = ($serverValidation == 'true'))
#if ($action.validationRequired && $validationDesired)
 *    validate="true"
#else
 *    validate="false"
#end
 *       scope="session"
 *     unknown="false"
#if ($security)
 *       roles="$roles"
#end
 *
#foreach ($actionForward in $actionForwards)
 * @struts.action-forward
 *        name="$actionForward.forwardName"
 *        path="$actionForward.forwardPath"
 *    redirect="false"
 *
#end
#foreach ($actionException in $action.actionExceptions)
 * @struts.action-exception
 *         key="${action.messageKey}.$actionException.exceptionKey"
 *        type="$actionException.exceptionType"
 *        path="$actionException.exceptionPath"
 *       scope="request"
 *
#end
#if ($action.actionExceptions.empty && !$action.useCaseStart)
 * @struts.action-exception
 *         key="${action.messageKey}.exception"
 *        type="java.lang.Exception"
 *        path="${action.input.fullPath}.jsp"
 *       scope="request"
 *
#end
 */
public final class $action.actionClassName extends Action
{
    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#if ($action.useCaseStart)
        /*
         * Since this action is the first one for this use-case, we need to clean the session-scoped
         * form from any stale data. It is not a good idea to keep data floating between use-cases.
         * If you really need to transfer data between use-cases you should use the
         * HttpServletRequest.setAttribute(String,Object) method for that.
         */
        (($formBeanClassName)form).clean();

#end
        final ActionForward forward = #processTransition($action)
#if ($action.successMessagePresent)

        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("$action.successMessageKey"));
        saveMessages(request, messages);
#end

        return forward;
    }

#foreach ($actionState in $actionStates)
    /**
$actionState.getDocumentation("     * ")
     */
    private ActionForward ${actionState.actionMethodName}(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#foreach ($controllerCall in $actionState.controllerCalls)
        ${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerCall.name}(mapping, ($formBeanClassName)form, request, response);
#end
        return #processTransition($actionState.forward)
    }

#end
#foreach ($decisionTransition in $decisionTransitions)
#set ($controllerMethodName = $decisionTransition.decisionTrigger.controllerCall.name)
#set ($decisionMethodName = $controllerMethodName)
    /**
$decisionTransition.getDocumentation("     * ")
     */
    private ActionForward ${decisionMethodName}(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final String value = String.valueOf(${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerMethodName}(mapping, ($formBeanClassName)form, request, response));

#set ($defaultOutcome = false)## keeps track of the last transition
#foreach ($outcome in $decisionTransition.target.outgoing)
#set ($defaultOutcome = $outcome)
        if (value.equals("$outcome.guardName")) return #processTransition($outcome)
#end

        // we take the last action in case we have an invalid return value from the controller
        return #processTransition($defaultOutcome)
    }

#end
}
