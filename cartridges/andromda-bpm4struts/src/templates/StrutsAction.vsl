##
## Set global invariants
##
#set ($stateMachine = $transform.getStateMachine($class))
#set ($controllerClassName = $transform.toJavaClassName($transform.getControllerClass($class)))
#set ($controllerFormName = $transform.toJavaClassName($transform.getControllerForm($class)))
#if ($controllerFormName == false)
#set ($controllerFormName = "ActionForm")
#end
#set ($className = "${controllerClassName}")
#set ($parentClassName = "${controllerClassName}Abstract")
##
## Package declaration and imports
##
package $transform.getPackageName($class);

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

##
## This macro will render documentation into HTML paragraphs
##
#macro ( generateDocumentation $item $indent )
#set ($tagValue = $transform.staticHelper.findTagValue( $item, "documentation"))
#set ($paras = $transform.formatHTMLStringAsParagraphs($tagValue))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
##
## Set collections from which methods will be rendered, we convert them to sets
## because we don't want to render doubles (just to make sure)
##
#set ($guardNames = $transform.toSet($transform.getGuardNames($stateMachine)))
#set ($objectFlowStates = $transform.toSet($transform.dynamicHelper.getObjectFlowStates($stateMachine)))
#set ($actionStates = $transform.toSet($transform.dynamicHelper.getActionStates($stateMachine)))
/**
#generateDocumentation ( $class " " )
 */
##
## Start of the class declaration, notice how it extends the parent
##
public class $className extends $parentClassName
{
#foreach ($guardName in $guardNames)
    protected final boolean ${guardName}Impl(ActionMapping mapping, $controllerFormName form, HttpServletRequest request, HttpServletResponse response)
    {
        // todo: implement this guard
        return false;
    }

#end
##
## Each object flow state needs to reflect the change in the 'back-end', the user will need to code this
## manually
##
#foreach ($objectFlowState in $objectFlowStates)
#set ($objectFlowTypeName = $transform.toJavaClassName($objectFlowState))
#set ($objectFlowStateState = $transform.getObjectFlowStateState($objectFlowState))
#set ($methodName = "set$objectFlowTypeName$transform.toJavaClassName($objectFlowStateState)")
   /**
    * This method changes the state of the object with name '$objectFlowState.name' to '$objectFlowStateState.name'. The
    * type of this object is <code>'$transform.toFullyQualifiedJavaClassName($objectFlowState.type)'</code>.
    * <p>
    * Values are transferred from and to the form.
#generateDocumentation ( $objectFlowState "    " )
    */
   protected final void ${methodName}Impl(ActionMapping mapping, $controllerFormName form, HttpServletRequest request, HttpServletResponse response) throws Exception
   {
//      $objectFlowTypeName $transform.toJavaMethodName($objectFlowState) = null;
   }

#end
}