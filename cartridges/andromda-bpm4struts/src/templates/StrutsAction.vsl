#parse("templates/StrutsAction.vm")
#set ($generatedFile = "${action.fullActionPath}.java")
##
##  CONSTANTS
##
#set ($controllerClass = $action.controller)
#set ($formBeanClassName = $action.formBeanClassName)
#set ($roles = $action.actionRoles)
#set ($resettableActionParameters = $action.resettableActionParameters)
#set ($actionForwards = $action.actionForwards)
#set ($actionExceptions = $action.actionExceptions)
#set ($actionStates = $action.actionStates)
#set ($decisionTransitions = $action.decisionTransitions)
#set ($security = ($security=="true") && ($roles != "") )
##
##  MACROS
##
#macro (saveMessages $transition $indent)
#if ($transition.successMessagesPresent)
#foreach ($message in $transition.successMessages.entrySet())
${indent}${controllerClass.name}Factory.get${controllerClass.name}Instance().saveSuccessMessage(request, "$message.key");
#end
#end
#if ($transition.warningMessagesPresent)
#foreach ($message in $transition.warningMessages.entrySet())
${indent}${controllerClass.name}Factory.get${controllerClass.name}Instance().saveWarningMessage(request, "$message.key");
#end
#end
#end
##
##  START TEMPLATE
##
package $action.packageName;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionForward;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
$action.getDocumentation(" * ")
 */
public final class $action.actionClassName extends Action
{
    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        request.getSession().setAttribute("form", form);
        final ActionForward forward = #processTransition($action)
#saveMessages($action "        ")
#if ($resettableActionParameters.empty == false)

        final org.apache.struts.action.ActionMessages errors = this.getExceptionHandlerErrors(request);
        if (errors.isEmpty())
        {
            $formBeanClassName specificForm = ($formBeanClassName)form;
#foreach ($field in $resettableActionParameters)
            specificForm.${field.resetName}();
#end
        }
#end
        return forward;
    }

#foreach ($actionState in $actionStates)
    /**
$actionState.getDocumentation("     * ")
     */
    private ActionForward ${actionState.actionMethodName}(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#set ($controllerCalls = $actionState.controllerCalls)
        ActionForward forward = null;
#if ($controllerCalls.empty)
#saveMessages($actionState.forward "        ")
        forward = #processTransition($actionState.forward)
#else

        final org.apache.struts.action.ActionMessages errors = this.getExceptionHandlerErrors(request);
        try
        {
#foreach ($controllerCall in $controllerCalls)
            ${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerCall.name}(mapping, ($formBeanClassName)form, request, response);
#end
        }
        catch (Exception ex)
        {
            final String messageKey = ${exceptionHandlerPackage}.PatternMatchingExceptionHandler.instance().handleException(ex);
            errors.add(org.apache.struts.action.ActionMessages.GLOBAL_MESSAGE, new org.apache.struts.action.ActionMessage(messageKey));
        }
        finally
        {
#saveMessages($actionState.forward "            ")
            forward = #processTransition($actionState.forward)
        }
        if (!errors.isEmpty())
        {
            forward = mapping.getInputForward();
        }
#end
        return forward;
    }

#end
#foreach ($decisionTransition in $decisionTransitions)
#set ($controllerMethodName = $decisionTransition.decisionTrigger.controllerCall.name)
#set ($decisionMethodName = $controllerMethodName)
    /**
$decisionTransition.getDocumentation("     * ")
     */
    private ActionForward ${decisionMethodName}(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final String value = String.valueOf(${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerMethodName}(mapping, ($formBeanClassName)form, request, response));

#set ($defaultOutcome = false)## keeps track of the last transition
#foreach ($outcome in $decisionTransition.target.outgoing)
#set ($defaultOutcome = $outcome)
        if (value.equals("$outcome.guardName"))
        {
#saveMessages($outcome "            ")
            return #processTransition($outcome)
        }
#end

        // we take the last action in case we have an invalid return value from the controller
        return #processTransition($defaultOutcome)
    }

#end

    /**
     * <p>
     *  Retrieves the exception handler messages (if any).  Creates a new
     *  ActionMessages instance and returns that if one doesn't already exist.
     * </p>
     */
    private org.apache.struts.action.ActionMessages getExceptionHandlerErrors(HttpServletRequest request)
    {
        org.apache.struts.action.ActionMessages errors = 
            (org.apache.struts.action.ActionMessages)request.getAttribute(
                "$exceptionHandlerMessagesKey");
        if (errors == null)
        {
            errors = new org.apache.struts.action.ActionMessages();
            request.setAttribute("$exceptionHandlerMessagesKey", errors);
        }
        return errors;
    }
}
