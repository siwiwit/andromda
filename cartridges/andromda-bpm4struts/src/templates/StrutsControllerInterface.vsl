#set ($generatedFile = "${controller.fullPath}Interface.java")
##
##  CONSTANTS
##
#set ($useCase = $controller.useCase)
#set ($formBeanClassName = $useCase.formBeanClassName)
#set ($sessionObjects = $controller.sessionObjects)
##
##  START TEMPLATE
##
package $controller.packageName;

import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
#if (!$sessionObjects.empty)
import javax.servlet.http.HttpSession;
#end

/**
$controller.getDocumentation(" * ")
 *
#foreach ($service in $controller.services)
#set ($serviceName = $service.name)
#set ($packageName = $service.packageName)
#set ($ejbRefName = "ejb/${packageName}/${serviceName}")
 * @web.ejb-ref
 *           name="${serviceName}Ref"
 *           type="Session"
 *           home="${packageName}.${serviceName}Home"
 *         remote="${packageName}.${serviceName}"
 *           link="${serviceName}"
 *
 * @jboss.ejb-ref-jndi
 *      ref-name="${serviceName}Ref"
 *     jndi-name="${ejbRefName}/Remote"
 *
#end
 */
public abstract class ${controller.name}Interface
{
#foreach ($operation in $controller.operations)
#set ($parameters = $operation.arguments)
#set ($visibility = $operation.visibility)
#set ($returnType = $operation.returnType.fullyQualifiedName)
#if (!$returnType)
#set ($returnType = "void")
#end
    /**
$operation.getDocumentation("     * ")
#if ($parameters.size() == 0)
     * <p/>
     * This method does not receive any parameters through the form bean.
#elseif ($parameters.size() == 1)
#set ($parameter = $parameters.iterator().next())
     * <p/>
     * This method receives the "$parameter.name" parameter,
     * it is of type <code>$parameter.type.name</code> and is available
     * through the argument form bean.
#else
     * <p/>
     * This method receives the following parameters; they are all available
     * through the argument form bean.
     * <p/>
     * <table cellpadding="3" rules="all">
     *    <tr>
     *       <th>Parameter Name</th>
     *       <th>Parameter Type</th>
     *    </tr>
#foreach ($parameter in $parameters)
     *    <tr>
     *       <td>$parameter.name</td>
     *       <td>$parameter.type.name</td>
     *    </tr>
#end
     * </table>
#end
     */
    $visibility abstract $returnType ${operation.name}(ActionMapping mapping, $formBeanClassName form, HttpServletRequest request, HttpServletResponse response) throws Exception;

#set ($returnType = false)
#end
#foreach ($sessionObject in $sessionObjects)
#set ($accessorSuffix = $str.upperCaseFirstLetter($sessionObject.name))
    protected final $sessionObject.fullyQualifiedName get${accessorSuffix}(HttpServletRequest request)
    {
        $sessionObject.fullyQualifiedName object = null;
        HttpSession session = request.getSession();
        if (session != null)
        {
            Object attribute = session.getAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);
            if (attribute instanceof $sessionObject.fullyQualifiedName)
            {
                object = ($sessionObject.fullyQualifiedName)attribute;
            }
        }
        return object;
    }

    protected final void set${accessorSuffix}(HttpServletRequest request, $sessionObject.fullyQualifiedName object)
    {
        HttpSession session = request.getSession();
        if (session != null)
        {
            session.setAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY, object);
        }
    }

#end
}

