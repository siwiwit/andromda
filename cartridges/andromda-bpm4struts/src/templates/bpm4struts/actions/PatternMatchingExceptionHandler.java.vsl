//
// Attention: Generated code! Do not modify by hand!
// Generated by: StrutsPatternMatchingExceptionHandler.vsl in andromda-bpm4struts-cartridge.
//
#set ($className = "PatternMatchingExceptionHandler")
#set ($generatedFile = "$stringUtils.replace($exceptionHandlerPackage, '.', '/')/${className}.java")
package $exceptionHandlerPackage;

/**
 * <p>
 *  A configurable pattern matching error handler retrieves exception mapping
 *  keys from an exception, and re-throws the exception if a pattern can not be
 *  retrieved.  This is used to retrieve keys from the back-end exceptions
 *  which can be mapped to exception messages keyed in an application resource
 *  file.
 * </p>
 */
public class $className
    implements java.io.Serializable
{
    private static final $className instance = new PatternMatchingExceptionHandler();

    private static final java.util.regex.Pattern compiledPattern = java.util.regex.Pattern.compile("$exceptionHandlerPattern");

    /**
     * Gets the shared PatternMatchingExceptionHandler instance.
     *
     * @return the shared instance
     */
    public static PatternMatchingExceptionHandler instance()
    {
        return instance;
    }

    /**
     * Handles Exceptions by retrieving the message and attempting to extract
     * the specified pattern defined within this class. If a string can not be
     * found matching the pattern, the exception is re-thrown
     *
     * @param exception the Exception containing the message to retrieve
     * @return the retrieved string matching the pattern.
     */
    public String handleException(Exception exception) throws Exception
    {
        final java.lang.Throwable cause =  this.findRootCause(exception);
        String matched = null;
        if (cause != null && cause.getMessage() != null)
        {
            final java.util.regex.Matcher matcher = compiledPattern.matcher(cause.getMessage().replaceAll("[\\s]+", " "));
            try
            {
                if (matcher.matches())
                {
                    matched = matcher.group(3);
                }
            }
            catch (java.lang.IllegalStateException ex)
            {
                // no match was found ignore
            }
            if (matched != null)
            {
                return matched;
            }
        }
        if (cause instanceof java.lang.Exception)
        {
            throw (java.lang.Exception)cause;
        }
        throw new java.lang.Exception(cause);
    }

    /**
     * Finds the root cause of the parent exception
     * by traveling up the exception tree
     */
    private java.lang.Throwable findRootCause(Throwable th)
    {
        if (th != null)
        {
            // Reflectively get any exception causes.
            try
            {
                java.lang.Throwable targetException = null;
                // java.lang.reflect.InvocationTargetException
                String exceptionProperty = "targetException";
                if (org.apache.commons.beanutils.PropertyUtils.isReadable(th, exceptionProperty))
                {
                    targetException = (java.lang.Throwable)org.apache.commons.beanutils.PropertyUtils.getProperty(th, exceptionProperty);
                }
                else
                {
                    exceptionProperty = "causedByException";
                    // javax.ejb.EJBException
                    if (org.apache.commons.beanutils.PropertyUtils.isReadable(th, exceptionProperty))
                    {
                        targetException = (java.lang.Throwable)org.apache.commons.beanutils.PropertyUtils.getProperty(th, exceptionProperty);
                    }
                }
                if (targetException != null)
                {
                    th = targetException;
                }
            }
            catch (java.lang.Exception ex)
            {
                // just print the exception and continue
                ex.printStackTrace();
            }

            if (th.getCause() != null)
            {
                th = th.getCause();
                th = findRootCause(th);
            }
        }
        return th;
    }
}