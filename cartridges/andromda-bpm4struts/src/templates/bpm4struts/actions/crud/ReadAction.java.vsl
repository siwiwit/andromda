#set ($generatedFile = "${manageable.readActionFullPath}.java")
##
##  START TEMPLATE
##
// license-header java merge-point
package $manageable.manageablePackageName;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionForward;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;

public final class $manageable.readActionClassName extends Action
{
    public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        request.setAttribute("manageableForm", actionForm);

        final $manageable.formBeanType form = ($manageable.formBeanType)actionForm;

        final java.util.List list = ${manageable.manageableServiceAccessorCall}.read(
#set ($comma = '')
#foreach ($member in $manageable.manageableMembers)
            ${comma}(StringUtils.isBlank(request.getParameter("$member.manageableName"))) ? null : form.${member.manageableGetterName}()
#set ($comma = ', ')
#end
        );
        form.${manageable.listSetterName}(list);

#if (!$manageable.manageableAssociationEnds.empty)
        final java.util.Map backingLists = ${manageable.manageableServiceAccessorCall}.readBackingLists();
#foreach ($member in $manageable.manageableAssociationEnds)
        form.${member.manageableSetterName}BackingList((java.util.List)backingLists.get("$member.manageableName"));
#end

#end
        return mapping.getInputForward();
    }
}
