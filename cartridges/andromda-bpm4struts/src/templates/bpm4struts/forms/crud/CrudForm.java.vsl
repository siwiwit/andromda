#set ($generatedFile = "${manageable.formBeanFullPath}.java")
##
##  START TEMPLATE
##
// license-header java merge-point
package $manageable.manageablePackageName;

public class $manageable.formBeanClassName
    extends org.apache.struts.validator.ValidatorForm
    implements java.io.Serializable
{
    public String getCurrentEntity()
    {
        return "$manageable.name";
    }

    private java.util.List $manageable.listName = null;

    public java.util.List ${manageable.listGetterName}()
    {
        return this.$manageable.listName;
    }

    public void ${manageable.listSetterName}(java.util.List $manageable.listName)
    {
        this.$manageable.listName = $manageable.listName;
    }

#foreach ($member in $manageable.attributes)
    private $member.type.fullyQualifiedName $member.manageableName;

    $member.visibility $member.type.fullyQualifiedName ${member.manageableGetterName}()
    {
        return this.$member.manageableName;
    }

    $member.visibility void ${member.manageableSetterName}($member.type.fullyQualifiedName $member.manageableName)
    {
        this.$member.manageableName = $member.manageableName;
    }

#end
#foreach ($member in $manageable.manageableAssociationEnds)
#set ($identifier = $member.type.manageableIdentifier)
    private $member.manageableIdentifier.type.fullyQualifiedName $member.manageableName;

    $member.visibility $member.manageableIdentifier.type.fullyQualifiedName ${member.manageableGetterName}()
    {
        return this.$member.manageableName;
    }

    $member.visibility void ${member.manageableSetterName}($member.manageableIdentifier.type.fullyQualifiedName $member.manageableName)
    {
        this.$member.manageableName = $member.manageableName;
    }

    private Object[] ${member.name}ValueList;

    $member.visibility Object[] ${member.getterName}ValueList()
    {
        return this.${member.name}ValueList;
    }

    $member.visibility void ${member.setterName}ValueList(Object[] ${member.name}ValueList)
    {
        this.${member.name}ValueList = ${member.name}ValueList;
    }

    private Object[] ${member.name}LabelList;

    $member.visibility Object[] ${member.getterName}LabelList()
    {
        return this.${member.name}LabelList;
    }

    $member.visibility void ${member.setterName}LabelList(Object[] ${member.name}LabelList)
    {
        this.${member.name}LabelList = ${member.name}LabelList;
    }

    public void ${member.setterName}BackingList(java.util.Collection items, String valueProperty, String labelProperty)
    {
        if (valueProperty == null || labelProperty == null)
        {
            throw new IllegalArgumentException("${manageable.formBeanClassName}.${member.setterName}BackingList requires non-null property arguments");
        }

        this.${member.name}ValueList = null;
        this.${member.name}LabelList = null;

        if (items != null)
        {
            this.${member.name}ValueList = new Object[items.size()];
            this.${member.name}LabelList = new Object[items.size()];

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final Object item = iterator.next();

                    this.${member.name}ValueList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.${member.name}LabelList[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                }
            }
            catch (Exception ex)
            {
                throw new IllegalArgumentException("${manageable.formBeanClassName}.${member.setterName}BackingList encountered an exception", ex);
            }
        }
    }

    public Object[] ${member.getterName}BackingList()
    {
        this.${member.name}ValueList = null;
        this.${member.name}LabelList = null;

        if (this.${member.name}ValueList == null || this.${member.name}ValueList.length == 0)
        {
            return this.${member.name}ValueList;
        }

        if (this.${member.name}LabelList == null || this.${member.name}LabelList.length == 0)
        {
            this.${member.name}LabelList = this.${member.name}ValueList;
        }

        final int length = Math.min(this.${member.name}LabelList.length, this.${member.name}ValueList.length);
        Object[] backingList = new Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new ValueLabel(this.${member.name}LabelList[i], this.${member.name}ValueList[i]);
        }

        return backingList;
    }

#end
    public final class ValueLabel
    {
        private Object value = null;
        private Object label = null;

        public ValueLabel(Object value, Object label)
        {
            this.value = value;
            this.label = label;
        }

        public Object getValue()
        {
            return this.value;
        }

        public Object getLabel()
        {
            return this.label;
        }

        public void setValue(Object value)
        {
            this.value = value;
        }

        public void setLabel(Object label)
        {
            this.label = label;
        }
    }

// @todo: reset
// @todo: validate
// @todo: toString
}