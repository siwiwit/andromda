<?xml version="1.0" encoding="UTF-8"?>

<document>
    <properties>
        <title>Bpm4Struts Cartridge Modeling</title>
    </properties>
    <body>
        <section name="Bpm4Struts Cartridge Modeling">
            <p>
    			The page describes the modeling standards one must follow to in order
    			to use the Bpm4Struts Cartridge.
            </p>
            <p>
                Most of the model elements will require a stereotype to be processed correctly, below you will find
                a table indicating on which model element you may put what stereotype, it will also
                denote which effect this has on the generation process.
            </p>
            <subsection name="Supported Stereotypes">
                <table>
                    <tr>
                        <th>Stereotype</th>
                        <th>Model element</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>FrontEndController</td>
                        <td>Class</td>
                        <td>Assigns to class to be responsible of handling the business logic, it is called by the actions.</td>
                    </tr>
                    <tr>
                        <td>FrontEndApplication</td>
                        <td>UseCase</td>
                        <td>This use-case is the application's starting point, you will also need the FrontEndUseCase here</td>
                    </tr>
                    <tr>
                        <td>FrontEndUseCase</td>
                        <td>UseCase</td>
                        <td>A use-case that participates in the front-end processes</td>
                    </tr>
                    <tr>
                        <td>FrontEndUser</td>
                        <td>Actor</td>
                        <td>A user that is granted access to the associated use-cases</td>
                    </tr>
                    <tr>
                        <td>FrontEndView</td>
                        <td>Action State</td>
                        <td>Designates a JSP page</td>
                    </tr>
                    <tr>
                        <td>FrontEndEvent</td>
                        <td>Transition</td>
                        <td>Designates an action that may occur on a JSP page, must go out of an initial state or a JSP page</td>
                    </tr>
                    <tr>
                        <td>FrontEndException</td>
                        <td>Transition</td>
                        <td>Designates an exception occuring while processing an action, goes out of an action state and into a JSP page</td>
                    </tr>
                </table>
            </subsection>

            <subsection name="Supported Tagged Values">
                <p class="std">
                    Sometimes it happens you want to add information to the model but there is no clean way of doing it.
                    In those cases you may want to resort to tagged values, but these cases should be considered with
                    caution. A tagged value is something extra, something optional, and the application should
                    run fine without them.
                </p>
                <p class="std">
                    Bpm4struts allows you to add tagged values here and there but provides a default value
                    in case they are missing.
                </p>
                <p class="std">
                    What follows is a table indicating on which model element the tagged value applies
                    and a description of the meaning.
                </p>
                <p class="std">
                    <table cellpadding="5" rules="all">
                        <tr>
                            <th>Tagged value</th>
                            <th>Model element</th>
                            <th>Default value</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>@andromda.struts.action.type (*)</td>
                            <td>Transition w/ FrontEndEvent</td>
                            <td>form</td>
                            <td>Indicates the type of trigger causing the action, possible values are hyperlink and form</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.type</td>
                            <td>Parameter</td>
                            <td>text</td>
                            <td>Indicates the type of parameter, this information will be used when rendering the pages, possible values are: text, textarea, checkbox, radio, select, password and hidden. One of the tables below give some more information</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.required</td>
                            <td>Parameter</td>
                            <td>true</td>
                            <td>Denotes whether or not this is a required field. If a field is required its type will always be checked (you cannot enter a String value when an int is expected)</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.format (**)</td>
                            <td>Parameter</td>
                            <td>N/A</td>
                            <td>The format of this field's value</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.validwhen</td>
                            <td>Parameter</td>
                            <td>N/A</td>
                            <td>Additional validation to be performed</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.readonly</td>
                            <td>Parameter</td>
                            <td>false</td>
                            <td>Indicated the parameter is read only, it's value cannot be entered by the user</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.exception.type</td>
                            <td>Transition w/ FrontEndException</td>
                            <td>java.lang.Exception</td>
                            <td>Indicates which exception this handler takes care of</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.controller.usecase</td>
                            <td>A class with the &lt;&lt;FrontEndController&gt;&gt; stereotype</td>
                            <td>N/A</td>
                            <td>The value should correspond to the use-case holding the activity graph
                                which has this controller as its context. This is used when deferring operations to
                                the controller. Please note that if your CASE tool supports setting the context of an
                                activity graph you will not need to explicitely set this tagged value. This feature
                                has been provided to support tool such as Poseidon that have only limited UML support.
                                If you are a MagicDraw user you will not need to use this tagged value, instead
                                assign the controller by right clicking on it and selecting "Assign...".
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.usecase.activity</td>
                            <td>A use-case with the &lt;&lt;FrontEndUseCase&gt;&gt; stereotype</td>
                            <td>N/A</td>
                            <td>For tools that do not allow the placement of activity graphs inside of a use-case
                                you can use this tagged value to point to an activity graph, this will link them and
                                denotes that the graphs specifies this use-case.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.table.columns</td>
                            <td>A signal trigger parameter on a transition incoming to a FrontEndView action state,
                                the type of the parameter must either be an array or a java.util.Collection
                                implementation</td>
                            <td>N/A</td>
                            <td>The collection will be displayed in tabular format using the
                                <a href="http://www.displaytag.org">&lt;display:*&gt;</a>
                                tag-library. Each column in this table will be mapped to a property of the object
                                type contained in the collection. So you will need to make sure all objects
                                have accessor methods for the property you list in this tagged value.
                                Properties are separated using a comma ','.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.table.maxrows</td>
                            <td>Same as @andromda.struts.view.table.columns</td>
                            <td>15</td>
                            <td>This value represents the maximum number of entries shown at the same time,
                                also known as the 'page size'. If the number of entries is a number greater
                                than this value then a list of pages will be displayed to jump to the other values.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.table.sortable</td>
                            <td>Same as @andromda.struts.view.table.columns</td>
                            <td>true</td>
                            <td>Indicates whether or not it should be possible to sort the columns by clicking
                                on the header.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.table.export</td>
                            <td>Same as @andromda.struts.view.table.columns</td>
                            <td>true</td>
                            <td>Denotes the different formats into which it should be possible to export the list
                                The value may contain the following
                                strings: "all", "csv", "html", "xml" and "excel". In case of absence "all" will
                                be the default. If you don't want to make use of the export feature then simply
                                leaving this value blank is sufficient.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.action.tabindex</td>
                            <td>Action Transition</td>
                            <td>N/A</td>
                            <td>Denotes the tab index of the specific action. Must be a non-negative integer.</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.tabindex</td>
                            <td>Action parameter</td>
                            <td>N/A</td>
                            <td>Denotes the tab index of the specific action-parameter.
                                Must be a non-negative integer. This feature allows splitting a form
                                over several different tabs.</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.tablelink</td>
                            <td>Action parameter (so on a FrontEndEvent transition)</td>
                            <td>N/A</td>
                            <td>The value is of the format
                                <code>table.column</code>
                                where
                                <code>table</code> denotes a parameter coming into
                                the page of type Collection (and containing a tagged value
                                to indicate it is to be displayed as a table); the
                                <code>column</code> part is used to indicate which column of
                                the corresponding table is to be used for linking.
                                The result will be that the specified table column will contain
                                a hyperlink reference to the action on which this parameter
                                resides, this is useful to eg. display a list of persons and view
                                their details by simply clicking on their names in the table.
                                The column name is optional, if you do not specify it the name
                                of the parameter will be assumed.
                            </td>
                        </tr>
                    </table>
                </p>
                <p class="std">
                    (*) See below for the difference between both action types
                    <br/>
                    (**) For information on how to specify field validation formats see the table below.
                </p>
                <p class="std">
                    <table cellpadding="5" rules="all">
                        <tr>
                            <th>Type</th>
                            <th>Value</th>
                            <th>Arguments</th>
                            <th>Example</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>int, float, double, java.lang.Integer, java.lang.Float, java.lang.Double</td>
                            <td>range</td>
                            <td>2 of this type</td>
                            <td>range 2 12</td>
                            <td>Specifies in which range the value of this attribute must fall</td>
                        </tr>
                        <tr>
                            <td>java.util.Date, java.sql.Date</td>
                            <td>N/A</td>
                            <td>[strict] (format)</td>
                            <td>strict dd/MM/yyyy </td>
                            <td>The format in which dates need to be specified (optionally strict) (*)</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>minlength</td>
                            <td>an integer value</td>
                            <td>minlength 4</td>
                            <td>Specifies the minimum number of characters</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>maxlength</td>
                            <td>an integer value</td>
                            <td>maxlength 4</td>
                            <td>Specifies the maximum number of characters</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>pattern</td>
                            <td>a regular expression</td>
                            <td>pattern [a-zA-Z]*</td>
                            <td>Validates format according to a regular expression (**), the leading
                                '^' and trailing '$' must not be specified</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>creditcard</td>
                            <td>N/A</td>
                            <td>creditcard</td>
                            <td>Validates the value to be a creditcard number, according to what is known as the Luhn check</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>email</td>
                            <td>N/A</td>
                            <td>email</td>
                            <td>Checks if the specified value is a possible email address, IP addresses are also taken into account</td>
                        </tr>
                        <tr>
                            <td>java.net.URL</td>
                            <td>url</td>
                            <td>N/A</td>
                            <td>url</td>
                            <td>Checks if the specified value is a possible URL</td>
                        </tr>
                    </table>
                </p>
                <p class="std">
                    (*) The format is specified by the java.text.SimpleDateFormat class from the Java 2 SDK, please
                    refer to the JavaDoc documentation of that class for more information, this format is case-sensitive
                    <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html">
                    SimpleDateFormat JavaDoc</a>
                    <br/>
                    (**) The pattern expression is a Perl regular expression as you would you use in Javascript,
                    by convention it requires the ^ and $ to denote respectively the beginning and ending of the pattern
                    <a href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/guide/regexp.html#1010689">
                    Netscape's guide to regular expressions in Javascript</a>
                </p>
            </subsection>
        </section>
    </body>
</document>
