#set($viewtype = $transform.findTagValue($class, "@andromda.ejb.viewType"))
#if(!($viewtype == "remote"))
/* Autogenerated by AndroMDA - do not edit */
## Include global definitions definitions. ##
#parse("templates/EJB.vm")
## Define project specific properties and macros ##
#macro(ejbRefName $class)ejb/${str.replace($transform.findPackageName(${class.package}), '.', '/')}/${class.name}#end
##
## Global macro definitions. Normally, these do not need to be changed ##
#macro ( firstJavadocParagraph $item $case $default)
#set ( $parIter = false )
#foreach ( $tgv in $item.taggedValues )
#if ( $tgv.tag == "documentation" && !$parIter)
#set ($parIter = $transform.formatHTMLStringAsParagraphs($tgv.value).iterator())
#end
#end
#set ($text = "")
#if ($parIter && $parIter.hasNext())
#foreach ($line in ${parIter.next().lines} )
#set ($text = "$text $line")
#end
#set ($text = ${text.trim()})
#end
#if ($text == "")
#set ($text = "$default")
#end
#if ($case == "upper")
$str.upperCaseFirstLetter($text)
#elseif ($case == "lower")
$str.lowerCaseFirstLetter($text)
#else
$text
#end
#end
##
#macro ( remainingJavadocParagraphs $item $indent)
#set ($skip = true)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
#if ($skip)
#set ($skip = false)
#else
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
#end
##
#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
##
#macro (copyTaggedValues $item $indent $exclude)
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag.startsWith("@") && ! $exclude.contains($tgv.tag))
${indent}* $tgv.tag $tgv.value
#end
#end
#end
##
#set ($parentClass = $transform.getGeneralization($class.id))
#if ($parentClass)
#set ($parentStereotype = $transform.getStereotype($myClass))
#if ( $parentStereotype == "Service")
## Extend the component interface of the super type if the super type 
## is a <<Service>>
#set ($parentInterface = "${transform.findFullyQualifiedName($parentClass)}LocalHome")
#end
#end
#if (!$parentInterface)
#set ($parentInterface = "javax.ejb.EJBLocalHome")
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Local home interface for #firstJavadocParagraph(${class} "lower" "the $servicename session bean.")
#remainingJavadocParagraphs($class " ")
 *
#copyTaggedValues($class " " [ "@andromda.ejb.viewType", "@andromda.ejb.transactionType" ])
 */
public interface ${servicename}LocalHome  extends $parentInterface {
    // -- accessors for environment entries and constants --
	public static final String COMP_NAME="java:comp/env/ejb/${servicename}Local";
	public static final String JNDI_NAME="ejb/$packagename/${servicename}/Local";

#foreach($att in $transform.getStaticAttributes($class))
#set ($visibility = $transform.getVisibility($att))
## Only expose the method to the home interface if it is public.
#if($visibility == "public")
#set($attType = $transform.getFullyQualifiedName($att.type))
#set($AttName = $str.upperCaseFirstLetter($att.name))

    /**
#if($transform.getStereotype($att) == "EnvEntry")
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} environment entry")
#else
#set ($ATT_NAME = $str.toDatabaseAttributeName($att.name, '_'))
     * Get #firstJavadocParagraph(${att} "lower" "the $ATT_NAME constant")
#end
#remainingJavadocParagraphs($att "     ")
     */
    public $attType get$AttName();
#end
#end
    // ---------------- home methods  ----------------------
#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) != "CreateMethod")
#set ($visibility = $transform.getVisibility($op))
## Only expose public static methods (public nonstatic methods go on the
## component interface)
#if ($visibility == "public" && $transform.isStatic($op)) 
#set ($msig = $transform.getOperationSignature($op))
   /**
#generateDocumentation ($op "    ")
    */
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#if ($defaultException)
    public $returntype ${msig} throws $defaultException.name;
#else
    $visibility $returntype ${msig};
#end
#end
#end
#end
## Only expose create methods on concrete EJBs.
#if (!$class.isAbstract())

    // ---------------- create methods --------------------
## Handle explicitly defined create methods.
#foreach ( $op in $transform.getAllCreateMethods($class.id))

    /**
#generateDocumentation ($op "    ")
     *
     */
    public ${servicename}Local create($transform.getOperationTypedParameterList($op))
           throws javax.ejb.CreateException;
#end
## Only expose the autogenerated create method with no arguments if it 
## is not explicitly switched off.
#if (!$transform.findTagValue($class, "@andromda.ejb.noSyntheticCreateMethod"))

    /**
     * Default create method.
     */
    public ${servicename}Local create() throws javax.ejb.CreateException;
#end
#end
}
#end