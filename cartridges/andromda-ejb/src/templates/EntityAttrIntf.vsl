/* Autogenerated by AndroMDA - do not edit */
## Include global definitions. ##
#parse("templates/EJBglobals.vm")
#set ($parentClass = $transform.getGeneralization($class.id))
#if ($parentClass)
#set ($parentStereotype = $transform.getStereotype($myClass))
#if ( $parentStereotype == "Entity")
## Extend the component interface of the super type if the super type 
## is an <<Entity>>
#set ($parentInterface = "${transform.findFullyQualifiedName($parentClass)}Attr")
#end
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Attributes interface for #firstJavadocParagraph(${class} "lower" "the $entityname entity bean.")
 * 
 * This is the common interface for both the 
 * {@linkplain $entityname component interface} and the 
 * {@linkplain ${entityname}Value value object} of this entity.
 */
public interface ${entityname}Attr#if ($parentInterface) extends $parentInterface#end
{
#foreach ( $att in $transform.getInstanceAttributes($class))
#set ($visibility = $transform.getVisibility($att))
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
#set($attType = $transform.getFullyQualifiedName($att.type))
#set($AttName = $str.upperCaseFirstLetter($att.name))
    /**
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
#remainingJavadocParagraphs($att "     ")
     */
    public $attType get$AttName();

#if(!$transform.isReadOnly($att))
    /**
     * Set #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
     * @param value the new value
     */
    public void set$AttName($attType value);
    
#end
#end
#end
}
