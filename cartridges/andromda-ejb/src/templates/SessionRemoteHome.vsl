#set($viewtype = $transform.findTagValue($class, "@andromda.ejb.viewType"))
#if(!($viewtype == "local"))
/* Autogenerated by AndroMDA - do not edit */
## Include global definitions definitions. ##
#parse("templates/EJB.vm")
## Define project specific properties and macros ##
#macro(ejbRefName $class)ejb/${str.replace($transform.findPackageName(${class.package}), '.', '/')}/${class.name}#end
##
## Global macro definitions. Normally, these do not need to be changed ##
#macro ( firstJavadocParagraph $item $case $default)
#set ( $parIter = false )
#foreach ( $tgv in $item.taggedValues )
#if ( $tgv.tag == "documentation" && !$parIter)
#set ($parIter = $transform.formatHTMLStringAsParagraphs($tgv.value).iterator())
#end
#end
#set ($text = "")
#if ($parIter && $parIter.hasNext())
#foreach ($line in ${parIter.next().lines} )
#set ($text = "$text $line")
#end
#set ($text = ${text.trim()})
#end
#if ($text == "")
#set ($text = "$default")
#end
#if ($case == "upper")
$str.upperCaseFirstLetter($text)
#elseif ($case == "lower")
$str.lowerCaseFirstLetter($text)
#else
$text
#end
#end
##
#macro ( remainingJavadocParagraphs $item $indent)
#set ($skip = true)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
#if ($skip)
#set ($skip = false)
#else
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
#end
##
#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
##
#macro (copyTaggedValues $item $indent $exclude)
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag.startsWith("@") && ! $exclude.contains($tgv.tag))
${indent}* $tgv.tag $tgv.value
#end
#end
#end
##
#set ($parentClass = $transform.getGeneralization($class.id))
#if ($parentClass)
#set ($parentStereotype = $transform.getStereotype($myClass))
#if ( $parentStereotype == "Service")
## Extend the component interface of the super type if the super type 
## is a <<Service>>
#set ($parentInterface = "${transform.findFullyQualifiedName($parentClass)}Home")
#end
#end
#if (!$parentInterface)
#set ($parentInterface = "javax.ejb.EJBHome")
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Remote home interface for #firstJavadocParagraph(${class} "lower" "the $servicename session bean.")
#remainingJavadocParagraphs($class " ")
 *
#copyTaggedValues($class " " [ "@andromda.ejb.viewType", "@andromda.ejb.transactionType" ])
 */
public interface ${servicename}Home  extends $parentInterface {
## Only expose create methods on concrete EJBs.
#if (!$class.isAbstract())

    // ---------------- create methods --------------------
## Handle explicitly defined create methods.
## Handle explicitly defined create methods.
#foreach ( $op in $transform.getAllCreateMethods($class.id))

    /**
#generateDocumentation ($op "    ")
     *
     */
    public ${servicename} create($transform.getOperationTypedParameterList($op))
           throws javax.ejb.CreateException, java.rmi.RemoteException;
#end
## Only expose the autogenerated create method with no arguments if it 
## is not explicitly switched off.
#if (!$transform.findTagValue($class, "@andromda.ejb.noSyntheticCreateMethod"))

    /**
     * Default create method.
     */
    public ${servicename} create() 
           throws javax.ejb.CreateException, java.rmi.RemoteException;
#end
#end
}
#end