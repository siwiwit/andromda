/* Autogenerated by AndroMDA - do not edit */
## Include global definitions definitions. ##
#parse("templates/EJB.vm")
## Global macro definitions. Normally, these do not need to be changed ##
#macro ( firstJavadocParagraph $item $case $default)
#set ( $parIter = false )
#foreach ( $tgv in $item.taggedValues )
#if ( $tgv.tag == "documentation" && !$parIter)
#set ($parIter = $transform.formatHTMLStringAsParagraphs($tgv.value).iterator())
#end
#end
#set ($text = "")
#if ($parIter && $parIter.hasNext())
#foreach ($line in ${parIter.next().lines} )
#set ($text = "$text $line")
#end
#set ($text = ${text.trim()})
#end
#if ($text == "")
#set ($text = "$default")
#end
#if ($case == "upper")
$str.upperCaseFirstLetter($text)
#elseif ($case == "lower")
$str.lowerCaseFirstLetter($text)
#else
$text
#end
#end
##
#macro ( remainingJavadocParagraphs $item $indent)
#set ($skip = true)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
#if ($skip)
#set ($skip = false)
#else
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
#end
##
#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
##
#macro (copyTaggedValues $item $indent $exclude)
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag.startsWith("@") && ! $exclude.contains($tgv.tag))
${indent}* $tgv.tag $tgv.value
#end
#end
#end
#set ($parentClass = $transform.getGeneralization($class.id))
#if ($parentClass)
#set ($parentStereotype = $transform.getStereotype($myClass))
#if ( $parentStereotype == "Entity")
## Extend the component interface of the super type if the super type 
## is an <<Entity>>
#set ($parentInterface = "${transform.findFullyQualifiedName($parentClass)}")
#end
#end
#if (!$parentInterface)
#set ($parentInterface = "javax.ejb.EJBLocalObject")
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Local component interface for #firstJavadocParagraph(${class} "lower" "the $entityname entity bean.")
#remainingJavadocParagraphs($class " ")
 *
#copyTaggedValues($class " " [ "@andromda.ejb.viewType", "@andromda.ejb.transactionType", "@andromda.ejb.noSyntheticCreateMethod" ])
 *
 */
public interface ${entityname} 
extends $parentInterface, 
        ${entityname}Attr#foreach($intf in $transform.getAbstractions($class.id)),
        $transform.findFullyQualifiedName($intf)#end

{

    // -- accessors for environment entries and constants --
#foreach($att in $transform.getStaticAttributes($class))
#set ($visibility = $transform.getVisibility($att))
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
#set($attType = $transform.getFullyQualifiedName($att.type))
#set($AttName = $str.upperCaseFirstLetter($att.name))
    /**
#if($transform.getStereotype($att) == "EnvEntry")
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} environment entry")
#else
#set ($ATT_NAME = $str.toDatabaseAttributeName($att.name, '_'))
     * Get #firstJavadocParagraph(${att} "lower" "the $ATT_NAME constant")
#end
#remainingJavadocParagraphs($att "     ")
     */
    public $attType get$AttName();
    
#end
#end

## Attributes are already defined by the ${entityname}Attr interface

    // ------------- relations ------------------

#foreach ( $assoc in $transform.getEntityRelations($class) )
#set ($assocname = $transform.findEjbRelationName($assoc, $entityname))
#set ($TargetRoleName = ${str.upperCaseFirstLetter($assoc.target.roleName)})
#set ($targetTypeName = $transform.getRelationTargetType($assoc))

   /**
    * Get #firstJavadocParagraph(${assoc.target} "lower" "the ${assoc.target.roleName}")
#remainingJavadocParagraphs($assoc.target "    ")
    */
    public $targetTypeName get$TargetRoleName();

   /**
    * Set #firstJavadocParagraph(${assoc.target} "lower" "the ${assoc.target.roleName}")
    */
    public void set$TargetRoleName($targetTypeName ${assoc.target.roleName});
#end ## foreach

    // ---------------- business methods  ----------------------

#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) != "FinderMethod" && $transform.getStereotype($op.id) != "CreateMethod" && $transform.getStereotype($op.id) != "SelectMethod")
#set ($visibility = $transform.getVisibility($op))
## Only expose public, nonstatic methods (public static methods go on the home
## interface)
#if ($visibility == "public" && !$transform.isStatic($op)) 
#set ($msig = $transform.getOperationSignature($op))
#set ($exceptions = $transform.findTagValue($op, "@andromda.java.throws"))
#if (!$exceptions)
#set ($exceptions = $transform.findFullyQualifiedName($defaultException))
#end
   /**
#generateDocumentation ($op "    ")
    */
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#if ($exceptions)
    public $returntype ${msig} throws $exceptions;
#else
    $visibility $returntype ${msig};
#end
#end
#end
#end
    // ---------------- getter and setter for value objects ---------------

## Getter for value objects are only generated for concrete EJBs to avoid 
## signature and instantiation problems. Setters can be safely generated
## even for abstract entities
#if (!$class.isAbstract())    
    /** 
     * Get a value object for this entity. 
     * @return a new value object.
     */
    public ${entityname}Value getValueObject();

#end
    /**
     * Set the bean CMP values from the attributes interface. Primary key fields
     * are ignored.
     * @param value the value object
     */
     public void setValueObject(${entityname}Attr value);

}
