#if ($useEventLogger)
## Do not generate this file if not using WDW Core Framework
// license-header java merge-point
/* Autogenerated by AndroMDA - do not edit
 * 
 * TEMPLATE:    SessionClient.vsl in andromda-ejb-cartridge
 * MODEL CLASS: ${service.validationName}
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  ${stereotype.name}
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import com.wdpr.core.framework.ejb.EJBUtility;
import com.wdpr.core.framework.AbstractServiceClient;
import com.wdpr.core.framework.ejb.EJBExceptionUtility;
import java.rmi.RemoteException;

/**
 * Remote component interface for the $service.name session bean.
$service.getDocumentation(" * ")
 */
public class ${service.name}Client 
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}Client
#else
    extends AbstractServiceClient
#end
{
    private static final long serialVersionUID = 1L;

    /**
     * Default public no argument constructor
     */
    public ${service.name}Client()
    {
        super();
    }

    private ${service.name} getService()
    {
        return (${service.name}) EJBUtility.getEJBObject("${service.name}", ${service.name}Home.class);
    }

    // ---------------- business methods  ----------------------
#foreach ( $operation in $service.businessOperations)
## Only expose public methods
#if ($operation.visibility == "public")

#set ($returnType = $operation.returnType.fullyQualifiedName)
   /**
$operation.getDocumentation("    * ")
#foreach ($argument in $operation.arguments)
    * @param $argument.name
#end
#if ($operation.returnTypePresent)
    * @return $returnType
#end
    * @throws RemoteException
#foreach ($exception in $operation.exceptions)
    * @throws $exception.fullyQualifiedName
#end
    */
#if ($operation.exceptionsPresent)
    public $returnType $operation.signature
        throws $operation.getExceptionList('RemoteException')
#else
    public $returnType $operation.signature
        throws RemoteException
#end
    {
        try
        {
            return this.getService().${operation.name}(${operation.argumentNames});
        }
        catch (Throwable th)
        {
            EJBExceptionUtility.determineExceptionForClient(th);
        }
        return null;
    }
#end
#end
}
#end