/* Autogenerated by AndroMDA (EntityHome.vsl) - do not edit */
## Include global definitions. ##
#parse("templates/EJBglobals.vm")
##
#if ($superclass)
#set ($parentStereotype = $superclass)
#if ( $parentStereotype == "Entity")
## Extend the home interface of the super type if the super type
## is an <<Entity>>
#set ($parentInterface = "${superclass.fullyQualifiedName}LocalHome")
#end
#end
#if (!$parentInterface)
#set ($parentInterface = "javax.ejb.EJBLocalHome")
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Home interface for the $entityname entity bean.
$class.getDocumentation(" * ")
 *
#copyTaggedValues($class " " [ "@andromda.ejb.viewType", "@andromda.ejb.transactionType",  "@andromda.ejb.noSyntheticCreateMethod" ])
 */
public interface ${entityname}LocalHome  extends $parentInterface {
## Only expose JNDI names on concrete EJBs.
#if (!$class.abstract)
    // -- accessors for environment entries and constants --
	public static final String COMP_NAME="java:comp/env/${ejbRefName}/Local";
	public static final String JNDI_NAME="${ejbRefName}/Local";
#end

#foreach($envEntry in $class.getEnvironmentEntries(true))
#if($envEntry.visibility == "public")
    /**
     * Get the ${envEntry.name} environment entry
$envEntry.getDocumentation("     * ")
     */
    public $envEntry.type.fullyQualifiedName ${envEntry.getterName}();

#end
#end
// -- accessors for constants --
#foreach($constant in $class.constants)
## Only expose the method to the home interface if it is public.
#if($constant.visibility == "public")
    /**
     * Get the $att.name constant
$constant.getDocumentation("     * ")
     */
    public $constant.type.fullyQualifiedName ${constant.getterName}();

#end
#end
    // ---------------- home methods  ----------------------
#foreach ( $op in $class.operations)
#if (!$op.hasStereotype("FinderMethod") && !$op.hasStereotype("CreateMethod") && !$op.hasStereotype("SelectMethod"))
#set ($visibility = $op.visibility.toString())
## Only expose public static methods (public nonstatic methods go on the
## component interface)
#if ($visibility == "public" && $op.static)
#set ($msig = $op.signature)
   /**
$op.getDocumentation("    * ")
    */
#set ($returntype = $op.returnType.fullyQualifiedName)
#if ($op.hasExceptions())
    public $returntype ${msig} throws $op.exceptionList;
#else
    $visibility $returntype ${msig};
#end
#end
#end
#end
## Only expose create and finder methods on concrete EJBs.
#if (!$class.isAbstract())

    // ---------------- finder methods  ----------------------

    /**
     * Find this entity by its primary key
     * @param key the primary key;
     */
     public ${class.name} findByPrimaryKey($pkclassname key)
            throws javax.ejb.FinderException;

#foreach ( $op in $class.operations)
#if ($op.hasStereotype("FinderMethod"))
#set ($msig = $op.signature)
   /**
$op.getDocumentation("    * ")
    */
    public ${op.returnType.fullyQualifiedName} ${msig}
           throws javax.ejb.FinderException;

#end
#end
    // ---------------- create methods --------------------
## Handle explicitly defined create methods.
#foreach ( $op in $class.getCreateMethods(true))

    /**
$op.getDocumentation("    * ")
     *
     */
    public ${entityname} create${op.typedArgumentList}
           throws javax.ejb.CreateException;
#end

## Only expose the autogenerated create method with all attributes if it
## is not explicitly switched off.
#if (!$class.findTaggedValue("@andromda.ejb.noSyntheticCreateMethod"))

    /**
     * Create method with all CMP attribute values.
#set ($allAttributes = $transform.filterByVisibility($class.allInstanceAttributes, "public"))
#foreach($att in $allAttributes)
     * @param $att.name Value for the ${att.name} property
#end
     */
    public ${entityname} create(${transform.getAttributesAsList($allAttributes, true, true)})
           throws javax.ejb.CreateException;
#set ($relations = $class.allEntityRelations)
#if (!$relations.isEmpty())

    /**
     * Create method with all CMP attribute values and CMR relations.
#foreach($att in $allAttributes)
     * @param $att.name Value for the ${att.name} property
#end
#foreach ($rel in $relations)
     * @param $rel.otherEnd.name Value for the ${rel.otherEnd.name} relation role
#end
     */
    public ${entityname} create(${transform.getAttributesAsList($allAttributes, true, true)}#if(!$allAttributes.empty), #end#foreach ($rel in $relations)${rel.relationType} $rel.otherEnd.name#if($velocityCount != $relations.size()), #end#end)
           throws javax.ejb.CreateException;
#end
#end
#end
}
