#set($viewtype = $transform.findTagValue($class, "@andromda.ejb.viewType"))
#if(!($viewtype == "local"))
/* Autogenerated by AndroMDA - do not edit */
## Include global definitions definitions. ##
#parse("templates/EJB.vm")
## Global macro definitions. Normally, these do not need to be changed ##
#macro ( firstJavadocParagraph $item $case $default)
#set ( $parIter = false )
#foreach ( $tgv in $item.taggedValues )
#if ( $tgv.tag == "documentation" && !$parIter)
#set ($parIter = $transform.formatHTMLStringAsParagraphs($tgv.value).iterator())
#end
#end
#set ($text = "")
#if ($parIter && $parIter.hasNext())
#foreach ($line in ${parIter.next().lines} )
#set ($text = "$text $line")
#end
#set ($text = ${text.trim()})
#end
#if ($text == "")
#set ($text = "$default")
#end
#if ($case == "upper")
$str.upperCaseFirstLetter($text)
#elseif ($case == "lower")
$str.lowerCaseFirstLetter($text)
#else
$text
#end
#end
##
#macro ( remainingJavadocParagraphs $item $indent)
#set ($skip = true)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
#if ($skip)
#set ($skip = false)
#else
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
#end
##
#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
##
#macro (copyTaggedValues $item $indent $exclude)
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag.startsWith("@") && ! $exclude.contains($tgv.tag))
${indent}* $tgv.tag $tgv.value
#end
#end
#end
#set ($parentClass = $transform.getGeneralization($class.id))
#if ($parentClass)
#set ($parentStereotype = $transform.getStereotype($myClass))
#if ( $parentStereotype == "Service")
## Extend the remote component interface of the super type if the super type 
## is a <<Service>>
#set ($parentInterface = "${transform.findFullyQualifiedName($parentClass)}")
#end
#end
#if (!$parentInterface)
#set ($parentInterface = "javax.ejb.EJBObject")
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Remote component interface for #firstJavadocParagraph(${class} "lower" "the $servicename session bean.")
#remainingJavadocParagraphs($class " ")
 *
#copyTaggedValues($class " " [ "@andromda.ejb.viewType", "@andromda.ejb.transactionType" ])
 *
 */
public interface ${servicename}
extends $parentInterface#foreach($intf in $transform.getAbstractions($class.id)),
        $transform.findFullyQualifiedName($intf)
#end {
    // -- accessors for environment entries and constants --
#foreach($att in $transform.getStaticAttributes($class))
#set ($visibility = $transform.getVisibility($att))
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
#set($attType = $transform.getFullyQualifiedName($att.type))
#set($AttName = $str.upperCaseFirstLetter($att.name))
    /**
#if($transform.getStereotype($att) == "EnvEntry")
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} environment entry")
#else
#set ($ATT_NAME = $str.toDatabaseAttributeName($att.name, '_'))
     * Get #firstJavadocParagraph(${att} "lower" "the $ATT_NAME constant")
#end
#remainingJavadocParagraphs($att "     ")
     */
    public $attType get$AttName() throws java.rmi.RemoteException;
    
#end
#end
    // --------------- attributes ---------------------
#foreach ( $att in $transform.getInstanceAttributes($class))
#set ($visibility = $transform.getVisibility($att))
#set($attType = $transform.getFullyQualifiedName($att.type))    
#set($AttName = $str.upperCaseFirstLetter($att.name))
    /**
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
#remainingJavadocParagraphs($att "     ")
     */
    public $attType get$AttName() throws java.rmi.RemoteException;

#if(!$transform.isReadOnly($att))
    /**
     * Set #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
     * @param value the new value
     */
    public void set$AttName($attType value) throws java.rmi.RemoteException;
#end
#end

    // ---------------- business methods  ----------------------
#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) != "CreateMethod")
#set ($visibility = $transform.getVisibility($op))
## Only expose public methods
#if ($visibility == "public") 
#set ($msig = $transform.getOperationSignature($op))
#set ($exceptions = $transform.findTagValue($op, "@andromda.java.throws"))
#if (!$exceptions)
#set ($exceptions = $transform.findFullyQualifiedName($defaultException))
#end

   /**
#generateDocumentation ($op "    ")
    */
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#if ($exceptions)
    public $returntype ${msig} throws $exceptions, java.rmi.RemoteException;
#else
    public $returntype ${msig} throws java.rmi.RemoteException;
#end
#end
#end
#end
}
#end