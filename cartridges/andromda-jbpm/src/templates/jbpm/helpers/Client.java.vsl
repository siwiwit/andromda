#if (!$processDefinitions.empty)
#set ($generatedFile = "ProcessManager.java")
#if ($stringUtils.isNotBlank($clientPackage))
#set ($packagePath = $stringUtils.replace($clientPackage,'.','/'))
#set ($generatedFile = "${packagePath}/${generatedFile}")
#end
#if ($stringUtils.isNotBlank($clientPackage))
package ${clientPackage};

#end
public final class ProcessManager
{
	/**
	 * Injects the process definitions into the database, this should only be done once.
	 */
	public static void injectAllProcessDefinitions() throws java.lang.Exception
	{
	    final org.jbpm.db.JbpmSession jbpmSession = org.jbpm.db.JbpmSessionFactory.getInstance().openJbpmSession();

#foreach ($processDefinition in $processDefinitions)
		final org.jbpm.graph.def.ProcessDefinition $stringUtils.lowerCamelCaseName($processDefinition.name)Definition = org.jbpm.graph.def.ProcessDefinition.parseXmlResource("${processDefinition.descriptorFullPath}");
#end

        final org.jbpm.db.GraphSession graphSession = jbpmSession.getGraphSession();
	    jbpmSession.beginTransaction();
#foreach ($processDefinition in $processDefinitions)
	    graphSession.saveProcessDefinition($stringUtils.lowerCamelCaseName($processDefinition.name)Definition);
#end
	    jbpmSession.commitTransaction();

	    jbpmSession.close();
	}

    public static void createProcessSchema() throws java.lang.Exception
    {
        org.jbpm.db.JbpmSessionFactory.getInstance().getJbpmSchema().createSchema();
    }

    public static void dropProcessSchema() throws java.lang.Exception
    {
        org.jbpm.db.JbpmSessionFactory.getInstance().getJbpmSchema().dropSchema();
    }

    public static void cleanProcessSchema() throws java.lang.Exception
    {
        org.jbpm.db.JbpmSessionFactory.getInstance().getJbpmSchema().cleanSchema();
    }

    public static boolean isProcessSchemaAvailable() throws java.lang.Exception
    {
        return org.jbpm.db.JbpmSessionFactory.getInstance().getJbpmSchema().hasJbpmTables();
    }

}
#end
