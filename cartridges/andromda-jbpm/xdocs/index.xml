<?xml version="1.0" encoding="iso-8859-1"?>

<document>

    <properties>
        <author email="wouter@andromda.org">Wouter Zoons</author>
        <title>AndroMDA - jBpm - Introduction</title>
        <gennews>no</gennews>
    </properties>

    <body>

        <section name="Abstract">
            <p class="abstract">
                These pages describe the 'jBPM' cartridge. <a href="http://www.jboss.org/products/jbpm">jBPM</a>
                is a workflow engine that is now part of the <a href="http://www.jboss.org">JBoss</a> product line.
                This cartridge is able to generate <i>process definitions</i> and <i>handlers</i> from UML activity
                graphs.
            </p>
        </section>

        <section name="Modeling for jBpm">
            <p>
                Modeling for the jBpm cartridge is actually very simple, for a single jBpm process you will need
                to model a usecase containing an activity graph, and a class which will own the operations to call
                in specific areas of the graph.
            </p>
            <subsection name="The activity graph">
                <p>
                    The activity graph will determine the content of the process definition XML descriptor, all
                    transitions, states and swimlanes will be analyzed and a suitable descriptor is emitted.
                    More formally, we will be considering the following model elements for the jBpm cartridge:
                </p>
                <p>
                    <table>
                        <tr>
                            <td>use-case</td>
                            <td>
                                The use-case is used to envelop the activity graph, stereotypes and tagged values
                                will be modeled on the use-case rather than directly on the activity graph.
                            </td>
                        </tr>
                        <tr>
                            <td>activity graph</td>
                            <td>
                                The activity graph explicitly describes the process flow, almost all types of
                                supported model elements will be used to describe the process.
                            </td>
                        </tr>
                        <tr>
                            <td>swimlane</td>
                            <td>
                                Specific action roles are represented using swimlanes (the technical UML
                                term for a swimlane is <em>partition</em>), states can be assigned to a specific swimlane,
                                denoting the user/role assigned to it. A swimlane optionally take one or more assigment
                                expression tagged values, use <code>@andromda.process.jbpm.assignment.expression</code>.
                                A swimlane will result in the generation of an assignment handler, the user assigned
                                to this swimlane will subsequently be assigned to all tasks in it.
                            </td>
                        </tr>
                        <tr>
                            <td>initial state</td>
                            <td>
                                A single initial state represents the start of the process, it typically has
                                a single outgoing transition.
                            </td>
                        </tr>
                        <tr>
                            <td>state</td>
                            <td>
                                A state element represents a jBpm <em>state</em>, which is a node in which
                                the process is waiting for a signal. A state may contain deferrable call-events
                                (see below).
                            </td>
                        </tr>
                        <tr>
                            <td>action state</td>
                            <td>
                                Action states are a specific type of state without indicating the process is waiting,
                                you would typically use an action state as a pass-through state or a state
                                in which a few tasks are created or events are triggered.
                            </td>
                        </tr>
                        <tr>
                            <td>decision point</td>
                            <td>
                                Use decision points when you want to have the process split up in different
                                directions based on a specific decision. Each decision point will
                                result in the generation of a <em>decision handler</em>. A decision point is
                                required to have a non-empty name.
                            </td>
                        </tr>
                        <tr>
                            <td>call-event</td>
                            <td>
                                Each event will result in the generation
                                of an <em>action handler</em> (if the state does <em>not</em> carry the
                                <![CDATA[<<Task>>]]> stereotype and if the event itself carries the
                                <![CDATA[<<Before Signal>>]]>, <![CDATA[<<After Signal>>]]>, <![CDATA[<<Node Enter>>]]>,
                                <![CDATA[<<Node Leave>>]]> or <![CDATA[<<Timer>>]]>)
                            </td>
                        </tr>
                        <tr>
                            <td>transition</td>
                            <td>
                                Transitions tie all other elements used in an activity graph together, they
                                represent the different directions a flow can take. Just as with action states
                                transitions may use a call-event to defer control to an operation.
                            </td>
                        </tr>
                        <tr>
                            <td>final state</td>
                            <td>
                                One or more final states represent the end of the process. A final state
                                is required to have a non-empty name.
                            </td>
                        </tr>
                        <tr>
                            <td>class</td>
                            <td>
                                Per activity graph a single <strong>class</strong> is used containing the operations
                                to which will be deferred from within the action states or transitions.
                                Each operation will result in the generation of a <em>handler</em>.
                                See the <a href="#The_handler_class">next section</a> for more information.
                            </td>
                        </tr>
                    </table>
                </p>
            </subsection>
            <subsection name="The handler class">
                <p>
                    Once in a while you will want to defer control to a specific operation, implemented in jBpm
                    by means of <em>Handler</em> interfaces. For each such operation to which is deferred the
                    cartridge will generate a class, implementing the necessary interfaces. By default this
                    implementation is empty so it needs manual editing.
                </p>
                <p>
                    In order to be able to defer to such an operation you will need to assign the class
                    as the context of the activity graph, UML tools often have different ways of achieving this
                    (if at all). MagicDraw allows you to right-click the class to popup the menu, select the
                    'Assign...' item and select the appropriate graph from the select before clicking the 'Assign'
                    button.
                </p>
                <p>
                    Below you'll find examples of such handlers.
                </p>
            </subsection>
            <subsection name="Node classes">
                <p>
                    Having the process definition descriptor generated is nice, but it's not enough to have
                    a good workflow experience since working with the jBpm API is kind of cumbersome: suppose
                    you're in a state with two outgoing transitions and you need to signal one of them, in this case
                    you'll use the name of the transition, but if that name does not match any of the existing names
                    you'll have a runtime error. This is a very common mistake to make as the process might change
                    over time and transitions might be renamed, and not to mention the introduction of typos.
                </p>
                <p>
                    For this reason the jBpm cartridge generates a layer of classes that'll make it significantly
                    easier to work with the underlying process. For each node a class is generate containing
                    a set of methods ensuring proper execution on the process instance.
                </p>
                <p>
                    Take a look at the <a href="#Example">example</a> below to get an idea of what has been
                    discussed so far.
                </p>
            </subsection>
            <subsection name="Integrating jBpm in your own applications">
                <p>
                    Using jBpm in your own applications will require you to setup the jBpm database schema and inject
                    the process definitions, this can be done by the generated <code>ProcessManager</code> class.
                    It contains operations to create, clean and drop the schema and a method to
                    insert all process definitions.
                    Once this is done you will be able to work with the node classes so you'll be able
                    to persist your processes. Please refer to the
                    <a href="http://www.jbpm.org/download.html">jBpm documentation</a> for more information.
                </p>
            </subsection>
        </section>
        <section name="Good to know">
            <p>
                There are a few things you should know about the jBpm cartridge. It's important to realize that
                using a modeling tool such as a UML editor offers a level of abstraction but also makes you lose
                a certain degree of control over the generated file. For this reason you need to understand some
                of the decisions behind the cartridge, in jBpm something can be implemented in many different
                ways but the cartridge consistency applies the same patterns, something humans rarely do.
            </p>
            <subsection name="Patterns">
                <p>
                    Most of the time you won't need to customize anything, and if you do you will have a set of
                    tagged values and stereotypes at your disposal that will allow you to tweak the generated code.
                    Here's a list of patterns applied by the cartridge:
                </p>
                <p>
                    <ul>
                        <li>all tasks are blocking by default, the process can't continue until all tasks have finished</li>
                        <li>no task is signalling, in order to continue to the next state you will
                            <em>always</em> have to explicitely signal the process
                        </li>
                        <li>assignment is done on the level of the swimlane, all tasks that are part of that
                            swimlane will have the same actor assigned to it
                        </li>
                    </ul>
                </p>
            </subsection>
            <subsection name="Modeling">
                <p>
                    There is a simple set of guidelines for working with the jBpm cartridge that will get you
                    started:
                </p>
                <p>
                    <ul>
                        <li>tasks are modeled as deferrable call-events on an <em>action state</em>,
                            give these events the <![CDATA[<<Task>>]]> stereotype</li>
                        <li>if you want to schedule the timely execution of an action you should
                            model a deferrable call-event with the <![CDATA[<<Timer>>]]> stereotype,
                            you can do this on an <em>action state</em> or on a <em>regular state</em>
                        </li>
                        <li>most, but not all, of the model elements require a name, it's a good practice
                            to give descriptive names; don't be afraid of using spaces
                        </li>
                        <li>in real processes it's a good idea to have a naming convention for your elements:
                            states should sounds like 'request sent', 'form stored', 'filing issue' or
                            'updating record', use the <em>present tense</em>
                            for transitions and tasks: 'send request' or 'store form'
                        </li>
                    </ul>
                </p>
            </subsection>
        </section>
        <section name="Example">
            <p>
                Although not displaying everything, the following diagram shows how a process can be modeled
                (the events, use-case and handler operations aren't shown). The
                generated process description file is found below.
            </p>
            <p>
                <img src="images/example.gif"/>
            </p>
<source language="xml">
<!--
<process-definition name="Online Store">

    <start-state name="start" swimlane="customer">
        <transition to="customer ready for purchase"/>
    </start-state>

    <swimlane name="customer">
        <assignment class="org.andromda.cartridges.jbpm.tests.onlinestore.CustomerAssignmentImpl"/>
    </swimlane>

    <swimlane name="system">
        <assignment expression="user(onlineStore)"/>
    </swimlane>

    <node name="customer ready for purchase">
        <transition name="select article" to="article selected"/>
        <transition name="check out" to="checking out"/>
    </node>

    <node name="checking out">
        <transition name="confirm" to="check out confirmed"/>
        <transition name="cancel" to="customer ready for purchase"/>
    </node>

    <node name="notifying customer">
        <transition to="customer notified during dispatching"/>
        <timer name="sendNotification" duedate="1 business day" repeat="1 day">
            <action name="sendNotification" class="org.andromda.cartridges.jbpm.tests.onlinestore.SendNotificationImpl"/>
        </timer>
    </node>

    <end-state name="items dispatched"/>

    <task-node name="article selected" signal="never" create-tasks="true">
        <task name="addArticleToBasket" swimlane="customer" blocking="true"/>
        <transition name="continue shopping" to="customer ready for purchase"/>
    </task-node>

    <task-node name="check out confirmed" signal="never" create-tasks="true">
        <task name="confirmCheckoutCredentials" swimlane="system" blocking="true"/>
        <transition to="customer check out credentials okay"/>
    </task-node>

    <task-node name="dispatching articles" signal="never" create-tasks="true">
        <task name="dispatchArticles" swimlane="system" blocking="true"/>
        <transition to="customer notified during dispatching"/>
    </task-node>

    <task-node name="update credentials" signal="never" create-tasks="true">
        <task name="updateCredentials" swimlane="customer" blocking="true"/>
        <transition name="continue with check out" to="check out confirmed"/>
    </task-node>

    <decision name="customer check out credentials okay">
        <handler class="org.andromda.cartridges.jbpm.tests.onlinestore.CustomerCheckOutCredentialsOkayImpl"/>
        <transition to="update credentials">
            <condition>
                <![CDATA[ not okay ]]>
            </condition>
        </transition>
        <transition to="notify customer while dispatching articles">
            <condition>
                <![CDATA[ okay ]]>
            </condition>
        </transition>
    </decision>

    <fork name="notify customer while dispatching articles">
        <transition to="dispatching articles"/>
        <transition to="notifying customer"/>
    </fork>

    <join name="customer notified during dispatching">
        <transition to="items dispatched"/>
    </join>

</process-definition>
-->
</source>
            <p>
                The next two code fragments show a comparison between regular jBpm access and access via the
                classes generated by the cartridge, we'll be using the example process above.
            </p>
<source language="java">
<!--
    // create a new instance for this definition
    ProcessInstance process = processDefinition.createProcessInstance();

    // we're now in the start state
    Token token = process.getRootToken();

    // move to the first state
    token.signal();

    // we are now in the "customer ready for purchase" state, signal again
    token.signal("select article");

    // get all tasks from this state
    Collection tasks = process.getTaskMgmtInstance().getTaskInstances();

    // let's mark the first task as finished
    for (Iterator taskIterator = tasks.iterator(); taskIterator.hasNext();)
    {
        TaskInstance task = (TaskInstance)tasks.iterator().next();
        if ("addArticleToBasket".equals(task.getName()))
        {
            if (!task.hasEnded())
            {
                task.end();
            }
            break;
        }
    }
-->
</source>
            <p>
                And this is a code snippet how the same thing can be achieved using the generated node classes,
                notice how much easier it is to read the code, even for this very simple example.
            </p>
<source language="java">
<!--
    // tell the process helper class we want to start a new process
    StartNode start = OnlineStore.startProcess();

    // move to the first state
    CustomerReadyForPurchaseNode readyNode = start.signal();

    // move to the second state
    ArticleSelectedNode selectedNode = readyNode.signal();

    // finish the first task
    if (!selectedNode.isArticleToBasketFinished())
    {
        selectedNode.finishAddArticleToBasket();
    }
-->
</source>
            <p>
                More elaborate cases such as ones involving decision points, forks, timers, etc.. will
                yield the proper methods in these node classes, that way if something changes in the process
                model your compiler will tell you if your code is out of sync'.
            </p>
            <p>
                Here are the generated assignment handlers for the <code>customer</code> swimlane, you're looking
                at the generated parent and implementation classes:
            </p>
<source language="java">
<!--
package org.andromda.cartridges.jbpm.tests.onlinestore;

/**
 *
 */
public abstract class CustomerAssignment implements org.jbpm.taskmgmt.def.AssignmentHandler
{
    public final void assign(org.jbpm.taskmgmt.exe.Assignable assignable, org.jbpm.graph.exe.ExecutionContext executionContext)
        throws java.lang.Exception
    {
        handleAssign(assignable, executionContext);
    }

    protected abstract void handleAssign(org.jbpm.taskmgmt.exe.Assignable assignable, org.jbpm.graph.exe.ExecutionContext executionContext)
        throws java.lang.Exception;
}

package org.andromda.cartridges.jbpm.tests.onlinestore;

/**
 * @see {@link CustomerAssignment}
 */
public class CustomerAssignmentImpl extends CustomerAssignment
{
    protected void handleAssign(org.jbpm.taskmgmt.exe.Assignable assignable, org.jbpm.graph.exe.ExecutionContext executionContext)
        throws java.lang.Exception
    {
    }
}
-->
</source>
            <p>
                There's a timer in the <code>notifying customer</code> node, more specifically on the event deferring
                to the <code>sendNotification></code> operation, here are the corresponding action handler
                classes:
            </p>
<source language="java">
<!--
package org.andromda.cartridges.jbpm.tests.onlinestore;

/**
 *
 */
public abstract class SendNotification implements
    org.jbpm.graph.def.ActionHandler
{
    public final void execute(org.jbpm.graph.exe.ExecutionContext executionContext)
        throws java.lang.Exception
    {
        handleExecute(executionContext);
    }

    protected abstract void handleExecute(org.jbpm.graph.exe.ExecutionContext executionContext)
        throws java.lang.Exception;
}

package org.andromda.cartridges.jbpm.tests.onlinestore;

/**
 * @see {@link SendNotification}
 */
public class SendNotificationImpl extends SendNotification
{
    protected final void handleExecute(org.jbpm.graph.exe.ExecutionContext executionContext)
        throws java.lang.Exception
    {
    }
}
-->
</source>
        </section>
        <section name="More will be added later...">
        </section>

    </body>
</document>
