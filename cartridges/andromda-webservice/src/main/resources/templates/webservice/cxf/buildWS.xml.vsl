<?xml version="1.0" encoding="UTF-8"?>
<!-- Bob Fields 1/11/08.
This uses the MDA webservice cartridge output (wsdl, services, and TOs) and
runs CXF wsdl2java and java2wsdl against the MDA outputs, into the CXF subdirectory.
This fills in the missing java objects (ObjectFactory, Request/Response wrappers)
and allows double-checking of both java and wsdl code generation and all annotations and refernces
(JAXWS may require JAXB wrapper objects under certain circumstances, not picked up by the MDA tool). -->
<!-- Generated by andromda-webservice cartridge (cxf/buildWS.xml.vsl) on $webServiceUtils.date DO NOT EDIT -->
<project name="${applicationName}-wsgen" default="all" basedir=".">
  <description>Create Java and wsdl from AndroMDA Webservice Cartridge output</description>
  <!-- set global properties for this build -->
  <property environment="env"/>
  <property file="../mda/build.properties"/>
  <property name="m2repo" value="${env.M2_REPO}"/>
  <property name="m2home" value="${env.M2_HOME}"/>
  <property name="m2opts" value="${env.MAVEN_OPTS}"/>

  <path id="cxf1.classpath">
    <!-- jaxb-commons not included in compile or runtime classpath passed to ant - because type=pom? -->
    <pathelement location="${m2repo}/org/apache/cxf/cxf-xjc-dv/${cxf.version}/cxf-xjc-dv-${cxf.version}.jar"/>
    <pathelement location="${m2repo}/org/apache/cxf/cxf-xjc-ts/${cxf.version}/cxf-xjc-ts-${cxf.version}.jar"/>
    <pathelement location="${m2repo}/com/sun/xml/bind/jaxb-xjc/2.1.13/jaxb-xjc-2.1.13.jar"/>
#if ($stringUtils.isNotBlank($xjcArguments))
    <fileset dir="${m2repo}/org/andromda/thirdparty/jaxb2_commons">
        <include name="**/*.jar"/>
        <exclude name="**/*-sources.jar"/>
        <exclude name="**/*-javadoc.jar"/>
    </fileset>
#end
    <!-- It leaves some compilation classes out of the runtime classpath. Just throw everything in -->
    <path path="${compile_classpath}"/>
    <path path="${runtime_classpath}"/>
  </path>
  <path id="project1.classpath">
    <pathelement location="${m2repo}/org/hibernate/hibernate/3.2.6.ga/hibernate-3.2.6.ga.jar"/>
    <pathelement location="${m2repo}/org/springframework/spring/2.5.6/spring-2.5.6.jar"/>
    <pathelement location="${m2repo}/jboss/jboss-j2ee/3.2.3/jboss-j2ee-3.2.3.jar"/>
    <path refid="cxf1.classpath"/>
    <fileset dir="${andromda.project}/webservice">
        <include name="/**/WEB-INF/lib/*.jar"/>
    </fileset>
  </path>

  <target name="init">
    <!-- Create the time stamp for logging purposes -->
    <tstamp>
        <format property="NOW" pattern="HHmmss" locale="en"/>
    </tstamp>
    <tstamp/>
    <echo message="m2repo=${m2repo}"/>
    <echo message="m2home=${m2home}"/>
    <echo message="cxf.version=${cxf.version}"/>
    <echo message="maven.compile.classpath=${compile_classpath}"/>
    <echo message="maven.runtime.classpath=${runtime_classpath}"/>
  </target>

  <target name="wsgenall" depends="init"
        description="Call wsgen for each Service">
    <!-- Delete the wsgen logs -->
    <!--delete includeEmptyDirs="false" failonerror="false" quiet="true">
      <fileset dir="${project}/webservice">
        <include name="**/*.log"/>
      </fileset>
    </delete-->
    <record name="${project}/mda/wsgen${NOW}.log" action="start"/>
    <echo message="running wsgen for each generated webservice class"/>
    <!-- wsgen throws an exception if directories don't exist -->
    <mkdir dir="${andromda.project}/common/src"/>
    <mkdir dir="${andromda.project}/common/target/classes"/>
    <mkdir dir="${andromda.project}/common/target/src/main/java"/>
    <mkdir dir="${andromda.project}/core/src/main/java"/>
    <mkdir dir="${andromda.project}/core/src/test/java"/>
    <mkdir dir="${andromda.project}/core/target/classes"/>
    <mkdir dir="${andromda.project}/core/target/src/main/java"/>
    <mkdir dir="${andromda.project}/CXF/src"/>
    <mkdir dir="${andromda.project}/CXF/target/src/main/java"/>
    <mkdir dir="${andromda.project}/CXF/WebContent/WEB-INF/lib"/>
    <mkdir dir="${andromda.project}/CXF/WebContent/WEB-INF/wsdl"/>
    <mkdir dir="${andromda.project}/CXF/WebContent/WEB-INF/classes"/>
    <mkdir dir="${andromda.project}/webservice/src/main/java"/>
    <mkdir dir="${andromda.project}/webservice/src/test/java"/>
    <mkdir dir="${andromda.project}/webservice/target/classes"/>
    <mkdir dir="${andromda.project}/webservice/target/src/main/java"/>
    <mkdir dir="${andromda.project}/webservice/WebContent/WEB-INF/lib"/>
    <mkdir dir="${andromda.project}/webservice/WebContent/WEB-INF/wsdl"/>
    <mkdir dir="${andromda.project}/webservice/WebContent/WEB-INF/classes"/>

    <!--delete>
        <fileset dir="${andromda.project}/CXF/target/src/main/java" includes="**/*"/>
    </delete-->
    <delete>
        <fileset dir="${andromda.project}/CXF/WebContent/WEB-INF/classes" includes="**/*"/>
    </delete>
    <!-- Run wsgen for each generated webservice class -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
    <antcall target="wsgenjava">
      <param name="package" value="$service.packageName"/>
      <param name="service" value="$service.name"/>
      <param name="namespace" value="http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end"/>
      <param name="dir" value="$dir"/>
    </antcall>
#end
#end
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
#if (!$service.allowedOperations.empty)
    <!-- Copy all ObjectFactory to common project so they can be referenced by implementation without circular dependencies -->
    <copy todir="${andromda.project}/common/target/src/main/java/$dir" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java/$dir">
        <include name="ObjectFactory.java"/>
        <!--include name="package-info.java"/-->
      </fileset>
    </copy>
#end
#end
#end

    <!-- Copy all ObjectFactory to common project alongside generated SEI interface and implementation -->
    <copy todir="${andromda.project}/common/target/src" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java">
        <include name="**/ObjectFactory.java"/>
        <include name="org/apache/**"/>
        <include name="org/oasis*/**"/>
        <include name="org/w3*/**"/>
        <include name="org/xmlsoap/**"/>
        <!--include name="**/*Fault.java"/-->
        <!--include name="**/package-info.java"/-->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
        <exclude name="${dir}/ObjectFactory*.java"/>
        <exclude name="${dir}/package-info.java"/>
#end
#end
      </fileset>
    </copy>
    <!-- Copy Service Exception FaultBeans -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service) && !$service.allowedOperationExceptions.empty)
    <copy todir="${andromda.project}/common/target/src/main/java" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java">
#foreach ($exception in $service.allowedOperationExceptions)
##        <!-- $faultName $exception.associationEnds.size() $exception -->
#set ($faultName = $exception.name.replace("Exception", "Fault"))
        <include name="**/${faultName}.java"/>
#end
      </fileset>
    </copy>
#end
#end
    <!-- Copy Test Client, Test Server, and WS Endpoint Client files to webservice project -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
    <copy todir="${andromda.project}/webservice/src/test/java/$dir" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java/$dir">
        <include name="**/*_Client.java"/>
        <include name="**/*_Server.java"/>
        <include name="**/*${seiSuffix}Client.java"/>
      </fileset>
    </copy>
#end
#end
    <!-- Copy Andromda generated Test Client and WS Endpoint Client files to CXF project -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
    <copy todir="${andromda.project}/CXF/src/main/java" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/webservice/src/test/java">
        <include name="**/*_WSClient.java"/>
        <include name="**/*WSTest.java"/>
        <include name="**/cxf*.xml"/>
      </fileset>
    </copy>
#end
#end
    <!-- Copy default value generator and test client to CXF webservice project for client testing -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
    <copy todir="${andromda.project}/CXF/target/src/main/java" overwrite="true" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/webservice/src/main/java">
        <include name="$dir/test/${service.name}_WSClient.java"/>
      </fileset>
      <fileset dir="${andromda.project}/core/src">
#foreach ($operation in $service.allowedOperations)
#if ($umlUtils.shouldOutput($operation))
        <include name="$dir/${stringUtils.capitalize($operation.operationName)}Impl.java"/>
#end
#end
      </fileset>
    </copy>
#end
#end
  </target>

  <target name="wsdlgenall" depends="init"
        description="Call java2ws (create client) for each Service, modify URL">

#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
#set ($dir=${stringUtils.replace($service.packageName, '.', '/')})
    <antcall target="wsgenwsdl">
      <param name="package" value="$service.packageName"/>
      <param name="service" value="$service.name"/>
      <param name="namespace" value="http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end"/>
    </antcall>
#end
#end
    <record name="${project}/mda/wsgen${NOW}.log" action="stop"/>
  </target>

  <target name="wsreplaceall" depends="init"
          description="Call wsreplace for each Service">
    <!-- Run wsreplace for each generated webservice class -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
    <antcall target="wsreplace">
      <param name="class" value="$service.name"/>
    </antcall>
#end
#end

  </target>

  <!-- Generate WebService artifacts using CXF version $cxfVersion.
       http://cwiki.apache.org/CXF20DOC/wsdl-to-java.html -->
  <target name="wsgenjava" description="Generate WebService code artifacts using CXF wsdl2java and java2wsdl utilities.">
    <echo message="running wsdlvalidator for AndroMDA generated wsdl for service ${service}"/>
    <java classname="org.apache.cxf.tools.validator.WSDLValidator" fork="true">
      <arg value="-verbose"/>
      <arg value="${andromda.project}/webservice/WebContent/wsdl/${service}.wsdl"/>
       <classpath>
          <path refid="project1.classpath"/>
       </classpath>
    </java>
    <echo message="running wsdl2java for service ${service}"/>
    <java classname="org.apache.cxf.tools.wsdlto.WSDLToJava" fork="true">
      <arg value="-p"/>
      <arg value="${namespace}=${package}"/>
      <arg value="-b"/>
      <arg value="${andromda.project}/webservice/WebContent/wsdl/bindings/${service}.xjb"/>
      <arg value="-d"/>
      <arg value="${andromda.project}/CXF/target/src/main/java"/>
      <!--arg value="-compile"/-->
      <arg value="-classdir"/>
      <arg value="${andromda.project}/CXF/WebContent/WEB-INF/classes"/>
      <arg value="-all"/>
      <arg value="-verbose"/>
#if (!$cxfVersion.startsWith("2.0"))
      <arg value="-autoNameResolution"/>
      <!-- Bug: CXF StackOverflow if values are bidirectional -->
      <!--arg value="-defaultValues=org.apache.cxf.tools.wsdlto.core.RandomValueProvider"/-->
      <!--arg value="-sn"/>
      <arg value="$service.name"/-->
#end
#if ($stringUtils.isNotBlank($xjcArguments))
      <!-- Uncomment to add cxf and jaxb-commons options to client code generation in CXF project -->
      <!--arg value="-xjc$xjcArguments"/-->
#end
      <!-- Uncomment to use CXF servlet WSDL URL instead of generated wsdl - There are differences. -->
      <!--arg value="http://${webserviceHost}:${webservicePort}/$webContext/$servicesPath/${service}?wsdl"/-->
      <arg value="${andromda.project}/webservice/WebContent/wsdl/${service}.wsdl"/>
      <classpath>
          <path refid="project1.classpath"/>
      </classpath>
    </java>
#if ($cxfVersion.startsWith("2.0"))
    <!-- Copy JAXB2 Adapter and package info classes to ValueObjects location. CXF/Jaxb2.1 allows customized adapter name -->
    <copy todir="${jaxb-gen}" overwrite="false" preservelastmodified="true" verbose="true" failonerror="false">
      <fileset dir="${andromda.project}/CXF/target/src/main/java">
        <include name="**/Adapter*.java"/>
      </fileset>
    </copy>
#end
  </target>
  <!-- Adapter, ${seiSuffix}Impl, and wrapper classes are required to run java2wsdl properly. -->
  <!-- CXF generated wsdl is used only to point out potential problems in java code. -->

  <!-- Generate WebService artifacts using CXF version ${cxfVersion}. $cxfVersion.startsWith("2.0")
       http://cwiki.apache.org/CXF20DOC/java-to-ws.html -->
## CXF 2.1 uses java2ws, java2wsdl no longer exists.
#if ($cxfVersion.startsWith("2.0"))
  <target name="wsgenwsdl" description="Generate WebService code artifacts using CXF java2wsdl utility.">
    <echo message="running java2wsdl for service ${service}"/>
    <java classname="org.apache.cxf.tools.java2wsdl.JavaToWSDL" fork="true">
#else
  <target name="wsgenwsdl" description="Generate WebService code artifacts using CXF java2ws utility.">
    <echo message="running java2ws for service ${service}"/>
    <java classname="org.apache.cxf.tools.java2ws.JavaToWS" fork="true">
        <arg value="-databinding"/>
        <arg value="jaxb"/>
        <arg value="-frontend"/>
        <arg value="jaxws"/>
        <arg value="-wsdl"/>
## Does not support custom jaxb databinding file, have to use wsdl2java to generate these artifacts
#end
        <arg value="-o"/>
        <arg value="${andromda.project}/CXF/WebContent/WEB-INF/wsdl/${service}.wsdl"/>
        <arg value="-cp"/>
        <arg value="${andromda.project}/common/target/classes;${andromda.project}/core/target/classes;${andromda.project}/webservice/WebContent/WEB-INF/classes;${andromda.project}/CXF/WebContent/WEB-INF/classes;"/>
#if ($soapVersion.equals("1.2"))
        <arg value="-soap12"/>
#end
        <arg value="-t"/>
        <arg value="${namespace}"/>
        <arg value="-servicename"/>
        <arg value="${service}"/>
        <arg value="-verbose"/>
        <arg value="-s"/>
        <arg value="${andromda.project}/CXF/target/src/main/java"/>
        <arg value="-classdir"/>
        <arg value="${andromda.project}/CXF/WebContent/WEB-INF/classes"/>
        <arg value="-portname"/>
        <arg value="${service}"/>
## java2ws does not add schemaLocation to xsd imports in schema files = namespace error
#if ($importedXSD && !$cxfVersion.startsWith("2.0"))
        <!-- bug: xsd schemas inport other references but do not provide schemaLocation -->
        <!--arg value="-createxsdimports"/-->
#end
        <arg value="-d"/>
        <arg value="${andromda.project}/CXF/target/src/main/java"/>
        <arg value="${package}.${service}${seiSuffix}"/>
        <classpath>
            <path refid="project1.classpath"/>
        </classpath>
    </java>
    <waitfor maxwait="20" maxwaitunit="second">
        <available file="${andromda.project}/CXF/WebContent/WEB-INF/wsdl/${service}.wsdl"/>
    </waitfor>
  </target>

  <!-- Replace dummy WSDL URL with localhost working version, used for test/prod deployment wsdls. -->
  <target name="wsreplace" description="Replace default URL text with service value.">
    <!-- If we have a URL from UDDI, change here -->
    <replace dir="${andromda.project}/webservice/WebContent/wsdl" value="http://$webserviceHost:$webservicePort/$webContext/$servicesPath/${class}"
        summary="true">
      <include name="${class}*.*"/>
      <replacetoken>REPLACE_WITH_ACTUAL_URL</replacetoken>
    </replace>
  </target>

  <target name="all" depends="init">
    <antcall target="wsgenall"/>
    <ant antfile="${andromda.project}/mda/build.xml" target="eclipse"/>
  </target>
</project>
