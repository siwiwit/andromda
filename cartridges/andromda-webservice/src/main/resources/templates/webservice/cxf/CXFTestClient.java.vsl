#if ($umlUtils.shouldOutput($service))
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA
 *
 * TEMPLATE:    cxf/CXFTestClient.vsl in andromda-webservices-cartridge
 * MODEL CLASS: ${service.validationName}
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  ${stereotype.name}
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package ${service.packageName}.test;
#end

import org.junit.Test;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import ${service.fullyQualifiedName}${seiSuffix};

/**
 * Remote component interface for the $service.name session bean.
$service.getDocumentation(" * ")
 */
public class ${service.name}WSTest
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}Test
#else
    extends junit.framework.TestCase
#end
{
    private Object scenario = null;

    /**
     * Constructor with service name
     * @param name Service name to be tested
     */
    public ${service.name}WSTest(String name)
    {
        super(name);
    }

    /**
     * Constructor with service name and scenario - allows running one scenario data line from spreadsheet
     * @param name Service name to be tested
     * @param scenarioIn the first column of the spreadsheet
     */
    public ${service.name}WSTest(String name, Object scenarioIn)
    {
        super(name);
        this.setScenario(scenarioIn);
    }

    /**
     * @return the scenario
     */
    public Object getScenario()
    {
        return this.scenario;
    }

    /**
     * @param scenarioIn the scenario to set
     */
    public void setScenario(Object scenarioIn)
    {
        this.scenario = scenarioIn;
    }

    // ---------------- test methods  ----------------------
#foreach ( $operation in $service.allowedOperations)
## Only expose public methods
#if ($operation.visibility == "public")

#if ($operation.restAtom)
#set ($returnType = "org.apache.abdera.model.Feed")
##set ($operationMany = false)
#elseif (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
##set ($operationMany = true)
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
##set ($operationMany = false)
#end
   /**
    * Invokes the $operation.name service method on ${service.name}.
$operation.getDocumentation("    * ")
#foreach ( $parameter in $operation.arguments)
    * @param $parameter.name $parameter.type.fullyQualifiedName
#end
#if ($operation.restAtom || $operation.returnTypePresent)
    * @return ${operation.operationName}Response $returnType
#end
#foreach ( $exception in $operation.exceptions)
    * @throws $exception.fullyQualifiedName
#end
    */
    @Test
    public $returnType test${stringUtils.capitalize(${operation.operationName})}
    (
#if (!$operation.arguments.empty)
#set ($comma = "")
## If parameter.name not supplied by WebParam, it defaults to arg0, arg1 etc from wsdlgen tools
#foreach ($parameter in $operation.arguments)
#if (!$useArrayWrapper && $parameter.many)
#set ($paramType="java.util.List<$parameter.type.fullyQualifiedName>")
#else
#set ($paramType=$parameter.getterSetterTypeName)
#end
##        ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName/"#end) $parameter.type.fullyQualifiedName $parameter.name
        ${comma} $paramType $parameter.name
#set ($comma = ", ")
#end
#end
    )
##    // $operation.name $operation.exceptionsPresent $operation.exceptionList $operation.exceptions.size()
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
        System.out.println("Starting test: " + this.getName() + " for " + "${service.name}Client");
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                new String[]{"${stringUtils.replace($service.packageName,'.','/')}/test/cxf-client.xml"});

        ${service.name}${seiSuffix} client = (${service.name}${seiSuffix})context.getBean("${service.name}Client");

##if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
##set ($returnType = "${operation.packageName}.$stringUtils.capitalize(${operation.operationName})Response")
##set ($requestType = "${operation.packageName}.$stringUtils.capitalize(${operation.operationName})")
##        $requestType ${operation.operationName}RequestWrapper = new ${requestType}();
##foreach ($parameter in $operation.parameters)
##if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
##set ($paramType=$parameter.getterSetterTypeName)
##else
##set ($paramType=$parameter.type.fullyQualifiedName)
##end
##set ($parmName = "$stringUtils.capitalize($parameter.name)")
##        ${operation.operationName}RequestWrapper.set${parmName}($parameter.name);
##end
##        $returnType ${operation.operationName}Response = client.${operation.operationName}(${operation.operationName}RequestWrapper);
##else
#set ($indent="")
#if (!$operation.exceptions.empty)
#set ($indent="    ")
#if ($operation.restAtom || $operation.returnTypePresent)
#if ($operation.returnType.primitive && !$operation.many && $operation.lower > 0)
        $returnType ${operation.name}Response = ${webServiceUtils.createConstructor($operation.returnParameter, false)};
#else
        $returnType ${operation.name}Response = null;
#end
        try {
            ${operation.operationName}Response = client.${operation.name}(${operation.argumentNames});
            System.out.println(" Result = " + ${operation.operationName}Response.toString());
#else
        try {
            client.${operation.name}(${operation.argumentNames});
#end
#elseif ($operation.restAtom || $operation.returnTypePresent)
        $returnType ${operation.operationName}Response = client.${operation.name}(${operation.argumentNames});
##end
        System.out.println(" Result = " + ${operation.operationName}Response.toString());
#else
        client.${operation.name}(${operation.argumentNames});
##end
#end
$indent        System.out.println("Finished test: " + this.getName() + " for ${service.name}.${operation.name}(${operation.argumentNames})");
##if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
##        return ${operation.operationName}Response.get$stringUtils.capitalize(${operation.operationName})Response();
##else
#if (!$operation.exceptions.empty)
        }
        catch (Exception ex)
        {
            System.out.println("${service.name} port.${operation.name}" + " threw exception " + ex);
            throw new junit.framework.AssertionFailedError(ex.toString());
        }
#end
#if ($operation.restAtom || $operation.returnTypePresent)
        return ${operation.operationName}Response;
#end
##end
    }
#end
#end

    /**
     * JUnit test data class, used by DataDrivenTestSuite in suite()
     */
    public static class ${service.name}TestData
    {
        // TODO: Add test data fields here (populated by ${service.name}.xls spreadsheet
        // TODO: Recursively list every primitive parameter in entire operation parameter hierarchy
#foreach ( $operation in $service.allowedOperations)
#foreach ( $parameter in $operation.arguments)
        private $parameter.type.fullyQualifiedName ${operation.name}${parameter.name};
        /**
         * Data value for ${parameter.name} ${operation.name} on used by DataDrivenTestSuite in suite().
         * ${operation.name}${parameter.name} must be the column name of the parameter in the spreadsheet
         * @param value $parameter.type.name to be populated manually
         */
        public void set$stringUtils.capitalize(${operation.name})$stringUtils.capitalize(${parameter.name})($parameter.type.fullyQualifiedName value)
        {
            this.${operation.name}${parameter.name} = value;
        }
#end
#end
    }
}
#end