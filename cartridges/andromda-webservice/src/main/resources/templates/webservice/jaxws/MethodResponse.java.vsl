#if ($umlUtils.shouldOutput($operation))
#if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
#if ($operation.returnTypePresent || $operation.exceptionsPresent)
##if ($operation.visibility == "public" || $operation.visibility == "protected")
#set ($className=$stringUtils.capitalize($operation.operationName))
#set ($returnType=$operation.returnType)
#if ($operation.returnParameter.upper>1 || $operation.returnParameter.upper==-1 || $operation.upper>1 || $operation.upper==-1)
#set ($returnType=$operation.returnParameter.type)
#end
// license-header java merge-point
/* Autogenerated by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    jaxws/MethodResponse.java.vsl in andromda-webservice cartridge
 * MODEL CLASS: $operation.validationName
#foreach ($stereotype in $operation.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $operation.constraints)
 * CONSTRAINT:  $constraint.name: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end $constraint.body
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $operation.packageName;
#end

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * <p>Java class for web service ${operation.operationName}Response element declaration.
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
##@XmlType(name = "${operation.operationName}Response", propOrder = {
#if ($operation.returnTypePresent)
## Avoid primitive types for wrapper attribute names, reserved keywords
#if ($stringUtils.isNotBlank($operation.returnParameter.name))
#set ($returnName=$stringUtils.uncapitalize($operation.returnParameter.name))
#else
#set ($returnName="#if ($stringUtils.isBlank($operation.returnType.packageName) || $operation.returnType.schemaType.startsWith('xs:'))_#end${operation.returnType.name}")
#end
    "$stringUtils.uncapitalize($returnName)"
#else
#set ($returnName=$stringUtils.uncapitalize($operation.operationName))
#end
#set ($returnAttr = $stringUtils.uncapitalize($returnName))
})
##// $operation.returnType $operation.returnType.fullyQualifiedName $operation.returnParameter $operation.returnParameter.fullyQualifiedName $operation.returnParameter.type $operation.returnParameter.type.fullyQualifiedName
@XmlRootElement(name = "${operation.operationName}Response")
public class ${className}Response
#if ($service.generalization)
    extends $service.generalization.fullyQualifiedName
#end
    implements Serializable, Comparable<Object>
{
    private final static long serialVersionUID = 1L;
#if ($operation.returnTypePresent)
#if (!$useArrayWrapper && $operation.many)
#set ($returnType="java.util.List<$operation.returnType.fullyQualifiedName>")
#else
#set ($returnType=$operation.getterSetterReturnTypeName)
#end
#if ($operation.returnType.schemaType.startsWith("xs:") || $operation.returnType.packageName.indexOf('.')<0 )
#if ($returnType.equals("boolean"))
#set ($getOperation="is$stringUtils.capitalize($returnName)()")
#else
#set ($getOperation="get$stringUtils.capitalize($returnName)()")
#end
#set ($setOperation="set$stringUtils.capitalize($returnName)")
#else
#set ($getOperation="get$stringUtils.capitalize($returnName)()")
#end
#set ($setOperation="set$stringUtils.capitalize($returnName)")
##set ($type=$stringUtils.substring($operation.returnType.name, 0, 9))
#if (($returnType.equals("DateTime") && $stringUtils.isNotBlank(${XMLDateTimeAdapter})) || ($returnType.equals("Time") && $stringUtils.isNotBlank(${XMLTimeAdapter}))|| ($returnType.equals("Date") && $stringUtils.isNotBlank(${XMLDateAdapter}))|| ($returnType.equals("Integer") && $stringUtils.isNotBlank(${XMLIntegerAdapter}))|| ($returnType.equals("Decimal") && $stringUtils.isNotBlank(${XMLDecimalAdapter}))|| ($returnType.equals("Boolean") && $stringUtils.isNotBlank(${XMLBooleanAdapter})))
    @XmlElement(name = "$returnName", type = String.class, required = true)
    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(#if ($returnType.equals("DateTime"))${XMLDateTimeAdapter}#elseif($returnType.equals("Time"))${XMLTimeAdapter}#elseif($returnType.equals("Date"))${XMLDateAdapter}#elseif($returnType.equals("Integer"))${XMLIntegerAdapter}#elseif($returnType.equals("Decimal"))${XMLDecimalAdapter}#elseif($returnType.equals("Boolean"))${XMLBooleanAdapter}#end.class)
## Remove the beginning xs: from schema type
    @javax.xml.bind.annotation.XmlSchemaType(name = "$operation.returnType.schemaType.substring(3)")
#else
    @XmlElement(name = "$returnName"#if ($operation.returnType.primitive || $operation.returnParameter.lower>0 || $operation.lower>0), required = true#end)
#end
    protected $returnType $returnAttr;

    /**
     * Gets the value of the $returnAttr property.
     *
     * @return
     *     possible object is
     *     {@link $returnType }
     *
     */
    public $returnType $getOperation
    {
        return this.$returnAttr;
    }

#if ($operation.returnType.booleanType && $generateIsBooleanGetters)
    /**
     * Duplicates#if ($operation.lower > 0) isBoolean#else getBoolean#end method, for use as Jaxb2 compatible object
     * @return
     *     possible object is
     *     {@link $returnType }
     *
     */
    @Deprecated
    public $returnType#if ($operation.lower > 0) get#else is#end$stringUtils.capitalize(${operation.operationName})()
    {
        return this.$returnAttr;
    }
#end

    /**
     * Sets the value of the $returnAttr property.
     *
     * @param value
     *     allowed object is
     *     {@link $returnType }
     *
     */
    public void ${setOperation}($returnType value)
    {
        this.$returnAttr = value;
    }
#if ($operation.lower<1)

    /**
     * Returns true if value is set
     *
     * @return boolean true is value is set (not null)
     *
     */
    public boolean isSet$className()
    {
        return #if ($operation.returnType.primitive)true#else(this.$returnAttr!= null)#end;
    }
#end
#end

    /**
     * @param object to compare this object against
     * @return boolean if equal
     * @see Object#equals(Object)
     */
#if ($enableAnnotations)
    @Override
#end
    public boolean equals(Object object)
    {
        if (object==null || !(object instanceof ${className}Response))
        {
             return false;
        }
        ${className}Response rhs = (${className}Response) object;
        return new EqualsBuilder().appendSuper(super.equals(object))
#if ($operation.returnTypePresent)
            .append(this.$getOperation, rhs.$getOperation)
#end
            .isEquals();
    }

    /**
     * @param object to compare this object against
     * @return int if equal
     * @see Comparable#compareTo(Object)
     */
    public int compareTo(Object object)
    {
        if (object==null)
        {
            return -1;
        }
        ${className}Response myClass = (${className}Response) object;
        return new CompareToBuilder()
#if ($operation.returnTypePresent)
            .append(this.$getOperation, myClass.$getOperation)
#end
            .toComparison();
    }

    /**
     * @return int hashCode value
     * @see Object#hashCode()
     */
#if ($enableAnnotations)
    @Override
#end
    public int hashCode()
    {
        return new HashCodeBuilder(1249046965, -82296885).appendSuper(super.hashCode())
#if ($operation.returnTypePresent)
            .append(this.$getOperation)
#end
            .toHashCode();
    }

    /**
     * @return String representation of object
     * @see Object#toString()
     */
#if ($enableAnnotations)
    @Override
#end
    public String toString()
    {
        return new ToStringBuilder(this)
#if ($operation.returnTypePresent)
            .append("${operation.operationName}", this.$getOperation)
#end
            .toString();
    }
}

#end
#end
#end