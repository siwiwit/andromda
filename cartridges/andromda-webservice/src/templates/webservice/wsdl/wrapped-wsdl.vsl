<?xml version="1.0" encoding="$xmlEncoding"?>
<!-- Generated by andromda-webservice cartridge (wrapped-wsdl.vsl) do not edit! -->
#parse("templates/webservice/Globals.vm") 
<wsdl:definitions 
    name="$service.qName" 
    targetNamespace="$service.namespace" 
    xmlns:${service.namespacePrefix}="$service.namespace" 
    xmlns:wsdl="$wsdlNamespace" 
    xmlns:wsdlsoap="$wsdlSoapNamespace" 
    xmlns:xsd="$xmlSchemaNamespace">
    
    <!-- WSDL Types -->
    <wsdl:types>
        <xsd:schema elementFormDefault="qualified" 
                    targetNamespace="$service.namespace" 
                    xmlns="$xmlSchemaNamespace"> 
#foreach ($operation in $service.allowedOperations)
            <xsd:element name="$operation.name">      
                <xsd:annotation>     
                    <xsd:documentation> 
$operation.getDocumentation("                        ", 64, false)
                    </xsd:documentation>
                </xsd:annotation> 
#if (!$operation.arguments.empty)
                <xsd:complexType>  
                    <xsd:sequence>
#foreach ($argument in $operation.arguments)     
                        <xsd:element name="$argument.name" type="$argument.type.schemaType" nillable="$argument.nillable">
                            <xsd:annotation>     
                                <xsd:documentation> 
$argument.getDocumentation("                                    ", 64, false)
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
#end
                     </xsd:sequence>
                 </xsd:complexType>
#else
                 <xsd:complexType/>
#end
            </xsd:element>
            <xsd:element name="${operation.name}Response">       
#if ($operation.returnTypePresent)
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="${operation.name}Return" type="$operation.returnType.schemaType"/>
                    </xsd:sequence>
                </xsd:complexType>               
#else
                <xsd:complexType/>     
#end
            </xsd:element>
#end
#foreach ($typeMapping in $service.typeMappingElements)  
## By default set the type as the typeMapping itself,
## however if it has a type, use that instead
#set ($type = $typeMapping)
#if ($typeMapping.type)
#set ($type = $typeMapping.type)
#end
## Handle any type mappings that happen to be associationEnds 
#if ($typeMapping.many)
            <xsd:complexType name="$type.wsdlArrayName">
                <xsd:sequence>
                    <xsd:element name="item" minOccurs="0" maxOccurs="unbounded" form="qualified" type="${type.namespacePrefix}:${type.qName}" /> 
                </xsd:sequence>
            </xsd:complexType>
#end
#if ($type.arrayType)
            <xsd:complexType name="$type.getSchemaType(false, true)">
                <xsd:sequence>
                    <xsd:element name="item" minOccurs="0" maxOccurs="unbounded" form="qualified" type="$type.getSchemaType(true, false)" /> 
                </xsd:sequence>
            </xsd:complexType>
#else
#if ($type.enumeration)
#foreach ($literal in $type.literals) 
#set ($enumType = $literal.type.schemaType)
#end
            <xsd:simpleType name="$type.qName">
                <xsd:annotation>     
                    <xsd:documentation> 
$type.getDocumentation("                        ", 64, false)
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:restriction base="$enumType">
#foreach ($literal in $type.literals) 
                    <xsd:enumeration value="${escapeUtils.escapeXml($literal.enumerationValue.replaceAll('"', ''))}">
                        <xsd:annotation>     
                            <xsd:documentation> 
$literal.getDocumentation("                                ", 64, false)
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:enumeration>
#end                   
                </xsd:restriction>
            </xsd:simpleType>
#else
            <xsd:complexType name="$type.qName">
                <xsd:annotation>     
                    <xsd:documentation> 
$type.getDocumentation("                        ", 64, false)
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
#foreach ($attribute in $type.attributes) 
                    <xsd:element name="$attribute.name" nillable="$attribute.nillable" type="$attribute.type.schemaType">
                        <xsd:annotation>     
                            <xsd:documentation> 
$attribute.getDocumentation("                                ", 64, false)
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
#end
#foreach ($associationEnd in $type.associationEnds) 
#set ($otherEnd = $associationEnd.otherEnd)
#if ($otherEnd.navigable)
#set ($type = $otherEnd.type)
#if ($otherEnd.many)
#set ($schemaType = "${type.namespacePrefix}:${type.wsdlArrayName}")
#else
#set ($schemaType = "${type.namespacePrefix}:${type.qName}")
#end                
                    <xsd:element name="$otherEnd.name" nillable="$otherEnd.nillable" type="${schemaType}">
                        <xsd:annotation>     
                            <xsd:documentation> 
$otherEnd.getDocumentation("                                ", 64, false)
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>   
#end    
#end
                </xsd:sequence>
            </xsd:complexType>
#end
#end
#end
        </xsd:schema>
    </wsdl:types>
   
    <!-- Messages -->
#foreach ($operation in $service.allowedOperations)
    <wsdl:message name="${operation.name}${velocityCount}Request">
        <wsdl:part element="${service.namespacePrefix}:${operation.name}" name="parameters"/>
    </wsdl:message>
    <wsdl:message name="${operation.name}${velocityCount}Response">
        <wsdl:part element="${service.namespacePrefix}:${operation.name}Response" name="parameters"/>
    </wsdl:message>
#end

    <!-- Port Type -->
    <wsdl:portType name="$service.qName">
#foreach ($operation in $service.allowedOperations)
        <wsdl:operation name="$operation.name">
                
            <wsdl:documentation> 
$operation.getDocumentation("                ", 64, false)
            </wsdl:documentation>
            <wsdl:input message="${service.namespacePrefix}:${operation.name}${velocityCount}Request" 
                        name="${operation.name}${velocityCount}Request"/>
            <wsdl:output message="${service.namespacePrefix}:${operation.name}${velocityCount}Response" 
                         name="${operation.name}${velocityCount}Response"/>
        </wsdl:operation>
#end
    </wsdl:portType>
    
#set ($serviceBindingName = "${service.qName}SoapBinding") 
    <!-- WSDL Binding -->
    <wsdl:binding name="$serviceBindingName" type="${service.namespacePrefix}:${service.qName}">
        <wsdlsoap:binding style="document" transport="$documentStyleTransportNamespace"/>
#foreach ($operation in $service.allowedOperations)
        <wsdl:operation name="$operation.name">
            <wsdlsoap:operation soapAction="$operation.name" style="document"/>
            <wsdl:input name="${operation.name}${velocityCount}Request">
                <wsdlsoap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="${operation.name}${velocityCount}Response">
                <wsdlsoap:body use="literal"/>
            </wsdl:output>
       </wsdl:operation>         
#end
    </wsdl:binding>
    
    <!-- Service Definition -->
    <wsdl:service name="${service.qName}Service">
        <wsdl:documentation> 
$service.getDocumentation("            ", 64, false)
        </wsdl:documentation>
        <wsdl:port binding="${service.namespacePrefix}:${serviceBindingName}" name="$service.qName">
            <wsdlsoap:address location="${wsdlSoapAddress}/${service.qName}"/>
        </wsdl:port>
    </wsdl:service>

</wsdl:definitions>