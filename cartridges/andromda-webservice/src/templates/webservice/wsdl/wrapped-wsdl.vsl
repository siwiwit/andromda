<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by webservice cartridge (wrapped-wsdl.vsl) do not edit! -->
#parse("templates/webservice/Globals.vm") 
#set ($namespacePrefix = "impl")
<wsdl:definitions 
    name="${service.name}" 
    targetNamespace="${namespace}" 
    xmlns:${namespacePrefix}="${namespace}" 
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
    xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" 
    xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    
    <!-- WSDL Types -->
    <wsdl:types>
        <xsd:schema elementFormDefault="qualified" 
                    targetNamespace="${namespace}" 
                    xmlns="http://www.w3.org/2001/XMLSchema"> 
#foreach ( $operation in $service.allowedOperations )
            <xsd:element name="${operation.name}">       
#if (!$operation.arguments.empty)
                <xsd:complexType>  
                    <xsd:sequence>
#foreach ( $argument in $operation.arguments )     
                        <xsd:element name="${argument.name}" type="$argument.type.schemaType"/>
#end
                     </xsd:sequence>
                 </xsd:complexType>
#else
                 <xsd:complexType/>
#end
            </xsd:element>
            <xsd:element name="${operation.name}Response">       
#if ($operation.hasReturnType())
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="${operation.name}Return" type="$operation.returnType.schemaType"/>
                    </xsd:sequence>
                </xsd:complexType>               
#else
                <xsd:complexType/>     
#end
            </xsd:element>
#end
#foreach ( $typeMapping in $service.typeMappingElements )  
## By default set the type as the typeMapping itself,
## however if it has a type, use that instead
#set ($type = $typeMapping)
#if ($typeMapping.type)
#set ($type = $typeMapping.type)
#end
## Handle any type mappings that happen to be associationEnds 
#if ($typeMapping.many)
            <xsd:complexType name="ArrayOf${type.name}">
                <xsd:sequence>
                    <xsd:element name="item" minOccurs="0" maxOccurs="unbounded" form="qualified" type="${namespacePrefix}:${type.name}" /> 
                </xsd:sequence>
            </xsd:complexType>
#end
#if ($type.arrayType)
            <xsd:complexType name="$type.getSchemaType(false, true)">
                <xsd:sequence>
                    <xsd:element name="item" minOccurs="0" maxOccurs="unbounded" form="qualified" type="$type.getSchemaType(true, false)" /> 
                </xsd:sequence>
            </xsd:complexType>
#else
#if ($type.hasStereotype("Enumeration"))
#foreach ( $attribute in $type.attributes ) 
#set ($enumType = $attribute.type.schemaType)
#end
            <xsd:simpleType name="${type.name}">
                <xsd:restriction base="$enumType">
#foreach ( $attribute in $type.attributes ) 
                    <xsd:enumeration value="${escapeUtils.escapeXml($attribute.defaultValue.replaceAll('"', ''))}"/>
#end                   
                </xsd:restriction>
            </xsd:simpleType>
#else
            <xsd:complexType name="${type.name}">
                <xsd:annotation>     
                    <xsd:documentation> 
$type.getDocumentation("                        ", 64, false)
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
#foreach ( $attribute in $type.attributes ) 
                    <xsd:element name="$attribute.name" nillable="$attribute.required" type="$attribute.type.schemaType"/>
#end
#foreach ( $associationEnd in $type.associationEnds) 
#set ($connectingEnd = $associationEnd.connectingEnd)
#if ($connectingEnd.navigable)
#set ($typeName = $connectingEnd.type.name)
#if ($connectingEnd.many)
#set ($schemaType = "${namespacePrefix}:ArrayOf${typeName}")
#else
#set ($schemaType = "${namespacePrefix}:${typeName}")
#end                
                    <xsd:element name="$connectingEnd.name" nillable="$connectingEnd.required" type="${schemaType}"/>   
#end    
#end
                </xsd:sequence>
            </xsd:complexType>
#end
#end
#end
        </xsd:schema>
    </wsdl:types>
   
    <!-- Messages -->
#foreach ( $operation in $service.allowedOperations )
    <wsdl:message name="${operation.name}${velocityCount}Request">
        <wsdl:part element="${namespacePrefix}:${operation.name}" name="parameters"/>
    </wsdl:message>
    <wsdl:message name="${operation.name}${velocityCount}Response">
        <wsdl:part element="${namespacePrefix}:${operation.name}Response" name="parameters"/>
    </wsdl:message>
#end

    <!-- Port Type -->
    <wsdl:portType name="${service.name}">
#foreach ( $operation in $service.allowedOperations )
        <wsdl:operation name="${operation.name}">
                
            <wsdl:documentation> 
$operation.getDocumentation("                ", 64, false)
            </wsdl:documentation>
            <wsdl:input message="${namespacePrefix}:${operation.name}${velocityCount}Request" 
                        name="${operation.name}${velocityCount}Request"/>
            <wsdl:output message="${namespacePrefix}:${operation.name}${velocityCount}Response" 
                         name="${operation.name}${velocityCount}Response"/>
        </wsdl:operation>
#end
    </wsdl:portType>
    
    <!-- WSDL Binding -->
    <wsdl:binding name="${service.name}SoapBinding" type="${namespacePrefix}:${service.name}">
        <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
#foreach ( $operation in $service.allowedOperations )
        <wsdl:operation name="${operation.name}">
            <wsdlsoap:operation soapAction="${operation.name}" style="document"/>
            <wsdl:input name="${operation.name}${velocityCount}Request">
                <wsdlsoap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="${operation.name}${velocityCount}Response">
                <wsdlsoap:body use="literal"/>
            </wsdl:output>
       </wsdl:operation>         
#end
    </wsdl:binding>
    
    <!-- Service Definition -->
    <wsdl:service name="${service.name}Service">
        <wsdl:documentation> 
$service.getDocumentation("            ", 64, false)
        </wsdl:documentation>
        <wsdl:port binding="${namespacePrefix}:${service.name}SoapBinding" name="${service.name}">
            <wsdlsoap:address location="${wsdlSoapAddress}/${service.name}"/>
        </wsdl:port>
    </wsdl:service>

</wsdl:definitions>
