#if (!$service.allowedOperations.empty)
package $service.testPackageName;
#set ($generatedFile = "${stringUtils.replace($service.fullyQualifiedTestName,'.','/')}.java")

#set ($fullyQualifiedTestServiceLocator = $testServiceLocatorName)
#if($stringUtils.isNotEmpty($testServiceLocatorPackage))
#set ($fullyQualifiedTestServiceLocator = "${testServiceLocatorPackage}.${fullyQualifiedTestServiceLocator}")
#end

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

/**
 * JUnit test for web service {@link ${service.fullyQualifiedName}}.
 * <p>
 *   NOTE: You must generate the client stubs for the $service.fullyQualifiedName WSDL 
 *   using axis's java2wsdl tool in order to run these tests. 
 * </p>
 *
 * @see $service.fullyQualifiedName
 */
public abstract class $service.testName
    extends TestCase 
{

	protected $service.name service = null;

	/**
	 * Constructor for ${service.name}Test.
	 *
	 * @param testName name of the test.
	 */
	public ${service.testName}(String testName) 
	{
		super(testName);
	}
	
	/**
	 * Sets up the ${service.name} client.
	 */
	public void setUp() throws Exception
	{
		try 
		{
			this.service = ${fullyQualifiedTestServiceLocator}.instance().get${service.name}();	
		} 
		catch (Throwable th) 
		{
			TestCase.fail(th.toString());
		}
	}
	
	/**
	 * Allows the ${service.testName} to be run by JUnit as a suite.
	 */
	public static Test suite() 
	{
   		return new TestSuite(${service.testImplementationName}.class);
	}

	/**
	 * Runs the ${service.testName} test case.
	 */
	public static void main(String[] args) 
	{
    	junit.textui.TestRunner.main(new String[] {${service.testImplementationName}.class.getName()});
	}
	
#foreach ($operation in $service.allowedOperations)
	/**
	 * Tests: {@link ${service.fullyQualifiedName}#${operation.signature}}
	 *
	 * @see ${service.fullyQualifiedName}#${operation.signature}
     */ 
	public void $operation.testSignature
	{
		try 
		{
			${operation.testImplementationCall};
		} 
		catch (Throwable th) 
		{
			TestCase.fail(th.toString());
		}
	}
	
	/**
	 * Provides the actual test implementation for {@link #${operation.signature}}
	 */ 
	protected abstract void ${operation.testImplementationSignature}
	    throws Exception;
	
#end
}
#end