#set ($className = "AxisAttachmentHandler")
#if ($stringUtils.isNotBlank($webserviceTypesPackage))
package $webserviceTypesPackage;
#end

/**
 * This class is used for the handling attachments within service
 * operations.  It can for example publish attachments to the response of the
 * current AXIS message using {@link #storeAttachment(java.lang.Object, java.lang.String)}.
 *
 * @author Chad Brandon
 */
public class AxisAttachmentHandler
{
    /**
     * Sends the given <code>contents</code> using the appropriate current message
     * response using DIME.
     *
     * @param contents the contents of the attachment
     * @param contentType the content type (i.e. mime type)
     */
    public static void saveAttachment(
        final Object contents,
        final String contentType)
        throws javax.xml.soap.SOAPException
    {
        if (contents != null)
        {
            // the message context stores all the request/response specific stuff
            final org.apache.axis.MessageContext messageContext = getCurrentMesageContext();;
            final org.apache.axis.Message response = messageContext.getResponseMessage();

            // create an attachment and set its mime type
            final javax.xml.soap.AttachmentPart attachment = response.createAttachmentPart();
            if (attachment == null)
            {
                throw new RuntimeException("You can not create an attachment when you do " +
                    "not have the activation.jar and mail.jars available");
            }

            // - tell axis to use DIME
            response.getAttachmentsImpl().setSendType(org.apache.axis.attachments.Attachments.SEND_TYPE_DIME);
            attachment.setContent(
                convertContents(contents),
                contentType);
            response.addAttachmentPart(attachment);
        }
    }

    /**
     * Attempts to convert the given <code>contents</code> to an appropriate
     * type which AXIS can handle as an attachment.
     * @param contents the contents.
     * @return the converted type or the <code>contents</code> instance, if conversion
     *         wasn't needed.
     */
    private static Object convertContents(Object contents)
        throws javax.xml.soap.SOAPException
    {
        if (contents instanceof byte[])
        {
            contents = new java.io.ByteArrayInputStream((byte[])contents);
        }
        if (contents instanceof javax.xml.soap.AttachmentPart)
        {
            contents = ((javax.xml.soap.AttachmentPart)contents).getContent();
        }
        return contents;
    }

    /**
     * Extracts the attachments from the current message request.
     * 
     * @return List of attachments or an empty array if none exist.
     */
    public static javax.xml.soap.AttachmentPart[] getAttachments()
        throws org.apache.axis.AxisFault
    {
        final org.apache.axis.MessageContext messageContext = getCurrentMesageContext();
        final org.apache.axis.Message requestMessage = messageContext.getRequestMessage();
        org.apache.axis.attachments.Attachments attachments = requestMessage.getAttachmentsImpl();
        if (attachments == null)
        {
            throw new RuntimeException("You can not create an attachment when you do " +
                "not have the activation.jar and mail.jars available");
        }
        int attachmentCount = attachments.getAttachmentCount();
        javax.xml.soap.AttachmentPart[] attachmentParts = new javax.xml.soap.AttachmentPart[attachmentCount];
        int count = 0;
        for (final java.util.Iterator iterator = attachments.getAttachments().iterator(); iterator.hasNext(); count++)
        {
            attachmentParts[count] = (javax.xml.soap.AttachmentPart)iterator.next();
        }
        return attachmentParts;
    }
    
    /**
     * Attempts to retrieve the current message context and throws an exception if it 
     * could not be retrieved.
     * 
     * @return the current mesage context.
     */
    private static org.apache.axis.MessageContext getCurrentMesageContext()
    {
        final org.apache.axis.MessageContext messageContext = org.apache.axis.MessageContext.getCurrentContext();
        if (messageContext == null)
        {
            throw new RuntimeException("The current message context could not be retrieved, " +
                "its possible you don't have this class in a classloader available to the axis libraries");
        }
        return messageContext;
    }
}