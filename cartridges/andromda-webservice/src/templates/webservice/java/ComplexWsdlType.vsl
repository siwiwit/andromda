//
// Attention: Generated code! Do not modify by hand!
// Generated by: ComplexWsdlType.vsl in andromda-webservice-cartridge.
//
package $class.packageName;

/** 
$class.getDocumentation(" * ")
 */
public class $class.name
#if($class.generalization)  
	extends ${class.generalization.fullyQualifiedName}
#end
    implements java.io.Serializable
{
#if (!$class.properties.empty)
    
    /**
     * The default constructor.
     */
    public ${class.name}()
    {
    }
#end

    /**
     * Copies constructor from other ${class.name}
     */ 
    public ${class.name}(${class.name} otherBean) 
    {
        if (otherBean != null) 
        {
#foreach ( $property in $class.properties)
            this.${property.name} = otherBean.${property.getterName}();
#end
        }
    }
   
    /**
     * Constructor taking all properties.
     */ 
#set ($parenthesis = "(")
#if ($class.properties.empty)
#set ($parenthesis = "()")
#end
    public ${class.name}${parenthesis}
#foreach ($property in $class.properties)
#set ($typeName = $property.type.fullyQualifiedName)
#if ($property.many)
#set ($typeName = "${typeName}[]")
#end
        $typeName ${property.name}#if($velocityCount != $class.properties.size()),#else)
#end

#end
    {
#foreach ($property in $class.properties)
        this.${property.name} = ${property.name};
#end
    }
   
    // ------------------ attributes ------------------

#foreach ( $attribute in $class.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
    private $attribute.type.fullyQualifiedName ${attribute.name};

    /**
$attribute.getDocumentation("     * ") 
     */
    $attribute.visibility $typeName ${attribute.getterName}() 
    {
        return this.${attribute.name};
    }

#if (!$attribute.readOnly)
    $attribute.visibility void ${attribute.setterName}(${typeName} ${attribute.name}) 
    {
        this.${attribute.name} = ${attribute.name};
    }
    
#end
#end
    // ------------------ associations ------------------
    
#foreach ($associationEnd in $class.associationEnds)
#set ($connectingEnd = $associationEnd.otherEnd)
#if ($connectingEnd.navigable)
#set ($typeName = $connectingEnd.type.fullyQualifiedName)
#if ($connectingEnd.many)
#set ($typeName = "${typeName}[]")
#end
	private $typeName $connectingEnd.name;

    /**
$connectingEnd.getDocumentation("     * ")
     */
    $connectingEnd.visibility $typeName ${connectingEnd.getterName}() 
    {
    	return this.${connectingEnd.name};
    }

#if (!$connectingEnd.readOnly)
    $connectingEnd.visibility void ${connectingEnd.setterName}($typeName $connectingEnd.name) 
    {
    	this.${connectingEnd.name} = $connectingEnd.name;
    }
    
#end  
#end
#end
}
