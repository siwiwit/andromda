
    
    A n d r o M D A  -  andromda.version


    AndroMDA is an open-source MDA framework distributed under the BSD license.
    Go to http://www.andromda.org/ for more information.

    The project located in this directory has been generated by $projectCreator
    using the andromdapp:generate Maven plugin.

    You should at least be running Maven 1.0.2 if you want to build your
    project without any Maven-related problems, below is summary of what has
    been generated and a list of example goals to call from the command line.

    The generated project structure is well-tailored for use in the development
    of J2EE projects. The build process itself makes use of Maven, dependencies
    and often-used goals have been added for your convenience.

    Custom configuration can be done by updating the project.properties files

    /$projectName J2EE project
         |
         +-- /mda
         |     |
         |     |    The MDA module is the heart of this project, this is where
         |     |    AndroMDA is configured to generate the files needed to
         |     |    assemble the application
         |     |
         |     +-- /project.xml
         |     |        contains the AndroMDA dependencies, each cartridge
         |     |        listed here has its own namespace in which properties
         |     |        can be configured to fine-tune the generation process;
         |     |        global properties are set in the namespace of the
         |     |        andromda-plugin dependency
         |     +-- /project.properties
         |     |        specific AndroMDA properties, can be configured here,
         |     |        such as toggling the validation errors on/off
         |     +-- /maven.xml
         |     |        no need to edit this file
         |     +-- /src
         |              additional sources such as merge-mappings can be
         |              placed here, check out the /uml directory, it contains
         |              the UML model from which AndroMDA will generate code
         |
         +-- /common
         |     |
         |     |    The COMMON module collects those resources and classes
         |     |    that are shared between the other modules.
         |     |
         |     +-- /project.xml
         |     |        lists common dependencies
         |     +-- /target
         |              shared resources and java classes are generated here,
         |              such as value objects and exceptions
         |
#if ($ejb)
         +-- /core
         |     |
         |     |    The CORE module collects those resources and classes
         |     |    that use the EJB framework
         |     |
         |     +-- /project.xml
         |     |        lists EJB dependencies
         |     +-- /project.properties
         |     |        specific EJB build properties, no need to edit these
         |     +-- /maven.xml
         |     |        runs XDoclet on the generated sources
         |     +-- /src
         |     |        EJB classes that need manual implementation are
         |     |        generated here, they will not be overwritten upon
         |     |        regeneration
         |     +-- /target
         |              the EJB classes here will be overwriten each time
         |              AndroMDA generates new code using the EJB cartridge
         |
#end
#if ($hibernate)
         +-- /core
         |     |
         |     |    The CORE module collects those resources and classes
         |     |    that use the Hibernate framework
         |     |
         |     +-- /project.xml
         |     |        lists Hibernate dependencies
         |     +-- /project.properties
         |     |        specific Hibernate build properties,
         |     |        no need to edit these
         |     +-- /maven.xml
         |     |        defines goals for the generation of the database
         |     |        specific DDL code for the creation/deletion of the
         |     |        schema (using SchemaExport)
         |     +-- /src
         |     |        Hibernate classes that need manual implementation are
         |     |        generated here, they will not be overwritten upon
         |     |        regeneration; these are the entities containing
         |     |        business methods
         |     +-- /target
         |              the Hibernate resources and classes here will be
         |              overwriten each time AndroMDA generates new code
         |              using the Hibernate cartridge; this includes both
         |              the entities and the *.hbm.xml mapping files
         |
#end
#if ($spring)
         +-- /core
         |     |
         |     |    The CORE module collects those resources and classes
         |     |    that use the Spring framework, optionally making
         |     |    use of Hibernate and/or EJB under the hood.
         |     |
         |     +-- /project.xml
         |     |        lists Spring dependencies
         |     +-- /project.properties
         |     |        specific Spring build properties,
         |     |        no need to edit these
         |     +-- /maven.xml
         |     |        defines goals for the generation of the database
         |     |        specific DDL code for the creation/deletion of the
         |     |        schema (using Hibernate's SchemaExport)
         |     +-- /src
         |     |        Spring classes that need manual implementation are
         |     |        generated here, they will not be overwritten upon
         |     |        regeneration; this includes the service, DAO and
         |     |        entity implementations
         |     +-- /target
         |              the Spring resources and classes here will be
         |              overwriten each time AndroMDA generates new code
         |              using the Spring cartridge; this includes both
         |              the Hibernate entities and the correponding
         |              *.hbm.xml mapping files as well as the service
         |              and DAO base classes
         |
#end
#if ($web)
         +-- /web
         |     |
         |     |    The WEB module collects those resources and classes
         |     |    that use the Struts framework
         |     |
         |     +-- /project.xml
         |     |        lists WebApp dependencies
         |     +-- /project.properties
         |     |        specific Spring build properties,
         |     |        you can set precompileJsps=true to enable the
         |     |        automatic precompilation of JSPs
         |     +-- /maven.xml
         |     |        defines specific goals related to JSP precompilation,
         |     |        uncomment the war:init preGoal to enable the copy-over
         |     |        feature
         |     +-- /src
         |     |        controller implementations and editable resource bundles
         |     |        will be generated here,
         |     |        you might consider putting your own JSPs here to
         |     |        be copied over the generated ones when bundling the
         |     |        .war file
         |     +-- /target
         |              any Struts classes, JSPs, resource bundles and
         |              configuration files are generated here
         |
#end
#if ($webservice)
         +-- /webservice
         |     |
         |     |    The WEBSERVICE module collects those resources and
         |     |    classes that use the AXIS framework
         |     |
         |     +-- /project.xml
         |     |        lists AXIS dependencies for webservices
         |     +-- /project.properties
         |     |        no need to edit this file
         |     +-- /target
         |              generated files are emitted here
         |     |
#end
         +-- /app
               |
               |    The APP module collects those resources and classes
               |    that are required to actually build the .ear bundle
               |
               +-- /project.xml
               |        lists dependencies to be bundles into the
               |        root of the .ear
               +-- /project.properties
               |        properties controlling the bundling and deploying
               |        process set the JBoss server directory here, or
               |        choose to explode the .ear bundle on deploy
               +-- /maven.xml
               |        goals to deploy and undeploy the application
               +-- /src
               |        any custom resources that should be deployed
               |        together with the application
               |        (eg. server deployment descriptors)
               +-- /target
                        a deployable application is bundled here



    In order to succesfully build your project you will need to know
    how to invoke the build process for the existing modules, here's a
    list of examples:

        %> maven install

            simply builds all modules

        %> maven deploy

            collects all artifacts and builds en .ear bundle which is then
            deployed, you will need to have built the other modules before

        %> maven clean install deploy

            deletes all generated files, rebuilds and deploys; files in /src
            directories are *not* deleted

        %> maven mda

            runs AndroMDA on your model and thereby generating files in
            the subdirectories of the existing modules

        %> maven mda -Dfilter=java,hibernate

            runs AndroMDA, but this time only using the Java and Hibernate
            cartridges (in that order)

        %> maven mda -Dfilter=~java,hibernate

            runs AndroMDA, but this time using all cartridges *except*
            the Java and Hibernate cartridges

        %> maven mda -Dfilter=java core web deploy

            runs AndroMDA using only the Java cartridge, rebuilds the core
            module and then the web module and deploys afterwards


    Please note that you may use the '-o' flag at any time to avoid
    having Maven download the dependencies, only build online when Maven
    complains about missing dependencies.

    Each module will install it's artifact into your local Maven repository,
    this might be a directory looking like this:

        (Windows)
        C:\Documents and Settings\\${projectCreator}\.maven\repository\\${projectId}\

        (*nix)
        /home/${projectCreator}/.maven/repository/${projectId}/

    For questions or feature requests please subscribe to our mailing lists,
    this can be done here: http://www.andromda.org/mail-lists.html


    Good luck!


        -- The AndroMDA Team


