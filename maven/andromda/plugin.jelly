<project xmlns:j="jelly:core"
         xmlns:ant="jelly:ant"
         xmlns:maven="jelly:maven">
      
    <!-- ===================================================================
         Call AndroMDA to generate code from the model                             
         =================================================================== -->
    <goal name="andromda:run${bootstrap}"
    	  description="Runs AndroMDA with plugins defined as dependencies with your POM">
    	 
    	<j:choose>
    		<j:when test="${maven.andromda.bootstrap.mode}">
				<ant:echo>+---------------------------------------------------------------------------+</ant:echo>
				<ant:echo>|    R u n n i n g   A n d r o M D A   I n   B O O T S T R A P   M o d e    |</ant:echo>
				<ant:echo>+---------------------------------------------------------------------------+</ant:echo>      			
    		</j:when>
    		<j:otherwise>
				<ant:echo>+--------------------------------------------+</ant:echo>
				<ant:echo>|      R u n n i n g    A n d r o M D A      |</ant:echo>
				<ant:echo>+--------------------------------------------+</ant:echo>     			
    		</j:otherwise>
    	</j:choose>
    	
        <j:new var="pluginUtils" className="org.andromda.maven.MavenPluginUtils"/>
 
	    <ant:path id="maven.andromda.classpath">
		    <ant:pathelement path="${plugin.dependencyClasspath}"/>   		
		    <ant:path refid="maven.dependency.classpath"/> 
	    </ant:path>
        <!-- add any model dependencies -->
        <attainGoal name="andromda:add-model-dependencies"/>

  		<ant:taskdef
            name="andromda"
            classname="org.andromda.core.anttasks.AndroMDAGenTask">
		    <ant:classpath>		
			    <ant:path refid="maven.andromda.classpath"/> 
		    </ant:classpath>
        </ant:taskdef>  
            
        <ant:andromda modelURL="${maven.andromda.model.uri}"
                      basedir="${maven.andromda.src.dir}"
                      includes="${maven.andromda.src.includes}"
                      lastModifiedCheck="${maven.andromda.src.lastModifiedCheck}"
                      processAllModelPackages="${maven.andromda.processAllModelPackages}">
                          	
            <!-- set the maximum number of packages that may be set, 
                 this can always be increased later, but not sure we would ever need to -->
            <j:set var="maximum" value="30"/>

            <!-- set the modelPackages -->  
            <j:set var="index" value="0"/>
            <j:forEach begin="0" end="${maximum}" indexVar="index">
                <j:set var="indexVarName" value="maven.andromda.modelPackage.${index}.name"/>
                <j:if test="${context.getVariable(indexVarName) != null}">
                    <ant:modelPackage>
                    
                        <!-- set the name -->
                        <ant:setProperty 
                            name="name" 
                            value="${context.getVariable(indexVarName)}"/>
                        <!-- set shouldProcess -->
                        <j:set 
                            var="indexVarName" 
                            value="maven.andromda.modelPackage.${index}.shouldProcess"/>
                        <ant:setProperty 
                            name="shouldProcess" 
                            value="${context.getVariable(indexVarName)}"/>         
                                           
                    </ant:modelPackage>
                    
                </j:if>
            </j:forEach>        	
   
            <j:forEach var="artifact" items="${pom.artifacts}">
            	   		
   		        <j:set var="dependency" value="${artifact.dependency}"/>  
   	
				<j:choose>
					<j:set var="boostrapArtifactId" value="${dependency.artifactId}-bootstrap"/>
					<j:when test="${plugin.artifactId eq dependency.artifactId or 
						             plugin.artifactId eq bootstrapArtifactId}">
						<j:set var="namespaceName" value="default"/>
					</j:when>
					<j:otherwise>
						<j:set var="namespaceName" value="${pluginUtils.getCartridgeName(artifact.file.toURL())}"/>
					</j:otherwise>
				</j:choose>
				
				<!-- only continue if we have a valid namespace name -->
				<j:if test="${namespaceName != null and namespaceName != ''}">

					<ant:namespace name="${namespaceName}">
			
					<j:forEach var="property" items="${dependency.properties}">

						<j:set var="propertyName" value="${pluginUtils.getDependencyPropertyName(property)}"/>
						<j:set var="propertyValue" value="${pluginUtils.getDependencyPropertyValue(property)}"/>
						<j:set var="isIgnored" value="${pluginUtils.isDependencyPropertyIgnored(property)}"/>
						<j:if test="${propertyName != null and propertyName != ''}">
							<property name="${propertyName}" value="${propertyValue}" ignore="${isIgnored}"/>    
						</j:if>
												
					</j:forEach>
					
					</ant:namespace>
				
				</j:if>
				
			</j:forEach>
            
            <!-- set the repository module search path -->
            <ant:repository classname="${maven.andromda.repository}">
			    <ant:moduleSearchPath>
                    <j:set var="index" value="0"/>
                    <j:forEach begin="0" end="${maximum}" indexVar="index">
                        <j:set var="indexVarName" value="maven.andromda.repository.moduleSearchPath.location.${index}"/>
                        <j:set var="location" value="${context.getVariable(indexVarName)}"/>
                        <j:if test="${location != null}">
                        
                            <ant:pathelement>
                                <ant:setProperty 
                                    name="location" 
                                    value="${location}"/>                                        
                            </ant:pathelement>
                             
                        </j:if>
                    </j:forEach>
                </ant:moduleSearchPath>
			</ant:repository>

        </ant:andromda>
      	
	</goal>
	
	<!-- ================================================================
	       Installs a model into the local repository.
	     ================================================================ 
	<goal name="andromda:install-model"
	      description="Installs a xml.zip model into the local repository">
	   <j:set var="maven.xml.zip.final.name" 
	          value="${maven.build.dir}/${maven.final.name}"/>
  	    <j:set var="modelXml" value="andromda-profile.xml"/>
		<ant:unzip 
		    src="${maven.src.dir}/uml/${modelXml}.zip" 
		    dest="${maven.build.dir}"/>
		<ant:move
		    file="${maven.build.dir}/${modelXml}"
		    tofile="${maven.xml.zip.final.name}.xml"/>
	    <ant:zip destfile="${maven.xml.zip.final.name}.xml.zip"
	             basedir="${maven.build.dir}"
	             includes="*.xml"/>	 	
	    <artifact:install
	        artifact="${maven.xml.zip.final.name}.xml.zip"
	        type="xml.zip"
	        project="${pom}"/> 	
	</goal> -->
	
	<!-- ================================================================
	       Adds model dependencies (since they aren't added by Maven)
	     ================================================================ -->
	<goal name="andromda:add-model-dependencies"
	      description="Internal goal used by the plugin">
        <j:forEach var="artifact" items="${pom.artifacts}" varStatus="index">
            <j:set var="dep" value="${artifact.dependency}"/>
            <j:if test="${dep.type == 'xml.zip'}">
            	<j:set var="depPath" 
            		   value="${maven.repo.local}/${dep.groupId}/${dep.type}s/${dep.artifact}"/>
				<ant:path
					id="maven.andromda.model.path${index}"
					location="${depPath}"/>	       	
				<maven:addPath
					id="maven.andromda.classpath"
					refid="maven.andromda.model.path${index}"/>
            </j:if>
        </j:forEach>	      
	</goal>

</project>