<?xml version="1.0"?>

<document>

  <properties>
    <author email="cwbrandon@users.sourceforge.net">Chad Brandon</author>
    <title>AndroMDA - Schema2XMI</title>
  </properties>

  <body>

    <section name="What is Schema2XMI?">
        <p>
			Schema2XMI is a generator that will read a database
			schema and write your schema's into an XMI model.
			This is useful for a couple of reasons:
			<ul>
				<li>
					Your company wants your DBA(s) to design your
					schema.
				</li>
				<li>
					Your application already has an existing schema.
				</li>
				<li>
					You want to move an legacy application to AndroMDA.
				</li>
			</ul>
        </p>
		<subsection name="How do I use Schema2XMI?">
			<p>
				Schema2XMI is a command line utility that you'll
				pass arguments to and then execute the main
				<a href="apidocs/org/andromda/schema2xmi/Schema2XMI.html">Schema2XMI</a> class.
				The usage is defined below:
			</p>
<source><![CDATA[
usage: org.andromda.schema2xmi.Schema2XMI [options] ...]]

Options:
 -C,--classStereotypes <arg>        Comma seperated list of stereotype
                                    names to add to the created class
 -I,--identifierStereotypes <arg>   Comma seperated list of stereotype
                                    names to add to any class identifiers
 -P,--package <arg>                 The package to output classifiers
 -V,--tableTaggedValue <arg>        The tagged value to use for storing
                                    the table name
 -c,--connectionUrl <arg>           JDBC connection URL
 -d,--driver <arg>                  JDBC driver class
 -h,--help                          Display help information
 -i,--input <arg>                   Input model file (to which model
                                    elements will be added)
 -m,--mappings <arg>                The type mappings URI (i.e.
                                    file:${basedir}/DataypeMappings.xml)
 -o,--output <arg>                  Set output name to which the result of
                                    the transformation will be written
 -p,--password <arg>                Schema user password
 -s,--schema <arg>                  The name of the schema where the
                                    tables can be found
 -t,--tablePattern <arg>            The table name pattern of tables to
                                    process (regular expression)
 -u,--user <arg>                    Schema user name
 -v,--columnTaggedValue <arg>       The tagged value to use for storing
                                    the column name
]]></source>
        <p>
			Here's an example of how you could use Schema2XMI with 
			an Oracle schema from Ant with the <code>java</code> task .
        </p>
<source><![CDATA[
<java classname="org.andromda.schema2xmi.Schema2XMI" fork="true">
    <classpath>
        <path refid="schema2xmi.classpath"/>
    </classpath>
    <arg value="-i"/>
    <arg value="jar:file:${maven.src.dir}/test/uml/SomeModel.xml.zip!/SomeModel.xml"/>
    <arg value="-u"/>
    <arg value="someuser"/>
    <arg value="-p"/>
    <arg value="somepassword"/>
    <arg value="-c"/>
    <arg value="jdbc:oracle:oci:@yoursid"/>
    <arg value="-d"/>
    <arg value="oracle.jdbc.driver.OracleDriver"/>
    <arg value="-m"/>
    <arg value="file:${maven.conf.dir}/mappings/DatatypeMappings.xml"/>
    <arg value="-o"/>
    <arg value="${maven.build.dir}/schema2xmi/transformed.xmi"/>
    <arg value="-t"/>
    <arg value="[p{Lower}\p{Upper}[_]]*"/>
    <arg value="-P"/>
    <arg value="org::andromda::sample"/>
    <arg value="-C"/>
    <arg value="entity,persistent"/>
    <ant value="-I"/>
    <arg value="identifier"/>
    <arg value="-V"/>
    <arg value="@persistence.table"/>
    <arg value="-v"/>
    <arg value="@persistence.column"/>
</java>
]]></source>
		</subsection>
    </section>
  </body>
</document>
