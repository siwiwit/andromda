<?xml version="1.0"?>

<project xmlns:j="jelly:core"
         xmlns:ant="jelly:ant"
         xmlns:util="jelly:util"
         xmlns:maven="jelly:maven">
       
    <!-- ===================================================================
         Performs intialization.  Mainly handles the adding of the
         the andromda dependencies to the maven.andromda.classpath, this is necessary 
         because of the fact that AndroMDA uses the 'andromda:run' goal
         to build some of its components, such as the metafacades.  This also
         allows us to swich back and forth between normal and 'bootstrap' mode.
         If the '-Dmaven.andromda.bootstrap.mode=true' option is set, 
         then this cartridge will be run in bootstrap mode using the AndroMDA bootstrap 
         dependencies instead of the most current dependencies.  A bootstrap 
         dependency has the same name as a normal dependency with '-bootstrap' 
         inserted between the artifactId and the version 
         (i.e. andromda-core-bootstrap-3.0.jar).                        
         =================================================================== -->  
	<goal name="andromda:init">
		
		<j:set var="version" value="${maven.andromda.bootstrap.version}"/>		
		<util:tokenize var="artifacts" delim=",">${maven.andromda.bootstrap.artifacts}</util:tokenize>
		<j:set var="bootstrapMode" value="${maven.andromda.bootstrap.mode}"/>
		<ant:path id="maven.andromda.classpath">	  		
			<ant:property name="mavenDependencyClasspath" refid="maven.dependency.classpath"/>
            <j:forEach var="artifact" items="${artifacts}">           	
            	<j:new var="pluginUtils" className="org.andromda.maven.MavenPluginUtils"/>
            	<j:set var="artifactId" value="${pluginUtils.getArtifactId(artifact)}"/>
            	<j:set var="groupId" value="${pluginUtils.getGroupId(artifact)}"/>
            	
            	<j:set var="artifactDirLocation" value="${maven.repo.local}/${groupId}/jars"/>
            	<j:set var="artifactLocation" value="${artifactDirLocation}/${artifactId}-${version}.jar"/>		
				<j:choose>
					<j:set 
						var="bootstrapArtifactName" 
						value="${artifactId}-bootstrap-${version}.jar"/>
					<j:when test="${bootstrapMode}">
						<!-- make sure we get the bootstrap version since it isn't
							 a normal maven dependency (but only try to download 
							 if we are online) -->
						<j:if test="${context.online}">
							<ant:get 
								dest="${artifactDirLocation}/${bootstrapArtifactName}" 
								usetimestamp="true" 
								ignoreerrors="true" 
								src="${maven.andromda.bootstrap.repos}/${groupId}/jars/${bootstrapArtifactName}"/>
					    </j:if>
						<ant:pathelement 
							location="${artifactDirLocation}/${bootstrapArtifactName}"/>
						
						<!-- remove any non-bootstrap versions of bootstrap dependencies found 
							 in the plugin dependency classpath -->
						<j:set 
							var="pluginDependencyPath" 
							value="${pluginUtils.removeFromPath(plugin.dependencyClasspath, artifactLocation)}"/>
						<j:set 
							var="mavenDependencyPath" 
							value="${pluginUtils.removeFromPath(mavenDependencyClasspath, artifactLocation)}"/>
					</j:when>
					<j:otherwise>
						<ant:pathelement location="${artifactLocation}"/>
						<j:set var="pluginDependencyPath" value="${plugin.dependencyClasspath}"/>
						<j:set var="mavenDependencyPath" value="${mavenDependencyClasspath}"/>
					</j:otherwise>			
				</j:choose>
			</j:forEach>	
			<ant:pathelement path="${mavenDependencyPath}"/> 
			<ant:pathelement path="${pluginDependencyPath}"/> 
		</ant:path>
	</goal>

    <!-- ===================================================================
         Call AndroMDA to generate code from the model                             
         =================================================================== -->
    <goal name="andromda:run"
    	  prereqs="andromda:init">
    	
    	<j:choose>
    		<j:when test="${bootstrapMode}">
				<ant:echo>+---------------------------------------------------------------------------+</ant:echo>
				<ant:echo>|    R u n n i n g   A n d r o M D A   I n   B O O T S T R A P   M o d e    |</ant:echo>
				<ant:echo>+---------------------------------------------------------------------------+</ant:echo>      			
    		</j:when>
    		<j:otherwise>
				<ant:echo>+--------------------------------------------+</ant:echo>
				<ant:echo>|      R u n n i n g    A n d r o M D A      |</ant:echo>
				<ant:echo>+--------------------------------------------+</ant:echo>     			
    		</j:otherwise>
    	</j:choose>
    
  		<ant:taskdef
            name="andromda"
            classname="org.andromda.core.anttasks.AndroMDAGenTask"
            classpathref="maven.andromda.classpath"/>
            
        <ant:andromda modelURL="${maven.andromda.model.uri}"
                      basedir="${maven.andromda.src.dir}"
                      includes="${maven.andromda.src.includes}"
                      lastModifiedCheck="${maven.andromda.src.lastModifiedCheck}"
                      processAllModelPackages="${maven.andromda.processAllModelPackages}">
             	
            <!-- set the maximum number of cartridges, and packages that may be set, 
                 this can always be increased later, but not sure we would ever need to -->
            <j:set var="maximum" value="30"/>

            <!-- set the modelPackages -->  
            <j:set var="index" value="0"/>
            <j:forEach begin="0" end="${maximum}" indexVar="index">
                <j:set var="indexVarName" value="maven.andromda.modelPackage.${index}.name"/>
                <j:if test="${context.getVariable(indexVarName) != null}">
                
                    <ant:modelPackage>
                    
                        <!-- set the name -->
                        <ant:setProperty 
                            name="name" 
                            value="${context.getVariable(indexVarName)}"/>
                        <!-- set shouldProcess -->
                        <j:set 
                            var="indexVarName" 
                            value="maven.andromda.modelPackage.${index}.shouldProcess"/>
                        <ant:setProperty 
                            name="shouldProcess" 
                            value="${context.getVariable(indexVarName)}"/>         
                                           
                    </ant:modelPackage>
                    
                </j:if>
            </j:forEach>        	
   
            <j:forEach var="artifact" items="${pom.artifacts}">
            	   		
   		        <j:set var="dependency" value="${artifact.dependency}"/>  
   	
				<j:choose>
					<j:when test="${plugin.artifactId == dependency.artifactId}">
						<j:set var="namespaceName" value="default"/>
					</j:when>
					<j:otherwise>
						<j:set var="namespaceName" value="${pluginUtils.getCartridgeName(artifact.file.toURL())}"/>
					</j:otherwise>
				</j:choose>
				
				<!-- only continue if we have a valid namespace name -->
				<j:if test="${namespaceName != null and namespaceName != ''}">

					<ant:namespace name="${namespaceName}">
			
					<j:forEach var="property" items="${dependency.properties}">
						
						<j:set var="propertyName" value="${pluginUtils.getDependencyPropertyName(property)}"/>
						<j:set var="propertyValue" value="${pluginUtils.getDependencyPropertyValue(property)}"/>
						<j:set var="isIgnored" value="${pluginUtils.isDependencyPropertyIgnored(property)}"/>
						<j:if test="${propertyName != null and propertyName != ''}">
							<property name="${propertyName}" value="${propertyValue}" ignore="${isIgnored}"/>    
						</j:if>
												
					</j:forEach>
					
					</ant:namespace>
				
				</j:if>
				
			</j:forEach>
            
            <!-- set the repository module search path -->
            <ant:repository classname="${maven.andromda.repository}">
			    <ant:moduleSearchPath>
                    <j:set var="index" value="0"/>
                    <j:forEach begin="0" end="${maximum}" indexVar="index">
                        <j:set var="indexVarName" value="maven.andromda.repository.moduleSearchPath.location.${index}"/>
                        <j:set var="location" value="${context.getVariable(indexVarName)}"/>
                        <j:if test="${location != null}">
                        
                            <ant:pathelement>
                                <ant:setProperty 
                                    name="location" 
                                    value="${location}"/>                                        
                            </ant:pathelement>
                             
                        </j:if>
                    </j:forEach>
                </ant:moduleSearchPath>
			</ant:repository>

        </ant:andromda>
      	
	</goal>
	
</project>
