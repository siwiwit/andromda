<project default="war:install"
         xmlns:ant="jelly:ant"
         xmlns:maven="jelly:maven"
         xmlns:j="jelly:core">

    <!-- copying custom web files over the generated ones (or just adding them) -->
<!-- uncomment this section and put files in src/jsp to have them copied over the generated ones
    <preGoal name="war:init">
        <ant:copy todir="${maven.war.webapp.dir}" overwrite="true">
            <ant:fileset dir="${maven.src.dir}/jsp">
                <include name="**/*"/>
            </ant:fileset>
        </ant:copy>
    </preGoal>
-->

#if ($webservice)
    <!-- =====================================================================
            - Remove the 'ignore::' prefix and configure the <ant:mapping> elements
              according to the services for which you want to generate webservice
              JAX-RPC stubs.
            - Handles the generation of Axis wsdl2java JAX-RPC client classes
         ===================================================================== -->
    <preGoal name="ignore::war:init">
        <ant:path id="axis.classpath">
            <ant:pathelement path="${pom.dependencyClasspath}"/>
        </ant:path>
        <ant:taskdef
            resource="axis-tasks.properties"
            classpathref="axis.classpath"/>
        <ant:mkdir dir="${maven.build.src}"/>
        <ant:axis-wsdl2java
            output="${maven.build.src}"
            verbose="true"
            testcase="false"
            url="${service.wsdlUrl}">
            <!-- we prefix the generated package with 'ws' to
                 avoid conflicts with other class names -->
            <!-- add as many mappings you need for each service -->
            <ant:mapping
                namespace="http://${someService.package}"
                package="${someService.package}.ws"/>
        </ant:axis-wsdl2java>
    </preGoal>

#end
    <!--
        | We are going to make a WAR bundle in which the JSPs have been precompiled,
        | this means we will need to generate the Java source from those JSPs. This is
        | all done after the war has been generated.
    -->
    <postGoal name="war:war">
        <j:if test="${precompileJsps}">
            <!-- setting up the directories to work with -->
            <ant:property name="war.precompile.jsp" location="${maven.war.build.dir}/precompiled"/>
            <ant:property name="jsp.precompilation.java" location="${war.precompile.jsp}/jsp-java"/>
            <ant:property name="jsp.precompilation.classes" location="${war.precompile.jsp}/jsp-classes"/>
            <ant:property name="jsp.precompilation.servlets" location="${war.precompile.jsp}/jsp-servlets.xml"/>
            <ant:property name="jsp.precompilation.webapp" location="${maven.war.webapp.dir}"/>

            <!-- clearing old garbage from the target directories -->
            <ant:mkdir dir="${jsp.precompilation.java}"/>
            <ant:mkdir dir="${jsp.precompilation.classes}"/>

            <!-- the class path for precompilation -->
            <ant:path id="jsp.precompilation.classpath">
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement location="${jsp.precompilation.webapp}/WEB-INF/classes"/>
                <ant:pathelement location="${jsp.precompilation.webapp}/WEB-INF/lib/andromda-breadcrumbs-taglib.jar"/>
                <ant:pathelement location="${jsp.precompilation.webapp}/WEB-INF/lib/andromda-formatting-taglib.jar"/>
            </ant:path>

            <!-- generating java code from the JSPs -->
            <ant:echo message="Generating Java sources from JSPs"/>
            <ant:java classname="org.apache.jasper.JspC" fork="true" classpathref="jsp.precompilation.classpath">
                <ant:arg value="-webapp"/>
                <ant:arg value="${jsp.precompilation.webapp}"/>
                <ant:arg value="-d"/>
                <ant:arg value="${jsp.precompilation.java}"/>
                <ant:arg value="-webinc"/>
                <ant:arg value="${jsp.precompilation.servlets}"/>
                <ant:arg value="-p"/>
                <ant:arg value="a"/> <!-- to shorten the package name JspC uses to prefix the compiled jsps -->
            </ant:java>

            <!-- Compiling the sources generated from the JSPs -->
            <ant:echo message="Compiling generated java sources"/>
            <ant:javac srcdir="${jsp.precompilation.java}"
                classpathref="jsp.precompilation.classpath"
                destdir="${jsp.precompilation.webapp}/WEB-INF/classes"
                deprecation="on"/>

            <!-- only process the next code when the mda project has generateWebXmlIds set to true as a
                 bpm4struts namespace property; one could argue the use of a property in /project.properties
                 and use it in both /mda/project.xml and this /web/maven.xml, but the thing is that it doesn't really
                 belong in /project.properties unless we move the other web properties there too
                -->
            <u:file var="mdaProjectFile" name="${pom.file.parent}/../mda/project.xml"/>
            <ant:echo>${mdaProjectFile}</ant:echo>
            <j:invokeStatic var="mdaProject" className="org.apache.maven.MavenUtils" method="getProject">
                <j:arg type="java.io.File" value="${mdaProjectFile}"/>
            </j:invokeStatic>
            <j:if test="${mdaProject.getDependency('andromda:andromda-bpm4struts-cartridge').properties.contains('property:generateWebXmlIds:true')}">
                <ant:echo message="Adding id attributes to JspC generated servlet and servlet-mapping elements"/>
                <u:loadText var="webXmlFragment" file="${jsp.precompilation.servlets}"/>

                <!-- add ids to the servlets -->
                <j:set var="counter" value="1"/>
#set ($counterIncrement = "counter+1")
#set ($tokenSearch = "webXmlFragment.indexOf('&lt;servlet&gt;') >= 0")
#set ($replaceCall = "webXmlFragment.replaceFirst('&lt;servlet&gt;',replaceValue)")
                <j:while test="${${tokenSearch}}">
                    <j:set var="replaceValue" value="&lt;servlet id=&quot;servlet_jspc_${counter}&quot;&gt;"/>
                    <j:set var="webXmlFragment" value="${${replaceCall}}"/>
                    <j:set var="counter" value="${${counterIncrement}}"/>
                </j:while>

                <!-- add ids to the servlet-mappings -->
                <j:set var="counter" value="1"/>
#set ($tokenSearch = "webXmlFragment.indexOf('&lt;servlet-mapping&gt;') >= 0")
#set ($replaceCall = "webXmlFragment.replaceFirst('&lt;servlet-mapping&gt;',replaceValue)")
                <j:while test="${${tokenSearch}}">
                    <j:set var="replaceValue" value="&lt;servlet-mapping id=&quot;servlet_mapping_jspc_${counter}&quot;&gt;"/>
                    <j:set var="webXmlFragment" value="${${replaceCall}}"/>
                    <j:set var="counter" value="${${counterIncrement}}"/>
                </j:while>

                <!-- write the text back to file -->
                <j:file omitXmlDeclaration="true" escapeText="false"
                    name="${jsp.precompilation.servlets}">${webXmlFragment}</j:file>
            </j:if>

            <!-- merging additional web.xml directives -->
            <ant:echo message="Merging additional web.xml directives"/>
            <ant:loadfile property="jsp.servlets.text" srcFile="${jsp.precompilation.servlets}"/>
            <ant:replace file="${jsp.precompilation.webapp}/WEB-INF/web.xml"
                value="${jsp.servlets.text}"
                token="&lt;!-- precompilation merge-point --&gt;"/>

            <!-- storing this bundle into a new WAR archive -->
            <ant:echo message="Reconstructing web application WAR bundle"/>
            <ant:war destfile="${maven.war.build.dir}/${maven.war.final.name}"
                webxml="${jsp.precompilation.webapp}/WEB-INF/web.xml"
                update="false">
                <ant:fileset dir="${jsp.precompilation.webapp}">
                    <ant:exclude name="*/**/*.jsp*"/> <!-- we don't want the jsp files except for the welcome file -->
                </ant:fileset>
            </ant:war>
        </j:if>
    </postGoal>

    <!--
        | This is where merge points within the web.xml can be replaced, just add content
        | to the 'j:set' body for the merge point you want to use (or add additional ones from the
        | web.xml), and remove the 'ignore::' prefix
    -->
    <postGoal name="ignore::war:webapp">
        <!-- insert merge points -->
        <j:set var="contextParams" encode="false">
            <![CDATA[
            <context-param>
                <param-name>some-context-param</param-name>
                <param-value>some-context-param-value</param-value>
            </context-param>
            ]]>
        </j:set>
        <ant:replace file="${maven.war.webapp.dir}/WEB-INF/web.xml"
            value="${contextParams}"
            token="&lt;!-- context-params merge-point --&gt;"/>
        <j:set var="contextParams" encode="false">
        </j:set>
        <ant:replace file="${maven.war.webapp.dir}/WEB-INF/web.xml"
            value="${filters}"
            token="&lt;!-- filter merge-point --&gt;"/>
        <j:set var="filterMappings" encode="false">
        </j:set>
        <ant:replace file="${maven.war.webapp.dir}/WEB-INF/web.xml"
            value="${filterMappings}"
            token="&lt;!-- filter-mapping merge-point --&gt;"/>
    </postGoal>

</project>
