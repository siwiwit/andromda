<?xml version="1.0"?>

<project xmlns:j="jelly:core"
         xmlns:ant="jelly:ant"
         xmlns:util="jelly:util"
         xmlns:maven="jelly:maven"
         xmlns:i="jelly:interaction"
         xmlns:velocity="jelly:velocity">
       
    <!-- ===================================================================
         Performs intialization.  Mainly handles the adding of the
         the andromda dependencies to the maven.andromda.classpath, this is necessary 
         because of the fact that AndroMDA uses the 'andromda:run' goal
         to build some of its components, such as the metafacades.  This also
         allows us to swich back and forth between normal and 'bootstrap' mode.
         If the '-Dmaven.andromda.bootstrap.mode=true' option is set, 
         then this cartridge will be run in bootstrap mode using the AndroMDA bootstrap 
         dependencies instead of the most current dependencies.  A bootstrap 
         dependency has the same name as a normal dependency with '-bootstrap' 
         inserted between the artifactId and the version 
         (i.e. andromda-core-bootstrap-3.0.jar).                        
         =================================================================== -->  
	<goal name="andromda:init">
		
		<j:set var="version" value="${maven.andromda.bootstrap.version}"/>		
		<util:tokenize var="artifacts" delim=",">${maven.andromda.bootstrap.artifacts}</util:tokenize>
		<j:set var="bootstrapMode" value="${maven.andromda.bootstrap.mode}"/>
		<ant:path id="maven.andromda.classpath">	  		
			<ant:property name="mavenDependencyClasspath" refid="maven.dependency.classpath"/>
			<j:set var="mavenDependencyPath" value="${mavenDependencyClasspath}"/>
			<j:set var="pluginDependencyPath" value="${plugin.dependencyClasspath}"/>
            <j:forEach var="artifact" items="${artifacts}" varStatus="index">           	
            	<j:new var="pluginUtils" className="org.andromda.maven.MavenPluginUtils"/>
            	<j:set var="artifactId" value="${pluginUtils.getArtifactId(artifact)}"/>
            	<j:set var="groupId" value="${pluginUtils.getGroupId(artifact)}"/>
            	
            	<j:set var="artifactDirLocation" value="${maven.repo.local}/${groupId}/jars"/>	
				<j:choose>
					<j:set 
						var="artifactName" 
						value="${artifactId}-bootstrap-${version}.jar"/>
					<j:set var="artifactLocation" value="${artifactDirLocation}/${artifactName}"/>	
					<j:when test="${bootstrapMode}">
						<ant:pathelement 
							location="${artifactDirLocation}/${artifactName}"/>
						<!-- remove any non-bootstrap versions of bootstrap dependencies found 
							 in the plugin dependency classpath -->
						<j:set 
							var="pluginDependencyPath" 
							value="${pluginUtils.removeFromPath(pluginDependencyPath, artifactLocation)}"/>
						<j:set 
							var="mavenDependencyPath" 
							value="${pluginUtils.removeFromPath(mavenDependencyPath, artifactLocation)}"/>
					</j:when>
					<j:otherwise>
            	        <j:set var="artifactName" value="${artifactId}-${version}.jar"/>
						<ant:pathelement location="${artifactDirLocation}/${artifactName}"/>
						<j:set var="pluginDependencyPath" value="${plugin.dependencyClasspath}"/>
						<j:set var="mavenDependencyPath" value="${mavenDependencyClasspath}"/>
					</j:otherwise>			
				</j:choose>
				<!-- make sure we get the artifact since it isn't
					 a normal maven dependency (but only try to download 
					 if we are online) -->
				<j:if test="${context.online}">
					<j:set 
						var="remoteArtifact" 
						value="${maven.andromda.bootstrap.repos}/${groupId}/jars/${artifactName}"/>
					<ant:get 
						dest="${artifactDirLocation}/${artifactName}" 
						usetimestamp="true" 
						ignoreerrors="true" 
						src="${remoteArtifact}"/>
					<j:set var="artifactAvailable" value="artifactAvailable${index}"/>
					<ant:available
						property="artifactAvailable"
						file="${artifactDirLocation}/${artifactName}"/>
					<j:if test="${artifactAvailable == null}">
						<ant:fail>
							<ant:echo>Failed to download artifact: '${remoteArtifact}'</ant:echo>
						</ant:fail>
					</j:if>
				</j:if>
			</j:forEach>	
			<ant:pathelement path="${mavenDependencyPath}"/> 
			<ant:pathelement path="${pluginDependencyPath}"/> 
		</ant:path>
	</goal>

    <!-- ===================================================================
         Call AndroMDA to generate code from the model                             
         =================================================================== -->
    <goal name="andromda:run"
    	  prereqs="andromda:init">
    	
    	<j:choose>
    		<j:when test="${bootstrapMode}">
				<ant:echo>+---------------------------------------------------------------------------+</ant:echo>
				<ant:echo>|    R u n n i n g   A n d r o M D A   I n   B O O T S T R A P   M o d e    |</ant:echo>
				<ant:echo>+---------------------------------------------------------------------------+</ant:echo>      			
    		</j:when>
    		<j:otherwise>
				<ant:echo>+--------------------------------------------+</ant:echo>
				<ant:echo>|      R u n n i n g    A n d r o M D A      |</ant:echo>
				<ant:echo>+--------------------------------------------+</ant:echo>     			
    		</j:otherwise>
    	</j:choose>
    
  		<ant:taskdef
            name="andromda"
            classname="org.andromda.core.anttasks.AndroMDAGenTask"
            classpathref="maven.andromda.classpath"/>
            
        <ant:andromda modelURL="${maven.andromda.model.uri}"
                      basedir="${maven.andromda.src.dir}"
                      includes="${maven.andromda.src.includes}"
                      lastModifiedCheck="${maven.andromda.src.lastModifiedCheck}"
                      processAllModelPackages="${maven.andromda.processAllModelPackages}">
             	
            <!-- set the maximum number of packages that may be set, 
                 this can always be increased later, but not sure we would ever need to -->
            <j:set var="maximum" value="30"/>

            <!-- set the modelPackages -->  
            <j:set var="index" value="0"/>
            <j:forEach begin="0" end="${maximum}" indexVar="index">
                <j:set var="indexVarName" value="maven.andromda.modelPackage.${index}.name"/>
                <j:if test="${context.getVariable(indexVarName) != null}">
                
                    <ant:modelPackage>
                    
                        <!-- set the name -->
                        <ant:setProperty 
                            name="name" 
                            value="${context.getVariable(indexVarName)}"/>
                        <!-- set shouldProcess -->
                        <j:set 
                            var="indexVarName" 
                            value="maven.andromda.modelPackage.${index}.shouldProcess"/>
                        <ant:setProperty 
                            name="shouldProcess" 
                            value="${context.getVariable(indexVarName)}"/>         
                                           
                    </ant:modelPackage>
                    
                </j:if>
            </j:forEach>        	
   
            <j:forEach var="artifact" items="${pom.artifacts}">
            	   		
   		        <j:set var="dependency" value="${artifact.dependency}"/>  
   	
				<j:choose>
					<j:when test="${plugin.artifactId == dependency.artifactId}">
						<j:set var="namespaceName" value="default"/>
					</j:when>
					<j:otherwise>
						<j:set var="namespaceName" value="${pluginUtils.getCartridgeName(artifact.file.toURL())}"/>
					</j:otherwise>
				</j:choose>
				
				<!-- only continue if we have a valid namespace name -->
				<j:if test="${namespaceName != null and namespaceName != ''}">

					<ant:namespace name="${namespaceName}">
			
					<j:forEach var="property" items="${dependency.properties}">
						
						<j:set var="propertyName" value="${pluginUtils.getDependencyPropertyName(property)}"/>
						<j:set var="propertyValue" value="${pluginUtils.getDependencyPropertyValue(property)}"/>
						<j:set var="isIgnored" value="${pluginUtils.isDependencyPropertyIgnored(property)}"/>
						<j:if test="${propertyName != null and propertyName != ''}">
							<property name="${propertyName}" value="${propertyValue}" ignore="${isIgnored}"/>    
						</j:if>
												
					</j:forEach>
					
					</ant:namespace>
				
				</j:if>
				
			</j:forEach>
            
            <!-- set the repository module search path -->
            <ant:repository classname="${maven.andromda.repository}">
			    <ant:moduleSearchPath>
                    <j:set var="index" value="0"/>
                    <j:forEach begin="0" end="${maximum}" indexVar="index">
                        <j:set var="indexVarName" value="maven.andromda.repository.moduleSearchPath.location.${index}"/>
                        <j:set var="location" value="${context.getVariable(indexVarName)}"/>
                        <j:if test="${location != null}">
                        
                            <ant:pathelement>
                                <ant:setProperty 
                                    name="location" 
                                    value="${location}"/>                                        
                            </ant:pathelement>
                             
                        </j:if>
                    </j:forEach>
                </ant:moduleSearchPath>
			</ant:repository>

        </ant:andromda>
      	
	</goal>
	

    <!-- ========================= Application Generator Goals Below Here ============================== -->
    
    
  	<!--==================================================================
  			Creates an empty deployable application ear project                
  		==================================================================-->
	<goal name="andromda:genapp"
		  prereqs="andromda:genapp-init">
 
        <ant:echo>+---------------------------------------------------------------------+</ant:echo>
        <ant:echo>|   G E N E R A T I N G   A n d r o M D A   J 2 E E   P R O J E C T   |</ant:echo>
        <ant:echo>+---------------------------------------------------------------------+</ant:echo> 
                
        <ant:mkdir dir="${projectId}"/>
        
        <ant:copy 
        	file="${templatesDir}/project.properties" 
        	tofile="${projectId}/project.properties"/>
	      
	    <velocity:merge 
			name="${projectId}/.project"
			basedir="${templatesDir}"
			template="/.project.vm"/>
	      
	    <velocity:merge
			name="${projectId}/.classpath"
			basedir="${templatesDir}"
			template="/.classpath-${persistenceType}.vm"/>
	      
	    <velocity:merge 
	        name="${projectId}/project.xml"
	        basedir="${templatesDir}"
	        template="/project.xml.vm"/>
	      
	    <ant:copy
	    	file="${templatesDir}/maven-${persistenceType}.xml"
	    	tofile="${projectId}/maven.xml"/>
	    	
		<ant:copy todir="${projectId}">
			<ant:fileset dir="${templatesDir}">
				<ant:include name="*.properties"/>
			</ant:fileset>
		</ant:copy>
        	
        <attainGoal name="andromda:generate-app-subproject"/>
        <attainGoal name="andromda:generate-${persistenceType}-subproject"/>
        <attainGoal name="andromda:generate-common-subproject"/>
        <attainGoal name="andromda:generate-mda-subproject"/>
        <attainGoal name="andromda:generate-web-subproject"/>

        <ant:echo>New J2EE project generated to: '${basedir}/${projectId}'</ant:echo>
        
	</goal>
	
  	<!--==================================================================
  			Creates the mda subproject directory.              
  		==================================================================-->
	<goal name="andromda:generate-mda-subproject"
		  prereqs="andromda:genapp-init">
		
		<j:set var="mdaDir" value="${projectId}/mda"/>
		
		<j:set var="mdaModelDir" value="${mdaDir}/src/uml"/>
		
		<j:set var="mdaTemplatesDir" value="${templatesDir}/mda"/>
		
		<ant:mkdir dir="${mdaModelDir}"/>

		<!-- process the model file -->
	    <velocity:merge 
	      name="${mdaModelDir}/${stringUtils.deleteWhitespace(projectName)}.xmi"
	      basedir="${mdaTemplatesDir}"
	      template="/src/uml/model.xmi.vm"/>	
		
	    <velocity:merge 
	      name="${mdaDir}/project.xml"
	      basedir="${mdaTemplatesDir}"
	      template="project-${persistenceType}.xml.vm"/>	
	      
	    <velocity:merge 
	      name="${mdaDir}/project.properties"
	      basedir="${mdaTemplatesDir}"
	      template="project-${persistenceType}.properties.vm"/>		     
	      
		<ant:copy todir="${mdaDir}">
			<ant:fileset dir="${mdaTemplatesDir}">
				<ant:include name="*.xml"/>
			</ant:fileset>
		</ant:copy>
		
	</goal>
	
  	<!--==================================================================
  			Creates the app subproject directory.              
  		==================================================================-->
	<goal name="andromda:generate-app-subproject"
		  prereqs="andromda:genapp-init">
		
		<j:set var="appDir" value="${projectId}/app"/>
		
		<j:set var="appTemplatesDir" value="${templatesDir}/app"/>
		
		<ant:mkdir dir="${appDir}"/>

	    <velocity:merge 
	      name="${appDir}/project.properties"
	      basedir="${appTemplatesDir}"
	      template="project.properties.vm"/>	
	      
	    <velocity:merge 
	      name="${appDir}/project.xml"
	      basedir="${appTemplatesDir}"
	      template="project-${persistenceType}.xml.vm"/>	
		
		<ant:copy todir="${appDir}">
			<ant:fileset dir="${appTemplatesDir}">
				<ant:include name="*.xml"/>
			</ant:fileset>
		</ant:copy>
		
	</goal>
	
  	<!--==================================================================
  			Creates the common subproject directory.              
  		==================================================================-->
	<goal name="andromda:generate-common-subproject"
		  prereqs="andromda:genapp-init">
				
		
		<j:set var="moduleName" value="common"/>
		<j:set var="moduleTemplatesDir" value="${templatesDir}/${moduleName}"/>
		<j:set var="moduleDir" value="${projectId}/${moduleName}"/>
	    <attainGoal name="andromda:generate-module"/>
	    <ant:mkdir dir="${moduleDir}/${javaSrcDir}"/>
		
	</goal>
	
  	<!--==================================================================
  			Creates the hibernate subproject directory.              
  		==================================================================-->
	<goal name="andromda:generate-hibernate-subproject"
		  prereqs="andromda:genapp-init">
		
		<j:set var="hibernateDir" value="${projectId}/hibernate"/>
		
		<j:set var="hibernateTemplatesDir" value="${templatesDir}/hibernate"/>
	      
		<!-- the base hibernate module -->
		<j:set var="moduleTemplatesDir" value="${hibernateTemplatesDir}"/>
		<j:set var="moduleDir" value="${hibernateDir}"/>
	    <attainGoal name="andromda:generate-module"/>
	    
	    <j:set var="dbConfDir" value="db/conf"/>
	    <ant:copy todir="${moduleDir}/${dbConfDir}">
			<ant:fileset dir="${moduleTemplatesDir}/${dbConfDir}">
				<ant:include name="*"/>
			</ant:fileset>
	    </ant:copy>
		
		<!-- the hibernate/ejb module -->
		<j:set var="moduleName" value="ejb"/>
		<j:set var="moduleTemplatesDir" value="${hibernateTemplatesDir}/${moduleName}"/>
		<j:set var="moduleDir" value="${hibernateDir}/${moduleName}"/>
	    <attainGoal name="andromda:generate-module"/>
	    <ant:mkdir dir="${moduleDir}/${javaSrcDir}"/>
	
		<!-- the hibernate/sar module -->
		<j:set var="moduleName" value="sar"/>
		<j:set var="moduleTemplatesDir" value="${hibernateTemplatesDir}/${moduleName}"/>
		<j:set var="moduleDir" value="${hibernateDir}/${moduleName}"/>
	    <attainGoal name="andromda:generate-module"/>
	   
	</goal>
	
  	<!--==================================================================
  			A generic generate module goal. It expects: 
  			${moduleTemplatesDir} and ${moduleDir} to be specified.          
  		==================================================================-->
	<goal name="andromda:generate-module">
      	<maven:param-check value="${moduleTemplatesDir}" fail="true">
				Property "moduleTemplatesDir" is not set, please define before running 'andromda:generate-module'
		</maven:param-check>
      	<maven:param-check value="${moduleDir}" fail="true">
				Property "moduleDir" is not set, please define before running 'andromda:generate-module'
		</maven:param-check>
		
		<ant:mkdir dir="${moduleDir}"/>
		
	    <velocity:merge 
	      name="${moduleDir}/project.xml"
	      basedir="${moduleTemplatesDir}"
	      template="project.xml.vm"/>
	      
		<ant:copy todir="${moduleDir}">
			<ant:fileset dir="${moduleTemplatesDir}">
				<ant:include name="*.properties"/>
				<ant:include name="*.xml"/>
			</ant:fileset>
		</ant:copy>		
	</goal>
	
  	<!--==================================================================
  			Creates the ejb subproject directory.              
  		==================================================================-->
	<goal name="andromda:generate-ejb-subproject"
		  prereqs="andromda:genapp-init">
		  	
		<j:set var="moduleName" value="ejb"/>
		<j:set var="moduleTemplatesDir" value="${templatesDir}/${moduleName}"/>
		<j:set var="moduleDir" value="${projectId}/${moduleName}"/>
	    <attainGoal name="andromda:generate-module"/>
		<ant:mkdir dir="${moduleDir}/${javaSrcDir}"/>
		
	</goal>
	
  	<!--==================================================================
  			Creates the web subproject directory.              
  		==================================================================-->
	<goal name="andromda:generate-web-subproject"
		  prereqs="andromda:genapp-init">
		
		<j:set var="moduleName" value="web"/>
		<j:set var="moduleTemplatesDir" value="${templatesDir}/${moduleName}"/>
		<j:set var="moduleDir" value="${projectId}/${moduleName}"/>
	    <attainGoal name="andromda:generate-module"/>
		<ant:mkdir dir="${moduleDir}/${javaSrcDir}"/>
		
	</goal>
	
  	<!--==================================================================
  			Asks the generate questions to get the required input.              
  		==================================================================-->
	<goal name="andromda:genapp-init">
  		<j:while test="${empty(projectCreator)}">
        	<i:ask 
        		question="Please enter your first and last name (i.e. Chad Brandon):" 
        		answer="projectCreator"/>
    	</j:while>	
  		<j:while test="${empty(projectName)}">
        	<i:ask 
        		question="Please enter the name of your J2EE project (i.e. Animal Quiz):" 
        		answer="projectName"/>
    	</j:while>	
  		<j:while test="${empty(projectId)}">
        	<i:ask 
        		question="Please enter the id for your J2EE project (i.e. animalquiz):" 
        		answer="projectId"/>
    	</j:while>
  		<j:while test="${empty(baseProjectPackage)}">
        	<i:ask 
        		question="Please enter the base package name for your J2EE project (i.e. org.andromda.samples):" 
        		answer="baseProjectPackage"/>
    	</j:while>
  		<j:while test="${empty(persistenceType) or
  			            (persistenceType ne 'hibernate' and persistenceType ne 'ejb')}">
        	<i:ask 
        		question="Please enter the type of persistence package to use (enter 'hibernate' or 'ejb'):" 
        		answer="persistenceType"/>
    	</j:while>
    	
    	<j:set var="projectPackage" value="${baseProjectPackage}.${projectId}"/>

      	<j:new 
      		var="stringUtils" 
      		className="org.apache.commons.lang.StringUtils"/>

		<j:set var="projectId" value="${stringUtils.deleteWhitespace(projectId)}"/>
    	
        <util:replace 
        	var="packageDir"
        	value="${packageName}" 
        	oldChar="." 
        	newChar="/"/>

        <j:set var="templatesDir" value="${plugin.resources}/andromda/templates/j2ee-app"/>
        
        <!-- the java source directory to use when creating java source directories -->
        <j:set var="javaSrcDir" value="src/java"/>
        
        <!-- set the groupId so that it isn't filled by the default provided by maven -->
		<j:set var="dummy" value="${pom.setGroupId('${pom.groupId}')}"/>
        
	</goal>
	
</project>
