<?xml version="1.0" encoding="UTF-8"?>

<document>
  	<properties>
    	<title>AndroMDA Maven Plug-in Properties</title>
  	</properties>
  	<body>
    	<section name="AndroMDA Maven Plug-in Settings">
	      	<table>
	        	<tr>
		          	<th>Property</th>
		          	<th>Optional?</th>	   	          	
		          	<th>Description</th>       	
	        	</tr>
	        	<tr>
		          	<td>	
		          		maven.andromda.model.uri         		
		          	</td>
		          	<td>
		          		Yes
		          	</td>
		          	<td>
		          		<p>
                            The URI to the model which will be processed.  If this isn't specified
		          		    then the <code>maven.andromda.src.dir</code> and 
		          		    <code>maven.andromda.src.includes</code> properties will be used.		          			
		          		</p>
		          	</td>
	        	</tr>
	        	<tr>
		          	<td>	
		          		maven.andromda.src.dir          		
		          	</td>
		          	<td>
		          		Yes
		          	</td>
		          	<td>
		          		<p>
                            The AndroMDA source directory (where any model files to be processed will be 
		          		    found). Default is <code>${maven.src.dir}/uml</code>.		          			
		          		</p>
		          	</td>
	        	</tr>	    
	        	<tr>
	        		<td>
	        			maven.andromda.src.includes
	        		</td>
	        		<td>
	        			Yes
	        		</td>
	        		<td>
	        			<p>
                            What model files to include from from the <code>maven.andromda.src.dir</code>.
	        			    Default is <code>*.xmi,*.xml</code>.	        				
	        			</p>
	        		</td>
	        	</tr>  	   
	        	<tr>
	        		<td>
	        			maven.andromda.src.lastModifiedCheck
	        		</td>
	        		<td>
	        			Yes
	        		</td>
	        		<td>
	        			<p>
                            Whether or not to perform a check if the model file(s) was modified
	        			    since the last run occurred. Default is <code>false</code>.
	        			</p>
	        			
	        		</td>
	        	</tr>   
	        	<tr>
	        		<td>
	        			maven.andromda.repository
	        		</td>
	        		<td>
	        			Yes
	        		</td>
	        		<td>
	        			<p>
                            The Repository implementation to use for reading/loading/processing of the model. 
                            Default is <em>org.andromda.repositories.mdr.MDRepositoryFacade</em>.	        				
	        			</p>
	        		</td>
	        	</tr>  	  
	        	<tr>
	        		<td>
	        			maven.andromda.modelFacade
	        		</td>
	        		<td>
	        			Yes
	        		</td>
	        		<td>
	        			<p>
							The ModelFacade implementation to use.  The ModelFacade provides the access to the
							metafacades implementations during template processing.  
							Default is the UML 1.4 implementation <code>org.andromda.metafacades.uml14.UMLModelAccessFacade</code>.	        				
	        			</p>
	        		</td>
	        	</tr>     	 	
	        	<tr>
	        		<td>
	        			maven.andromda.processAllModelPackages
	        		</td>
	        		<td>
	        			Yes
	        		</td>
	        		<td>
	        			<p>
	        				Whether or not to process all packages of the model.  
	        				Default is <code>true</code>.
	        			</p>
	        		</td>
	        	</tr>	        	        		        	   	    	        		        	        	        	     	             	        	
	        </table>
    	</section>
		<section name="Other Settings">
			<subsection name="Defining Namespace Properties">
				<p>
					Namespace properties for cartridges are defined by adding properties
					to the andromda plugin dependencies, using the following syntax:
				</p>
				<source><![CDATA[
<dependency> 
    <groupId>andromda-cartridges</groupId>
    <artifactId>andromda-hibernate-cartridge</artifactId>
    <version>${pom.currentVersion}</version>
    <properties>
        <entities>${maven.andromda.hibernate.generated.dir}</entities>
        <entity-impls>${maven.andromda.hibernate.manual.dir}</entity-impls>
        <session-beans>${maven.andromda.hibernate.generated.dir}</session-beans>
        <session-impls>${maven.andromda.hibernate.manual.dir}</session-impls>	
    </properties>
</dependency>]]>				
				</source>
				<p>
					Notice how each namespace property is defined as an XML element above,
					also notice the body of the element stores the value of the 
					namespace property. AndroMDA plugin (cartridge or translation-libraries) 
					namespace specific properties are set like this example; however, how 
					would we define the <em>default</em> namespace properties (that is namespace 
					properties that we would like to apply to every AndroMDA plugin dependency)? 
					We would define them through a dependency to the AndroMDA maven plugin, like so:
				</p>
				<source><![CDATA[
<dependency> 
    <groupId>andromda</groupId>
    <artifactId>maven-andromda-plugin</artifactId>
    <version>${pom.currentVersion}</version>
    <type>plugin</type>
    <properties>
        <logical.languageMappingsUri>Java</logical.languageMappingsUri>
        <logical.sqlMappingsUri>Hypersonic</logical.sqlMappingsUri>
        <logical.jdbcMappingsUri>JDBC</logical.jdbcMappingsUri>
        <physical.maxSqlNameLength>30</physical.maxSqlNameLength>
        <physical.foreignKeySuffix>_FK</physical.foreignKeySuffix>
    </properties>
</dependency>]]>
				</source>
			</subsection>
			<subsection name="Logical Vs. Physical Namespace properties">
				<p>
					You may have noticed from the above example that some properties
					start with <strong>logical.</strong> and some start with <strong>physical.</strong>.
					By default namespace properties are physical, meaning the value that you 
					define in the namespace property element will be the value that is actually
					set on the namespace property when AndroMDA discovers and sets the
					properties of the plugins.  But in some cases we store properties values 
					(such as mapping files) within the AndromMDA plugin itself and its nice
					to be able to reference these by a logical name instead of actually 
					giving the physical path to the mapping files. And if this is the case
					you'd give the property a <strong>logical.</strong> prefix.
				</p>
			</subsection>
		</section>
  	</body>
</document>