Development build environment README:
=====================================


------------------ !!! IMPORTANT !!! ------------------

    In order to have everything working you need
    to do the following things yourself:

        1.  have Eclipse 3.1+ installed (http://www.eclipse.org)

        2.  have JBoss installed (http://www.jboss.org)

        3.  From within Eclipse:
            a. Import this project into your workspace by going to
               FILE>IMPORT>EXISTING PROJECT INTO WORKSPACE
            b. Set a Class path variable named ANDROMDA32_BIN by going to
               WINDOW>PREFERENCES>JAVA>BUILD PATH>CLASSPATH VARIABLES.
               ANDROMDA32_BIN should point to the directory where the AndroMDA
               binary distribution is installed.

        4.  open "build.properties" file in the project root dir
            and insure all values match your environment and
            preferences. Set "properties.reviewed" to "true"

        5.  Create your UML model by editing mda/src/uml/${applicationId}-model.xmi with the UML
            tool of your choice.

        6.  Run Ant to generate code from your model:
            a. From within Eclipse show the "Ant" view (WINDOW>SHOW VIEW>ANT). 
            b. Click on the "Add buildfiles" button, and add build.xml from this project
            c. Click on the "Hide internal targets" button (green button that looks like a target).
            d. Right click on the "1.mda" target, and select "Run as>Ant build..."
            e. On the "Refresh" tab of the build.xml launch configuration, check the
               'Refresh resources upon completion' checkbox, and select the
               'The project containing the selected resource' option.
            f. Click on the 'Run' button.

        7.  Look at the Eclipse "Tasks" list (WINDOW>SHOW VIEW>OTHER>BASIC>TASKS).
            Fill in any code necessary by double clicking on a TODO entry.
            HELPFUL HINT: AndroMDA's many code generation templates use different 
            tags to mark tasks that need to be done. In particular, "@todo" 
            is frequently used. It is suggested that you add "@todo" to your 
            list of Eclipse task tags by going to WINDOW>PREFERENCES>JAVA>COMPILER>TASK TAGS 
            and adding "@todo" to your list.
            
        8.  Add your schema to your database
            a. From within Eclipse, insure "Ant" view is selected (WINDOW>SHOW VIEW>ANT)
               From within the Ant view, run the "2a.schema-create-db" target by clicking
               on the green "Run selected target" button
            b. On subsequent changes to your model, run the "2b.schema-update" target instead
            
        9.  Deploy on your local JBoss test server
            a. From within the Ant view, run the "3.deploy-local" target
            b. Deployment calls in internal target named "make-jars."  The resulting files 
               will be in client/target/ (a .jar file to use on the client side)
               and server/target (a .war file to put on your application server).

       10.  Write some test code to test the client/server communication
            a. Edit the unit test(s) generated in client/src/test/java (see your Eclipse task list)
            b. Run a unit test by right-clicking on a unit test in the Package Explorer, and selecting
               "Run as JUnit Test"

--------------------------------------------------------


Global Project Structure
------------------------
The following directories/modules can be found in the project's root:

/common

    Contains source code and artifacts relating to items shared between
    client side and server side code.

/client

    Contains source code and artifacts relating to client side code

/server

    Contains source code and artifacts relating to server side code

/mda

    Contains the project UML model (in /mda/uml), as well as the AndroMDA configuration file (in /mda/conf). 


Component Structure
----------------

In each module (except /mda) you will find:

+-src			<- Source code
| +-impl
| | +-java		<- Implementations (i.e. hand coded)
| +-generated		<- generated by AndroMDA
| | +-conf		<- 	configuration files
| | +-java		<- 	java source code
| | +-sql		<- 	sql scripts
| +-test		<- Test code
|   +-conf		<- 	configuration files
|   +-java		<- 	hand coded java unit tests
+-target		<- Compiled artifacts (.jar and .war files end up here)
  +-classes
    +-dist		<- classes used in the distributions
    +-test		<- classes used by unit tests

Some directories don't exist in all modules.  The /client module, for example, contains
only a small number of code artifacts (since most work is done server side).

Links
-----

http://www.eclipse.org
http://www.jboss.org
http://www.springframework.org
http://www.hibernate.org
http://ant.apache.org
http://jakarta.apache.org
http://team.andromda.org/docs
http://www.omg.org/mda
