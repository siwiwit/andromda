module UML2Spring;

create OUT: Spring from IN: UML;

uses UMLHelpers;

-- Transform UML classes that have the stereotype "Service"
-- to Spring services.
rule UMLServiceToSpringService {
	from e : UML!Class (e.hasStereotype('Service'))
	to out : Spring!Service (
		name <- e.name,
		methods <- e.feature->select (f|f.oclIsTypeOf(UML!Operation))
	)
}

-- Transform UML operations to 3GL methods.

rule UMLOpTo3GLMethod {
	from e : UML!Operation
	to out : Spring!Method (
		name <- e.name ,
		returnType <- e.parameter->select(x|x.kind=#pdk_return)->asSequence()->first().type,
		parameters <- e.parameter->select(x|x.kind<>#pdk_return)->asSequence()
	)
}


-- Transform UML parameters to 3GL parameters.
rule UMLParameterTo3GLParameter {
 	from e : UML!Parameter (e.kind <> #pdk_return)
 	to out : Spring!Parameter (
 		name <- e.name ,
 		type <- e.type
 	)
}

rule UMLDatatypeTo3GLDatatype {
	from e : UML!DataType
	to out : Spring!Type (
		name <- e.name
	)
}


