<?xml version="1.0" encoding="UTF-8"?>

<document>
  	<properties>
    	<title>Spring Cartridge Namespace</title>
  	</properties>
  	<body>
    	<section name="Spring Namespace Properties">
	      	<table>
	        	<tr>
		          	<th>Property</th>         	
		          	<th>Description</th>       	
		          	<th>Required?</th>	   	 
	        	</tr>
	        	<tr>
		          	<td>
		          		languageMappingsUri
		          	</td>
		          	<td>
		          		URI specifying the specific mappings from model types to language types. 
		          		(i.e. <code>file:${basedir}/JavaMappings.xml</code>)
		          	</td>
		          	<td>
		          		Yes
		          	</td>		          	
	        	</tr>			  
	        	<tr>
		          	<td>
		          		sqlMappingsUri
		          	</td>
		          	<td>
		          		URI specifying the mappings file to use for mapping from model types to SQL types 
		          		for generated Spring entity types.
		          		(i.e. <code>file:${basedir}/Oracle9iMappings.xml</code>). 
		          	</td>
		          	<td>
		          		Yes
		          	</td>			          	
	        	</tr>	
	        	<tr>
	        		<td>
	        			maxSqlNameLength
	        		</td>
	        		<td>
	        			The maximum length that a SQL name (such as a column name or 
	        			table name) may be.  This is useful for databases that have a limit
	        			on the lengh that a name used in DDL may be (like Oracle).  If you set 
	        			this to <code>30</code> for example, then all names will be truncated 
	        			after 30 characters when retrieveing the column name or table name.
	        		</td>
	        		<td>
	        			Yes
	        		</td>
	        	</tr>	
				<tr>
					<td>
						services
					</td>
					<td>
						The location to which all service classes
						will be generated.
					</td>
					<td>
						Yes
					</td>
				</tr>
				<tr>
					<td>
						service-impls
					</td>
					<td>
						The location to which all service implementation classes
						will be generated.
					</td>
					<td>
						Yes
					</td>
				</tr>
				<tr>
					<a name="service-locator"/>
					<td>
						service-locator
					</td>
					<td>
						The location to which a service locator will be generated.
					</td>
					<td>
						No
					</td>
				</tr>
				<tr>
					<td>
						daos
					</td>
					<td>
						The location to which Spring DAOs, and any support classes
						(including hibernate POJOs and their XML configuration files).
					</td>
					<td>
						Yes
					</td>
				</tr>
				<tr>
					<td>
						dao-impls
					</td>
					<td>
						The location to which Spring DAO implementation
						classes will be generated (if there are any business
						operations modeled on any entity).
					</td>
					<td>
						Yes
					</td>
				</tr>
				<tr>
					<td>
						session-ejbs
					</td>
					<td>
						The location to which Spring Session EJBs will be generated,
						if this is specified, then session EJBs will wrap Spring
						service POJOs and transaction management will be handled
						by the Session EJB (instead of Spring).
					</td>
					<td>
						No
					</td>
				</tr>
				<tr>
					<td>
						spring-configuration
					</td>
					<td>
						The location to which the Spring applicationContext.xml
						will be generated.
					</td>
					<td>
						Yes
					</td>
				</tr>
				<tr>
					<td>
						serviceLocatorPackage
					</td>
					<td>
						The package to which the global service locator
						will be generated.
					</td>
					<td>
						No (unless <a href="#service-locator">service-locator</a>
						has been defined).  If not specified an <code>service-locator</code>
						has been defined, it will be generated with <strong>no</strong>
						package.
					</td>
				</tr>
				<tr>
					<td>
						serviceLocatorName
					</td>
					<td>
						The name to give to the generated service locator class.
					</td>
					<td>
						No, default is <code>ServiceLocator</code>.
					</td>
				</tr>
				<tr>
					<td>
						entityNamePattern
					</td>
					<td>
						The pattern to use when constructing an entity name.
						<em>{0}</em> is used to represent the entity name
						in the model, so if you specified a value of
						<code>{0}Entity</code> all the entities generated
						would have a suffix of "Entity".
					</td>
					<td>
						No, default is <code>{0}</code>.
					</td>
				</tr>
				<tr>
					<td>
                        driver
					</td>
					<td>
                        JDBC Driver to make database connection
					</td>
					<td>
                        No
					</td>
				</tr>
				<tr>
					<td>
                        username
					</td>
					<td>
                        The database user login name.
					</td>
					<td>
                        No
					</td>
				</tr>
				<tr>
					<td>
                        password
					</td>
					<td>
                        The database user password.
					</td>
					<td>
                        No
					</td>
				</tr>
				<tr>
					<td>
                        dataSource
					</td>
					<td>
                        JNDI name of data source to use. (would be used instead
						of the connection properties, driver, username, password, etc).
					</td>
					<td>
                        No
					</td>
				</tr>
				<tr>
					<td>
                        connectionUrl
					</td>
					<td>
                        URL for the JDBC Driver to make the connection to the database.
					</td>
					<td>
                        No
					</td>
				</tr>
				<tr>
					<td>
						transactionManager
					</td>
					<td>
						The transaction manager implementation used by Spring.
					</td>
					<td>
						No, default is <a href="http://www.springframework.org/docs/api/org/springframework/orm/hibernate/HibernateTransactionManager.html">org.springframework.orm.hibernate.HibernateTransactionManager</a>
					</td>
				</tr> 	
				<tr>
					<td>
						sessionFactory
					</td>
					<td>
						FactoryBean that creates a local Hibernate SessionFactory instance
						within Spring.
					</td>
					<td>
						No, default is <a href="http://www.springframework.org/docs/api/org/springframework/orm/hibernate/LocalSessionFactoryBean.html">org.springframework.orm.hibernate.LocalSessionFactoryBean</a>
					</td>
				</tr>   
			</table>
            <subsection name="Hibernate Specific Properties">
                <table>
                    <tr>
		                <td>
		          		    hibernateTypeMappingsUri
		          	    </td>
		          	    <td>
		          		    URI specifying the specific mappings from model types to hibernate types. 
		          		    (i.e. <code>file:${basedir}/HibernateTypeMappings.xml</code>). This
						    is not necessary but useful for defining hibernate user types (when
						    hibernate doesn't support a specific type in the manner needed
						    for your application). 
		          	    </td>
		          	    <td>
		          		    No
		          	    </td>		          	
	        	    </tr>
					<tr>
						<td>
							hibernateCustomTypesPackage
						</td>
						<td>
							The package to which hibernate custom types contained
							within the cartridge should be output.
						</td>
						<td>
							No, default is <code>org.andromda.persistence.hibernate</code>
						</td>
					</tr>
                    <tr>
                        <td>
                            defaultHibernateGeneratorClass
                        </td>
                        <td>
                            The default hibernate generator class.  This is what is used
                            if no <a href="modeling.html#@andromda.hibernate.generator.class">@andromda.hibernate.generator.class</a> is defined
                            for an entity.
                        </td>
                        <td>
                            No, default is <code>native</code>.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            hibernateDefaultCascade
                        </td>
                        <td>
                            The value of the <code>default-cascade</code>
                            attribute of the hibernate entity XML mapping.
                        </td>
                        <td>
                            No, default is <code>none</code>.
                        </td>
                    </tr>
					<tr>
						<td>
							hibernatePoolSize
						</td>
						<td>
							Hibernate connection pool size.
						</td>
						<td>
							No 
						</td>
					</tr>
					<tr>
						<td>
							hibernateTransactionManagerStrategy
						</td>
						<td>
							Strategy for obtaining the JTA TransactionManager
						</td>
						<td>
							No
						</td>
					</tr>
					<tr>
						<td>
							hibernateUserTransactionName
						</td>
						<td>
							The JNDI name of the JTA UserTransaction object
						</td>
						<td>
							No
						</td>
					</tr>
					<tr>
						<td>
							hibernateTransactionManagerLookup
						</td>
						<td>
							The fully qualified class name of the Hibernate TransactionFactory implementation
						</td>
						<td>
							No
						</td>
					</tr>
					<tr>
						<td>
							hibernateUseOuterJoin
						</td>
						<td>
							Whether or not to use outer join
						</td>
						<td>
							 No, defaults to <code>false</code>.
						</td>
					</tr>
					<tr>
						<td>
							hibernateShowSql
						</td>
						<td>
							Whether or not to log SQL statements
						</td>
						<td>
							No, defaults to <code>false</code>.
						</td>
					</tr>
					<tr>
						<td>
							hibernateJndiName
						</td>
						<td>
							JNDI name bound to the SessionFactory.
						</td>
						<td>
							No
						</td>
					</tr>
					<tr>
						<td>
							hibernateDialect
						</td>
						<td>
							SQL dialect of the database
						</td>
						<td>
							Yes
						</td>
					</tr>
					<tr>
						<td>
							hibernateDefaultSchema 
						</td>
						<td>
							Qualify unqualified tablenames with the given
							schema/tablespace in generated SQL.
						</td>
						<td>
							No
						</td>
					</tr> 		
					<tr>
						<td>
							hibernateJdbcFetchSize
						</td>
						<td>
							A non-zero value determines the JDBC fetch size
						</td>
						<td>
							No
						</td>
					</tr> 
					<tr>
						<td>
							hibernateMaxFetchDepth
						</td>
						<td>
							Sets a maximum "depth" for the outer join fetch tree. 
							eg. recommended values between 0 and 3
						</td>
						<td>
							No
						</td>
					</tr>    
					<tr>
						<td>
							hibernateJdbcBatchSize
						</td>
						<td>
							A nonzero value enables use of JDBC2 batch updates by Hibernate.
							ex: recommended values between 5 and 30
						</td>
						<td>
							No
						</td>
					</tr>    	
					<tr>
						<td>
							hibernateJdbcUseScrollableResultSet
						</td>
						<td>
							Whether or not to enable use of JDBC2 scrollable resultsets by Hibernate. 
							This property is only necessary when using user supplied connections. 
							Hibernate uses connection metadata otherwise.
						</td>
						<td>
							No
						</td>
					</tr>        
					<tr>
						<td>
							hibernateJdbcUseStreamsForBinary
						</td>
						<td>
							Whether or not to use streams when writing / reading binary or serializable types to/from JDBC
						</td>
						<td>
							No
						</td>
					</tr>       	
					<tr>
						<td>
							ejbJndiNamePrefix
						</td>
						<td>
						    The prefix to give to the Session EJB JNDI names (this allows 
							the same Session EJB to be deployed multiple times in the same 
							container)
						</td>
						<td>
							No
						</td>
					</tr>     	
					<tr>
						<td>
							ejbPackageNamePattern
						</td>
						<td>
	                        If EJBs are being used, this specifies the pattern to be 
							used when constructing the EJB package name 
                            (this allows a Spring Service to be wrapped by this Session EJB)
                            and avoids name conflicts).  The <em>{0}</em> character
							represents the service package name.  This could be something like
							<em>{0}.ejb</em> which would create the Spring Session EJBs in the
							package ending in the <em>ejb</em> package.					
						</td>
						<td>
							No, default is <code>{0}.ejb</code>
						</td>
					</tr>       
					<tr>
						<td>
							ejbViewType
						</td>
						<td>
							If EJBs are being used, this specifies the view type
							for the EJB interfaces.  Can be either <em>local</em>
							or <code>remote</code>.
						</td>
						<td>
							No, default is <code>local</code>.
						</td>
					</tr>
					<tr>
						<td>
							applicationContext
						</td>
						<td>
							The name/path of the application context resource
							file (i.e. some/path/applicationContex.xml)
						</td>
						<td>
							No, default is <code>applicationContext.xml</code>
						</td>
					</tr> 
					<tr>
						<td>
							beanRefFactory
						</td>
						<td>
							The name/path of the bean ref factory resource
							file (i.e. some/path/beanRefFactory.xml)
						</td>
						<td>
							No, default is beanRefFactory.xml
						</td>
					</tr>        	  
					<tr>
						<td>
							beanRefFactoryId
						</td>
						<td>
							The ID for the Spring bean reference factory (used
							to load the bean factory when using the Session EJB 
							wrappers)
						</td>
						<td>
							No, default is beanRefFactory
						</td>
					</tr>      	
				</table>
			</subsection>
    	</section>
  	</body>
</document>