//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package $entity.packageName;

#set ($abstractModifier = "")
#if (!$entity.operations.empty)
#set ($abstractModifier = "abstract ")
#end
#set ($superEntity = $entity.generalization)
/**
 * <p>
 * Base Spring DAO Class: is able to add, update, remove, load, and find
 * objects of type <code>${entity.fullyQualifiedEntityName}</code>.
 * </p>
 *
 * @see $entity.fullyQualifiedEntityName
 */
public ${abstractModifier}class $entity.daoBaseName
#if($superEntity)  
    extends $superEntity.fullyQualifiedDaoBaseName
#else
    extends org.springframework.orm.hibernate.support.HibernateDaoSupport
#end
#set ($finders = $entity.getFinders(true))
#set ($hasFinders = !$finders.empty)
    implements $entity.fullyQualifiedDaoName#if ($hasFinders), 
               org.apache.commons.collections.Transformer
#end
{

#foreach($entityRef in $entity.entityReferences)
#set ($targetElement = $entityRef.targetElement)
    private $targetElement.fullyQualifiedDaoName $entityRef.name;

    /**
     * Sets the reference to <code>$entityRef.name</code>.
     */
    public void ${entityRef.setterName}(${targetElement.fullyQualifiedDaoName} $entityRef.name)
    {
        this.$entityRef.name = $entityRef.name;
    }
    
    /**
     * Gets the reference to <code>$entityRef.name</code>.
     */
    protected $targetElement.fullyQualifiedDaoName ${entityRef.getterName}()
    {
        return this.$entityRef.name;
    }
        
#end
## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $entity.name.toLowerCase())    
    /**
     * @see ${entity.fullyQualifiedDaoName}#create($entity.fullyQualifiedEntityName)
     */
    public void create($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().save($argumentName);
    }
 
#set ($attributes = $entity.getAttributes(true,false)) 
#if (!$attributes.empty)  
	/**
	 * @see ${entity.fullyQualifiedDaoName}#create(${entity.getAttributeTypeList(true, false)})
	 */ 
	public void create(
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end
            
#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($attribute in $attributes)
        entity.${attribute.setterName}($attribute.name);
#end
        this.create(entity); 
    }     
    
#set ($requiredAttributes = $entity.getRequiredAttributes(true,false))
#if ($attributes.size() != $requiredAttributes.size())
	/**
	 * @see ${entity.fullyQualifiedDaoName}#create(${entity.getRequiredAttributeTypeList(true, false)})
	 */ 
	public void create(
#foreach($attribute in $requiredAttributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $requiredAttributes.size()),#else)#end
            
#end  
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($attribute in $requiredAttributes)
        entity.${attribute.setterName}($attribute.name);
#end
        this.create(entity); 
    }
    
#end
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#update($entity.fullyQualifiedEntityName)
     */
    public void update($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().update($argumentName);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#load($identifier.type.fullyQualifiedName)
     */
    public $entity.fullyQualifiedEntityName load($identifier.type.fullyQualifiedName $identifier.name)
    {
#set ($argument = $identifier.name)
#if($identifier.type.primitiveType)
#set ($argument = "new ${identifier.type.wrapperName}(${identifier.name})")
#end
        return ($entity.fullyQualifiedEntityName) 
            this.getHibernateTemplate().load(${entity.fullyQualifiedEntityImplementationName}.class, $argument); 
    }
    
    /**
     * @see ${entity.fullyQualifiedDaoName}#remove($entity.fullyQualifiedEntityName)
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().delete($argumentName);
    }	
    
    /**
     * @see ${entity.fullyQualifiedDaoName}#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    
#end	
#foreach ( $finder in $finders)
#set ($returnType = $finder.returnType.fullyQualifiedName)
##
    /**
     * @see ${entity.fullyQualifiedName}#${finder.name}(false#if(!$finder.arguments.empty), ${finder.argumentNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(boolean transform#if(!$finder.arguments.empty), ${finder.typedArgumentList}#end)
#if ($finder.hasExceptions())
        throws $finder.exceptionList
#end    
    {  
        Object[] arguments = new Object[] 
        {
#foreach($argument in $finder.arguments)
            $argument.name#if($velocityCount != $finder.arguments.size()),#end
            
#end           
        };
        java.util.Collection results = 
            this.getHibernateTemplate().find(
                "$finder.query", 
                arguments);
        if (transform)
        {
            // transform the results into the value objects 
            org.apache.commons.collections.CollectionUtils.transform(
                results,
                this);
        }
        return results;
    }
    
    /**
     * @see ${entity.fullyQualifiedName}#$finder.getSignature(false)
     */
	$finder.visibility $finder.returnType.fullyQualifiedName $finder.signature
#if ($finder.hasExceptions())
        throws $finder.exceptionList
#end    
    {
        return ${finder.name}(false#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    }
    
#end
#if ($hasFinders)
    /**
     * @see org.apache.commons.collections.Transformer#transform(java.lang.Object)
     */
    public Object transform(Object object)
    {
        return transformFinderEntity(($entity.fullyQualifiedName)object);
    }
    
    /**
     * Allows transformation of all entity results from finders into value objects 
     * (or something else for that matter).
     *
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     */
    protected abstract Object transformFinderEntity($entity.fullyQualifiedName entity);
#end
#foreach ( $operation in $entity.businessOperations )
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${operation.getSignature(false)}
     */
#if ($operation.hasExceptions())
    $operation.visibility abstract $returnType.fullyQualifiedName $signature 
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $returnType.fullyQualifiedName $signature;
#end

#end
}