#set ($generatedFile = "${entity.packagePath}/${entity.entityName}.cs")
// Name: ${entity.entityName}.cs
// license-header cs merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-nhibernate-cartridge.

using System;

#if ($stringUtils.isNotBlank($entity.packageName))
namespace $entity.packageName
{
#end
    /// <summary>
$entity.getDocumentation("    /// ")
    /// </summary>
    public abstract class $entity.entityName
#if($entity.generalization)
        : $entity.generalization.fullyQualifiedEntityImplementationName
#end
    {
#if ($stringUtils.isNotBlank($entity.hibernateVersionProperty))
#set ($versionProperty = $entity.hibernateVersionProperty)
#set ($versionPropertyCapitalized = $stringUtils.capitalize($entity.hibernateVersionProperty))
        /// <summary>
        /// Version property managed by Hibernate.
        /// </summary>
        private int $versionProperty;

        public int get$versionPropertyCapitalized()
        {
            return this.$versionProperty;
        }

        private void set$versionPropertyCapitalized (int $versionProperty)
        {
            this.$versionProperty = $versionProperty;
        }

#end
        // ----- Attributes and Associations -----
## **** Generate attribute ****
#foreach ( $attribute in $entity.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
#if ($attribute.containsEmbeddedObject)
#set ($typeName = $attribute.type.fullyQualifiedEntityName)
#end
        private $typeName $attribute.name;
#end
## **** Generate associations ****
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
#if ($target.many)
        private $target.getterSetterTypeName $target.name = $target.collectionTypeImplementation;
#else
        private $target.getterSetterTypeName $target.name;
#end
#end
#end

        // ----- Accessors -----
## **** Generate accessors for attributes ****
#foreach ( $attribute in $entity.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
#if ($attribute.containsEmbeddedObject)
#set ($typeName = $attribute.type.fullyQualifiedEntityName)
#end
        /// <summary>
$attribute.getDocumentation("        /// ")
        /// </summary>
        $attribute.visibility $typeName ${stringUtils.upperCamelCaseName($attribute.name)}
        {
            get { return $attribute.name; }
            set { this.$attribute.name = value; }
        }

#end
## **** Generate accessors for associations ****
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
        /// <summary>
$target.getDocumentation("        /// ")
        /// </summary>
        public $target.getterSetterTypeName ${stringUtils.upperCamelCaseName($target.name)}
        {
            get { return $target.name; }
            set { this.$target.name = value; }
        }

#end
#end
        // ----- Abstract Methods -----
#foreach ($operation in $entity.businessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
        /// <summary>
$operation.getDocumentation("        /// ")
        /// </summary>
#if ($operation.exceptionsPresent)
        $operation.visibility abstract $returnType.fullyQualifiedName $signature
            throws $operation.exceptionList;
#else
        $operation.visibility abstract $returnType.fullyQualifiedName $signature;
#end

#end
        // ----- Helper Methods -----
#if ($generateEntityEqualsAndHashCode.equalsIgnoreCase('true'))
#set ($identifiers = $entity.getIdentifiers(false))
        /// <summary>
#if ($identifiers.empty)
        /// This entity does not have any identifiers
#if ($entity.generalization)
        /// but since it extends the <code>$entity.generalization.fullyQualifiedEntityImplementationName</code> class
        /// it will simply delegate the call up there.
        ///
        /// @see $entity.generalization.fullyQualifiedEntityName#Equals(Object)
#else
        /// and is not extending any other entity,
        /// so this method will only return <code>true</code> if the argument reference and <code>this</code>
        /// refer to the same object.
#end
#else
#if ($entity.generalization)
        /// Returns <code>true</code> if the argument is an $entity.entityName instance and all identifiers for this entity
        /// equal the identifiers of the argument entity. The <code>equals</code> method of the parent entity
        /// will also need to return <code>true</code>. Returns <code>false</code> otherwise.
        ///
        /// @see $entity.generalization.fullyQualifiedEntityName#Equals(Object)
#else
        /// Returns <code>true</code> if the argument is an $entity.entityName instance and all identifiers for this entity
        /// equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
#end
#end
        /// </summary>
#renderEqualsMethod($entity $entity.entityName $identifiers)

        /// <summary>
#if ($identifiers.empty)
        /// This entity does not have any identifiers
#if ($entity.generalization)
        /// but since it extends the <code>$entity.generalization.fullyQualifiedEntityImplementationName</code> class
        /// it will simply delegate the call up there.
        ///
        /// @see $entity.generalization.fullyQualifiedEntityName#GetHashCode()
#else
        /// and is not extending any other entity,
        /// so this method will only take the identifiers of this entity into account when calculating the hash code.
#end
#else
#if ($entity.generalization)
        /// Returns a hash code based on this entity's identifiers and the hash code of the parent entity.
        ///
        /// @see $entity.generalization.fullyQualifiedEntityName#GetHashCode()
#else
        /// Returns a hash code based on this entity's identifiers.
#end
#end
        /// </summary>
#renderHashCodeMethod($entity $identifiers)

#end
#if (!$entity.abstract && ($visualStudioVersion != "2003"))
#set ($concreteBaseClass = $entity.generalization && !$entity.generalization.abstract)
        /// <summary>
        /// Constructs new instances of {@link ${entity.fullyQualifiedName}}.
        /// </summary>
        public static#if ($concreteBaseClass) new#end class Factory
        {
            /// <summary>
            /// Constructs a new instance of {@link ${entity.fullyQualifiedName}}.
            /// </summary>
            public static $entity.fullyQualifiedName newInstance()
            {
                return new ${entity.fullyQualifiedEntityImplementationName}();
            }
        }

#end
    // HibernateEntity.vsl merge-point
    }
#if (!$entity.abstract && ($visualStudioVersion == "2003"))
#set ($concreteBaseClass = $entity.generalization && !$entity.generalization.abstract)

    /// <summary>
    /// Constructs new instances of {@link ${entity.fullyQualifiedName}}.
    /// </summary>
    public class ${entity.Name}Factory
    {
        /// <summary>
        /// Constructs a new instance of {@link ${entity.fullyQualifiedName}}.
        /// </summary>
        public static $entity.fullyQualifiedName newInstance()
        {
            return new ${entity.fullyQualifiedEntityImplementationName}();
        }
    }
#end
#if ($stringUtils.isNotBlank($entity.packageName))
}
#end