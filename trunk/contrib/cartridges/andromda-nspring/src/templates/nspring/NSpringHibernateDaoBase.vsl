#parse("templates/nspring/NSpringGlobals.vm")
#set ($generatedFile = "${entity.packagePath}/${entity.daoBaseName}.cs")
// Name: ${entity.daoBaseName}.cs
// license-header cs merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: NSpringHibernateDaoBase.vsl in andromda-nspring-cartridge.

using System;
using NHibernate;
using NHibernate.Support;

#if ($stringUtils.isNotBlank($entity.packageName))
namespace $entity.packageName
{
#end
#set ($superclass = $entity.generalization)
#if ($superclass)
## TODO: Need to get the root of the hierarchy, not the immediate superclass
#set ($daoNoTransformationEnumName = "Transform${superclass.Name}.$superclass.daoNoTransformationConstantName")
#set ($newKeyword = "new ")
#else
#set ($daoNoTransformationEnumName = "Transform${entity.Name}.$entity.daoNoTransformationConstantName")
#set ($newKeyword = "")
#end
    /// <summary>
    /// <p>
    /// Base Spring DAO Class: is able to create, update, remove, load, and find
    /// objects of type <code>$entity.fullyQualifiedEntityName</code>.
    /// </p>
    ///
    /// @see $entity.fullyQualifiedEntityName
    /// </summary>
    public abstract class $entity.daoBaseName
#if($entity.generalization)
        : $entity.generalization.fullyQualifiedDaoImplementationName, $entity.fullyQualifiedDaoName
#else
        : NHibernateDaoSupport, $entity.fullyQualifiedDaoName
#end
    {
#foreach ($valueObjectRef in $entity.valueObjectReferences)
        public abstract $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName entity);
        public abstract $entity.fullyQualifiedEntityName ${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name));
#end

#foreach($entityRef in $entity.entityReferences)
        private $entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName;

        /// <summary>
        /// Sets the reference to <code>$entityRef.daoName</code>.
        /// </summary>
        public void ${entityRef.daoSetterName}($entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName)
        {
            this.$entityRef.daoName = $entityRef.daoName;
        }

        /// <summary>
        /// Gets the reference to <code>$entityRef.daoName</code>.
        /// </summary>
        protected $entityRef.targetElement.fullyQualifiedDaoName ${entityRef.daoGetterName}()
        {
            return this.$entityRef.daoName;
        }

#end
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Load(int, $identifier.type.fullyQualifiedName)
        /// </summary>
        public ${newKeyword}Object Load(int transform, $identifier.type.fullyQualifiedName $identifier.name)
        {
#set ($argument = $identifier.name)
#if($identifier.type.primitive)
#set ($argument = "new ${identifier.type.wrapperName}(${identifier.name})")
#else
            if ($argument == null)
            {
                throw new ArgumentNullException(
                    "${entity.name}.Load - '$argument' can not be null");
            }
#end
            Object entity = Session.Load(typeof($entity.fullyQualifiedEntityImplementationName), ${identifier.name});
            return TransformEntity(transform, ($entity.fullyQualifiedName)entity);
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Load($identifier.type.fullyQualifiedName)
        /// </summary>
        public ${newKeyword}$entity.root.fullyQualifiedEntityName Load($identifier.type.fullyQualifiedName $identifier.name)
        {
            return ($entity.fullyQualifiedEntityName)this.Load((int)$daoNoTransformationEnumName, $identifier.name);
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#LoadAll()
        /// </summary>
        public ${newKeyword}System.Collections.ICollection LoadAll()
        {
            return this.LoadAll((int)$daoNoTransformationEnumName);
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#LoadAll(int)
        /// </summary>
        public ${newKeyword}System.Collections.ICollection LoadAll(int transform)
        {
            System.Collections.ICollection entities = Session.Find("from ${entity.fullyQualifiedEntityImplementationName}");
            System.Collections.ICollection results = this.TransformEntities(transform, entities);
            return results;
        }

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Create($entity.fullyQualifiedEntityName)
        /// </summary>
        public $entity.root.fullyQualifiedEntityName Create($entity.fullyQualifiedEntityName $argumentName)
        {
            return ($entity.fullyQualifiedEntityName)this.Create((int)$daoNoTransformationEnumName, $argumentName);
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Create(int transform, $entity.fullyQualifiedEntityName)
        /// </summary>
        public Object Create(int transform, $entity.fullyQualifiedName $argumentName)
        {
            if ($argumentName == null)
            {
                throw new ArgumentNullException(
                    "${entity.name}.Create - '$argumentName' can not be null");
            }
            Object identifier = Session.Save($argumentName);
#set ($identifierProperty = "identifier")
#if($identifier.type.primitive)
#set ($identifierProperty = "(($identifier.type.wrapperName)$identifierProperty).Value")
#else
#set ($identifierProperty = "($identifier.type.fullyQualifiedName)$identifierProperty")
#end
            ${argumentName}.${stringUtils.upperCamelCaseName($identifier.name)} = $identifierProperty;
            return this.TransformEntity(transform, $argumentName);
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Create(System.Collections.ICollection)
        /// </summary>
        public ${newKeyword}System.Collections.ICollection Create(System.Collections.ICollection entities)
        {
            return Create((int)$daoNoTransformationEnumName, entities);
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Create(int, System.Collections.ICollection)
        /// </summary>
        public ${newKeyword}System.Collections.ICollection Create(int transform, System.Collections.ICollection entities)
        {
            if (entities == null)
            {
                throw new ArgumentNullException(
                    "${entity.name}.Create - 'entities' can not be null");
            }

            System.Collections.ArrayList result = new System.Collections.ArrayList();
            foreach (Object entity in entities)
            {
                result.Add(Create(transform, ($entity.fullyQualifiedEntityName)entity));
            }

            return result;
        }

#if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#set ($attributes = $entity.getAttributes(true,false))
#if (!$attributes.empty)
        /// <summary>
        /// @see ${entity.root.fullyQualifiedDaoName}#Create(${entity.getAttributeTypeList(true, false)})
        /// </summary>
        public $entity.root.fullyQualifiedEntityName Create(
#foreach($attribute in $attributes)
            $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end

#end
        {
            return ($entity.root.fullyQualifiedEntityName)this.Create((int)$daoNoTransformationEnumName, ${entity.getAttributeNameList(true,false)});
        }

        /// <summary>
        /// @see ${entity.root.fullyQualifiedDaoName}#Create(int, ${entity.getAttributeTypeList(true, false)})
        /// </summary>
        public Object Create(
            int transform,
#foreach($attribute in $attributes)
            $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end

#end
        {
            $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($attribute in $attributes)
            entity.${stringUtils.upperCamelCaseName($attribute.name)} = $attribute.name;
#end
            return this.Create(transform, entity);
        }

#end
#set ($requiredProperties = $entity.getRequiredProperties(true,false))
#if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,false).size() != $requiredProperties.size())
        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Create(${entity.getRequiredPropertyTypeList(true, false)})
        /// </summary>
        public $entity.root.fullyQualifiedEntityName Create(
#foreach($property in $requiredProperties)
            $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else)#end

#end
        {
            return ($entity.root.fullyQualifiedEntityName)this.Create((int)$daoNoTransformationEnumName, ${entity.getRequiredPropertyNameList(true,false)});
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Create(int, ${entity.getRequiredPropertyTypeList(true, false)})
        /// </summary>
        public Object Create(
            int transform,
#foreach($property in $requiredProperties)
            $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else)#end

#end
        {
            $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($property in $requiredProperties)
            entity.${stringUtils.upperCamelCaseName($property.name)} = $property.name;
#end
            return this.Create(transform, entity);
        }

#end
#end
#end
        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Update($entity.fullyQualifiedEntityName)
        /// </summary>
        public void Update($entity.fullyQualifiedEntityName $argumentName)
        {
            if ($argumentName == null)
            {
                throw new ArgumentNullException(
                    "${entity.name}.Update - '$argumentName' can not be null");
            }
            Session.Update($argumentName);
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Update(System.Collections.ICollection)
        /// </summary>
        public ${newKeyword}void Update(System.Collections.ICollection entities)
        {
            if (entities == null)
            {
                throw new ArgumentNullException(
                    "${entity.name}.Update - 'entities' can not be null");
            }

            foreach (Object entity in entities)
            {
                Session.Update(($entity.fullyQualifiedEntityName)entity);
            }
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Remove($entity.fullyQualifiedEntityName)
        /// </summary>
        public void Remove($entity.fullyQualifiedEntityName $argumentName)
        {
            if ($argumentName == null)
            {
                throw new ArgumentNullException(
                    "${entity.name}.Remove - '$argumentName' can not be null");
            }
            Session.Delete($argumentName);
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Remove($identifier.type.fullyQualifiedName)
        /// </summary>
        public ${newKeyword}void Remove($identifier.type.fullyQualifiedName $identifier.name)
        {
#set ($argument = $identifier.name)
#if($identifier.type.primitive)
#set ($argument = "new ${identifier.type.wrapperName}(${identifier.name})")
#else
            if ($argument == null)
            {
                throw new ArgumentNullException(
                    "${entity.name}.Remove - '$identifier.name' can not be null");
            }
#end
#set ($loadCall = "this.Load($identifier.name)")
#if ($entity.generalization)
#set ($loadCall = "($entity.fullyQualifiedEntityName)${loadCall}")
#end
            $entity.fullyQualifiedEntityName entity = $loadCall;
            if (entity != null)
            {
                this.Remove(entity);
            }
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#Remove(System.Collections.ICollection)
        /// </summary>
        public ${newKeyword}void Remove(System.Collections.ICollection entities)
        {
            if (entities == null)
            {
                throw new ArgumentNullException(
                    "${entity.name}.Remove - 'entities' can not be null");
            }
            foreach (${entity.name} entity in entities)
                this.Remove(entity);
        }

#foreach ($finder in $entity.getQueryOperations(true))
#set ($returnType = $finder.returnType.fullyQualifiedName)
        /// <summary>
        /// @see ${entity.fullyQualifiedName}#$finder.getSignature(false)
        /// </summary>
        $finder.visibility $returnType $finder.signature
#if ($finder.exceptionsPresent)
            throws $finder.exceptionList
#end
        {
#set ($finderCall = "this.${finder.name}((int)$daoNoTransformationEnumName#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if (!$finder.returnType.collectionType)
#set ($finderCall = "($returnType)$finderCall")
#end
            return $finderCall
        }

#if(!$finder.criteriaFinder)
        /// <summary>
        /// @see ${entity.fullyQualifiedName}#${finder.name}(String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
        /// </summary>
        $finder.visibility $returnType ${finder.name}(String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList()}#end)
#if ($finder.exceptionsPresent)
            throws $finder.exceptionList
#end
        {
#set ($finderCall = "this.${finder.name}((int)$daoNoTransformationEnumName, queryString#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if (!$finder.returnType.collectionType)
#set ($finderCall = "($returnType)$finderCall")
#end
            return $finderCall
        }

#if (!$finder.returnType.collectionType)
#set ($returnType = "Object")
#end
        /// <summary>
        /// @see ${entity.fullyQualifiedName}#${finder.name}(int#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
        /// </summary>
        $finder.visibility $returnType ${finder.name}(int transform#if(!$finder.arguments.empty), ${finder.getTypedArgumentList()}#end)
#if ($finder.exceptionsPresent)
            throws $finder.exceptionList
#end
        {
            return this.${finder.name}(transform, "$finder.getQuery($entity)"#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedName}#${finder.name}(int, String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
        /// </summary>
        $finder.visibility $returnType ${finder.name}(int transform, String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList()}#end)
#if ($finder.exceptionsPresent)
            throws $finder.exceptionList
#end
        {
            IQuery queryObject = Session.CreateQuery(queryString);
#foreach($argument in $finder.arguments)
#set ($count = $velocityCount - 1)
#set ($argumentValue = $argument.name)
#if($argument.type.primitive)
#set ($argumentValue = "new ${argument.type.wrapperName}($argument.name)")
#elseif ($argument.type.enumeration)
#set ($argumentValue = "${argument.name}")
#end
#set ($setParameterOperation = "SetParameter")
#if ($argument.type.collectionType || $argument.type.arrayType)
#set ($setParameterOperation = "${setParameterOperation}List")
#end
#if ($finder.useNamedParameters)
            queryObject.${setParameterOperation}("$argument.name", $argumentValue);
#else
            queryObject.${setParameterOperation}($count, $argumentValue);
#end
#end
#if ($finder.returnType.setType)
            Iesi.Collections.ISet results = new Iesi.Collections.HashedSet(queryObject.list());
#else
            System.Collections.ICollection results = queryObject.List();
#end
#if (!$finder.returnType.collectionType)
            Object result = null;
            if (results != null)
            {
                if (results.Count > 1)
                {
                    throw new NHibernate.NonUniqueResultException(results.Count);
                }
                else if (results.Count == 1)
                {
                    foreach (Object obj in results)
                        result = obj;
                }
            }
            result = TransformEntity(transform, ($entity.fullyQualifiedName)result);
            return result;
#else
            results = TransformEntities(transform, results);
            return results;
#end
        }
#else
        /// <summary>
        /// @see ${entity.fullyQualifiedName}#${finder.name}(int, String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
        /// </summary>
        $finder.visibility $returnType ${finder.name}(int transform#if(!$finder.arguments.empty), ${finder.getTypedArgumentList()}#end)
#if ($finder.exceptionsPresent)
            throws $finder.exceptionList
#end
        {
#set($criteriaArgument = $finder.criteriaArgument)
#set($criteriaArgumentName = $criteriaArgument.name)
            try
            {
                ${springTypesPackage}.${criteriaSearchBaseName} criteriaSearch = new ${springTypesPackage}.${criteriaSearchBaseName}(super.getSession(false), typeof(${entity.fullyQualifiedEntityImplementationName}));
                criteriaSearch.getConfiguration().setFirstResult(${criteriaArgumentName}.getFirstResult());
                criteriaSearch.getConfiguration().setFetchSize(${criteriaArgumentName}.getFetchSize());
                criteriaSearch.getConfiguration().setMaximumResultSize(${criteriaArgumentName}.getMaximumResultSize());
#set($criteriaClass = $criteriaArgument.type)
#foreach($criteriaAttribute in $criteriaClass.attributes)
#if($criteriaAttribute.matchModePresent)
#set($matchModeArgument = ", ${hibernateUtils.criterionPackage}.MatchMode.${criteriaAttribute.matchModeConstant}")
#else
#set($matchModeArgument = "")
#end
#if($criteriaAttribute.nullable)
#set($nullableArgument = ", true")
#else
#set($nullableArgument = "")
#end
#if($criteriaAttribute.comparatorPresent)
#set($comparatorArgument = ", ${springTypesPackage}.${criteriaSearchBaseName}Parameter.${criteriaAttribute.comparatorConstant}")
#else
#set($comparatorArgument = "")
#end
#set ($parameterName = "parameter${velocityCount}")
                ${springTypesPackage}.${criteriaSearchBaseName}Parameter $parameterName =
                    new ${springTypesPackage}.${criteriaSearchBaseName}Parameter(
                        ${criteriaArgumentName}.${criteriaAttribute.getterName}(),
                        "${criteriaAttribute.attributeName}"${nullableArgument}${comparatorArgument}${matchModeArgument});
#if($criteriaAttribute.orderable)
                ${parameterName}.setOrderDirection(${springTypesPackage}.${criteriaSearchBaseName}Parameter.$criteriaAttribute.orderDirection);
                ${parameterName}.setOrderRelevance($criteriaAttribute.orderRelevance);
#end
                criteriaSearch.addParameter($parameterName);
#end
#if ($finder.returnType.setType)
                Iesi.Collections.ISet results = criteriaSearch.executeAsSet();
#else
                System.Collections.IList results = criteriaSearch.executeAsList();
#end
                results = TransformEntities(transform, results);
                return results;
            }
            catch (${hibernateUtils.basePackage}.HibernateException ex)
            {
                throw super.convertHibernateAccessException(ex);
            }
        }
#end

#end
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#${operation.getSignature(false)}
        /// </summary>
        $operation.visibility $returnType.fullyQualifiedName ${operation.name}(${operation.getTypedArgumentList()})
#if ($operation.exceptionsPresent)
            throws $operation.exceptionList
#end
        {
#if ($requiredCheckEnabled)
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
            if ($argument.name == null)
            {
                throw new ArgumentNullException(
                    "${entity.fullyQualifiedDaoName}.${operation.signature} - '${argument.name}' can not be null");
            }
#end
#end
#end
#set ($call = "this.${operation.implementationCall};")
#if ($operation.returnTypePresent)
            return $call
#else
            $call
#end
        }

         /// <summary>
         /// Performs the core logic for {@link #${operation.getSignature(false)}}
         /// </summary>
        protected abstract $operation.returnType.fullyQualifiedName $operation.implementationSignature;

#end
        /// <summary>
        /// Allows transformation of entities into value objects
        /// (or something else for that matter), when the <code>transform</code>
        /// flag is set to one of the constants defined in <code>$entity.fullyQualifiedDaoName</code>, please note
        /// that the {@link #$daoNoTransformationEnumName} constant denotes no transformation, so the entity itself
        /// will be returned.
#if (!$entity.valueObjectReferences.empty)
        /// <p/>
        /// This method will return instances of these types:
        /// <ul>
        ///   <li>{@link $entity.fullyQualifiedName} - {@link #$daoNoTransformationEnumName}</li>
#foreach ($valueObjectRef in $entity.valueObjectReferences)
#set ($targetElement = $valueObjectRef.targetElement)
        ///   <li>{@link $targetElement.fullyQualifiedName} - {@link ${valueObjectRef.transformationConstantName}}</li>
#end
        /// </ul>
#end
        ///
        /// If the integer argument value is unknown {@link #${entity.daoNoTransformationConstantName}} is assumed.
        ///
        /// @param transform one of the constants declared in {@link $entity.fullyQualifiedDaoName}
        /// @param entity an entity that was found
        /// @return the transformed entity (i.e. new value object, etc)
        /// @see #TransformEntities(int,System.Collections.ICollection)
        /// </summary>
        protected Object TransformEntity(int transform, $entity.fullyQualifiedName entity)
        {
            Object target = null;
            if (entity != null)
            {
                switch (transform)
                {
#foreach ($valueObjectRef in $entity.allValueObjectReferences)
                    case (int)Transform${valueObjectRef.sourceElement.Name}.${valueObjectRef.transformationConstantName} :
                        target = ${valueObjectRef.transformationMethodName}(entity);
                        break;
#end
                    case (int)$daoNoTransformationEnumName : // fall-through
                    default:
                        target = entity;
                        break;
                }
#if ($evictEntitiesOnTransformation.equalsIgnoreCase("true"))
                if (transform != $daoNoTransformationEnumName)
                {
                    try
                    {
                        this.getSession(false).evict(entity);
                    }
                    catch (${hibernateUtils.basePackage}.HibernateException exception)
                    {
                        // ignore
                    }
                }
#end
            }
            return target;
        }

        /// <summary>
        /// Transforms a collection of entities using the
        /// {@link #TransformEntity(int,$entity.fullyQualifiedName)}
        /// method. This method does not instantiate a new collection.
        /// <p/>
        /// This method is to be used internally only.
        ///
        /// @param transform one of the constants declared in <code>$entity.fullyQualifiedDaoName</code>
        /// @param entities the collection of entities to transform
        /// @return the same collection as the argument, but this time containing the transformed entities
        /// @see #TransformEntity(int,$entity.fullyQualifiedName)
        /// </summary>
        protected ${newKeyword}System.Collections.ICollection TransformEntities(int transform, System.Collections.ICollection entities)
        {
            switch (transform)
            {
#foreach ($valueObjectRef in $entity.allValueObjectReferences)
                case (int)Transform${valueObjectRef.sourceElement.Name}.${valueObjectRef.transformationConstantName} :
                    entities = ${valueObjectRef.transformationToCollectionMethodName}(entities);
                    break;
#end
                case (int)$daoNoTransformationEnumName : // fall-through
                default:
                    break; // do nothing;
            }
            return entities;
        }

#foreach ($valueObjectRef in $entity.valueObjectReferences)
        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToCollectionMethodName}(System.Collections.ICollection)
        /// </summary>
        public System.Collections.ICollection ${valueObjectRef.transformationToCollectionMethodName}(System.Collections.ICollection entities)
        {
            if (entities == null)
                return null;

            System.Collections.ArrayList vos = new System.Collections.ArrayList();
            foreach(${entity.fullyQualifiedName} entity in entities)
            {
                vos.Add(${valueObjectRef.transformationMethodName}(entity));
            }
            return vos;
        }

        /// <summary>
        /// Base implementation for transforming the results of a report query into a value object. This
        /// implementation exists for convenience reasons only. It needs only be overridden in the
        /// {@link $entity.daoImplementationName} class if you intend to use reporting queries.
        /// @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
        /// </summary>
        protected $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(Object[] row)
        {
            return null;
        }

        /// <summary>
        /// @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToEntityCollectionMethodName}(System.Collections.ICollection)
        /// </summary>
        public System.Collections.ICollection ${valueObjectRef.transformationToEntityCollectionMethodName}(System.Collections.ICollection instances)
        {

            if (instances == null)
                return null;

            System.Collections.ArrayList entities = new System.Collections.ArrayList();
            foreach(${valueObjectRef.targetElement.fullyQualifiedName} instance in instances)
            {
                entities.Add(
                    ${valueObjectRef.transformationToEntityMethodName}(($valueObjectRef.targetElement.fullyQualifiedName)instance));
            }
            return entities;
        }

#end
    }
#if ($stringUtils.isNotBlank($entity.packageName))
}
#end