#if ($stringUtils.isNotBlank($view.packageName))
package $view.packageName;
#end

import java.io.IOException;

import javax.faces.FactoryFinder;
import javax.faces.context.FacesContext;
import javax.faces.context.FacesContextFactory;
import javax.faces.lifecycle.Lifecycle;
import javax.faces.lifecycle.LifecycleFactory;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

/**
 * This filter handles setting request attributes that determine what will be
 * displayed on a user's page.
 */
public class $view.formPopulator
    implements Filter
{

    private FilterConfig config;

    /**
     * Initialize the filter
     * 
     * @param config the configuration
     * @see javax.servlet.Filter#setFilterConfig(FilterConfig)
     */
    public void init(FilterConfig config)
    {
        this.config = config;
    }

    /**
     * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,
     *      javax.servlet.ServletResponse, javax.servlet.FilterChain)
     */
    public void doFilter(
        ServletRequest request,
        ServletResponse response,
        FilterChain chain) throws IOException, ServletException
    {
        // - we need to retrieve the faces context differently since we're outside of the
        //   faces servlet
        final LifecycleFactory lifecycleFactory =
            (LifecycleFactory)FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);
        final Lifecycle lifecycle = lifecycleFactory.getLifecycle(LifecycleFactory.DEFAULT_LIFECYCLE);
        final FacesContextFactory facesContextFactory =
            (FacesContextFactory)FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);
        final FacesContext facesContext =
            facesContextFactory.getFacesContext(
                this.config.getServletContext(),
                request,
                response,
                lifecycle);
        final javax.faces.el.VariableResolver variableResolver = facesContext.getApplication().getVariableResolver();
        java.lang.Object previousForm = null;
        try
        {
#foreach ($action in $view.formActions)
            previousForm = variableResolver.resolveVariable(facesContext, "$action.formKey");
            if (previousForm != null)
            {     
                $action.fullyQualifiedFormImplementationName $action.formBeanName =
                    ($action.fullyQualifiedFormImplementationName)variableResolver.resolveVariable(
                    facesContext,
                    "$action.formBeanName");
                // - populate the $action.formBeanName with any parameters from the previous form
                this.populateForm(previousForm, $action.formBeanName);
                request.setAttribute("$action.formBeanName", $action.formBeanName);
            }
#end
        }
        catch (final Throwable throwable)
        {
            throw new ServletException(throwable);
        }
        chain.doFilter(request, response);
    }
    
    /**
     * Populates the form from the given parameters.  If the request parameter is null or an empty
     * string, then null is placed on the form.
     *
     * @param fromForm the form from which we're populating
     * @param toForm the form to which we're populating
     */
    private final void populateForm(final Object fromForm, final Object toForm)
    {
        try
        {
            final java.util.Map parameters = org.apache.commons.beanutils.PropertyUtils.describe(fromForm);
            for (final java.util.Iterator iterator = parameters.keySet().iterator(); iterator.hasNext();)
            {
                final String name = (java.lang.String)iterator.next();
                if (org.apache.commons.beanutils.PropertyUtils.isWriteable(toForm, name))
                {
                    final java.beans.PropertyDescriptor descriptor =
                        org.apache.commons.beanutils.PropertyUtils.getPropertyDescriptor(toForm, name);
                    if (descriptor != null)
                    {
                        final Object value = parameters.get(name);
                        // - only convert if the string is not empty
                        if (value != null)
                        {
                            org.apache.commons.beanutils.PropertyUtils.setProperty(toForm, name, value);
                        }
                    }
                }
            }
        }
        catch (final Throwable throwable)
        {
            throw new RuntimeException(throwable);
        }
    }

    /**
     * @see javax.servlet.Filter#destroy()
     */
    public void destroy()
    {
        this.config = null;
    }
}
