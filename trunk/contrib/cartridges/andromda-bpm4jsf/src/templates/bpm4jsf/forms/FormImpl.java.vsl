#set ($generatedFile = "${action.fullyQualifiedFormImplementationPath}.java")
// license-header java merge-point
package $action.packageName;

/**
$action.getDocumentation(" * ")
 */
public class $action.formImplementationName
    implements $action.formImplementationInterfaceList
{
    public ${action.formImplementationName}()
    {
#foreach ($field in $action.formFields)
#if ($field.type.dateType)
#set ($lenient = !$field.strictDateFormat)
#if ($field.type.dateType)
        java.text.DateFormat $field.dateFormatter = new java.text.SimpleDateFormat("$field.dateFormat");
        ${field.dateFormatter}.setLenient($lenient);
        this.dateTimeFormatters.put("$field.name", $field.dateFormatter);
#elseif ($field.type.timeType)
        java.text.DateFormat $field.timeFormatter = new java.text.SimpleDateFormat("$field.timeFormat");
        this.dateTimeFormatters.put("$field.name", $field.timeFormatter);
#end
#end
#end
    }
#foreach ($field in $action.formFields)

    private $field.type.fullyQualifiedName $field.name;

    /**
$field.getDocumentation("     * ")
     */
    public $field.type.fullyQualifiedName ${field.getterName}()
    {
#if ($field.table)
#set ($upperCaseFieldName = $stringUtils.capitalize($field.name))
        return ${managedBeansPackage}.CollectionSorter.sort(this.$field.name, this.get${upperCaseFieldName}SortColumn(), this.is${upperCaseFieldName}SortAscending());
#else
        return this.${field.name};
#end
    }

    /**
$field.getDocumentation("     * ")
     */
    public void ${field.setterName}($field.type.fullyQualifiedName $field.name)
    {
        this.$field.name = $field.name;
    }
#if ($field.table)
    /**
     * The name of the sort column for the {@link #${field.name}} collection.
     */
    private String ${field.name}SortColumn;

    /**
     * Gets the name of the sort column for the {@link #${field.name}} collection.
     * 
     * @return the name of the sort column.
     */
    public String get${upperCaseFieldName}SortColumn()
    {
        return this.${field.name}SortColumn;
    }

    /**
     * Sets the name of the {@link #${field.name}} sort column.
     * 
     * @param ${field.name}SortColumn the name of the column by which {@link #${field.name}}
     *        are sorted by.
     */
    public void set${upperCaseFieldName}SortColumn(final String ${field.name}SortColumn)
    {
        this.${field.name}SortColumn = ${field.name}SortColumn;
    }
    
    /**
     * The flag indicating whether or not {@link #${field.name}} should be sorted
     * ascending.
     */
    private boolean ${field.name}SortAscending = false;

    /**
     * Indicates whether or not {@link #${field.name}} should be sorted ascending
     * or not.
     * 
     * @return true/false
     */
    public boolean is${upperCaseFieldName}SortAscending()
    {
        return this.${field.name}SortAscending;
    }

    /**
     * Sets whether or not {@link #${field.name}} should be sorted ascending.
     * 
     * @param ${field.name}SortAscending true/false
     */
    public void set${upperCaseFieldName}SortAscending(final boolean ${field.name}SortAscending)
    {
        this.${field.name}SortAscending = ${field.name}SortAscending;
    }
#else
    /**
     * Stores the values.
     */
    private java.lang.Object[] $field.valueListName;
    
    /**
     * Stores the labels
     */
    private java.lang.Object[] $field.labelListName;
#set ($listType = "java.lang.Object[]")
#set ($backingListName = $field.backingListName)
#set ($backingListMethod = $stringUtils.capitalize($backingListName))
#set ($valueListName = $field.valueListName)
#set ($valueListMethod = $stringUtils.capitalize($valueListName))
#set ($labelListName = $field.labelListName)
#set ($labelListMethod = $stringUtils.capitalize($labelListName))
    public $listType get${backingListMethod}()
    {
        $listType values = this.${valueListName};
        $listType labels = this.${labelListName};

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }

        final int length = java.lang.Math.min(labels.length, values.length);
        javax.faces.model.SelectItem[] backingList = new javax.faces.model.SelectItem[length];

        for (int ctr = 0; ctr < length; ctr++)
        {
            backingList[ctr] = new javax.faces.model.SelectItem(java.lang.String.valueOf(labels[ctr]), java.lang.String.valueOf(values[ctr]));
        }
        return backingList;
    }

    public $listType get${valueListMethod}()
    {
        return this.$valueListName;
    }

    public void set${valueListMethod}($listType $valueListName)
    {
        this.$valueListName = $valueListName;
    }

    public $listType get${labelListMethod}()
    {
        return this.$labelListName;
    }

    public void set${labelListMethod}($listType $labelListName)
    {
        this.$labelListName = $labelListName;
    }

#set ($setBackingListMethodSignature = "set${backingListMethod}(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty)")
    public void $setBackingListMethodSignature
    {
        if (valueProperty == null || labelProperty == null)
        {
            throw new IllegalArgumentException("${action.formImplementationName}.${setBackingListMethodSignature} requires non-null arguments");
        }
        this.${valueListName} = null;
        this.${labelListName} = null;
        if (items != null)
        {
            this.${valueListName} = new java.lang.Object[items.size()];
            this.${labelListName} = new java.lang.Object[items.size()];

            try
            {
                int ctr = 0;
                for (final java.util.Iterator iterator = items.iterator(); iterator.hasNext(); ctr++)
                {
                    final java.lang.Object item = iterator.next();

                    this.${valueListName}[ctr] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.${labelListName}[ctr] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                }
            }
            catch (final Throwable throwable)
            {
                throw new java.lang.RuntimeException(throwable);
            }
        }
    }

#end
#end

    /**
     * Stores any date or time formatters for this form.
     */
    private final java.util.Map dateTimeFormatters = new java.util.HashMap();

    /**
     * Gets any date and time formatters (keyed by property name)
     * for this form.
     *
     * @return the Map containing any date and time formatters.
     */
    public java.util.Map getDateTimeFormatters()
    {
        return this.dateTimeFormatters;
    }
}