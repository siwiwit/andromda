// Name: ${class.name}.cs
// license-header cs merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: ValueObject.vsl in andromda-cs-cartridge.

using System;

#if ($stringUtils.isNotBlank($class.packageName))
namespace $class.packageName
{
#end
    /// <summary>
$class.getDocumentation("    /// ")
    /// </summary>
    public class $class.name
#if($class.generalization)
        : ${class.generalization.fullyQualifiedName}
#end
    {
        // ----- Attributes and Associations -----
## **** Generate attribute ****
#foreach ($attribute in $class.attributes)
        private $attribute.getterSetterTypeName m_$attribute.name;
#end
## **** Generate associations ****
#foreach ($associationEnd in $class.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable)
    private $target.getterSetterTypeName m_$target.name;
#end
#end

        // ----- Constructors -----
#if (!$class.properties.empty)
        public ${class.name}()
        {
        }

#end
#if ($enablePropertyConstructors.equalsIgnoreCase('true'))
#set ($propertiesNumber = $class.properties.size())
#if ($propertiesNumber == 0 || $propertiesNumber != 1 || !$class.properties.iterator().next().getterSetterTypeName.equals($class.fullyQualifiedName))
        /// <summary>
        /// Constructor taking all properties.
        /// </summary>
#set ($parenthesis = "(")
#if ($class.properties.empty)
#set ($parenthesis = "()")
#end
        public ${class.name}${parenthesis}
#foreach ($property in $class.properties)
            $property.getterSetterTypeName ${property.name}#if($velocityCount != $class.properties.size()),#else)
#end

#end
        {
#foreach ($property in $class.properties)
            m_${property.name} = ${property.name};
#end
        }

#end
#end
        /// <summary>
        /// Copy constructor
        /// </summary>
        public ${class.name}(${class.name} otherBean)
        {
            if (otherBean != null)
            {
#foreach ( $property in $class.properties)
                m_${property.name} = otherBean.m_${property.name};
#end
            }
        }

        // ----- Accessors -----
## **** Generate accessors for attributes ****
#foreach ($attribute in $class.attributes)
        /// <summary>
$attribute.getDocumentation("        /// ")
        /// </summary>
        public $attribute.getterSetterTypeName ${stringUtils.upperCamelCaseName($attribute.name)}
        {
            get { return m_$attribute.name; }
            set { m_$attribute.name = value; }
        }

#end
## **** Generate accessors for associations ****
#foreach ($associationEnd in $class.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable)
        /// <summary>
$target.getDocumentation("        /// ")
        /// </summary>
        public $target.getterSetterTypeName ${stringUtils.upperCamelCaseName($target.name)}
        {
            get { return m_$target.name; }
            set { m_$target.name = value; }
        }

#end
#end
    // ValueObject.vsl merge-point
    }
#if ($stringUtils.isNotBlank($class.packageName))
}
#end