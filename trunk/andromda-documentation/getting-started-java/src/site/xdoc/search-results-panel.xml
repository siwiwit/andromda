<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>
            Search Results Panel
        </title>
    </properties>
    <body>
        <section name="Search Results Panel">

            <p>
                We are now ready to implement the Search Results panel. We will do this by enhancing
                the Search Timecards activity diagram in two stages. The first stage will introduce
                the results table and the second stage will introduce the navigation to the Timecard
                Details page. The modified activity diagram for stage one is shown below:
            </p>

            <div align="center">
                <img src="images/SearchTimecardsAD2.jpg" alt="Search Timecards Activity Diagram"/>
            </div>
            <p>
                Notice that we have added a <i>page variable</i> called <tt>timecardSummaries</tt>,
                which is an array of <tt>TimecardSummaryVO</tt> objects. This page variable
                will be tagged to tell AndroMDA to render it as a table. Follow one of the links
                below to add the page variable to your model.
            </p>
            <ul>
                <li>
                    <a href="resources/uml-tools/argouml/AddPageVariableToAD.html">ArgoUML</a>
                </li>
                <li>
                    <a href="resources/uml-tools/magicdraw/AddPageVariableToAD.html">MagicDraw</a>
                </li>
                <li>
                    <a href="resources/uml-tools/rsm/AddPageVariableToSM.html">RSM/RSA</a>
                </li>
            </ul>
            <p>
                We now need to enhance our
                <tt>SearchController</tt>
                to fill in this page variable
                with search results. For this to happen, we need to do two things:
            </p>
            <ol style="list-style-type: decimal">
                <li>The page variable must be made available to the <tt>populateSearchScreen()</tt>
                    method. To do this, add a sixth parameter to this method in the model. The name
                    and type of the parameter must match the <tt>timecardSummaries</tt> page variable
                    exactly.
                </li>
                <li>
                    <tt>SearchController</tt> needs access to the <tt>TimeTrackingService</tt>.
                    Open the <tt>Services</tt> diagram and add a dependency from
                    <tt>SearchController</tt> to <tt>TimeTrackingService</tt>
                    as shown below. Note that we have suppressed the full signature of the
                    <tt>findTimeCards()</tt> method.
                </li>
            </ol>
            <div align="center">
                <img src="images/SearchControllerToTimeTrackingService.jpg" alt="Search Controller"/>
            </div>
            <p>
                Now let's ask AndroMDA to generate code for the modified
                <tt>Search Timecards</tt>
                functionality:
            </p>
            <ol style="list-style-type: decimal">
                <li>Execute the command
                    <tt>mvn install</tt>
                    in the Command Prompt. Make sure you
                    get a
                    <tt>BUILD SUCCESSFUL</tt>
                    message.
                </li>
            </ol>
            <p>
                Next we need to modify the <tt>SearchController</tt>
                to initialize the <tt>timecardSummaries</tt>
                page variable with search results. To do this, open the file
                <tt>SearchControllerImpl.java</tt> and add the code shown below in bold:
            </p>
            <source>
                // license-header java merge-point
                package org.andromda.timetracker.web.timecardsearch;

                ...
                import javax.servlet.http.HttpServletResponse;
                &lt;b&gt;import org.andromda.timetracker.domain.TimecardStatus;&lt;/b&gt;
                &lt;b&gt;import org.andromda.timetracker.vo.TimecardSearchCriteriaVO;&lt;/b&gt;
                &lt;b&gt;import org.andromda.timetracker.vo.TimecardSummaryVO;&lt;/b&gt;
                import org.andromda.timetracker.vo.UserVO;
                ...

                public class SearchControllerImpl extends SearchController
                {
                ...
                public final void populateSearchScreen(...)
                throws Exception
                {
                ...

                // Populate submitter and approver dropdowns
                form.setSubmitterBackingList(userList, &quot;id&quot;, &quot;username&quot;);
                form.setApproverBackingList(userList, &quot;id&quot;, &quot;username&quot;);

                &lt;b&gt;// Populate status dropdown&lt;/b&gt;
                &lt;b&gt;List statusLabels = new ArrayList(TimecardStatus.literals());&lt;/b&gt;
                &lt;b&gt;List statusValues = new ArrayList(TimecardStatus.literals());&lt;/b&gt;
                &lt;b&gt;statusLabels.add(0, ALL_STRING);&lt;/b&gt;
                &lt;b&gt;statusValues.add(0, &quot;&quot;);&lt;/b&gt;
                &lt;b&gt;form.setStatusLabelList(statusLabels.toArray());&lt;/b&gt;
                &lt;b&gt;form.setStatusValueList(statusValues.toArray());&lt;/b&gt;

                &lt;b&gt;// Populate timecard summaries&lt;/b&gt;
                &lt;b&gt;TimecardStatus status = null;&lt;/b&gt;
                &lt;b&gt;if (form.getStatus() != null &amp;&amp; form.getStatus().length() $gt; 0) {&lt;/b&gt;
                &lt;b&gt;status = TimecardStatus.fromString(form.getStatus());&lt;/b&gt;
                &lt;b&gt;}&lt;/b&gt;
                &lt;b&gt;TimecardSearchCriteriaVO criteria = new TimecardSearchCriteriaVO(&lt;/b&gt;
                &lt;b&gt;form.getSubmitter(),&lt;/b&gt;
                &lt;b&gt;form.getApprover(),&lt;/b&gt;
                &lt;b&gt;status,&lt;/b&gt;
                &lt;b&gt;form.getStartDateMinimumAsDate(),&lt;/b&gt;
                &lt;b&gt;form.getStartDateMaximumAsDate());&lt;/b&gt;

                &lt;b&gt;TimecardSummaryVO[] timecards =&lt;/b&gt;
                &lt;b&gt;getTimeTrackingService().findTimecards(criteria);&lt;/b&gt;
                &lt;b&gt;form.setTimecardSummaries(timecards);&lt;/b&gt;
                }
                }
            </source>
            <p>
                Follow the steps below to build and deploy the application to JBoss and test it.
            </p>
            <ol style="list-style-type: decimal">
                <li>Build only the web project to make sure the code added above is compiled and packaged.
                    Here's how:
                    <br/>
                    <tt>mvn -f web/pom.xml install</tt>
                </li>
                <li>Make sure the JBoss server is running.</li>
                <li>Deploy the application:
                    <br/>
                    <tt>mvn -f app/pom.xml -Ddeploy</tt>
                </li>
                <li>Open a browser and make it point to http://localhost:8080/timetracker. The TimeTracker
                    search page should appear along with search results. You should be able to change
                    the search parameters to see new search results.
                </li>
            </ol>
            <p>
                Below is a screen shot of the Search screen so far.
            </p>
            <div align="center">
                <img src="images/SearchResultsPanel1.jpg" alt="Search Results Panel"/>
            </div>
            <subsection name="What's Next?">
                <p>
                    Now that the search results table is showing well, we need to add the details column
                    that will allow us to navigate to the Timecard Details page. Click <a href="details-column.html">here</a> to add this column.
                </p>
            </subsection>
        </section>
    </body>
</document>
