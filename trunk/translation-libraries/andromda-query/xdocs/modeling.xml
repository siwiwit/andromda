<?xml version="1.0" encoding="UTF-8"?>

<document>
  	<properties>
    	<title>Query Translation-Library Modeling</title>
  	</properties>
  	<body>
    	<section name="Query Translation-Library Modeling">
    		<p>
    			The page describes the modeling standards one must follow to in order
    			to use the Query Translation-Library.
    		</p>   	
			<p>
				In order for an expression to be written so that it can be translated in
				the correct manner, there are some guide lines that it must follow.
			</p>
			<table>
				<tr>
					<th>
						Guideline
					</th>
					<th>
						Explanation
					</th>
					<th>
						Example
					</th>
				</tr>
				<tr>
					<td>
						Must be of type 'body'.
					</td>
					<td>	
						An expression which translates to a query is in
						essence the body of a query operation. 
					</td>
					<td>	
						context Project::findByProjectType(
							projectTypeId:Long, 
							requestStatus:String, 
							compareDate:Timestamp):Collection(Project) <strong>body</strong> findByProjectType: 
							allInstances() -> select ( project | project.projectType.id = projectTypeId
								and project.status = requestStatus and project.submittedDate >= compareDate )
					</td>
				</tr>
				<tr>
					<td>
						After the context declaration, each expression must start with a
						'<code>allInstances() -> select(<![CDATA[<some expression>]]>)</code>'
					</td>
					<td>
						This represents the beginning of the query and tells us that
						we are beginning with all instances of the Classifier element
						in which the query operation resides.
					</td>
					<td>
			  			context Project::findByNameAndNumber(name:String,number:String) : Collection(Project)
						body findByNameAndNumberBody: <strong>allInstances() -> select( 
						project | StringUtils.isLike(project.projectName, name) 
						and StringUtils.isLike(project.projectNumber, number) )</strong>
					</td>
				</tr>
				<tr>
					<td>
						Translation to like statements require you add a StringUtils element
						to your model with an <code>isLike</code> operation.
					</td>
					<td>
					  	This is required because OCL String types do not natively support any SQL like type
					  	operation. On the other hand, OCL does allow us to create and use user defined types. This
					  	permits us to create and use the <code>StringUtils.isLike</code> method without
					  	violating standards.  
					</td>
					<td>
						context LegalAgreement::findByLegalPartyName(aLegalPartyName:String) 
						<strong>body</strong> findByLegalPartyNameBody: allInstances() -> select( legalAgreement |
						legalAgreement.legalAgreementParties -> includesAll(
							legalAgreement.legalAgreementParties -> select( 
								legalAgreementParty |
						<strong>StringUtils.isLike(legalAgreementParty.legalParty.legalPartyName,
						aLegalPartyName)</strong>)))
					</td>
				</tr>
                <tr>
                    <td>
                        Sorting results requires use of the <code>sortedBy</code> expression.
                    </td>
                    <td>
                        The <em>sortedBy</em> expression allows you to specify by which properties the query
                        results should be ordered by.
                    </td>
                    <td>
                        context org::andromda::contracts::LegalAgreement::findAll():Collection(LegalAgreement)
                        body : LegalAgreement.allInstances() <strong>-> sortedBy(documentTitle) -> sortedBy(expiredDate)</strong> 
                    </td>
                </tr>
			</table>
    	</section>
  	</body>
</document>