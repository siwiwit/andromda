<?xml version="1.0"?>

<document> 
	<properties>
    	<title>AndroMDA Translation-Libraries</title> 
    	<author email="chdbrandon@yahoo.com">Chad Brandon</author>
    </properties>
  	<body> 
  		<section name="What's a Translation-Library?">
  		    <p>
               Translation libraries are multiple translations that make up
  			   a library (or jar file to be exact).  For example the query 
  			   translation-library, currently consists of two translations: 
  			   EJB-QL and Hibernate-QL.  
  		    </p>
  			<p>
  				Translation libraries are used to translate <a href="http://www.klasse.nl/ocl/index.html">OCL</a> 
                expressions into other languages.  For example, a translation-library could be used to translate an 
                OCL body expression into a Hibernate-QL query, or EJB-QL query like you see below. 
  		    </p>
  		    <table>
  		    	<tr>
  		    		<th>
  		    		   This OCL query
  		    		</th>
  		    	</tr>
  		    	<tr>
  		    		<td>
						context org::andromda::contracts::Project::findByProjectTypeStatusAfterWentCurrentDate(
							type:String,
							status:String, 
							wentCurrentDate:Date):Collection (Project) body findByProjectType : 
							allInstances() -> select ( 
								project | 
							        project.type = type 
							and project.status = status
							and project.wentCurrentDate >= wentCurrentDate )	    			
  		    		</td>
  		        </tr>
  		        <tr>
                   <th>
                     	could be translated to: Hibernate-QL
                   </th>		         	
  		        </tr>
  		        <tr>
  		            <td>
					    from org.andromda.contracts.Project as project
					    where project.type = ? 
					    and project.status = ?
					    and project.wentCurrentDate >= ? 			
  		            </td>
  		        </tr>
  		        <tr>
  		        	<th>
  		        		or: EJB-QL
  		        	</th>
  		        </tr>
				<tr>
  		    		<td>
			            SELECT DISTINCT OBJECT(project) 
			            FROM Project project
				        WHERE project.type = ?1 
				        AND project.status = ?2 
				        AND project.wentCurrentDate >= ?3  		    			
  		    		</td>
  		    	</tr>
  		    </table>
  		    <p>
                If you take a look at the 
  			    <a href="../andromda-query-library/index.html">Query Translation-Library</a>, 
  			    you'll see it does just what I describe above.
  		    </p>
  		    <p>
  				In addition to translating OCL query bodies, you could also translate
  				things like constraints (i.e. OCL -> Java, OCL -> SQL, etc).  OCL was orginally designed as a way of describing constraints
  				in your model that weren't possible to express with UML drawings alone.  
  				OCL 2.0 has expanded on the constraint abilities (i.e. <strong>pre</strong>,
  				<strong>post</strong>, <strong>inv</strong>) of OCL and have made 
  				OCL a fully fledged object expression language (which means it probably should
  				be renamed to something like Object Expression Language).
  			</p>
  		</section>
  		<section name="How are Translation-Libraries Used?">
  			<p>
  				Translation libraries are another type of <strong>plugin</strong>
  				used and discovered by the AndroMDA framework.  This means that
  				just like <a href="../andromda-cartridges/index.html">Cartridges</a>
  				they will be found and made available to the framework by placing
  				them on your project's classpath.  
  			</p>
  			<p>
                The major differences between a cartridge and translation-library 
                is that translation-libraries are used <strong>with</strong> cartridges
                whereas cartridges can be used alone.  For example: the EJB and 
                Hibernate cartridges each have their own finder metafacade that 
                extends the 
                <a href="../andromda-metafacades-uml/apidocs/org/andromda/metafacades/uml/EntityFacade.html">EntityFinderMethodFacade</a>
                to provide its own implementation of the getQuery method.  
            </p>
            <p>
                Previously each getQuery method would look up the tagged value that would store
                the query for either Hibernate-QL (for the Hibernate cartridge) or EJB-QL
                (for the EJB cartridge) and just return back the value from the stored
                tagged value.  Using an OCL translation-library (the 
                <a href="../andromda-query-library/index.html">Query Translation-Library</a>
                more specifically) you can define the query as OCL and store it as a contraint
                within your entity's finder method operation.  Then using a translateConstraint
                method from the <a href="../andromda-metafacades-uml/apidocs/org/andromda/metafacades/uml/ModelElementFacade.html">ModelElementFacade</a> 
                you can translate the OCL into Hibernate-QL or EJB-QL (or anything for that matter
                as long as the translation library supports it). Take a look at this code
                snippet that shows how you could look up and translate an OCL query into EJB-QL
                (assuming you had the query translation-library on your classpath) for an EJB 
                metafacade getQuery method: 
                <source>
<![CDATA[
    public java.lang.String handleGetQuery() 
    {
        // this tells us to translate all "body" constraints using
        // the "EJB-QL" translation from the "query" library
        String[] translatedExpressions = 
            this.translateConstraints(ExpressionKinds.BODY, "query.EJB-QL");
        String query = null;
        // we just get the first body constraint found (since there should
        // only be one
        if (translatedExpressions != null && translatedExpressions.length > 0) {
            query = translatedExpressions[0];
        }
        return query;
    }]]>
                </source>
  			</p>
  		</section>
  	</body> 
</document>
