using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Configuration;
using System.Xml.Serialization;
using System.Reflection;
using System.IO;
using NXUnit.Framework;



namespace AndroMDA.ScenarioUnit
{
    /// <summary>
    /// This is a concrete implementation of the <see cref="IAsserter"/> interface that uses XML files to store and compare expected output
    /// with actual output objects serialized into XML.
    /// </summary>
    /// <remarks>
    /// This asserter uses XML asserts to compare actual and expected output from a test scenario.
    /// Internally, it uses an open source XML-based unit testing framework called
    /// NXUnit <see ref="http://www.sf.net/NXUnit"/> to perform the XML comparisons. 
    /// <para>
    /// Similar to the <see cref="XMLDataProviderAttribute"/>, this asserter also uses the 
    /// XML format produced by serializing an object using the System.Xml.Serialization.XmlSerializer class.
    /// This means that this asserter can be used to assert only those return/output types
    /// that can be serialized into XML.
    /// </para>
    /// <para>
    /// The <see cref="TestScenarioHelper"/> class constructs a concrete instance of this asserter
    /// for each return value/output parameter that is configured to use this asserter for a test method.
    /// </para>
    /// <para>
    /// The following 3 entries are required in the 
    /// test harness app.config file to use this asserter:
    /// </para>
    /// <para>
    /// <code escaped="true">
    /// <appSettings>
        ///    <add key="TestDataExpectedOutputDir" value="../../testdata/expected_output"/>
    ///<add key="TestDataActualOutputDir" value="../../testdata/actual_output"/>
    ///<add key="TestDataRulesDir" value="../../testdata/rules"/>
  ///</appSettings>
    ///
    /// </code>
    /// </para>
    /// <para>
    /// These 3 entries specify the folders that store the following:
    /// <list type="bullet">
    /// <item>expected output as serialized XML</item>
    /// <item>actual output generated by executing a test case</item>
    /// <item>XML comparison rules for ignoring the values that cannot be compared between actual and expected output, e.g. database generated IDs etc. (more details below)</item>
    /// </list> 
    /// </para>
    /// <para>
    /// This asserter provides the ability to ignore parts of the output while comparing actual and expected values.
    /// This is required for values that cannot be predicted and cannot be a part of the expected output, such as
    /// a date time field that stores the current date/time value or an ID field that is generated in the database.
    /// Rules can be created to ignore such items while asserting actual and expected outputs. These rules
    /// take the form of XPath queries that specify exact nodes in the serialized XML object to be compared. 
    /// </para>
    /// <para>
    /// This class derives from the <c>System.Attribute</c> class. This 
    /// allows this class to be configured as the asserter for a test method return value or output parameter.
    /// </para>
    /// <para>
    /// The AttributeUsage attribute for this class:
    /// <c>[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Parameter)]</c>
    /// ensures that this attribute can be applied at a class, method or at a parameter level.
    /// </para>
    /// <para>
    /// When this attribute is specified at a <c>TestFixture</c> level, 
    /// all the test method return values and output parameters in that <c>TestFixture</c> are asserted using this asserter
    /// unless, if a different asserter is specified at a test method or parameter level.
    /// When this asserter is specified as an attribute on the test method, it
    /// overrides any asserter configured at the test fixture level.
    /// Similarly, when specified at the return value or output parameter level, 
    /// this data provider is used to assert that parameter, irrespective of the asserter configured at the test method or test fixture levels.
    /// </para>
    /// </remarks>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Parameter)]
    public sealed class XMLAsserterAttribute
    : Attribute, IAsserter
    {
        #region properties
        private string _actualOutputDir;
        private string _expectedOutputDir;
        private string _rulesDir;

        /// <summary>
        /// This property is used in conjunction with the 
        /// configuration entry 
        /// <code escaped="true">
        /// <add key="TestDataActualOutputDir" value="[somePath]"/>
        /// </code>
        /// <para>
        /// This configuration entry specifies the directory in which all
        /// actual output is dumped as serialized XML.
        /// This property is used to specify a sub-directory below the TestDataActualOutputDir 
        /// folder.
        /// </para>
        /// </summary>
        /// <remarks>
        /// This property helps organize test output data in
        /// sub-folders below the TestDataActualOutputDir folder. 
        /// <para>
        /// This property is optional and if it is not
        /// set, the methods in this class will output all actual output in the TestDataActualOutputDir folder.
        /// </para>
        /// </remarks>
        public string ActualOutputDir
        {
            get
            {
                string testActualOutputDir = ConfigurationManager.AppSettings["TestDataActualOutputDir"];
                if (!string.IsNullOrEmpty(_actualOutputDir))
                {
                    testActualOutputDir = Path.Combine(testActualOutputDir, _actualOutputDir);
                }
                return testActualOutputDir;
            }
            set { _actualOutputDir = value; }
        }

        /// <summary>
        /// This property is used in conjunction with the 
        /// configuration entry 
        /// <code escaped="true">
        /// <add key="TestDataExpectedOutputDir" value="[somePath]"/>
        /// </code>
        /// <para>
        /// This configuration entry specifies the directory in which 
        /// expected test output is stored as serialized XML.
        /// This property is used to specify a sub-directory below the TestDataExpectedOutputDir 
        /// folder.
        /// </para>
        /// </summary>
        /// <remarks>
        /// This property helps organize expected test output data in
        /// sub-folders below the TestDataExpectedOutputDir folder. 
        /// <para>
        /// This property is optional and if it is not
        /// set, the methods in this class will look for expected test output in the TestDataExpectedOutputDir folder.
        /// </para>
        /// </remarks>
        public string ExpectedOutputDir
        {
            get
            {
                string testExpectedOutputDir = ConfigurationManager.AppSettings["TestDataExpectedOutputDir"];
                if (!string.IsNullOrEmpty(_expectedOutputDir))
                {
                    testExpectedOutputDir = Path.Combine(testExpectedOutputDir, _expectedOutputDir);
                }
                return testExpectedOutputDir;
            }
            set { _expectedOutputDir = value; }
        }

        /// <summary>
        /// This property is used in conjunction with the 
        /// configuration entry 
        /// <code escaped="true">
        /// <add key="TestDataRulesDir" value="[somePath]"/>
        /// </code>
        /// <para>
        /// This configuration entry specifies the directory in which 
        /// XML comparison rules are stored as XPath queries. These XPath queries specify the parts of actual and expected output
        /// XML files that do not need to be compared while asserting actual output against expected output.
        /// This property is used to specify a sub-directory below the TestDataRulesDir
        /// folder.
        /// </para>
        /// </summary>
        /// <remarks>
        /// This property helps organize test assertion rules in
        /// sub-folders below the TestDataRulesDir folder. 
        /// <para>
        /// This property is optional and if it is not
        /// set, the methods in this class will look for assertion ignore rules
        /// in the TestDataRulesDir folder.
        /// </para>
        /// </remarks>
        public string RulesDir
        {
            get
            {
                string testRulesDir = ConfigurationManager.AppSettings["TestDataRulesDir"];
                if (!string.IsNullOrEmpty(_rulesDir))
                {
                    testRulesDir = Path.Combine(testRulesDir, _rulesDir);
                }
                return testRulesDir;
            }
            set { _rulesDir = value; }
        }
        #endregion

        #region interface implementation
        /// <summary>
        /// This method implements the <see cref="IAsserter"/> interface. 
        /// In this implementation, actual and expected output is serialized as XML
        /// and then compared using an open source XML-based framework named NXUnit
        /// <see ref="http://www.sf.net/NXUnit"/>.
        /// </summary>
        /// <param name="outputObj">The actual output returned from the system under test.</param>
        /// <param name="pInfo">Meta information about the <paramref name="outputObj"/> object.</param>
        /// <param name="methodName">The name of the test method.
        /// This name is used as a part of file naming convention used to name actual output, expected output and rules XML files.</param>
        /// <param name="scenarioName">
        /// The name of the test scenario.
        /// This name is used as a part of file naming convention used to name actual output, expected output and rules XML files.
        /// </param>
        /// <param name="testFixture">This parameter is not used by this asserter.</param>
        /// <remarks>
        /// This method is called by the <see cref="TestScenarioHelper"/> class once for
        /// every return value/output parameter of a test method for which
        /// this asserter is configured.
        /// <para>
        /// This method serializes the actual test output returned from the 
        /// system under test using the System.Xml.Serialization.XmlSerializer class.
        /// </para>
        /// <para>
        /// This method also saves the actual output to a physical file, so that it
        /// can be reviewed manually after the test case is run. This file is created in the folder
        /// specified by the <see cref="ActualOutputDir"/> property.
        /// </para>
        /// <para>
        /// The name of the physical file is created using the same naming convention as that used 
        /// by the <see cref="XMLDataProviderAttribute"/> class: methodName_scenarioName_parameterName.xml.
        /// <note>
        /// In case of return parameters, there is no "parameterName", so, the file name is just methodName_scenarioName.xml.
        /// </note>
        /// </para>
        /// <para>
        /// This method reads expected output from XML files from the location 
        /// specified by the <see cref="ExpectedOutputDir"/> property.
        /// </para>
        /// <para>
        /// The file naming convention used to identify the file to be read is the same here as well:
        /// methodName_scenarioName_parameterName.xml.
        /// </para>
        /// <para>
        /// Not all values in actual and expected output can be compared
        /// in some situations.
        /// </para>
        /// <para>
        /// For example, the output may contain a generated ID from the database 
        /// or a dateTime field that is filled with the current
        /// date time value by the system under test.
        /// </para>
        /// <para>
        /// Such parts that cannot be compared need to be ignored while 
        /// asserting the actual output against expected output. This can be done by creating a rules
        /// file for the specific return value/output parameter for each test scenario.
        /// </para>
        /// <para>
        /// This rules file takes the form of an XML file
        /// with XPath queries identifying the nodes in the actual and expected
        /// output XML files that need to be ignored. This rules file also
        /// follows the same naming convention of methodName_scenarioName_parameterName.xml
        /// and is placed in the directory specified by the <see cref="RulesDir"/> property. 
        /// </para>
        /// </remarks>
        public void AssertOutput(Object outputObj, ParameterInfo pInfo, string methodName, string scenarioName, object testFixture)
        {
            SaveOutput(outputObj, pInfo, methodName, scenarioName);
            AssertResult(pInfo, methodName, scenarioName);
        }
        #endregion
        #region private helper methods
        /// <summary>
        /// Helper method to determine the XML file name for a parameter.
        /// </summary>
        /// <param name="pInfo"></param>
        /// <param name="methodName"></param>
        /// <param name="scenarioName"></param>
        /// <returns></returns>
        private string GetFileName(ParameterInfo pInfo, string methodName, string scenarioName)
        {
            string fileName = methodName + "_" + scenarioName;
            if (!string.IsNullOrEmpty(pInfo.Name))
            {
                fileName += "_" + pInfo.Name;
            }
            fileName += ".xml";
            return fileName;
        }

        /// <summary>
        /// Helper method to save the output from a test method into an XML file.
        /// </summary>
        /// <param name="outputObj"></param>
        /// <param name="pInfo"></param>
        /// <param name="methodName"></param>
        /// <param name="scenarioName"></param>
        private void SaveOutput(Object outputObj, ParameterInfo pInfo, string methodName, string scenarioName)
        {
            string outputFileName = GetFileName(pInfo, methodName, scenarioName);
            string actualOutputPath = Path.Combine(ActualOutputDir, outputFileName);
            try
            {
                XmlSerializer xs = null;
                if (null == outputObj)
                {
                    xs = new XmlSerializer(typeof(System.Object));
                }
                else
                {
                    xs = new XmlSerializer(outputObj.GetType());
                }

                using (StreamWriter actualOutput = new StreamWriter(actualOutputPath))
                {
                    xs.Serialize(actualOutput, outputObj);
                }
            }
            catch (Exception e)
            {
                string errorMessage = string.Format("Could not write actual output to the file {0} for the test method {1} and scenario {2}.", actualOutputPath, methodName, scenarioName);
                throw new AsserterException(errorMessage, e);
            }
        }

        /// <summary>
        /// Helper method to call NXUnit assertions on the
        /// output from the test method and comparing the 
        /// actual output to the expected output.
        /// This method uses the ignore rules to remove the nodes that cannot be compared
        /// from the actual and expected XML files before doing the assertions.
        /// </summary>
        /// <param name="pInfo"></param>
        /// <param name="methodName"></param>
        /// <param name="scenarioName"></param>
        private void AssertResult(ParameterInfo pInfo, string methodName, string scenarioName)
        {
            string outputFileName = GetFileName(pInfo, methodName, scenarioName);
            string actualOutputPath = Path.Combine(ActualOutputDir, outputFileName);
            string expectedOutputPath = Path.Combine(ExpectedOutputDir, outputFileName);
            string rulesPath = Path.Combine(RulesDir, outputFileName);
            XmlDocument rules = new XmlDocument();
            try
            {
                if (File.Exists(rulesPath))
                {
                    rules.Load(rulesPath);
                }
            }
            catch (Exception e)
            {
                string errorMessage = string.Format("Could not load the assertion rules from the file {0} for the test method {1} and scenario {2}.", rulesPath, methodName, scenarioName);
                throw new AsserterException(errorMessage, e);
            }

            XmlDocument actualXml = new XmlDocument();
            try
            {
                actualXml.Load(actualOutputPath);
                ApplyRules(actualXml, rules);
            }
            catch (Exception e)
            {
                string errorMessage = string.Format("Could not load the actual output from the file {0} for the test method {1} and scenario {2}.", actualOutputPath, methodName, scenarioName);
                throw new AsserterException(errorMessage, e);
            }

            XmlDocument expectedXml = new XmlDocument();
            try
            {
                expectedXml.Load(expectedOutputPath);
                ApplyRules(expectedXml, rules);
            }
            catch (Exception e)
            {
                string errorMessage = string.Format("Could not load the expected output from the file {0} for the test method {1} and scenario {2}.", expectedOutputPath, methodName, scenarioName);
                throw new AsserterException(errorMessage, e);
            }

            XMLInput actual = XMLInput.CreateInput(actualXml);
            XMLInput expected = XMLInput.CreateInput(expectedXml);
            AssertStrategy strategy = XMLAssert.DEFAULT_STRATEGY;
            strategy.IsEmptyAttrSensitive = false;
            strategy.IsEmptyElementSensitive = false;
            strategy.IsWhitespaceSensitive = false;
            strategy.IsOrderSensitive = false;
            XMLAssert xa = XMLAssert.CreateInstance(strategy);
            CompareResult cr = xa.Compare(expected, actual);
            foreach (Diff dif in cr)
            {
                Console.WriteLine(dif.ToString());
            }
            xa.AreEqual(expected, actual, "not equal", new object[] { null });
        }
        /// <summary>
        /// Helper method to clean up XML files based on the ignore rules
        /// specified as XPath expressions.
        ///         /// </summary>
        /// <param name="doc"></param>
        /// <param name="rules"></param>
        private void ApplyRules(XmlDocument doc, XmlDocument rules)
        {
            XmlNodeList ignoreRules = rules.SelectNodes("//rules/ignore/item");
            foreach (XmlNode ignoreRule in ignoreRules)
            {
                ApplyIgnoreRule(doc, ignoreRule);
            }
        }
        /// <summary>
        /// helper method that removes the nodes from the passed in
        /// XmL document by using the XPath expression specified in the rule node.
        /// </summary>
        /// <param name="doc"></param>
        /// <param name="ignoreRule"></param>
        private void ApplyIgnoreRule(XmlDocument doc, XmlNode ignoreRule)
        {
            XmlNodeList ignoredNodes = doc.SelectNodes(ignoreRule.InnerText);
            foreach (XmlNode ignoredNode in ignoredNodes)
            {
                XmlNode parentNode = ignoredNode.ParentNode;
                parentNode.RemoveChild(ignoredNode);
            }
        }

        #endregion
    }
}
