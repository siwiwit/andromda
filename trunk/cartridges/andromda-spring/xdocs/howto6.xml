<?xml version="1.0" encoding="iso-8859-1"?>

<document>

    <properties>
        <author email="draftdog@users.sourceforge.net">Wouter Zoons</author>
        <title>AndroMDA - HowTo - Queries</title>
    </properties>

    <body>
        <section name="Queries">
            <p>
                All enterprise applications need to perform operations on the underlying datasource, and Hibernate
                supports this quite well with it's
                <a href="http://www.hibernate.org/hib_docs/reference/en/html_single/#queryhql">Hibernate Query
                Language</a>.
            </p>
            <p>
                UML also allows you to specify queries, be it in a more generic language. For this purpose OCL can
                be used, which supports <code>body</code> constructs since OCL 2.0. Although you can choose
                to override any generated query using a tagged value specifying your custom query it is
                strongly recommended to use OCL since this will guarantee your code to remain portable over different
                technologies. If you don't want to get to know OCL and have no problem sticking to Hibernate
                then you might consider to use tagged values instead.
            </p>
            <p>
                Finder methods require the <code>query flag</code> to be set, usually operations with this flag have
                the commercial at symbol '@' in front of their name when displayed in diagrams. Make sure you
                model the operation in <em>classifier scope</em>, in diagrams this will show them as underlined.
                Actually, classifier scoped operations go into the DAO while instance scoped operations go into the
                entity's implementation class (they are considered to be business operations).
            </p>
            <p>
                The documentation discussing the modeling of queries in UML is found here:
                <a href="../andromda-query-library/modeling.html">Query Translation-Library Modeling</a>.
                The tagged value overriding queries using Hibernate QL directly is found here:
                <a href="../andromda-spring-cartridge/modeling.html#@andromda_hibernate_query">@andromda.hibernate.query</a>.
            </p>
            <p>
                <img src="resources/howto/org/andromda/test/6/uml.jpg"/>
            </p>
            <p>
                <ul>
                    <li class="gen">Auto-generated source that does not need manual editing</li>
                    <li class="impl">Auto-generated source that should be edited manually</li>
                    <li class="changed">File that is affected by the modifications applied in this section</li>
                </ul>
            </p>
            <p>
                <ul>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/Car.hbm.xml"><code>Car.hbm.xml</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/Car.java"><code>Car.java</code></a></li>
                    <li class="impl"><a href="resources/howto/org/andromda/test/6/CarImpl.java"><code>CarImpl.java</code></a></li>
                    <li class="gen"><a class="changed" href="resources/howto/org/andromda/test/6/CarDao.java"><code>CarDao.java</code></a></li>
                    <li class="gen"><a class="changed" href="resources/howto/org/andromda/test/6/CarDaoBase.java"><code>CarDaoBase.java</code></a></li>
                    <li class="impl"><a href="resources/howto/org/andromda/test/6/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/CarType.java"><code>CarType.java</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/Person.hbm.xml"><code>Person.hbm.xml</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/Person.java"><code>Person.java</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/PersonImpl.java"><code>PersonImpl.java</code></a></li>
                    <li class="gen"><a class="changed" href="resources/howto/org/andromda/test/6/PersonDao.java"><code>PersonDao.java</code></a></li>
                    <li class="gen"><a class="changed" href="resources/howto/org/andromda/test/6/PersonDaoBase.java"><code>PersonDaoBase.java</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/PersonDaoImpl.java"><code>PersonDaoImpl.java</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/RentalService.java"><code>RentalService.java</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></li>
                    <li class="impl"><a href="resources/howto/org/andromda/test/6/RentalServiceImpl.java"><code>RentalServiceImpl.java</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/ejb/RentalService.java"><code>ejb/RentalService.java</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/ejb/RentalServiceBean.java"><code>ejb/RentalServiceBean.java</code></a></li>
                    <li class="gen"><a href="resources/howto/org/andromda/test/6/ejb/RentalServiceHome.java"><code>ejb/RentalServiceHome.java</code></a></li>
                </ul>
            </p>
        </section>
        <section name="Nice to know">
            <subsection name="Overriding queries">
                <p>
                    It's allowed to override queries such as finders in the DAO, just override the appropriate method
                    in an entity's DAO implementation class. What follows is an example of a code snippet
                    overriding a generated HQL query (example taken from a ficticous <code>UserDAOImpl</code> class):
<source><![CDATA[
public List findActiveUsers(int transform)
{
    // the next query is user-specified and overrides the one generated in super.findActiveUsers(int transform) 
    return super.findActiveUsers(transform, "from org.andromda.test.Users as user where user.exitDate is null");
}
]]></source>
                </p>
                <p>
                    You might consider doing this when you think the generated query is not performant enough, or
                    when you need to do something which is so complex the OCL translation can't properly handle it.
                </p>
            </subsection>
        </section>
        <section name="Next">
            <p>
                The final section will cover the modeling of exceptions, click
                <a href="howto7.html">here</a> to go to that section.
            </p>
        </section>
    </body>
</document>
