#set ($generatedFile = "${entity.packagePath}/${entity.daoName}.java")
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package $entity.packageName;

#set ($superclass = $entity.generalization)
/**
 * @see $entity.fullyQualifiedEntityName
 */
public interface $entity.daoName
#if($superclass)
    extends $superclass.fullyQualifiedDaoName
#end
{

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p/>
     * This specific flag denotes no transformation will occur.
     */
    public final static int $entity.daoNoTransformationConstantName = 0;

#foreach ($valueObjectRef in $entity.valueObjectReferences)
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p/>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     */
    public final static int $valueObjectRef.transformationConstantName = $velocityCount;

    /**
     * Converts this DAO's entity to an object of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
     */
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName entity);

#end
## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * Creates an instance of $entity.fullyQualifiedEntityName and adds it to the persistent store.
     */
    public $entity.root.fullyQualifiedEntityName create($entity.fullyQualifiedEntityName $argumentName);
    
    /**
     * <p>
     *   Does the same thing as {@link #create($entity.fullyQualifiedEntityName)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORMATION_NONE</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does 
     *   not occur.
     * </p>
     */
    public Object create(int transform, $entity.fullyQualifiedEntityName $argumentName);

#set ($attributes = $entity.getAttributes(true,false))
#if (!$attributes.empty)
    /**
     * <p>
     *   Creates a new <code>$entity.fullyQualifiedEntityName</code>
     *   instance from <strong>all</strong> attributes and adds it to
     *   the persistent store.
     * </p>
     */
    public $entity.root.fullyQualifiedEntityName create(
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else);#end

#end

    /**
     * <p>
     *   Does the same thing as {@link #create($entity.getAttributeTypeList(true,false))} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORMATION_NONE</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     * </p>
     */
    public Object create(
        int transform,
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else);#end

#end
#set ($requiredAttributes = $entity.getRequiredAttributes(true,false))
#if (!$requiredAttributes.empty && $attributes.size() != $requiredAttributes.size())

    /**
     * <p>
     *  Creates a new <code>$entity.fullyQualifiedEntityName</code>
     *  instance from only <strong>required</strong> attributes and
     *  adds it to the persistent store.
     * </p>
     */
    public $entity.root.fullyQualifiedEntityName create(
#foreach($attribute in $requiredAttributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $requiredAttributes.size()),#else);#end

#end

    /**
     * <p>
     *   Does the same thing as {@link #create($entity.getRequiredAttributeTypeList(true,false))} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORMATION_NONE</code> then
     *   the returned entity will <strong>NOT</strong be transformed.  If this flag is any of the other constants
     *   defined here then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     * </p>
     */
    public Object create(
        int transform,
#foreach($attribute in $requiredAttributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $requiredAttributes.size()),#else);#end

#end
#end

#end
    /**
     * Updates the <code>$argumentName</code> instance in the persistent store.
     */ 
    public void update($entity.fullyQualifiedEntityName $argumentName);

    /**
     * Loads an instance of $entity.fullyQualifiedEntityName from the persistent store.
     */
     public $entity.root.fullyQualifiedEntityName load($identifier.type.fullyQualifiedName $identifier.name);
     
    /**
     * <p> 
     *   Does the same thing as {@link #load($identifier.type.fullyQualifiedName)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORMATION_NONE</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined in this class then the finder results <strong>WILL BE</strong> passed through an operation which can 
     *   optionally transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     * </p>
     * 
     * @param $identifier.name the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
     public Object load(int transform, $identifier.type.fullyQualifiedName $identifier.name);

    /**
     * Removes the instance of $entity.fullyQualifiedEntityName from the persistent store.
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName);

    /**
     * Removes the instance of $entity.fullyQualifiedEntityName having the given
     * <code>identifier</code> from the persistent store.
     */
    public void remove($identifier.type.fullyQualifiedName $identifier.name);

    /**
     * Removes all entities in the given <code>entities<code> collection.
     */
    public void remove(java.util.Collection entities);

#end
#foreach ( $operation in $entity.finders )
#set ($returnType = $operation.returnType.fullyQualifiedName)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType $operation.signature;
#end

    /**
     * <p>
     *   Does the same thing as {@link #${operation.getSignature(false)}} with an
     *   additional argument called <code>queryString</code>.  This <code>queryString</code>
     *   argument allows you to override the query string defined in {@link #${operation.getSignature(false)}}. 
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.query && !$operation.returnType.collectionType)
#set ($returnType = "Object")
#end
    /**
     * <p>
     *   Does the same thing as {@link #${operation.getSignature(false)}} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORMATION_NONE</code> then
     *   finder results will <strong>NOT</strong> be transformed during retrieval.
     *   If this flag is any of the other constants defined here
     *   then finder results <strong>WILL BE</strong> passed through an operation which can optionally 
     *   transform the entities (into value objects for example).  By default, transformation does 
     *   not occur.
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

    /**
     * <p>
     *   Does the same thing as {@link #${operation.name}(boolean#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
     *   additional argument called <code>queryString</code>.  This <code>queryString</code>
     *   argument allows you to override the query string defined in {@link #${operation.name}(int#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)}.
     * </p>
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#end
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType.fullyQualifiedName)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility $returnType $operation.signature;
#end

#end
}
