#parse("templates/spring/SpringGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSearchParameter.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${criteriaSearchBaseName}Parameter.java")
#if($stringUtils.isNotEmpty($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

import java.util.regex.Pattern;

/**
 * A <code>${criteriaSearchBaseName}Parameter</code> represents a parameter for a <code>${criteriaSearchBaseName}</code>.
 * <br>
 * <br>
 * The <code>parameterValue</code> is the actual value to be searched for.
 * <br>
 * <br>
 * The <code>parameterPattern</code> describes the actual parameter which shall be considered for 
 * the search. It contains the dot-seperated path and the name of the parameter starting at the 
 * rootEntity of the actual <code>${criteriaSearchBaseName}</code>. The pattern of a the street of an address 
 * of a person would look like <i>address.street </i> (assuming the entity structure to be 
 * <code>aPerson.getAddress().getStreet()</code>).
 * <br>
 * <br>
 * Usually, if a parameter is <code>null</code> (or if the parameter is of type <code>String</code> 
 * and empty), it is not considered for a search. If <code>searchIfIsNull</code> is <code>true</code> 
 * it is explicitly searched for the parameter to be null (or empty if the parameter is of type
 * <code>String</code>).<br>
 * <br>
 * The <code>comparatorID</code> defines the comparator for the parameter. For parameters of type 
 * <code>String</code> the default comparator is the <code>LIKE_COMPARATOR</code>. The 
 * <code>EQUAL_COMPARATOR</code> is default for other parameters.
 * 
 * @author Stefan Reichert
 * @author Peter Friese
 */
public class ${criteriaSearchBaseName}Parameter 
{

    public static final Pattern PATTERN = Pattern.compile("\\.");

    public static final int LIKE_COMPARATOR = 0;
    public static final int EQUAL_COMPARATOR = 1;
    public static final int GREATER_THAN_OR_EQUAL_COMPARATOR = 2;
    public static final int GREATER_THAN_COMPARATOR = 3;
    public static final int LESS_THAN_OR_EQUAL_COMPARATOR = 4;
    public static final int LESS_THAN_COMPARATOR = 5;

    private Object parameterValue;
    private String parameterPattern;
    private boolean searchIfIsNull = false;
    private int comparatorID = ${criteriaSearchBaseName}Parameter.EQUAL_COMPARATOR;

    /**
     * Constructor for ${criteriaSearchBaseName}Parameter. Sets <code>searchIfIsNull</code> to 
	 * <code>false</code> and uses the <code>EQUAL_COMPARATOR</code>.
     * 
     * @param parameterValue The actual value of the parameter.
     * @param parameterPattern The pattern of this parameter (dot-seperated path e.g. person.address.street).
     */
    public ${criteriaSearchBaseName}Parameter(Object parameterValue, String parameterPattern) 
	{
        this(parameterValue, parameterPattern, false, EQUAL_COMPARATOR);
    }

    /**
     * Constructor for ${criteriaSearchBaseName}Parameter for a <code>String</code> parameter. 
	 * Sets <code>searchIfIsNull</code> to <code>false</code> and uses the  
	 * <code>LIKE_COMPARATOR</code>.
     * 
     * @param parameterValue The actual value of the parameter.
     * @param parameterPattern The pattern of this parameter (dot-seperated path e.g. person.address.street).
     */
    public ${criteriaSearchBaseName}Parameter(String parameterValue, String parameterPattern) 
	{
        this(parameterValue, parameterPattern, false, LIKE_COMPARATOR);
    }

    /**
     * Constructor for ${criteriaSearchBaseName}Parameter. Sets <code>searchIfIsNull</code> to <code>false</code>.
     * 
     * @param parameterValue The actual value of the parameter.
     * @param parameterPattern The pattern of this parameter (dot-seperated path e.g. person.address.street).
     */
    public ${criteriaSearchBaseName}Parameter(Object parameterValue, String parameterPattern, int comparatorID) 
	{
        this(parameterValue, parameterPattern, false, comparatorID);
    }

    /**
     * Constructor for ${criteriaSearchBaseName}Parameter.
     * 
     * @param parameterValue The actual value of the parameter.
     * @param parameterPattern The pattern of this parameter (dot-seperated path e.g. person.address.street).
     * @param searchIfIsNull Indicates whether the query should contain an 
     *     <code>IS NULL</code> if the parameter is <code>null</code>.
     * @param comparatorID Indicates what comparator is to be used (e.g. like, =, <, ...).
     */
    public ${criteriaSearchBaseName}Parameter(
            Object parameterValue,
            String parameterPattern,
            boolean searchIfNull,
            int comparatorID) 
    {
        super();
        this.parameterValue = parameterValue;
        this.parameterPattern = parameterPattern;
        this.searchIfIsNull = searchIfNull;
        this.comparatorID = comparatorID;
    }

    /**
     * Constructor for ${criteriaSearchBaseName}Parameter.
     * 
     * @param parameterValue The actual value of the parameter.
     * @param parameterPattern The pattern of this parameter (dot-seperated path e.g. person.address.street).
     * @param searchIfIsNull Indicates whether the query should contain an 
     *     <code>IS NULL</code> if the parameter is <code>null</code>.
     */
    public ${criteriaSearchBaseName}Parameter(
            Object parameterValue,
            String parameterPattern,
            boolean searchIfNull) 
    {
        super();
        this.parameterValue = parameterValue;
        this.parameterPattern = parameterPattern;
        this.searchIfIsNull = searchIfNull;
    }

    public int getComparatorID() 
    {
        return comparatorID;
    }

    public void setComparatorID(int comparatorID) 
    {
        this.comparatorID = comparatorID;
    }

    public String getParameterPattern() 
    {
        return parameterPattern;
    }

    public void setParameterPattern(String parameterPattern) 
    {
        this.parameterPattern = parameterPattern;
    }

    public Object getParameterValue() 
    {
        return parameterValue;
    }

    public void setParameterValue(Object parameterValue) 
    {
        this.parameterValue = parameterValue;
    }

    public boolean isSearchIfIsNull() 
    {
        return searchIfIsNull;
    }

    public void setSearchIfIsNull(boolean searchIfNull) 
    {
        this.searchIfIsNull = searchIfNull;
    }

}
