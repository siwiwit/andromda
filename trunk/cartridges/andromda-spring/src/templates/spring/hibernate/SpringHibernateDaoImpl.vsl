#if ($entity.daoImplementationRequired)
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package $entity.packageName;

#set ($superclass = $entity.generalization)
/**
 * @see $entity.fullyQualifiedName
 */
public class $entity.daoImplementationName
#if($superclass)  
	extends $superclass.fullyQualifiedDaoImplementationName
#else
    extends $entity.fullyQualifiedDaoBaseName
#end
{
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType)
#set ($returnObject = "returnValue")
#set ($signature = $operation.implementationSignature)
	    /**
	     * @see ${entity.fullyQualifiedDaoName}#${operation.getSignature(false)}
	     */
    $operation.visibility $returnType.fullyQualifiedName $signature 
#if ($operation.exceptionsPresent)
    	throws $operation.exceptionList
#end
    {
        //@todo implement $operation.visibility $returnType.fullyQualifiedName $signature
#set ($returnTypeName = $operation.type.fullyQualifiedName)
#if ($operation.returnTypePresent)
#if (!$operation.type.primitive)
        return null;
#elseif ("boolean" == $returnTypeName)
        return false;
#else
        return ($returnTypeName)0;
#end
#else
        throw new java.lang.UnsupportedOperationException("${entity.fullyQualifiedName}.${signature} Not implemented!");
#end 
    }
	
#end
#foreach ($valueObjectRef in $entity.valueObjectReferences)
	    /**
	     * @see ${entity.fullyQualifiedDaoBaseName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
	     */
    protected $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformerMethodName}($entity.fullyQualifiedName entity)
    {
        return null;
    }

#end

}
#end