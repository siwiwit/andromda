#parse("templates/spring/SpringGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSearch.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${criteriaSearchBaseName}.java")
#if($stringUtils.isNotEmpty($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Implements a generic search mechanism based on the Hibernate Criteria API. The
 * <code>${criteriaSearchBaseName}</code> allows adding parameters which function as where clause. The
 * parameters are analysed whether they should be considered or not. This depends both on the actual
 * value of the parameter and on the configuration.<br>
 * The <code>${criteriaSearchBaseName}</code> is expected to be a general solution for a basic search with
 * parameters connected by logical <b>and</b>. This search does <b>not</b> provide grouping.
 *
 * @author Stefan Reichert
 * @author Peter Friese
 * @see net.sf.hibernate.Criteria
 * @see net.sf.hibernate.expression.Expression
 */
public class ${criteriaSearchBaseName}
{
    private ${criteriaSearchBaseName}Configuration configuration;
    private net.sf.hibernate.Criteria rootCriteria;
    private java.util.Map childCriteriaMap;
    private java.util.List orderList;

    private static final class ParameterComparator
        implements java.util.Comparator
    {
        public int compare(Object object1, Object object2)
        {
            CriteriaSearchParameter parameter1 = (CriteriaSearchParameter)object1;
            CriteriaSearchParameter parameter2 = (CriteriaSearchParameter)object2;

            int relevance1 = parameter1.getOrderRelevance();
            int relevance2 = parameter2.getOrderRelevance();

            return relevance2 - relevance1;

        }
    }

    /**
     * Constructor for ${criteriaSearchBaseName}. Creates a <code>${criteriaSearchBaseName}</code> with a default
     * <code>${criteriaSearchBaseName}Configuration</code>.
     *
     * @param session The Hibernate session.
     * @param resultType The <code>Class</code> of the result.
     */
    public ${criteriaSearchBaseName}(net.sf.hibernate.Session session, Class resultType)
    {
        super();
        configuration = new ${criteriaSearchBaseName}Configuration();
        this.rootCriteria = session.createCriteria(resultType);
        childCriteriaMap = new java.util.HashMap();
        orderList = new java.util.ArrayList();
    }

    /**
     * Executes a <code>HibernateQuery</code> using the currently defined
     * <code>${criteriaSearchBaseName}Parameter</code>s.
     *
     * @return result The result of the query.
     * @throws net.sf.hibernate.HibernateException
     */
    public java.util.Collection execute() throws net.sf.hibernate.HibernateException
    {
        // add ordering
        if (orderList.size() > 0)
        {
            java.util.Collections.sort(orderList, new ParameterComparator());
            for (java.util.Iterator orderIterator = orderList.iterator(); orderIterator.hasNext();)
            {
                ${criteriaSearchBaseName}Parameter parameter = (${criteriaSearchBaseName}Parameter)orderIterator.next();
                int direction = parameter.getOrderDirection();
                if (direction == ${criteriaSearchBaseName}Parameter.ORDER_ASC)
                {
                    rootCriteria.addOrder(net.sf.hibernate.expression.Order.asc(parameter.getParameterName()));
                }
                else
                {
                    rootCriteria.addOrder(net.sf.hibernate.expression.Order.desc(parameter.getParameterName()));
                }
            }
        }

        // limit the maximum result if configured
        if (configuration.getMaximumResultSize() != null)
        {
            rootCriteria.setMaxResults(configuration.getMaximumResultSize().intValue());
        }
        // Hibernate does not support a 'unique' identifier. As a search may contain outer joins,
        // duplicates in the resultList are possible. Putting the resultList in a HashSet ensure a
        // distinctified resultSet (Suggestion from Hibernate itself; see www.hibernate.org's FAQ's).
        return new java.util.HashSet(rootCriteria.list());
    }

    /**
     * Adds a <code>${criteriaSearchBaseName}Parameter</code> to this search. The parameter is connected to
     * the search by logical <b>and</b>. It is not considered if the value is <code>null</code>.
     * If the value is not <code>null</code> it is compared using the
     * <code>${criteriaSearchBaseName}Parameter.EQUALS_COMPARATOR</code>.
     *
     * @param parameterValue The value of the parameter.
     * @param parameterPattern The pattern of the parameter (dot-seperated path e.g. person.address.street).
     * @throws net.sf.hibernate.HibernateException
     */
    public void addParameter(Object parameterValue, String parameterPattern) throws net.sf.hibernate.HibernateException
    {
        addParameter(new ${criteriaSearchBaseName}Parameter(parameterValue, parameterPattern));
    }

    /**
     * Adds a <code>${criteriaSearchBaseName}Parameter</code> to this search. The parameter is connected to
     * the search by logical <b>and</b>. It is not considered if the value is <code>null</code> or
     * if the <code>String</code> empty. If the value is not <code>null</code> it is compared
     * using the <code>${criteriaSearchBaseName}Parameter.LIKE_COMPARATOR</code>.
     *
     * @param parameterValue The value of the parameter.
     * @param parameterPattern The pattern of the parameter (dot-seperated path e.g. person.address.street).
     * @throws net.sf.hibernate.HibernateException
     */
    public void addParameter(String parameterValue, String parameterPattern) throws net.sf.hibernate.HibernateException
    {
        addParameter(new ${criteriaSearchBaseName}Parameter(parameterValue, parameterPattern));
    }

    /**
     * Adds a <code>${criteriaSearchBaseName}Parameter</code> to this search. The parameter is connected to
     * the search by logical <b>and</b>.
     *
     * @param parameter The <code>${criteriaSearchBaseName}Parameter</code> to add.
     * @throws net.sf.hibernate.HibernateException
     */
    public void addParameter(${criteriaSearchBaseName}Parameter parameter) throws net.sf.hibernate.HibernateException
    {
        if (considerParameter(parameter))
        {
            // parsing the pattern of the parameter
            String[] path = ${criteriaSearchBaseName}Parameter.PATTERN.split(parameter.getParameterPattern());
            String parameterName = path[path.length - 1];
            net.sf.hibernate.Criteria parameterCriteria = rootCriteria;

            if (path.length > 1)
            {
                // We have a parameter affecting an attribute of an inner childEntity object so we need
                // to traverse to get the right criteria object
                String childEntityName;
                net.sf.hibernate.Criteria childEntityCriteria = rootCriteria;
                // Evaluating the proper criteria object for the defined parameter
                for (int index = 0; index < (path.length - 1); index++)
                {
                    childEntityName = path[index];
                    childEntityCriteria = locateCriteria(childEntityName, childEntityCriteria);
                }
                // We now have the right criteria object
                parameterCriteria = childEntityCriteria;
            }
            addExpression(parameterCriteria,
                    parameterName,
                    parameter.getParameterValue(),
                    parameter.getComparatorID(),
                    parameter.getMatchMode());

            // if the parameter is to be ordered, add it to the order list
            if (parameter.getOrderDirection() != ${criteriaSearchBaseName}Parameter.ORDER_UNSET)
            {
                orderList.add(parameter);
            }
        }
    }

    /**
     * Decides whether a paramter is considered as a criteria for a search depending on the type and
     * value of the <code>parameterValue</code> and <code>searchIfIsNull</code>. A
     * <code>parameterValue</code> of the type <code>String</code> is considered
     * <code>null</code> if being a <code>NullPointer</code> or empty.
     *
     * @param parameter The parameter to check.
     */
    private boolean considerParameter(${criteriaSearchBaseName}Parameter parameter)
    {
        if (parameter.getParameterValue() instanceof String)
        {
            String stringParameterValue = (String) parameter.getParameterValue();
            return (parameter.isSearchIfIsNull()
                    || (stringParameterValue != null && stringParameterValue.length() > 0));
        }
        return (parameter.isSearchIfIsNull() || (parameter.getParameterValue() != null));
    }

    /**
     * Adds an <code>Expression</code> to a <code>Criteria</code>.
     *
     * @param criteria
     * @param parameterName
     * @param parameterValue
     * @param searchIfNull
     * @param comparatorID
     * @param matchMode
     */
    private void addExpression(
        net.sf.hibernate.Criteria criteria,
        String parameterName,
        Object parameterValue,
        int comparatorID,
        net.sf.hibernate.expression.MatchMode matchMode)
    {
        if (parameterValue != null)
        {
            switch (comparatorID)
            {
                case ${criteriaSearchBaseName}Parameter.LIKE_COMPARATOR:
                {
                    if ( (matchMode != null) && (parameterValue instanceof String) )
                    {
                        criteria.add(net.sf.hibernate.expression.Expression.like(
                            parameterName,
                            (String)parameterValue,
                            matchMode));
                    }
                    else
                    {
                        criteria.add(net.sf.hibernate.expression.Expression.like(parameterName, parameterValue));
                    }
                    break;
                }
                case ${criteriaSearchBaseName}Parameter.EQUAL_COMPARATOR:
                {
                    criteria.add(net.sf.hibernate.expression.Expression.eq(parameterName, parameterValue));
                    break;
                }
                case ${criteriaSearchBaseName}Parameter.GREATER_THAN_OR_EQUAL_COMPARATOR:
                {
                    criteria.add(net.sf.hibernate.expression.Expression.ge(parameterName, parameterValue));
                    break;
                }
                case ${criteriaSearchBaseName}Parameter.GREATER_THAN_COMPARATOR:
                {
                    criteria.add(net.sf.hibernate.expression.Expression.gt(parameterName, parameterValue));
                    break;
                }
                case ${criteriaSearchBaseName}Parameter.LESS_THAN_OR_EQUAL_COMPARATOR:
                {
                    criteria.add(net.sf.hibernate.expression.Expression.le(parameterName, parameterValue));
                    break;
                }
                case ${criteriaSearchBaseName}Parameter.LESS_THAN_COMPARATOR:
                {
                    criteria.add(net.sf.hibernate.expression.Expression.lt(parameterName, parameterValue));
                    break;
                }
            }
        }
        else if (parameterValue instanceof String)
        {
            criteria.add(net.sf.hibernate.expression.Expression.or(
                net.sf.hibernate.expression.Expression.isNull(parameterName),
                net.sf.hibernate.expression.Expression.like(parameterName, new String())));
        }
        else
        {
            criteria.add(net.sf.hibernate.expression.Expression.isNull(parameterName));
        }

    }

    /**
     * Locates a <code>Criteria</code> for a <code>childEntityName</code>. If a
     * <code>Criteria</code> exists for the <code>childEntityName</code>, it is returned. If
     * not, one is created and referenced in the <code>childCriteriaMap</code> under the
     * <code>childEntityName</code>.
     *
     * @param childEntityName
     * @param parentCriteria
     * @return criteria The Criteria for the childEntityName.
     * @throws net.sf.hibernate.HibernateException
     */
    private net.sf.hibernate.Criteria locateCriteria(String childEntityName, net.sf.hibernate.Criteria parentCriteria) throws net.sf.hibernate.HibernateException
    {
        if (childCriteriaMap.containsKey(childEntityName))
        {
            return (net.sf.hibernate.Criteria) childCriteriaMap.get(childEntityName);
        }
        net.sf.hibernate.Criteria childCriteria = parentCriteria.createCriteria(childEntityName);
        if (configuration.isForceEagerLoading())
        {
            parentCriteria.setFetchMode(childEntityName, net.sf.hibernate.FetchMode.EAGER);
        }
        childCriteriaMap.put(childEntityName, childCriteria);
        return childCriteria;
    }

    /**
     * Returns the configuration of this search.
     *
     * @return configuration
     */
    public ${criteriaSearchBaseName}Configuration getConfiguration()
    {
        return configuration;
    }
}