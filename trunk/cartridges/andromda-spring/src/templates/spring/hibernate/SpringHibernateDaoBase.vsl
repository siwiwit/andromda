#parse("templates/spring/SpringGlobals.vm")
#set ($generatedFile = "${entity.packagePath}/${entity.daoBaseName}.java")
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package $entity.packageName;

#set ($superEntity = $entity.generalization)
#set ($valueObjectReferences = $entity.valueObjectReferences)
/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>$entity.fullyQualifiedEntityName</code>.
 * </p>
 *
 * @see $entity.fullyQualifiedEntityName
 */
public abstract class $entity.daoBaseName
#if($superEntity)
    extends $superEntity.fullyQualifiedDaoBaseName
#else
    extends org.springframework.orm.hibernate.support.HibernateDaoSupport
#end
    implements $entity.fullyQualifiedDaoName
{

#foreach($entityRef in $entity.entityReferences)
#set ($targetElement = $entityRef.targetElement)
    private $targetElement.fullyQualifiedDaoName $entityRef.name;

    /**
     * Sets the reference to <code>$entityRef.name</code>.
     */
    public void ${entityRef.setterName}(${targetElement.fullyQualifiedDaoName} $entityRef.name)
    {
        this.$entityRef.name = $entityRef.name;
    }

    /**
     * Gets the reference to <code>$entityRef.name</code>.
     */
    protected $targetElement.fullyQualifiedDaoName get${targetElement.daoName}()
    {
        return this.$entityRef.name;
    }

#end
## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * @see ${entity.fullyQualifiedDaoName}#load(boolean, $identifier.type.fullyQualifiedName)
     */
    public Object load(final int transform, final $identifier.type.fullyQualifiedName $identifier.name)
    {
#set ($argument = $identifier.name)
#if($identifier.type.primitive)
#set ($argument = "new ${identifier.type.wrapperName}(${identifier.name})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.load - '$argument' can not be null");
        }
#end
        Object entity = null;
        try
        {
            org.springframework.orm.hibernate.HibernateCallback callback = new org.springframework.orm.hibernate.HibernateCallback()
            {
                public Object doInHibernate(net.sf.hibernate.Session session)
                    throws net.sf.hibernate.HibernateException
                {
                    Object entity = session.load(
                        ${entity.fullyQualifiedEntityImplementationName}.class,
                        $argument);
                    return transformEntity(transform, ($entity.fullyQualifiedName)entity);
                }
            };
	        entity = this.getHibernateTemplate().execute(callback);
	    }
	    catch (org.springframework.orm.hibernate.HibernateObjectRetrievalFailureException ex)
	    {
            // ignore since we just want null returned if no
            // object can be found
	    }
	    return entity;
    }

     /**
      * @see ${entity.fullyQualifiedDaoName}#load($identifier.type.fullyQualifiedName)
      */
     public $entity.root.fullyQualifiedEntityName load($identifier.type.fullyQualifiedName $identifier.name)
     {
         return ($entity.fullyQualifiedEntityName)this.load($entity.daoNoTransformationConstantName, $identifier.name);
     }

#if (!$entity.enumeration)
    /**
     * @see ${entity.fullyQualifiedDaoName}#create($entity.fullyQualifiedEntityName)
     */
    public $entity.root.fullyQualifiedEntityName create($entity.fullyQualifiedEntityName $argumentName)
    {
        return ($entity.fullyQualifiedEntityName)this.create($entity.daoNoTransformationConstantName, $argumentName);
    }
    
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int transform, $entity.fullyQualifiedEntityName)
     */
    public Object create(final int transform, final $entity.fullyQualifiedName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }
        Object identifier = this.getHibernateTemplate().save($argumentName);
#set ($identifierProperty = "identifier")
#if($identifier.type.primitive)
#set ($identifierProperty = "(($identifier.type.wrapperName)$identifierProperty).${identifier.type.fullyQualifiedName}Value()")
#else
#set ($identifierProperty = "($identifier.type.fullyQualifiedName)$identifierProperty")
#end
        ${argumentName}.${identifier.setterName}($identifierProperty);
        return this.transformEntity(transform, $argumentName);
    }

#set ($attributes = $entity.getAttributes(true,false))
#if (!$attributes.empty)
    /**
     * @see ${entity.root.fullyQualifiedDaoName}#create(${entity.getAttributeTypeList(true, false)})
     */
    public $entity.root.fullyQualifiedEntityName create(
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end

#end
    {
        return ($entity.root.fullyQualifiedEntityName)this.create($entity.daoNoTransformationConstantName, ${entity.getAttributeNameList(true,false)});
    }
    
    /**
     * @see ${entity.root.fullyQualifiedDaoName}#create(boolean, ${entity.getAttributeTypeList(true, false)})
     */
    public Object create(
        final int transform,
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($attribute in $attributes)
        entity.${attribute.setterName}($attribute.name);
#end
        return this.create(transform, entity);
    }

#set ($requiredAttributes = $entity.getRequiredAttributes(true,false))
#if (!$requiredAttributes.empty && $attributes.size() != $requiredAttributes.size())
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(${entity.getRequiredAttributeTypeList(true, false)})
     */
    public $entity.root.fullyQualifiedEntityName create(
#foreach($attribute in $requiredAttributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $requiredAttributes.size()),#else)#end

#end
    {
        return ($entity.root.fullyQualifiedEntityName)this.create($entity.daoNoTransformationConstantName, ${entity.getRequiredAttributeNameList(true,false)});
    }
    
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(boolean, ${entity.getRequiredAttributeTypeList(true, false)})
     */
    public Object create(
        final int transform,
#foreach($attribute in $requiredAttributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $requiredAttributes.size()),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($attribute in $requiredAttributes)
        entity.${attribute.setterName}($attribute.name);
#end
        return this.create(transform, entity);
    }

#end
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#update($entity.fullyQualifiedEntityName)
     */
    public void update($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().update($argumentName);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#remove($entity.fullyQualifiedEntityName)
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().delete($argumentName);
    }
    
    /**
     * @see ${entity.fullyQualifiedDaoName}#remove($identifier.type.fullyQualifiedName)
     */
	public void remove($identifier.type.fullyQualifiedName $identifier.name)
	{
#set ($argument = $identifier.name)
#if($identifier.type.primitive)
#set ($argument = "new ${identifier.type.wrapperName}(${identifier.name})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$identifier.name' can not be null");
        } 
#end
#set ($loadCall = "this.load($identifier.name)")
#if ($entity.generalization)
#set ($loadCall = "($entity.fullyQualifiedEntityName)${loadCall}")
#end
        $entity.fullyQualifiedEntityName entity = $loadCall;
        if (entity != null)
        {
            this.remove(entity);
        }
	}

    /**
     * @see ${entity.fullyQualifiedDaoName}#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }

#end
#end
#set ($finders = $entity.getFinders(true))
#foreach ($finder in $finders)
#set ($returnType = $finder.returnType.fullyQualifiedName)
    /**
     * @see ${entity.fullyQualifiedName}#$finder.getSignature(false)
     */
    $finder.visibility $returnType $finder.signature
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if (!$finder.returnType.collectionType)
#set ($finderCall = "($returnType)$finderCall")
#end
        return $finderCall
    }
    
    /**
     * @see ${entity.fullyQualifiedName}#${finder.name}(java.lang.String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(final java.lang.String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName, queryString#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if (!$finder.returnType.collectionType)
#set ($finderCall = "($returnType)$finderCall")
#end
        return $finderCall
    }

#if (!$finder.returnType.collectionType)
#set ($returnType = "Object")
#end
    /**
     * @see ${entity.fullyQualifiedName}#${finder.name}(int#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(final int transform#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        return this.${finder.name}(transform, "$finder.query"#if(!$finder.arguments.empty), ${finder.argumentNames}#end);  
    }
    
    /**
     * @see ${entity.fullyQualifiedName}#${finder.name}(int, java.lang.String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(final int transform, final java.lang.String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        org.springframework.orm.hibernate.HibernateCallback callback = new org.springframework.orm.hibernate.HibernateCallback()
        {
            public Object doInHibernate(net.sf.hibernate.Session session) 
                throws net.sf.hibernate.HibernateException
            {  
                net.sf.hibernate.Query queryObject = 
                    getHibernateTemplate().createQuery(
                        session, 
                        queryString);
#foreach($argument in $finder.arguments)
#set ($count = $velocityCount - 1)
#set ($argumentName = $argument.name)
#if($argument.type.primitive)
#set ($argumentName = "new ${argument.type.wrapperName}(${argument.name})")
#end
#set ($setParameterOperation = "setParameter")
#if ($argument.type.collectionType)
#set ($setParameterOperation = "${setParameterOperation}List")
#end
#if ($finder.useNamedParameters)
                queryObject.${setParameterOperation}("$argumentName", $argumentName);
#else
                queryObject.${setParameterOperation}($count, $argumentName);
#end
#end
       
                java.util.Collection results = queryObject.list();
#if (!$finder.returnType.collectionType)
                Object result = null;
                if (results != null)
                {
                    if (results.size() > 1)
                    {
                        throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
                            "More than one instance of '" 
                                + ${finder.returnType.fullyQualifiedName}.class.getName() 
                                + "' was found when executing query --> '" + queryString + "'");

                    }
                    else if (results.size() == 1)
                    {
                        result = ($entity.fullyQualifiedName)results.iterator().next();
                    }
                }
                result = transformEntity(transform, ($entity.fullyQualifiedName)result);
                return result;
#else
                transformEntities(transform, results);
                return results;
#end
            }
        };
#set ($returnStatement = "this.getHibernateTemplate().execute(callback);")
#if ($finder.returnType.collectionType)
#set ($returnStatement = "($returnType)$returnStatement")
#end
        return $returnStatement 
    }
    
#end
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${operation.getSignature(false)}
     */
    $operation.visibility $returnType.fullyQualifiedName ${operation.name}(${operation.getTypedArgumentList('final')})
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
#if ($requiredCheckEnabled)
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${entity.fullyQualifiedDaoName}.${operation.signature} - '${argument.name}' can not be null");
        }
#end
#end
#end
        final $entity.fullyQualifiedDaoBaseName dao = this;
        org.springframework.orm.hibernate.HibernateCallback callback = new org.springframework.orm.hibernate.HibernateCallback()
        {
            public Object doInHibernate(net.sf.hibernate.Session session) 
                throws net.sf.hibernate.HibernateException
            {  
                try
                {
#set ($call = "dao.${operation.implementationCall};")
#if ($operation.returnTypePresent)
                    return $call
#else
                    $call
                    return null;
#end
                }
                catch (Throwable th)
                {
                    throw new net.sf.hibernate.HibernateException(
                    "Error performing '${entity.fullyQualifiedDaoName}.${operation.signature}' --> " + th,
                    th);
                }                
            }
        };
#set ($exit = "this.getHibernateTemplate().execute(callback);")
#if ($operation.returnTypePresent)
        return ($returnType.fullyQualifiedName)$exit 
#else
        $exit
#end
    }
    
     /**
      * Performs the core logic for {@link #${operation.getSignature(false)}}
      */
    protected abstract $operation.returnType.fullyQualifiedName $operation.implementationSignature
        throws java.lang.Exception; 
           
#end
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>$entity.fullyQualifiedDaoName</code>, please note
     * that the {@link #$entity.daoNoTransformationConstantName} constant denotes no transformation, so the entity itself
     * will be returned.
#if (!$valueObjectReferences.empty)
     * <p/>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link $entity.fullyQualifiedName} - {@link #$entity.daoNoTransformationConstantName}</li>
#foreach ($valueObjectRef in $valueObjectReferences)
#set ($targetElement = $valueObjectRef.targetElement)
     *   <li>{@link $targetElement.fullyQualifiedName} - {@link ${valueObjectRef.transformationConstantName}}</li>
#end
     * </ul>
#end
     *
     * If the integer argument value is unknown {@link #${entity.daoNoTransformationConstantName}} is assumed.
     *
     * @param transform one of the constants declared in {@link $entity.fullyQualifiedDaoName}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    private final Object transformEntity(final int transform, final $entity.fullyQualifiedName entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
#foreach ($valueObjectRef in $valueObjectReferences)
                case $valueObjectRef.transformationConstantName :
                    target = ${valueObjectRef.transformationMethodName}(entity);
                    break;
#end
                case $entity.daoNoTransformationConstantName : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,$entity.fullyQualifiedName)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>$entity.fullyQualifiedDaoName</code>
     * @param entities the collection of entities to transform
     * @return the same collection as the argument, but this time containing the transformed entities
     * @see #transformEntity(int,$entity.fullyQualifiedName)
     */
    private final void transformEntities(final int transform, final java.util.Collection entities)
    {
        if (entities != null && !entities.isEmpty())
        {
            switch (transform)
            {
#foreach ($valueObjectRef in $valueObjectReferences)
                case $valueObjectRef.transformationConstantName :
                    ${valueObjectRef.transformationMethodName}(entities);
                    break;
#end
                case $entity.daoNoTransformationConstantName : // fall-through
                    default:
                    // do nothing;
            }
        }
    }

#foreach ($valueObjectRef in $valueObjectReferences)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}(java.util.Collection)
     */
    public final void ${valueObjectRef.transformationMethodName}(java.util.Collection entities)
    {
        org.apache.commons.collections.CollectionUtils.transform(entities, ${valueObjectRef.transformationAnonymousName});
    }

    /**
     * This anonymous transformer is designed to transform entities to
     * {@link ${valueObjectRef.targetElement.fullyQualifiedName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private final org.apache.commons.collections.Transformer ${valueObjectRef.transformationAnonymousName} =
        new org.apache.commons.collections.Transformer()
        {
            public Object transform(Object input)
            {
                return ${valueObjectRef.transformationMethodName}(($entity.fullyQualifiedName)input);
            }
        };

#end
}