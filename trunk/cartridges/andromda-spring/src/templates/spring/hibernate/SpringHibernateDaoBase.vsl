//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package $entity.packageName;

#set ($abstractModifier = "")
#if (!$entity.operations.empty)
#set ($abstractModifier = "abstract ")
#end
#set ($superEntity = $entity.generalization)
/**
 * <p>
 * Base Spring DAO Class: is able to add, update, remove, load, and find
 * objects of type <code>${entity.fullyQualifiedEntityName}</code>.
 * </p>
 *
 * @see $entity.fullyQualifiedEntityName
 */
public ${abstractModifier}class $entity.daoBaseName
#if($superEntity)
    extends $superEntity.fullyQualifiedDaoBaseName
#else
    extends org.springframework.orm.hibernate.support.HibernateDaoSupport
#end
#set ($finders = $entity.getFinders(true))
#set ($hasFinders = !$finders.empty)
    implements $entity.fullyQualifiedDaoName#if ($hasFinders),
               org.apache.commons.collections.Transformer
#end
{

#foreach($entityRef in $entity.entityReferences)
#set ($targetElement = $entityRef.targetElement)
    private $targetElement.fullyQualifiedDaoName $entityRef.name;

    /**
     * Sets the reference to <code>$entityRef.name</code>.
     */
    public void ${entityRef.setterName}(${targetElement.fullyQualifiedDaoName} $entityRef.name)
    {
        this.$entityRef.name = $entityRef.name;
    }

    /**
     * Gets the reference to <code>$entityRef.name</code>.
     */
    protected $targetElement.fullyQualifiedDaoName get${targetElement.daoName}()
    {
        return this.$entityRef.name;
    }

#end
## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $entity.name.toLowerCase())
    /**
     * @see ${entity.fullyQualifiedDaoName}#create($entity.fullyQualifiedEntityName)
     */
    public void create($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().save($argumentName);
    }

#set ($attributes = $entity.getAttributes(true,false))
#if (!$attributes.empty)
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(${entity.getAttributeTypeList(true, false)})
     */
    public void create(
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($attribute in $attributes)
        entity.${attribute.setterName}($attribute.name);
#end
        this.create(entity);
    }

#set ($requiredAttributes = $entity.getRequiredAttributes(true,false))
#if (!$requiredAttributes.empty && $attributes.size() != $requiredAttributes.size())
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(${entity.getRequiredAttributeTypeList(true, false)})
     */
    public void create(
#foreach($attribute in $requiredAttributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $requiredAttributes.size()),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($attribute in $requiredAttributes)
        entity.${attribute.setterName}($attribute.name);
#end
        this.create(entity);
    }

#end
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#update($entity.fullyQualifiedEntityName)
     */
    public void update($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().update($argumentName);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#load(boolean, $identifier.type.fullyQualifiedName)
     */
    public Object load(boolean transform, $identifier.type.fullyQualifiedName $identifier.name)
    {
#set ($argument = $identifier.name)
#if($identifier.type.primitive)
#set ($argument = "new ${identifier.type.wrapperName}(${identifier.name})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.load - '$argument' can not be null");
        }
#end
        Object entity = null;
        try
        {
            entity = ($entity.fullyQualifiedEntityName)
                this.getHibernateTemplate().load(
                    ${entity.fullyQualifiedEntityImplementationName}.class, 
                    $argument);
            if (transform)
            {
                entity = transform(entity);
            }
        }
        catch (org.springframework.orm.hibernate.HibernateObjectRetrievalFailureException ex)
        {
            // ignore since we just want null returned if no
            // object can be found
        }
        return entity;
    }
    
     /**
      * @see ${entity.fullyQualifiedDaoName}#load($identifier.type.fullyQualifiedName)
      */ 
     public $entity.fullyQualifiedEntityName load($identifier.type.fullyQualifiedName $identifier.name)
     {
         return ($entity.fullyQualifiedEntityName)this.load(false, $identifier.name);
     }

    /**
     * @see ${entity.fullyQualifiedDaoName}#remove($entity.fullyQualifiedEntityName)
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().delete($argumentName);
    }
    
    /**
     * @see ${entity.fullyQualifiedDaoName}#remove($identifier.type.fullyQualifiedName)
     */
	public void remove($identifier.type.fullyQualifiedName $identifier.name)
	{
#set ($argument = $identifier.name)
#if($identifier.type.primitive)
#set ($argument = "new ${identifier.type.wrapperName}(${identifier.name})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$identifier.name' can not be null");
        } 
#end
        $entity.fullyQualifiedEntityName entity = this.load($identifier.name);
        if (entity != null)
        {
            this.remove(entity);
        }
	}

    /**
     * @see ${entity.fullyQualifiedDaoName}#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }

#end
#foreach ( $finder in $finders)
#set ($returnType = $finder.returnType.fullyQualifiedName)
    /**
     * @see ${entity.fullyQualifiedName}#$finder.getSignature(false)
     */
    $finder.visibility $returnType $finder.signature
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set ($finderCall = "this.${finder.name}(false#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if (!$finder.returnType.collectionType)
#set ($finderCall = "($returnType)$finderCall")
#end
        return $finderCall
    }

#if (!$finder.returnType.collectionType)
#set ($returnType = "Object")
#end
##
    /**
     * @see ${entity.fullyQualifiedName}#${finder.name}(false#if(!$finder.arguments.empty), ${finder.argumentNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(boolean transform#if(!$finder.arguments.empty), ${finder.typedArgumentList}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        Object[] arguments = new Object[]
        {
#foreach($argument in $finder.arguments)
            $argument.name#if($velocityCount != $finder.arguments.size()),#end

#end
        };
        java.util.Collection results =
            this.getHibernateTemplate().find(
                "$finder.query",
                arguments);
        if (transform)
        {
            // transform the results into the value objects
            org.apache.commons.collections.CollectionUtils.transform(
                results,
                this);
        }
#if (!$finder.returnType.collectionType)
        Object result = null;
        if (results != null)
        {
            if (results.size() > 1)
            {
                throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
                    "More than one instance of '" 
                    + ${returnType}.class.getName() 
                    + "' was found when executing query --> '${finder.query}'");

            }
            else if (results.size() == 1)
            {
                result = results.iterator().next();
            }
        }
        return result;
#else
        return results;
#end

    }

#end
#if ($hasFinders)
    /**
     * @see org.apache.commons.collections.Transformer#transform(java.lang.Object)
     */
    public Object transform(Object object)
    {
        return transformEntity(($entity.fullyQualifiedName)object);
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to <code>true</code>.
     *
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     */
    protected abstract Object transformEntity($entity.fullyQualifiedName entity);
#end
#foreach ($operation in $entity.businessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${operation.getSignature(false)}
     */
#if ($operation.exceptionsPresent)
    $operation.visibility abstract $returnType.fullyQualifiedName $signature
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $returnType.fullyQualifiedName $signature;
#end

#end
}