// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
/**
 * TEMPLATE:    SpringService.vsl in andromda-spring cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  $constraint.name: #if ($constraint.isInvariant())Invariant #end#if ($constraint.isPostCondition())PostCondition #end#if ($constraint.isPreCondition())PreCondition #end $constraint.body
#end
 */
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

/**
$service.getDocumentation(" * ")
 */
public interface $service.name
#if ($service.generalization)
    extends $service.generalization.fullyQualifiedName
#if (!$service.interfaceAbstractions.empty)
        , $service.implementedInterfaceList
#end
#else
#if (!$service.interfaceAbstractions.empty)
    extends ${service.implementedInterfaceList}
#end
#end
{

##do generate operation declarations for all implemented service interfaces as well
##when spring transactions are enabled
##(workaround for spring MethodMapTransactionAttributeSource, which does no map inherited interface methods)    
#if ($enableSpringTransactionsWhenEjbsEnabled.equalsIgnoreCase("true") || !$ejbsEnabled)
#set ($serviceOperations = $service.implementationOperations)
#else
#set ($serviceOperations = $service.operations)
#end
#foreach ($operation in $serviceOperations)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility $operation.getterSetterReturnTypeName $operation.signature
        $operation.throwsClause;
#else
    $operation.visibility $operation.getterSetterReturnTypeName $operation.signature;
#end

#end
}
