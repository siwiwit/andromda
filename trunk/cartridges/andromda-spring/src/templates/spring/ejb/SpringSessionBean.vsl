#set ($generatedFile = "${service.ejbPackageNamePath}/${service.name}Bean.java")
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringSessionBean.vsl in andromda-spring-cartridge.
//
package ${service.ejbPackageName};

#set ($superclass = $service.generalization)
/**
 * @see $service.fullyQualifiedName
 *
 * @ejb.bean
#if ($service.abstract)
 *    generate="false"
#else
 *    generate="true"
#end
 *    type="Stateless"
 *    name="${service.name}"
 *    view-type="$ejbViewType"
#if ($ejbRemoteView)
 *    jndi-name="${service.ejbJndiName}"
#else
 *    local-jndi-name="${service.ejbJndiName}"
#end
 *    transaction-type="Container"
 *
 * @ejb.interface
#if ($ejbRemoteView)
 *    remote-class="${service.fullyQualifiedEjbName}"
#else
 *    local-class="${service.fullyQualifiedEjbName}"
#end
 *
 * @ejb.home
#set ($homeInterface = "${service.fullyQualifiedEjbName}Home")
#if ($ejbRemoteView)
 *    remote-class="${homeInterface}"
#else
 *    local-class="${homeInterface}"
#end
 * 
 * @ejb.transaction
 *    type="REQUIRED"
 *      
 * @ejb.permission
 *    unchecked="true"
 */
public class ${service.ejbImplementationName}
#if($superclass)  
	extends $superclass.fullyQualifiedEjbName
#else
    extends org.springframework.ejb.support.AbstractStatelessSessionBean
#end
    implements $service.fullyQualifiedName 
{
#set ($businessObject = $stringUtils.uncapitalize($service.name))
	private $service.fullyQualifiedName $businessObject;

#foreach ( $operation in $service.operations )
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
	/**
	 * @see ${service.fullyQualifiedName}#${operation.getSignature(false)}
	 */
#if ($operation.exceptionsPresent)
    $operation.visibility $returnType.fullyQualifiedName $signature 
    	throws $operation.exceptionList {
#else
    $operation.visibility $returnType.fullyQualifiedName $signature {
#end
#set ($returnTypeName = $operation.type.fullyQualifiedName)
#if ($operation.returnTypePresent)
		return this.${businessObject}.${operation.call};    
#else
        this.${businessObject}.${operation.call}; 
#end 
    }
	
#end
    /**
     * Every Spring Session EJB needs to
     * call this to instantiate the Spring
     * Business Object.
     *
     * @see org.springframework.ejb.support.AbstractStatelessSessionBean#onEjbCreate()
     */
	protected void onEjbCreate() 
	{
		this.${businessObject} = ($service.fullyQualifiedName)
		    getBeanFactory().getBean("${businessObject}");
	}
	
    /**
     * Override default BeanFactoryLocator implementation to
     * provide singleton loading of the application context Bean factory.
     *
     * @see javax.ejb.SessionBeansetSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext sessionContext) 
    {
        super.setSessionContext(sessionContext);
        super.setBeanFactoryLocator(
            org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance("$beanRefFactory"));
        super.setBeanFactoryLocatorKey("$beanRefFactoryId");
    }
    
}
