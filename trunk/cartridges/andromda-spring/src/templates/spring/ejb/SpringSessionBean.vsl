#set ($generatedFile = "${service.ejbPackageNamePath}/${service.ejbImplementationName}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringSessionBean.vsl in andromda-spring-cartridge.
//
package ${service.ejbPackageName};

/**
 * @see $service.fullyQualifiedName
 */
public#if($service.abstract) abstract#end class $service.ejbImplementationName
    extends $ejbSessionBeanBaseClass
    implements $service.fullyQualifiedName
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${service.serialVersionUID}L;

#set ($businessObject = $stringUtils.uncapitalize($service.name))
    private $service.fullyQualifiedName $businessObject;

#foreach ( $operation in $service.implementationOperations )
#renderServiceEjbOperation($operation)

#end
#foreach ($superclass in $service.allGeneralizations)
#foreach ($operation in $superclass.implementationOperations)
#renderServiceEjbOperation($operation)

#end
#end
#if (!$service.abstract)
    /**
     * Every Spring Session EJB needs to
     * call this to instantiate the Spring
     * Business Object.
     *
     * @see org.springframework.ejb.support.AbstractStatelessSessionBean#onEjbCreate()
     */
    protected void onEjbCreate()
    {
#if($service.generalization && !$service.generalization.abstract)
        super.onEjbCreate();
#end
        this.${businessObject} = ($service.fullyQualifiedName)
            getBeanFactory().getBean("${service.beanName}");
    }

#set ($seeComment = "@see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)")
    /**
     * Override default BeanFactoryLocator implementation to
     * provide singleton loading of the application context Bean factory.
     *
     * $seeComment
     */
    public void setSessionContext(javax.ejb.SessionContext sessionContext)
    {
        super.setSessionContext(sessionContext);
        super.setBeanFactoryLocator(
            org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance("$beanRefFactory"));
        super.setBeanFactoryLocatorKey("$beanRefFactoryId");
    }
#end

    /**
     * Finds the root cause of the parent exception
     * by traveling up the exception tree.
     */
    private static Throwable getRootCause(Throwable throwable)
    {
        if (throwable != null)
        {
            // Reflectively get any exception causes.
            try
            {
                Throwable targetException = null;

                // java.lang.reflect.InvocationTargetException
                String exceptionProperty = "targetException";
                if (org.apache.commons.beanutils.PropertyUtils.isReadable(throwable, exceptionProperty))
                {
                    targetException = (Throwable)org.apache.commons.beanutils.PropertyUtils.getProperty(throwable, exceptionProperty);
                }
                else
                {
                    exceptionProperty = "causedByException";
                    //javax.ejb.EJBException
                    if (org.apache.commons.beanutils.PropertyUtils.isReadable(throwable, exceptionProperty))
                    {
                        targetException = (Throwable)org.apache.commons.beanutils.PropertyUtils.getProperty(throwable, exceptionProperty);
                    }
                }
                if (targetException != null)
                {
                    throwable = targetException;
                }
            }
            catch (Exception exception)
            {
                // just print the exception and continue
                exception.printStackTrace();
            }
            if (throwable.getCause() != null)
            {
                throwable = throwable.getCause();
                throwable = getRootCause(throwable);
            }
        }
        return throwable;
    }
}