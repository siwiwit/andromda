#parse("templates/spring/ejb/SpringSessionEJBGlobals.vm")
#if ($ejbsEnabled)
#set ($generatedFile = "${service.ejbPackageNamePath}/${service.ejbImplementationName}.java")
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringSessionBean.vsl in andromda-spring-cartridge.
//
package ${service.ejbPackageName};

#set ($superclass = $service.generalization)
/**
 * @see $service.fullyQualifiedName
 */
public class $service.ejbImplementationName
#if($superclass)
    extends $superclass.fullyQualifiedEjbName
#else
    extends org.springframework.ejb.support.AbstractStatelessSessionBean
#end
    implements $service.fullyQualifiedName
{
#set ($businessObject = $stringUtils.uncapitalize($service.name))
    private $service.fullyQualifiedName $businessObject;

#foreach ( $operation in $service.operations )
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
     * @see ${service.fullyQualifiedName}#${operation.getSignature(false)}
     */
    $operation.visibility $returnType.fullyQualifiedName $signature
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {

#set ($principalStoreClassName = "${principalStoreName}")
#if($stringUtils.isNotEmpty($springTypesPackage))
#set ($principalStoreClassName = "${springTypesPackage}.${principalStoreClassName}")
#end
        ${principalStoreClassName}.set(super.getSessionContext().getCallerPrincipal());
#if ($operation.returnTypePresent)
        return this.${businessObject}.${operation.call};
#else
        this.${businessObject}.${operation.call};
#end
    }

#end
    /**
     * Every Spring Session EJB needs to
     * call this to instantiate the Spring
     * Business Object.
     *
     * @see org.springframework.ejb.support.AbstractStatelessSessionBean#onEjbCreate()
     */
    protected void onEjbCreate()
    {
        this.${businessObject} = ($service.fullyQualifiedName)
            getBeanFactory().getBean("${businessObject}");
    }

#set ($seeComment = "@see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)")
    /**
     * Override default BeanFactoryLocator implementation to
     * provide singleton loading of the application context Bean factory.
     *
     * $seeComment
     */
    public void setSessionContext(javax.ejb.SessionContext sessionContext)
    {
        super.setSessionContext(sessionContext);
        super.setBeanFactoryLocator(
            org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance("$beanRefFactory"));
        super.setBeanFactoryLocatorKey("$beanRefFactoryId");
    }

}
#end