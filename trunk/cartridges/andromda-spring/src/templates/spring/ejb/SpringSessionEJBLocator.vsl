#parse("templates/spring/ejb/SpringSessionEJBGlobals.vm")
#if ($ejbsEnabled)
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringSessionEJBLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($serviceLocatorPackage))
package $serviceLocatorPackage;
#set ($generatedFile = "${stringUtils.replace($serviceLocatorPackage,'.','/')}/${generatedFile}")
#end

#set ($superclass = $service.generalization)
/**
 * Locates and provides all available application services.
 */
public class ServiceLocator
{
    /**
     * The shared instance of this ServiceLocator.
     */
    private static ServiceLocator instance; 
    
    private ServiceLocator()
    {
        // shouldn't be instantiated
    }
    
    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final ServiceLocator instance() 
    {
        if (instance == null)
        {
            instance = new ServiceLocator();
        }
        return instance;
    }

    private static Object lookupHome(
        java.util.Hashtable environment,
        String jndiName,
        Class narrowTo) throws javax.naming.NamingException
    {
        javax.naming.InitialContext initialContext = new javax.naming.InitialContext(
            environment);
        try
        {
            Object object = initialContext.lookup(jndiName);
            // only narrow if necessary
            if (narrowTo.isInstance(java.rmi.Remote.class))
            {
                object = javax.rmi.PortableRemoteObject
                    .narrow(object, narrowTo);
            }
            return object;
        }
        finally
        {
            initialContext.close();
        }
    }
    
#foreach ($service in $services)
#set ($home = "${stringUtils.uncapitalize($service.name)}Home")
#set ($homeClassName = "${service.fullyQualifiedEjbName}Home")
    private static $homeClassName $home = null;

    /**
     * Gets an instance of <code>$service.fullyQualifiedName</code>  
     */
    public final $service.fullyQualifiedName get${service.name}()
    {
        try
        {
            if ($home == null)
            {
                $home = ($homeClassName)lookupHome(
                    null,
                    ${homeClassName}.JNDI_NAME,
                    ${homeClassName}.class);
            }
            return ${home}.create();
        }
        catch (Exception ex)
        {
            throw new javax.ejb.EJBException(ex);
        }
    }
    
#end
}
#end