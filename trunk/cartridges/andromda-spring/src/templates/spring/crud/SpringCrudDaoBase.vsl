#set ($generatedFile = "${manageable.manageableDaoBaseFullPath}.java")
// license-header java merge-point
##
#set ($memberList = $manageable.listManageableMembers(true,false))
#set ($memberListCollections = $manageable.listManageableMembers(true,true))
#set ($memberListArguments = $manageable.listManageableMembers(false,false))
##
package $manageable.manageablePackageName;

#if ($manageable.read)
import net.sf.hibernate.Criteria;
import net.sf.hibernate.Query;
import net.sf.hibernate.Session;
import net.sf.hibernate.expression.Expression;
import net.sf.hibernate.expression.MatchMode;

import org.apache.commons.lang.StringUtils;

#end
public final class $manageable.manageableDaoBaseName
    extends org.springframework.orm.hibernate.support.HibernateDaoSupport
    implements $manageable.manageableDaoName
{
    private $manageable.fullyQualifiedDaoName dao;

    public void setDao($manageable.fullyQualifiedDaoName dao)
    {
        this.dao = dao;
    }

    protected $manageable.fullyQualifiedDaoName getDao()
    {
        return this.dao;
    }

#foreach ($member in $manageable.manageableAssociationEnds)
#set ($entity = $member.type)
    private $entity.fullyQualifiedDaoName $member.daoName = null;

    public void ${member.daoSetterName}($entity.fullyQualifiedDaoName $member.daoName)
    {
        this.$member.daoName = $member.daoName;
    }

    protected $entity.fullyQualifiedDaoName ${member.daoGetterName}()
    {
        return this.$member.daoName;
    }

#end
#if ($manageable.create)
    public void create($memberList)
    {
#foreach ($member in $manageable.manageableMembers)
#if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableDaoBaseName}.create(${memberList}) - '${member.name}' can not be null");
        }

#end
#end
        final ${manageable.fullyQualifiedEntityName} entity = new ${manageable.fullyQualifiedEntityImplementationName}();
#foreach ($member in $manageable.attributes)
        entity.${member.setterName}($member.name);
#end
#foreach ($member in $manageable.manageableAssociationEnds)
        entity.${member.setterName}(${member.daoGetterName}().load($member.name));
#end

        this.getDao().create(entity);
    }

#end
#if ($manageable.read)
    public java.util.List read($memberList)
    {
        try
        {
            final Session session = getSession(false);
            final Criteria criteria = getHibernateTemplate().createCriteria(session, ${manageable.fullyQualifiedEntityImplementationName}.class);

#foreach ($member in $manageable.attributes)
            if ($member.name != null)
#if ($member.type.stringType)
                criteria.add(Expression.ilike("$member.name", $member.name, MatchMode.START));
#else
                criteria.add(Expression.eq("$member.name", $member.name));
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
            if ($member.name != null)
                criteria.createCriteria("$member.name").add(Expression.eq("$member.manageableIdentifier.name", $member.name));
#end

            final java.util.List list = criteria.list();
            this.closeSessionIfNecessary(session);
            return list;
        }
        catch (net.sf.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    public java.util.List readAll()
    {
        try
        {
            final Session session = getSession(false);
            final Criteria criteria = getHibernateTemplate().createCriteria(session, ${manageable.fullyQualifiedEntityImplementationName}.class);
            final java.util.List list = criteria.list();
            this.closeSessionIfNecessary(session);
            return list;
        }
        catch (net.sf.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

#end
#if ($manageable.update)
    public void update(Collection ids, $memberListCollections)
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableDaoBaseName}.update(Collection ids, $memberListCollections) - 'ids' can not be null");
        }
#foreach ($member in $manageable.manageableMembers)
#if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableDaoBaseName}.update(Collection ids, $memberListCollections) - '${member.name}' can not be null");
        }
#end
#end

        for (final java.util.Iterator idIterator = ids.iterator(); idIterator.hasNext();)
        {
            final Object id = idIterator.next();
            this.getDao().update(id, $memberListArguments);
        }
    }

#end
#if ($manageable.delete)
    public void delete(Collection ids)
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableDaoBaseName}.delete(Collection ids) - 'ids' can not be null");
        }

        for (final java.util.Iterator idIterator = ids.iterator(); idIterator.hasNext();)
        {
            final Object id = idIterator.next();
            this.getDao().delete(id);
        }
    }

#end
}