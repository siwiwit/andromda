#set ($generatedFile = "${manageable.manageableDaoBaseFullPath}.java")
// license-header java merge-point
##
#set ($memberList = $manageable.listManageableMembers(true))
#set ($memberListArguments = $manageable.listManageableMembers(false))
#if (!$manageable.identifiers.empty)
#set ($identifier = $manageable.identifiers.iterator().next())
#end
##
package $manageable.manageablePackageName;

#if ($manageable.read || $manageable.delete)
import net.sf.hibernate.Query;
import net.sf.hibernate.Session;
import net.sf.hibernate.Criteria;
import net.sf.hibernate.type.Type;
import net.sf.hibernate.HibernateException;
import net.sf.hibernate.expression.MatchMode;
import net.sf.hibernate.expression.Expression;

import org.apache.commons.lang.StringUtils;

#end
public final class $manageable.manageableDaoBaseName
    extends org.springframework.orm.hibernate.support.HibernateDaoSupport
    implements $manageable.manageableDaoName
{
    private $manageable.fullyQualifiedDaoName dao;

    public void setDao($manageable.fullyQualifiedDaoName dao)
    {
        this.dao = dao;
    }

    protected $manageable.fullyQualifiedDaoName getDao()
    {
        return this.dao;
    }

#foreach ($member in $manageable.manageableAssociationEnds)
#set ($entity = $member.type)
    private $entity.fullyQualifiedDaoName $member.daoName = null;

    public void ${member.daoSetterName}($entity.fullyQualifiedDaoName $member.daoName)
    {
        this.$member.daoName = $member.daoName;
    }

    protected $entity.fullyQualifiedDaoName ${member.daoGetterName}()
    {
        return this.$member.daoName;
    }

#end
#if ($manageable.create)
    public void create($memberList)
    {
#foreach ($member in $manageable.manageableMembers)
#if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableDaoBaseName}.create(${memberList}) - '${member.name}' cannot be null");
        }

#end
#end
        final ${manageable.fullyQualifiedEntityName} entity = new ${manageable.fullyQualifiedEntityImplementationName}();
#foreach ($member in $manageable.attributes)
        entity.${member.setterName}($member.name);
#end
#foreach ($member in $manageable.manageableAssociationEnds)
        entity.${member.setterName}(${member.daoGetterName}().load($member.name));
#end

        this.getDao().create(entity);
    }

#end
#if ($manageable.read)
    public java.util.List read($memberList)
    {
        try
        {
            final Session session = getSession(false);
            final Criteria criteria = session.createCriteria(${manageable.fullyQualifiedEntityImplementationName}.class);

#foreach ($member in $manageable.attributes)
#if ($member.type.primitive)
            criteria.add(Expression.eq("$member.name", new ${member.type.wrapperName}($member.name)));
#else
            if ($member.name != null)
#if ($member.type.stringType)
                criteria.add(Expression.ilike("$member.name", $member.name, MatchMode.START));
#else
                criteria.add(Expression.eq("$member.name", $member.name));
#end
#end
#end
#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.type.primitive)
            criteria.add(Expression.eq("$member.name", new ${member.manageableIdentifier.type.wrapperName}($member.name)));
#else
            if ($member.name != null)
                criteria.createCriteria("$member.name").add(Expression.eq("$member.manageableIdentifier.name", $member.name));
#end
#end
#if ($manageable.maximumListSize > 0)
            criteria.setMaxResults($manageable.maximumListSize);

#end
            final java.util.List list = criteria.list();
            this.closeSessionIfNecessary(session);
            return list;
        }
        catch (net.sf.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    public java.util.List readAll()
    {
        try
        {
            final Session session = getSession(false);
            final Criteria criteria = session.createCriteria(${manageable.fullyQualifiedEntityImplementationName}.class);
#if ($manageable.maximumListSize > 0)
            criteria.setMaxResults($manageable.maximumListSize);
#end
            final java.util.List list = criteria.list();
            this.closeSessionIfNecessary(session);
            return list;
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

#if (!$manageable.manageableAssociationEnds.empty)
    public java.util.Map readBackingLists()
    {
        final java.util.Map lists = new java.util.HashMap();
        final Session session = this.getSession();

        try
        {
#foreach ($member in $manageable.manageableAssociationEnds)
#set ($identifier = $member.manageableIdentifier)
            lists.put("${member.manageableName}", session.createQuery("select item.$identifier.name, item.$member.type.displayAttribute.name from $member.type.fullyQualifiedEntityName item order by item.$member.type.displayAttribute.name").list());
#end
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }

        this.closeSessionIfNecessary(session);
        return lists;
    }

#end
#end
#if ($manageable.update)
    public void update($memberList)
    {
#foreach ($member in $manageable.manageableMembers)
#if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableDaoBaseName}.update(${identifier.type.fullyQualifiedName} idToUpdate, $memberList) - '${member.name}' cannot be null");
        }

#end
#end
        final $manageable.fullyQualifiedEntityName entity = new ${manageable.fullyQualifiedEntityImplementationName}();
#foreach ($member in $manageable.attributes)
        entity.${member.setterName}(${member.name});
#end
#foreach ($member in $manageable.manageableAssociationEnds)
        entity.${member.setterName}(this.${member.daoGetterName}().load(${member.manageableName}));
#end

        this.getDao().update(entity);
    }

#end
#if ($manageable.delete)
    public void delete(${identifier.type.fullyQualifiedName}[] ids)
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableDaoBaseName}.delete(${identifier.type.fullyQualifiedName}[] ids) - 'ids' cannot be null");
        }

        try
        {
            // hibernate 3 provides a better way: Query.executeUpdate(query:String) : int
            final Session session = getSession(false);

            final Criteria criteria = session.createCriteria(${manageable.fullyQualifiedEntityImplementationName}.class);
            criteria.add(Expression.in("$manageable.identifiers.iterator().next().name", ids));
            final java.util.List list = criteria.list();
            getHibernateTemplate().deleteAll(list);

            this.closeSessionIfNecessary(session);
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

#end
}