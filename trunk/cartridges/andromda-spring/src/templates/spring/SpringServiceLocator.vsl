#parse("templates/spring/SpringGlobals.vm")
#if (!$ejbsEnabled)
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Locates and provides all available application services.
 */
public class $serviceLocatorName
{
    /**
     * The default application context location.
     */
    private final String DEFAULT_CONTEXT_LOCATION = "$applicationContext";
    
    /**
     * The spring application context shared instance.
     */
    private ClassPathXmlApplicationContext context = null;
    
    /**
     * The application context location.
     */
    private String contextLocation;
    
    private $serviceLocatorName()
    {
        // shouldn't be instantiated
    }
    
    /**
     * The shared instance of this ${serviceLocatorName}.
     */
    private final static $serviceLocatorName instance = new $serviceLocatorName();
    
    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final $serviceLocatorName instance() 
    {
        return instance;
    }
    
    /**
     * Initializes the Spring application context from
     * the given <code>applicationContextLocation</code>.  If <code>null</code>
     * is specified for the <code>applicationContextLocation</code>
     * then the default application context will be used.
     *
     * @param contextLocation the location of the context
     */
    public final synchronized void init(String applicationContextLocation) 
    {
        contextLocation = applicationContextLocation;
        context = null;
    }
    
    /**
     * Builds the Spring application context.
     */
    protected final synchronized void buildContext()
    {
        if (context == null)
        {
	        if (contextLocation == null)
	        {
	            contextLocation = DEFAULT_CONTEXT_LOCATION;
	        }
	        context = new ClassPathXmlApplicationContext(contextLocation);     
	    }
    }
      
    /**
     * Gets the ApplicationContext.
     */
    protected final ApplicationContext getContext()
    {
        if (context == null)
        {
            buildContext(); 
        }
        return context;
    }
    
#foreach ($service in $services)
    /**
     * Gets an instance of <code>${service.fullyQualifiedName}</code>  	
     */
    public final ${service.fullyQualifiedName} get${service.name}()
    {
        return (${service.fullyQualifiedName})
            getContext().getBean("$service.beanName");
    }

#end
}
#end