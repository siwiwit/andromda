//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($serviceLocatorPackage))
package $serviceLocatorPackage;
#set ($generatedFile = "${stringUtils.replace($serviceLocatorPackage,'.','/')}/${generatedFile}")
#end

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

#set ($superclass = $service.generalization)
/**
 * Locates and provides all available application services.
 */
public class ServiceLocator
{
    /**
     * The default application context location.
     */
    private final String DEFAULT_CONTEXT_LOCATION = "$applicationContext";
    
    /**
     * The spring application context shared instance.
     */
    private ClassPathXmlApplicationContext context = null;
    
    /**
     * The application context location.
     */
    private String contextLocation;
    
    /**
     * The shared instance of this ServiceLocator.
     */
    private static ServiceLocator instance; 
    
    private ServiceLocator()
    {
        // shouldn't be instantiated
    }
    
    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final ServiceLocator instance() 
    {
        if (instance == null)
        {
            instance = new ServiceLocator();
        }
        return instance;
    }
    
    /**
     * Initializes the Spring application context from
     * the give <code>applicationContextLocation</code>.  If <code>null</code>
     * is specified for the <code>applicationContextLocation</code>
     * then the default application context will be used.
     *
     * @param contextLocation the location of the context
     */
    public final void init(String applicationContextLocation) 
    {
        contextLocation = applicationContextLocation;
        context = null;
    }
    
    /**
     * Gets the ApplicationContext.
     */
    protected final ApplicationContext getContext()
    {
        if (context == null)
        {
            if (contextLocation == null)
            {
                contextLocation = DEFAULT_CONTEXT_LOCATION;
            }
            context = new ClassPathXmlApplicationContext(contextLocation);
        }
        return context;
    }
    
#foreach ( $service in $services)
	/**
     * Gets an instance of <code>${service.fullyQualifiedName}</code>  	
	 */
    public final ${service.fullyQualifiedName} get${service.name}()
    {
        return (${service.fullyQualifiedName})
            getContext().getBean("$service.beanName");
    }

#end
}
