#parse("templates/spring/SpringGlobals.vm")
<?xml version="1.0" encoding="$xmlEncoding"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

    <!-- ========================= GENERAL DEFINITIONS ========================= -->

    <!-- Message source for this context, loaded from localized "messages_xx" files -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename"><value>messages</value></property>
    </bean>

## only generate this stuff if 'daos' has been defined in a namespace
#if ($daosEnabled)
    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="${sessionFactory}">
        <property name="dataSource"><ref bean="dataSource"/></property>
        <property name="mappingResources">
            <list>
#foreach($entity in $entities)
#if ($entity.generalizations.empty)
                <value>${entity.packagePath}/${entity.entityName}.hbm.xml</value>
#end
#end
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
#if ($stringUtils.isNotBlank($hibernatePoolSize))
                <prop key="hibernate.pool.size">$hibernatePoolSize</prop>
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerStrategy))
                <prop key="hibernate.transaction.manager.strategy">$hibernateTransactionManagerStrategy</prop>
#end
#if ($stringUtils.isNotBlank($hibernateUserTransactionName))
                <prop key="hibernate.jta.UserTransaction">$hibernateUserTransactionName</prop>
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerStrategy))
                <prop key="hibernate.transaction.manager.strategy">$hibernateTransactionManagerStrategy</prop>
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerLookup))
                <prop key="hibernate.transaction.manager_lookup_class">$hibernateTransactionManagerLookup</prop>
#end
#if ($stringUtils.isNotBlank($hibernateUseOuterJoin))
                <prop key="hibernate.use_outer_join">$hibernateUseOuterJoin</prop>
#end
#if ($stringUtils.isNotBlank($hibernateShowSql))
                <prop key="hibernate.show_sql">$hibernateShowSql</prop>
#end
#if ($stringUtils.isNotBlank($hibernateJndiName))
                <prop key="hibernate.session_factory_name">$hibernateJndiName</prop>
#end
#if ($stringUtils.isNotBlank($hibernateDialect))
                <prop key="hibernate.dialect">$hibernateDialect</prop>
#end
#if ($stringUtils.isNotBlank($hibernateDefaultSchema))
                <prop key="hibernate.default_schema">$hibernateDefaultSchema</prop>
#end
#if ($stringUtils.isNotBlank($hibernateMaxFetchDepth))
                <prop key="hibernate.max_fetch_depth">$hibernateMaxFetchDepth</prop>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcFetchSize))
                <prop key="hibernate.jdbc.fetch_size">$hibernateJdbcFetchSize</prop>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcBatchSize))
                <prop key="hibernate.jdbc.batch_size">$hibernateJdbcBatchSize</prop>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseScrollableResultSet))
                <prop key="hibernate.jdbc.use_scrollable_resultset">$hibernateJdbcUseScrollableResultSet</prop>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseStreamsForBinary))
                <prop key="hibernate.use_streams_for_binary">$hibernateJdbcUseStreamsForBinary</prop>
#end
#if ($stringUtils.isNotBlank($hibernateHbm2DDLAuto))
                <prop key="hibernate.hbm2ddl.auto">$hibernateHbm2DDLAuto</prop>
#end
#if ($stringUtils.isNotBlank($hibernateQuerySubstitutions))
                <prop key="hibernate.query.substitutions">$hibernateQuerySubstitutions</prop>
#end
#if ($stringUtils.isNotBlank($hibernateUseQueryCache))
                <prop key="hibernate.cache.use_query_cache">$hibernateUseQueryCache</prop>
#end
#if ($stringUtils.isNotBlank($hibernateCacheProvider))
                <prop key="hibernate.cache.provider_class">$hibernateCacheProvider</prop>
#end
#if ($stringUtils.isNotBlank($hibernateQueryCacheFactory))
                <prop key="hibernate.cache.query_cache_factory">$hibernateQueryCacheFactory</prop>
#end
            </props>
        </property>
    </bean>

    <!-- The Hibernate interceptor -->
    <bean id="hibernateInterceptor" class="org.springframework.orm.hibernate.HibernateInterceptor">
        <property name="sessionFactory"><ref bean="sessionFactory"/></property>
    </bean>

#if (!$ejbsEnabled)
    <!-- Transaction Manager -->
    <bean id="transactionManager" class="$transactionManager">
        <property name="sessionFactory"><ref local="sessionFactory"/></property>
    </bean>

#if (!$ejbsEnabled && !$entities.empty)
    <!-- Entity Transactional Interceptor -->
    <bean id="entityTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager"><ref local="transactionManager"/></property>
        <property name="transactionAttributeSource">
            <value>
#foreach($entity in $entities)
#if (!$entity.abstract)
                ${entity.fullyQualifiedDaoName}.*=PROPAGATION_REQUIRED
#end
#end
            </value>
        </property>
    </bean>
#end

#end
#foreach($entity in $entities)
     <!-- $entity.name Entity Proxy -->
     <bean id="${entity.getBeanName(false)}" class="org.springframework.aop.framework.ProxyFactoryBean">
         <property name="target"><ref bean="$entity.getBeanName(true)"/></property>
         <property name="proxyInterfaces">
             <value>$entity.fullyQualifiedDaoName</value>
         </property>
         <property name="interceptorNames">
             <list>
#if (!$ejbsEnabled)
                 <value>entityTransactionInterceptor</value>
#end
                 <value>hibernateInterceptor</value>
             </list>
         </property>
     </bean>

    <!-- $entity.name Entity Implementation  -->
    <bean id="$entity.getBeanName(true)" class="$entity.fullyQualifiedDaoImplementationName">
        <property name="sessionFactory"><ref local="sessionFactory"/></property>
## Because of a bug in Spring with circular references (and using AOP proxies), 
## we need to use the lookup-method as a work-a-round for dependencies
## which represent circular references
#foreach($entityRef in $entity.entityReferences)
#set ($daoReferenceName = $entityRef.targetElement.getBeanName(false))
#if (!$entityRef.circularReference)
        <property name="$daoReferenceName"><ref bean="$daoReferenceName"/></property>
#end
#end
#foreach($entityRef in $entity.entityReferences)
#set ($daoReferenceName = $entityRef.targetElement.getBeanName(false))
#if ($entityRef.circularReference)
        <lookup-method name="get${entityRef.targetElement.daoName}" bean="$daoReferenceName"/>
#end
#end
    </bean>

#end
#end
    <!-- ========================= Start of SERVICE DEFINITIONS ========================= -->

#if (!$ejbsEnabled && !$services.empty)
    <!-- Service Transactional Interceptor -->
    <bean id="serviceTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager"><ref local="transactionManager"/></property>
        <property name="transactionAttributeSource">
            <value>
#foreach ($service in $services)
                ${service.fullyQualifiedName}.*=PROPAGATION_REQUIRED
#end
            </value>
        </property>
    </bean>

#end
#foreach($service in $services)
    <!-- $service.name Service Implementation  -->
    <bean id="$service.getBeanName(true)" class="$service.fullyQualifiedImplementationName">
#if ($daosEnabled)
#foreach($entityRef in $service.entityReferences)
        <property name="$entityRef.name"><ref bean="$entityRef.targetElement.getBeanName(false)"/></property>
#end
#end
## Because of a bug in Spring with circular references (and using AOP proxies), 
## we need to use the lookup-method as a work-a-round for dependencies
## which represent circular references
#foreach($serviceRef in $service.serviceReferences)
#set ($serviceReferenceName = $serviceRef.targetElement.getBeanName(false))
#if (!$serviceRef.circularReference)
        <property name="$serviceReferenceName"><ref bean="$serviceReferenceName"/></property>
#end
#end
#foreach($serviceRef in $service.serviceReferences)
#set ($serviceReferenceName = $serviceRef.targetElement.getBeanName(false))
#if ($serviceRef.circularReference)
        <lookup-method name="get${serviceRef.targetElement.name}" bean="$serviceReferenceName"/>
#end
#end
    </bean>

    <!-- $service.name Service Proxy  -->
    <bean id="$service.getBeanName(false)" class="org.springframework.aop.framework.ProxyFactoryBean">
         <property name="target"><ref bean="$service.getBeanName(true)"/></property>
         <property name="proxyInterfaces">
             <value>$service.fullyQualifiedName</value>
         </property>
         <property name="interceptorNames">
             <list>
#if (!$ejbsEnabled)
                 <value>serviceTransactionInterceptor</value>
#end
                 <value>hibernateInterceptor</value>
             </list>
         </property>
     </bean>

#end
    <!-- ========================= End of SERVICE DEFINITIONS ========================= -->

</beans>
