#set ($generatedFile = "${manageable.manageableServiceBaseFullPath}.java")
// license-header java merge-point
// Generated by: crud/SpringCrudServiceBase.vsl in andromda-spring-cartridge.
##
#set ($memberList = $manageable.listManageableMembers(true))
#set ($memberListArguments = $manageable.listManageableMembers(false))
##
package $manageable.manageablePackageName;

public final class $manageable.manageableServiceBaseName
    implements $manageable.manageableServiceName
{
    private $manageable.fullyQualifiedManageableDaoName dao;

    public void setDao($manageable.fullyQualifiedManageableDaoName dao)
    {
        this.dao = dao;
    }

    protected $manageable.fullyQualifiedManageableDaoName getDao()
    {
        return this.dao;
    }

#if ($manageable.create)
    public $manageable.fullyQualifiedManageableValueObjectName create($memberList)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
#foreach ($member in $manageable.manageableMembers)
#if ($member.required && !$member.type.primitive && !($member.identifier && !$member.display))
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.create(${memberList}) - '${member.name}' can not be null");
        }

#end
#end
        return toValueObject(dao.create($memberListArguments));
    }

#end
#if ($manageable.read)
    public $manageable.fullyQualifiedManageableValueObjectName readById(${manageable.fullyQualifiedIdentifierTypeName} $manageable.identifierName)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return toValueObject(dao.readById($manageable.identifierName));
    }

    public java.util.List<$manageable.fullyQualifiedManageableValueObjectName> read(${manageable.listManageableMembersWithWrapperTypes()})
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return toValueObjects(dao.read($memberListArguments));
    }

    public java.util.List<$manageable.fullyQualifiedManageableValueObjectName> readAll()
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return toValueObjects(dao.readAll());
    }

#foreach ($member in $manageable.manageableAttributes)
#if ($member.manageableGetterAvailable)
    public $member.type.fullyQualifiedName ${member.getterName}($manageable.fullyQualifiedIdentifierTypeName $manageable.identifierName)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
#if (!$member.type.primitive)
        if ($manageable.identifierName == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.${member.getterName}($manageable.fullyQualifiedIdentifierTypeName $manageable.identifierName) - '${manageable.identifierName}' can not be null");
        }

#end
        return dao.${member.getterName}($manageable.identifierName);
    }

#end
#end
#if (!$manageable.manageableAssociationEnds.empty)
    public java.util.Map<String,?> readBackingLists()
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        return getDao().readBackingLists();
    }

#end
#end
#if ($manageable.update)
    public $manageable.fullyQualifiedManageableValueObjectName update($memberList)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
#foreach ($member in $manageable.manageableMembers)
#if ($member.required && !$member.type.primitive)
        if ($member.name == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.update($memberList) - '${member.name}' can not be null");
        }

#end
#end
        return toValueObject(dao.update($memberListArguments));
    }

#end
#if ($manageable.delete)
    public void delete(${manageable.fullyQualifiedIdentifierTypeName}[] ids)
        throws Exception
#if ($ejbViewType.equalsIgnoreCase("remote"))
            , java.rmi.RemoteException
#end
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "${manageable.fullyQualifiedManageableServiceName}.delete(${manageable.fullyQualifiedIdentifierTypeName}[] ids) - 'ids' can not be null");
        }

        dao.delete(ids);
    }

#end

    private static java.util.List<$manageable.fullyQualifiedManageableValueObjectName> toValueObjects(java.util.Collection<$manageable.fullyQualifiedEntityName> entities)
    {
        final java.util.List<$manageable.fullyQualifiedManageableValueObjectName> list = new java.util.ArrayList<$manageable.fullyQualifiedManageableValueObjectName>();

        for (java.util.Iterator<$manageable.fullyQualifiedEntityName> iterator = entities.iterator(); iterator.hasNext();)
        {
            list.add(toValueObject(iterator.next()));
        }

        return list;
    }

    private static $manageable.fullyQualifiedManageableValueObjectName toValueObject($manageable.fullyQualifiedEntityName entity)
    {
        final $manageable.fullyQualifiedManageableValueObjectName valueObject = new ${manageable.fullyQualifiedManageableValueObjectName}();

#foreach ($member in $manageable.manageableAttributes)
#if ($member.needsFileUpload)
// (binary fields are not returned because of reasons of performance) ## no newline
#end
        valueObject.${member.setterName}(entity.${member.getterName}());
#end

#foreach ($member in $manageable.manageableAssociationEnds)
#if ($member.many)
        final java.util.Collection<$member.type.fullyQualifiedName> ${member.name} = entity.${member.getterName}();
        if (${member.name} == null || ${member.name}.isEmpty())
        {
            valueObject.${member.setterName}(null);
#if($member.type.manageable)
#if ($member.type.displayAttribute.name != $member.type.identifierName)
            valueObject.${member.setterName}Labels(null);
#end
#end
        }
        else
        {
            final ${member.type.fullyQualifiedIdentifierTypeName}[] values = new ${member.type.fullyQualifiedIdentifierTypeName}[${member.name}.size()];
#if($member.type.manageable)
#if ($member.type.displayAttribute.name != $member.type.identifierName)
            final ${member.type.displayAttribute.type.fullyQualifiedName}[] labels = new ${member.type.displayAttribute.type.fullyQualifiedName}[${member.name}.size()];
#end
#end
            int counter = 0;
            for (final java.util.Iterator<$member.type.fullyQualifiedName> iterator = ${member.name}.iterator(); iterator.hasNext();counter++)
            {
                final $member.type.fullyQualifiedName element = iterator.next();
                values[counter] = element.${member.type.identifierGetterName}();
#if($member.type.manageable)
#if ($member.type.displayAttribute.name != $member.type.identifierName)
                labels[counter] = element.${member.type.displayAttribute.getterName}();
#end
#end
            }
            valueObject.${member.setterName}(values);
#if($member.type.manageable)
#if ($member.type.displayAttribute.name != $member.type.identifierName)
            valueObject.${member.setterName}Labels(labels);
#end
#end
        }
#else
#if ($member.type.compositeIdentifier)
        valueObject.${member.setterName}(entity.${member.getterName}() == null? null: entity.${member.getterName}().${member.type.identifierGetterName}());
#else
        final $member.type.fullyQualifiedName $member.name = entity.${member.getterName}();
#if (!$member.type.primitive)
        if ($member.name != null)
#end
        {
            valueObject.${member.setterName}(${member.name}.${member.type.identifierGetterName}());
#if($member.type.manageable)
#if ($member.type.displayAttribute.name != $member.type.identifierName)
            valueObject.${member.setterName}Label(${member.name}.${member.type.displayAttribute.getterName}());
#end
#end
        }
#end
#end

#end
        return valueObject;
    }
}
