<?xml version="1.0" encoding="UTF-8"?>

<document>
  	<properties>
    	<title>Hibernate Cartridge Modeling</title>
  	</properties>
  	<body>
    	<section name="Hibernate Cartridge Modeling">
    		<p>
    			The page describes the modeling standards one must follow to in order
    			to use the Hibernate Cartridge.
    		</p>
        </section>
    		<section name="Supported Stereotypes">
		      	<table>
		        	<tr>
			          	<th>Stereotype</th>   
			          	<th nowrap="nowrap">Model Element</th>
			          	<th>Description</th>      	     	
		        	</tr>
		        	<tr>
			          	<td>
							<a name="Entity"/>
			          		<strong><![CDATA[<<Entity>>]]></strong>
			          	</td>
			          	<td>
			          		Classifier
			          	</td>
			          	<td>
			          		Produces Hibernate entities.
			          	</td>
		        	</tr>	
		        	<tr>
			          	<td>
							<a name="Service"/>
			          		<strong><![CDATA[<<Service>>]]></strong>
			          	</td>
			          	<td>
			          		Classifier
			          	</td>			       
			          	<td>
			          		Produces Session EJB facades for the hibernate entities.
			          	</td>
		        	</tr>
                    <tr>
                        <td>
                          <a name="Enumeration"/>
                            <strong><![CDATA[<<Enumeration>>]]></strong>
                        </td>
                      <td>
                          Classifier
                      </td>
                        <td>
                            Indicates that the class will be a persistent type-safe enumeration, implemented by means 
                            of a Hibernate UserType.  Any attribute modeled on this entity will result in an enumeration 
                            literal. You may assign an <code>initial value</code> to such an attribute, Hibernate will persist
                            that specified value for the corresponding literal. If no such value is specified the name
                            of the attribute is assumed. Make sure there are no naming collisions between the
                            initial values and the attribute names you model. <i>Please note: these enumerations
                            use a <code>String</code> in order to persist their unique value.</i>
                        </td>
                    </tr>
		        	<tr>
			          	<td>
							<a name="FinderMethod"/>
			          		<strong><![CDATA[<<FinderMethod>>]]></strong>
			          	</td>
			          	<td>
			          		Operation
			          	</td>			       
			          	<td>
			          		Identifies an <strong>entity</strong> operation as a finder method.  
                            Finder method queries can be defined as an OCL body
							expression using the <a href="../andromda-query-library/index.html">
							AndroMDA Query Library</a> or directly as a Hibernate QL using the 
							<a href="#@andromda.hibernate.query">@andromda.hibernate.query</a> tagged value.
			          	</td>
		        	</tr>	
		        	<tr>
			          	<td>
							<a name="Unique"/>
			          		<strong><![CDATA[<<Unique>>]]></strong>
			          	</td>
						<td>
							Attribute
						</td>
			          	<td>
			          		Identifies an attribute as unique.
			          	</td>
					</tr>                 				        		        	        	      	        	        		        	        	        	     	             	        	
		        </table>
		    </section>
    		<section name="Supported Tagged Values">
		      	<subsection name="Entities Tagged Values">
		      	<table>
		        	<tr>
			          	<th>Tagged Value</th>  
						<th>Used With</th> 
			          	<th>Description</th>    	     	
		        	</tr>
		        	<tr>
						<a name="@andromda.hibernate.query"/>
			          	<td>
			          		@andromda.hibernate.query
			          	</td>
						<td>
							<a href="#FinderMethod"><![CDATA[<<FinderMethod>>]]></a>
						</td>
			          	<td>
			          		Defines a hibernate query expression.  Note that you 
							can model your finder method body in OCL as well
							(to keep your model more PIM like).
			          	</td>
					</tr>
					<tr>
						<td>
	                        @andromda.persistence.table
						</td>
						<td>
                            <a href="#Entity"><![CDATA[<<Entity>>]]></a> or 
                            a many-to many association.
						</td>
						<td>
							Defines the relational table name for entity persistence.
						</td>
					</tr>	
					<tr>
						<td>
	                        @andromda.persistence.column
						</td>
						<td>
							Attribute
						</td>
						<td>
							Represents the column name for entity persistence.
						</td>
					</tr>	
					<tr>
						<td>
	                        @andromda.persistence.column.length
						</td>
						<td>
							Attribute
						</td>
						<td>
							Represents the column length for entity persistence.
						</td>
					</tr>				        	        	      	        	        		        	        	        	     	             	        	
					<tr>
						<a name="@andromda.hibernate.inheritance"/>
						<td>
	                        @andromda.hibernate.inheritance
						</td>
						<td>
							<a href="#Entity"><![CDATA[<<Entity>>]]></a>
						</td>
						<td>
							Used to override the default hibernate inheritance
							strategy of subclass. Permitted values are:
							<ol>
								<li>class - table per hierarchy.</li>
								<li>subclass - table per class in hierarchy.</li>
								<li>concrete - Table per class.</li>
								<li>
                                    interface - Root class is defined as
					                an interface and the attributes remapped to the subclasses.
					                This is useful in the concrete case becuase it has limitations
					                in the associations.
                                </li>
							</ol>
							<p>
                                 The tagged value of @andromda.hibernate.inheritance
								 is set on the base/root class.
								 All subclasses must then follow the same strategy unless
								 inheritance or concrete is the predecessor strategy.
								 NB if the strategy is changed after the initial generation,
								 the impl classes have to be hand modified.
							</p>
						</td>
					</tr>				        	        	      	        	        		        	        	        	     	             	        	
		        	<tr>
						<a name="@andromda.hibernate.leafimpl"/>
			          	<td>
			          		@andromda.hibernate.leafimpl
			          	</td>
						<td>
							Attribute
						</td>
			          	<td>
			          		Controls whether intermediate or leaf impl classes
							are generated. With inheritance strategy subclass or
							concrete it is not efficient to generate impls at
							intermediate levels which require individual tables.
							Default: false.
			          	</td>
		        	</tr>	
		        	<tr>
						<a name="@andromda.persistence.column.index"/>
			          	<td>
			          		@andromda.persistence.column.index
			          	</td>
						<td>
							Attribute
						</td>
			          	<td>
			          		The name of an index to create on an entity attribute/column.
			          	</td>
					</tr>     		        	        	      	        	        		        	        	        	     	             	        	
                      <tr>
					     <a name="@andromda.hibernate.entity.cache"/>
						<td>
	                        @andromda.hibernate.entity.cache
						</td>
						<td>
							<a href="#Entity"><![CDATA[<<Entity>>]]></a>
						</td>
						<td>
							Defines the cache strategy for the Entity. Permited values are:
							<ol>
								<li>read-write</li>
								<li>nonstrict-read-write</li>
								<li>read-only</li>
							</ol>
						</td>
					   </tr>
					   <tr>
						<a name="@andromda.hibernate.query.useCache"/>
			          	<td>
			          		@andromda.hibernate.query.useCache
			          	</td>
						<td>
							<a href="#FinderMethod"><![CDATA[<<FinderMethod>>]]></a>
						</td>
			          	<td>
			          		Defines is caching is enabled  for this query.
			          	</td>
					   </tr>
					</table>
					</subsection>
		        	<subsection name="Services Tagged Values">
		        	<table>
		        	  <tr>
			          	<th>Tagged Value</th>  
						<th>Used With</th> 
			          	<th>Description</th>    	     	
		        	  </tr>
		        	  <tr>
						<a name="@andromda.ejb.viewType"/>
			          	<td>
			          		@andromda.ejb.viewType
			          	</td>
						<td>
							<a href="#Service"><![CDATA[<<Service>>]]></a>
						</td>
			          	<td>
			          		Defines the view type for a Session EJB.  If not
                            defined, <code>remote</code> will be assumed.
			          	</td>
		        	   </tr>	
					   <tr>
						<a name="@andromda.transaction.type"/>
			          	<td>
			          		@andromda.transaction.type
			          	</td>
						<td>
							Service Method
						</td>
			          	<td>
			          		Defines a transaction type for the method. Permitted values are:
							<ol>
								<li>NotSupported</li>
								<li>Supports</li>
								<li>Required</li>
								<li>RequiresNew</li>
                                <li>Mandatory</li>
                                <li>Never</li>
							</ol>
			          	</td>
					   </tr>
					  </table>
					</subsection>
		        	<subsection name="Association and Association End Tagged Values">
		        	<table>
		        	  <tr>
			          	<th>Tagged Value</th>  
						<th>Used With</th> 
			          	<th>Description</th>    	     	
		        	  </tr>
		        	  <tr>
                         <a name="@andromda.hibernate.lazy"/>
                         <td>
                             @andromda.hibernate.lazy
                         </td>
                         <td>
                              association ends between <a href="#Entity"><![CDATA[<<Entity>>]]></a> classes
                         </td>
                         <td>
                                Used to denote how a relationship must be loaded: <code>true</code> for <code>lazy</code>,
                                <code>false</code> for <code>eager</code>. Defaults to <code>false</code> for composite
                                relationships and defaults to <code>true</code> for the other kinds.
                         </td>
                      </tr>
					   <tr>
						<a name="@andromda.hibernate.outerjoin"/>
			          	<td>
			          		@andromda.hibernate.outerjoin
			          	</td>
						<td>
							association ends between <a href="#Entity"><![CDATA[<<Entity>>]]></a> classes
						</td>
			          	<td>
			          		Defines if Hibernate will use a outer join for fetching the association end on a Many to One and One to One associations. Permited values are:
			          		<ol>
								<li>auto</li>
								<li>true</li>
								<li>false</li>
							</ol>
			          	</td>
					   </tr>
					  <tr>
					     <a name="@andromda.hibernate.association.cache"/>
						<td>
	                        @andromda.hibernate.association.cache
						</td>
						<td>
							 Association between <a href="#Entity"><![CDATA[<<Entity>>]]></a> classes
						</td>
						<td>
							Defines the cache strategy for the Association. Permited values are:
							<ol>
								<li>read-write</li>
								<li>nonstrict-read-write</li>
								<li>read-only</li>
							</ol>
						</td>
					   </tr>
		        </table>
    		</subsection>
    		</section>	
            <section name="Additional Remarks">
                <p>
                    Dependencies can be used between Services and Entities, they
                    won't need any stereotype assigned to them. These dependencies
                    are used to reference an entity from another entity or service,
                    or to reference a service from an entity or another service.
                </p>
            </section>
  	</body>
</document>