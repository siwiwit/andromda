##
##  This macro will render any properties and associations.
##  $entity can be of type HibernateEntity or HibernateEmbeddedValue
##
#macro (renderPropertiesAndAssociations3 $entity $paramSqlPrefix)
#foreach ($attribute in $entity.attributes)
#if (!$attribute.identifier)
#set ($fullyQualifiedPropertyType = $attribute.type.fullyQualifiedHibernateType)
#if ($attribute.type.enumeration)
#set ($fullyQualifiedPropertyType = $attribute.type.fullyQualifiedHibernateEnumerationType)
#end
#if ($attribute.containsEmbeddedObject)
        <component name="$attribute.name" class="${attribute.type.packageName}.${attribute.type.implementationName}">
## render the properties of the embedded type
#set ($sqlPrefix = $attribute.columnName)
#renderPropertiesAndAssociations3($attribute.type $sqlPrefix)
        </component>
#else
        <property name="$attribute.name" type="$fullyQualifiedPropertyType">
#if($attribute.formula)
            <formula name="$attribute.concatColumnName($paramSqlPrefix, $attribute.columnName)"/>
#else
            <column name="$attribute.concatColumnName($paramSqlPrefix, $attribute.columnName)" not-null="$attribute.required" unique="$attribute.unique" sql-type="$attribute.sqlType"#if($attribute.columnIndex) index="$attribute.columnIndex"#end/>
#end
        </property>
#end
#end
#end
#foreach ($sourceEnd in $entity.associationEnds)
#set ($otherEnd = $sourceEnd.otherEnd)
#if ($otherEnd.navigable || ($sourceEnd.child && $entity.foreignHibernateGeneratorClass))
#if ($sourceEnd.one2One)
#if ($sourceEnd.one2OneSecondary)
        <one-to-one name="$otherEnd.name" class="$otherEnd.type.fullyQualifiedEntityImplementationName" fetch="$otherEnd.outerJoin"#if ($otherEnd.hibernateCascade) cascade="$otherEnd.hibernateCascade"#end constrained="false"/>
#else
#if($sourceEnd.one2OnePrimary)
        <many-to-one name="$otherEnd.name" class="$otherEnd.type.fullyQualifiedEntityImplementationName" fetch="$otherEnd.outerJoin"#if ($otherEnd.hibernateCascade) cascade="$otherEnd.hibernateCascade"#end foreign-key="$otherEnd.foreignKeyConstraintName"#if($otherEnd.columnIndex) index="$otherEnd.columnIndex"#end>
            <column name="$otherEnd.columnName" not-null="$otherEnd.required" sql-type="$otherEnd.sqlType"#if ($otherEnd.required) unique="true"#end/>
        </many-to-one>
#else
        <one-to-one name="$otherEnd.name" class="$otherEnd.type.fullyQualifiedEntityImplementationName" fetch="$otherEnd.outerJoin" property-ref="$sourceEnd.name"#if ($otherEnd.hibernateCascade) cascade="$otherEnd.hibernateCascade"#end foreign-key="$otherEnd.foreignKeyConstraintName"/>
#end
#end
#end
#if ($sourceEnd.one2Many)
#if ($otherEnd.set || $otherEnd.map)
        <$otherEnd.collectionType name="$otherEnd.name" order-by="$otherEnd.orderByColumns" lazy="$otherEnd.lazy" fetch="$otherEnd.outerJoin" inverse="$otherEnd.hibernateInverse"#if ($otherEnd.hibernateCascade) cascade="$otherEnd.hibernateCascade"#end#if ($otherEnd.whereClause) where="$otherEnd.whereClause"#end#if ($stringUtils.isNotBlank($otherEnd.sortType)) sort="$otherEnd.sortType"#end>
#elseif ($otherEnd.bag)
        <$otherEnd.collectionType name="$otherEnd.name" order-by="$otherEnd.orderByColumns" lazy="$otherEnd.lazy" fetch="$otherEnd.outerJoin" inverse="$otherEnd.hibernateInverse"#if ($otherEnd.hibernateCascade) cascade="$otherEnd.hibernateCascade"#end#if ($otherEnd.whereClause) where="$otherEnd.whereClause"#end>
#elseif ($otherEnd.list)
        <$otherEnd.collectionType name="$otherEnd.name" lazy="$otherEnd.lazy" fetch="$otherEnd.outerJoin" inverse="$otherEnd.hibernateInverse"#if ($otherEnd.hibernateCascade) cascade="$otherEnd.hibernateCascade"#end#if ($otherEnd.whereClause) where="$otherEnd.whereClause"#end>
#end
#if(($hibernateEnableCache.equalsIgnoreCase("true")) && ($hibernateEnableAssociationsCache.equalsIgnoreCase("true")))
            <cache usage="$sourceEnd.association.hibernateCacheType" />
#end
            <key foreign-key="$sourceEnd.foreignKeyConstraintName">
                <column name="$sourceEnd.columnName" sql-type="$sourceEnd.sqlType"/>
            </key>
#if ($otherEnd.indexedCollection)
            <index column="$otherEnd.collectionIndexName"#if($otherEnd.map) type="$otherEnd.collectionIndexType"#end/>
#end
            <one-to-many class="$otherEnd.type.fullyQualifiedEntityImplementationName"/>
        </$otherEnd.collectionType>
#elseif ($sourceEnd.many2One)
        <many-to-one name="$otherEnd.name" class="$otherEnd.type.fullyQualifiedEntityImplementationName" fetch="$otherEnd.outerJoin"#if ($otherEnd.hibernateCascade) cascade="$otherEnd.hibernateCascade"#end foreign-key="$otherEnd.foreignKeyConstraintName"#if($otherEnd.columnIndex) index="$otherEnd.columnIndex"#end>
            <column name="$otherEnd.columnName" not-null="$otherEnd.required" sql-type="$otherEnd.sqlType"/>
        </many-to-one>
#elseif ($sourceEnd.many2Many)
        <set name="$otherEnd.name" table="$otherEnd.association.tableName" order-by="$sourceEnd.orderByColumns" fetch="$otherEnd.outerJoin" lazy="$otherEnd.lazy" inverse="$otherEnd.hibernateInverse"#if ($otherEnd.hibernateCascade) cascade="$otherEnd.hibernateCascade"#end#if ($otherEnd.whereClause) where="$otherEnd.whereClause"#end>
            <key foreign-key="$sourceEnd.foreignKeyConstraintName">
                <column name="$sourceEnd.columnName" sql-type="$sourceEnd.sqlType"/>
            </key>
            <many-to-many class="$otherEnd.type.fullyQualifiedEntityImplementationName" foreign-key="$otherEnd.foreignKeyConstraintName">
                <column name="$otherEnd.columnName" sql-type="$otherEnd.sqlType"/>
            </many-to-many>
        </set>
#end
#end
#end
#end
##
##  This macro will render any sub mappings elements for the given $entity.
##
#macro (renderSubClass3 $entity)
## Should only get get invoked for inheritance class or subclass.
        <$entity.mappingClassName name="$entity.fullyQualifiedEntityImplementationName"#if($entity.tableRequired) table="$entity.tableName"#else discriminator-value="$entity.entityImplementationName"#end#if($entity.hibernateProxy) proxy="$entity.fullyQualifiedEntityImplementationName"#end dynamic-insert="$entity.dynamicInsert" dynamic-update="$entity.dynamicUpdate" abstract="$entity.abstract">
#if($entity.subclassKeyColumn)
            <key foreign-key="${entity.tableName}_INHERITANCE_FKC">                    
                <column name="$entity.subclassKeyColumn" sql-type="$identifier.sqlType"/>
            </key>
#end
#renderPropertiesAndAssociations3($entity "")
#foreach ($subentity in $entity.specializations)
#renderSubClass3($subentity)
#end
        </$entity.mappingClassName>
#end