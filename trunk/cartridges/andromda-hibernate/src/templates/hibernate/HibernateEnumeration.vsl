// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEnumeration.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${stringUtils.replace($enumeration.packageName, '.', '/')}/${enumeration.name}.java")
#if ($enumeration.packageName)
package $enumeration.packageName;
#end

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.UserType;

import java.io.Serializable;
import java.sql.Types;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

/**
$enumeration.getDocumentation(" * ")
 */
public final class $enumeration.name
    implements Serializable,
            Comparable, UserType
{
    /**
     * A map holding all the enumeration instances, mapped by their value.
     */
    private static final Map INSTANCES = new HashMap();
    private static List literals = null;

#foreach ($literal in $enumeration.literals)
    /**
$literal.getDocumentation("     * ")
     */
    public final static $enumeration.name $literal.name = new ${enumeration.name}($literal.enumerationValue);

#end

    static
    {
#foreach ($literal in $enumeration.literals)
        INSTANCES.put(${literal.name}.enumCode, ${literal.name});
#end

        literals = new ArrayList();
#foreach ($literal in $enumeration.literals)
        literals.add(${literal.name});
#end
        literals = Collections.unmodifiableList(literals);
    }

    private static final int[] SQL_TYPES = {Types.VARCHAR};
    private String enumCode = null;

    /**
     * Default constructor.  Hibernate needs the default constructor
     * to retrieve an instance of the enum from a JDBC resultset.
     * The instance will be converted to the correct enum instance
     * in {@link #nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)}.
     */
    public ${enumeration.name}()
    {
        // 0x90
    }

    public ${enumeration.name}(String enumCode)
    {
        this.enumCode=enumCode;
    }

    /**
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    public int compareTo(Object that)
    {
        return (this == that) ? 0 : this.toString().compareTo(that.toString());
    }

    /**
     *  @see net.sf.hibernate.UserType#sqlTypes()
     */
    public int[] sqlTypes()
    {
        return SQL_TYPES;
    }

    /**
     *  @see net.sf.hibernate.UserType#deepCopy(java.lang.Object)
     */
    public Object deepCopy(Object value) throws HibernateException
    {
        // Enums are immutable - nothing to be done to deeply clone it
        return value;
    }

    /**
     *  @see net.sf.hibernate.UserType#isMutable()
     */
    public boolean isMutable()
    {
        // Enums are immutable
        return false;
    }

    /**
     *  @see net.sf.hibernate.UserType#equals(java.lang.Object, java.lang.Object)
     */
    public boolean equals(Object x, Object y) throws HibernateException
    {
        return x == y;
    }

    /**
     * @see net.sf.hibernate.UserType#returnedClass()
     */
    public Class returnedClass()
    {
        return ${enumeration.name}.class;
    }

    public static ${enumeration.name} fromString(String enumCode)
    {
        return ($enumeration.name)INSTANCES.get(enumCode);
    }

    public String toString()
    {
        return this.enumCode;
    }

    /**
     *  @see net.sf.hibernate.UserType#nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)
     */
    public Object nullSafeGet(ResultSet resultSet, String[] names, Object owner) throws HibernateException, SQLException
    {
        final String name = resultSet.getString(names[0]);
        return resultSet.wasNull() ? null : fromString(name);
    }

    /**
     * @see net.sf.hibernate.UserType#nullSafeSet(java.sql.PreparedStatement, java.lang.Object, int)
     */
    public void nullSafeSet(PreparedStatement statement, Object value, int index) throws HibernateException, SQLException
    {
        if (value == null)
        {
            statement.setNull(index, Types.VARCHAR);
        }
        else
        {
            statement.setString(index, value.toString());
        }
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals as defined by this enumeration, this list can
     *      not be modified.
     */
    public static List literals()
    {
        return literals;
    }
}