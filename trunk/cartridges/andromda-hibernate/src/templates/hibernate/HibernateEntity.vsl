#set ($generatedFile = "${entity.packagePath}/${entity.entityName}.java")
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package $entity.packageName;

/**
$entity.getDocumentation(" * ")
 */
public abstract class $entity.entityName
#if($entity.generalization)
    extends $entity.generalization.fullyQualifiedEntityImplementationName
#else
    implements java.io.Serializable
#end
{

#if ($stringUtils.isNotBlank($versionProperty))
#set ($versionPropertyCapitalized = $stringUtils.capitalize($versionProperty))
    private int $versionProperty;

    public int get$versionPropertyCapitalized()
    {
        return this.$versionProperty;
    }

    public void set$versionPropertyCapitalized (int $versionProperty)
    {
        this.$versionProperty=$versionProperty;
    }
    
#end
#foreach ( $attribute in $entity.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
    private $typeName $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $typeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

    $attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name)
    {
        this.${attribute.name} = $attribute.name;
    }

#end
## Generate the relation methods.
#foreach ( $associationEnd in $entity.associationEnds )
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
    private $target.getterSetterTypeName $target.name;

    /**
$target.getDocumentation("     * ")
     */
    public $target.getterSetterTypeName ${target.getterName}()
    {
        return this.${target.name};
    }

    public void ${target.setterName}($target.getterSetterTypeName ${target.name})
    {
        this.${target.name} = ${target.name};
    }

#end
#end
#foreach ($operation in $entity.businessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility abstract $returnType.fullyQualifiedName $signature
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $returnType.fullyQualifiedName $signature;
#end

#end
#if (!$entity.abstract)
    /**
     * Constructs new instances of {@link ${entity.fullyQualifiedName}}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link ${entity.fullyQualifiedName}}.
         */ 
        public static final $entity.fullyQualifiedName newInstance()
        {
            return new ${entity.fullyQualifiedEntityImplementationName}();
        }
    }
    
#end
}