#set ($generatedFile = "${entity.packagePath}/${entity.entityName}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

/**
$entity.getDocumentation(" * ")
 */
public abstract class $entity.entityName
#if($entity.generalization)
    extends $entity.generalization.fullyQualifiedEntityImplementationName
#else
    implements java.io.Serializable
#if (!$entity.interfaceAbstractions.empty)
        , $entity.implementedInterfaceList
#end
#end
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${entity.serialVersionUID}L;

#if ($stringUtils.isNotBlank($entity.hibernateVersionProperty))
#if (!$entity.generalization || ($entity.generalization && !$entity.hibernateInheritanceSubclass))
#set ($versionProperty = $entity.hibernateVersionProperty)
#set ($versionPropertyCapitalized = $stringUtils.capitalize($entity.hibernateVersionProperty))
    /**
     * Version property managed by Hibernate.
     */
    private int $versionProperty;

    public int get$versionPropertyCapitalized()
    {
        return this.$versionProperty;
    }

    private void set$versionPropertyCapitalized (int ${versionProperty}In)
    {
        this.$versionProperty = ${versionProperty}In;
    }

#end
#end
#if($entity.compositeIdentifier)
#set($primaryKeyType="${entity.fullyQualifiedEntityName}PK")
#set($primaryKeyName="$stringUtils.uncapitalize($entity.name)Pk")
	private $primaryKeyType $primaryKeyName;
	
	public $primaryKeyType get${entity.name}Pk() {
        return this.${primaryKeyName};
    }

    public void set${entity.name}Pk($primaryKeyType $primaryKeyName) {
        this.$primaryKeyName = $primaryKeyName;
    }

#end
#foreach ($attribute in $entity.attributes)
#if (!$entity.compositeIdentifier || ($entity.compositeIdentifier && !$attribute.identifier))
#set ($typeName = $attribute.getterSetterTypeName)
#if ($attribute.containsEmbeddedObject)
#set ($typeName = $attribute.type.fullyQualifiedEntityName)
#end
    private $typeName $attribute.name#if ($attribute.defaultValuePresent) = $attribute.defaultValue#end;

    /**
$attribute.getDocumentation("     * ")
     * @return this.${attribute.name} $typeName
     */
    $attribute.visibility $typeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

    /**
$attribute.getDocumentation("     * ")
     * @param ${attribute.name}In ${typeName}
     */
    $attribute.visibility void ${attribute.setterName}(${typeName} ${attribute.name}In)
    {
        this.${attribute.name} = ${attribute.name}In;
    }

#end
#end
## Generate the associations
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
#if ($target.many)
    private $target.getterSetterTypeName $target.name = $target.collectionTypeImplementation;
#else
    private $target.getterSetterTypeName $target.name;
#end

    /**
$target.getDocumentation("     * ")
     * @return this.${target.name} $target.getterSetterTypeName
     */
    public $target.getterSetterTypeName ${target.getterName}()
    {
        return this.${target.name};
    }

    /**
$target.getDocumentation("     * ")
     * @param ${target.name}In $target.getterSetterTypeName
     */
    public void ${target.setterName}($target.getterSetterTypeName ${target.name}In)
    {
        this.${target.name} = ${target.name}In;
    }

#end
#end
#foreach ($operation in $entity.businessOperations)
    /**
$operation.getDocumentation("     * ")
#if ($operation.exceptionsPresent)
    * @throws $operation.exceptionList
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility abstract $operation.returnType.fullyQualifiedName $operation.signature
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $operation.returnType.fullyQualifiedName $operation.signature;
#end

#end
#if ($generateEntityEqualsAndHashCode.equalsIgnoreCase('true'))
#set ($identifiers = $entity.getIdentifiers(false))
    /**
#if ($identifiers.empty)
     * This entity does not have any identifiers
#if ($entity.generalization)
     * but since it extends the <code>$entity.generalization.fullyQualifiedEntityImplementationName</code> class
     * it will simply delegate the call up there.
     *
     * @see ${entity.generalization.fullyQualifiedEntityName}${esc.hash}equals(Object)
#else
     * and is not extending any other entity,
     * so this method will only return <code>true</code> if the argument reference and <code>this</code>
     * refer to the same object.
#end
#else
#if ($entity.generalization)
     * Returns <code>true</code> if the argument is an $entity.entityName instance and all identifiers for this entity
     * equal the identifiers of the argument entity. The <code>equals</code> method of the parent entity
     * will also need to return <code>true</code>. Returns <code>false</code> otherwise.
     *
     * @see ${entity.generalization.fullyQualifiedEntityName}${esc.hash}equals(Object)
#else
     * Returns <code>true</code> if the argument is an $entity.entityName instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
#end
#end
     */
#renderEqualsMethod($entity $entity.entityName $identifiers)

    /**
#if ($identifiers.empty)
     * This entity does not have any identifiers
#if ($entity.generalization)
     * but since it extends the <code>$entity.generalization.fullyQualifiedEntityImplementationName</code> class
     * it will simply delegate the call up there.
     *
     * @see ${entity.generalization.fullyQualifiedEntityName}${esc.hash}hashCode()
#else
     * and is not extending any other entity,
     * so this method will only take the identifiers of this entity into account when calculating the hash code.
#end
#else
#if ($entity.generalization)
     * Returns a hash code based on this entity's identifiers and the hash code of the parent entity.
     *
     * @see ${entity.generalization.fullyQualifiedEntityName}${esc.hash}hashCode()
#else
     * Returns a hash code based on this entity's identifiers.
#end
#end
     */
#renderHashCodeMethod($entity $entity.entityName $identifiers)

#end
#if (!$entity.abstract)
    /**
     * Constructs new instances of {@link ${entity.fullyQualifiedName}}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link ${entity.fullyQualifiedName}}.
         */
        public static $entity.fullyQualifiedName newInstance()
        {
            return new ${entity.fullyQualifiedEntityImplementationName}();
        }

## Allow for the possibility that identifiers might be seen as required if default multiplicity is set to 1
#set ($requiredSize = $entity.allRequiredConstructorParameters.size())
#set ($allSize = $entity.allProperties.size())
#if (!$entity.usingForeignIdentifier)
## allRequiredProperties includes identifiers, which is never required. subtract 1 from allProperties.size()
#foreach ($identifier in $entity.identifiers)
#if ($identifier.required)
#set ($requiredSize = $requiredSize - 1)
#end
#set ($allSize = $allSize - 1)
#end
#end
## $entity.allRequiredConstructorParameters.size() < $entity.allProperties.size() gives the wrong answer
#if ($requiredSize < $allSize && $requiredSize > 0)
        /**
         * Constructs a new instance of {@link ${entity.fullyQualifiedName}}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         */
        public static $entity.fullyQualifiedName newInstance(## no newline
#set ($comma = "")
#foreach ($property in $entity.allRequiredConstructorParameters)
#if ($entity.usingForeignIdentifier || !$property.identifier)
${comma}${property.getterSetterTypeName} ${property.name}## no newline
#set ($comma = ", ")
#end
#end
)
        {
            final ${entity.fullyQualifiedName} entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($property in $entity.allRequiredConstructorParameters)
#if ($entity.usingForeignIdentifier || !$property.identifier)
            entity.${property.setterName}(${property.name});
#end
#end
            return entity;
        }
#end
#set ($propertiesPresent = false)
#foreach ($property in $entity.allProperties)
#if ($entity.usingForeignIdentifier || !$property.identifier)
#set ($propertiesPresent = true)
#end
#end
#if ($propertiesPresent)

        /**
         * Constructs a new instance of {@link ${entity.fullyQualifiedName}}, taking all possible properties
         * (except the identifier(s))as arguments.
         */
        public static $entity.fullyQualifiedName newInstance(## no newline
#set ($comma = "")
#foreach ($property in $entity.allProperties)
#if ($entity.usingForeignIdentifier || !$property.identifier)
${comma}${property.getterSetterTypeName} ${property.name}## no newline
#set ($comma = ", ")
#end
#end
)
        {
            final ${entity.fullyQualifiedName} entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($property in $entity.allProperties)
#if ($entity.usingForeignIdentifier || !$property.identifier)
            entity.${property.setterName}(${property.name});
#end
#end
            return entity;
        }
#end
    }
    
#end
// HibernateEntity.vsl merge-point
}