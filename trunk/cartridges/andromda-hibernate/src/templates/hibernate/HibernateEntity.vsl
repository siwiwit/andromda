/**
 * Attention: Generated source! Do not modify by hand!
 */
package $entity.packageName;

/**
$entity.getDocumentation(" * ")
 *
#if($entity.generalization)
 * @hibernate.subclass
 *    discriminator-value="$entity.name"
#else
 * @hibernate.class
 *     table="$tableNamePrefix$entity.tableName"
 * @hibernate.discriminator
 *     column="class"
#end
 *
#foreach ( $tgv in $entity.taggedValues )
#if ($tgv.name != "documentation")
#if ($tgv.name == "---")
    #set ($tag = "")
#else
    #set ($tag = $tgv.name)
#end
 * $tag    $tgv.value
#end
#end
 */
public abstract class $entity.name
#if($entity.generalization)
	extends ${entity.generalization.fullyQualifiedName}Impl
#end
{
    // --------------- attributes ---------------------
#foreach ( $attribute in $entity.attributes )
    private $attribute.type.fullyQualifiedName $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     *
#if ($attribute.identifier)
     * @hibernate.id
     *     generator-class="$idGeneratorClass"
#else
     * @hibernate.property
#end
     *     column="$attribute.columnName"
     *     type="$attribute.type.fullyQualifiedHibernateType"
     *
     * @hibernate.column
     *     name="$attribute.columnName"
     *     sql-type="$attribute.sqlType"
#if($attribute.required)
     *     not-null="true"
#end
     */
    public $attribute.type.fullyQualifiedName ${attribute.getterName}()
    {
        return this.$attribute.name;
    }

    public void ${attribute.setterName}($attribute.type.fullyQualifiedName $attribute.name)
    {
        this.${attribute.name} = $attribute.name;
    }

#end

    // ------------- relations ------------------

#foreach ( $associationEnd in $entity.associationEnds )
	#set ($target = $associationEnd.otherEnd)
    #set ($sourceType = $associationEnd.type)
    #set ($targetType = $target.type)
    #set ($targetTypeName = $targetType.fullyQualifiedName)
#if ($target.navigable)
    /**
$target.getDocumentation("     * ")
     *
#if ($associationEnd.one2Many)
     * @hibernate.set
     *     role="$target.name"
     *     lazy="true"
     * @hibernate.collection-key
     *     column="$associationEnd.columnName"
     * @hibernate.collection-one-to-many
     *     class="$targetTypeName"
     */
    public java.util.Collection ${target.getterName}()
    {
        return this.${target.name};
    }

    public void ${target.setterName}(java.util.Collection $target.name)
    {
        this.$target.name = $target.name;
    }

    private java.util.Collection $target.name;

#end
#if ($associationEnd.many2Many)
##
     * @hibernate.set
     *     lazy="true"
     *     table="$tableNamePrefix${associationEnd.association.tableName}"
     * @hibernate.collection-key
     *     column="$associationEnd.columnName"
     * @hibernate.collection-many-to-many
     *     column="$target.columnName"
     *     class="$targetTypeName"
     */
    public java.util.Collection ${target.getterName}()
    {
        return this.${target.name};
    }

    public void ${target.setterName}(java.util.Collection $target.name)
    {
        this.$target.name = $target.name;
    }

    private java.util.Collection $target.name;

#end
#if ($associationEnd.one2One || $associationEnd.many2One)
     * @hibernate.many-to-one
     *     column="${target.columnName}"
     *     class="$targetTypeName"
#if($target.required)
     *     not-null="true"
#end
     */
    public ${targetTypeName} ${target.getterName}()
    {
        return this.${target.name};
    }

    public void ${target.setterName}(${targetTypeName} $target.name)
    {
        this.$target.name = $target.name;
    }

    private $targetTypeName $target.name;

#end
#end
#end

    // ---------------- business methods  ----------------------

#foreach ( $operation in $entity.businessOperations)
    /**
$operation.getDocumentation("     * ")
     */
#set ($returnType = $operation.returnType.fullyQualifiedName)
#if ($operation.hasExceptions())
    $operation.visibility abstract $returnType ${operation.signature}
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $returnType ${operation.signature};
#end
#end

}
