#set ($generatedFile = "${entity.packagePath}/${entity.entityName}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

/**
$entity.getDocumentation(" * ")
 */
public abstract class $entity.entityName
#if($entity.generalization)
    extends $entity.generalization.fullyQualifiedEntityImplementationName
#else
    implements java.io.Serializable
#end
{

#if ($stringUtils.isNotBlank($versionProperty))
#set ($versionPropertyCapitalized = $stringUtils.capitalize($versionProperty))
    private int $versionProperty;

    public int get$versionPropertyCapitalized()
    {
        return this.$versionProperty;
    }

    public void set$versionPropertyCapitalized (int $versionProperty)
    {
        this.$versionProperty=$versionProperty;
    }

#end
#foreach ( $attribute in $entity.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
    private $typeName $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $typeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

    $attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name)
    {
        this.${attribute.name} = $attribute.name;
    }

#end
## Generate the relation methods.
#foreach ( $associationEnd in $entity.associationEnds )
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
    private $target.getterSetterTypeName $target.name;

    /**
$target.getDocumentation("     * ")
     */
    public $target.getterSetterTypeName ${target.getterName}()
    {
        return this.${target.name};
    }

    public void ${target.setterName}($target.getterSetterTypeName ${target.name})
    {
        this.${target.name} = ${target.name};
    }

#end
#end
#foreach ($operation in $entity.businessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility abstract $returnType.fullyQualifiedName $signature
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $returnType.fullyQualifiedName $signature;
#end

#end
#if ($generateEntityEqualsAndHashCode.equalsIgnoreCase('true'))
#set ($identifiers = $entity.getIdentifiers(false))
    /**
#if ($identifiers.empty)
     * This entity does not have any identifiers
#if ($entity.generalization)
     * but since it extends the <code>$entity.generalization.fullyQualifiedEntityImplementationName</code> class
     * it will simply delegate the call up there.
     *
     * @see $entity.generalization.fullyQualifiedEntityName#equals(Object)
#else
     * and is not extending any other entity,
     * so this method will only return <code>true</code> if the argument reference and <code>this</code>
     * refer to the same object.
#end
#else
#if ($entity.generalization)
     * Returns <code>true</code> if the argument is an $entity.entityName instance and all identifiers for this entity
     * equal the identifiers of the argument entity. The <code>equals</code> method of the parent entity
     * will also need to return <code>true</code>. Returns <code>false</code> otherwise.
     *
     * @see $entity.generalization.fullyQualifiedEntityName#equals(Object)
#else
     * Returns <code>true</code> if the argument is an $entity.entityName instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
#end
#end
     */
    public boolean equals(Object object)
    {
#if ($identifiers.empty)
        return super.equals(object);
#else
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof $entity.entityName))
        {
            return false;
        }
        final $entity.entityName that = ($entity.entityName)object;
#foreach ($identifier in $identifiers)
#set ($idType = $identifier.type)
#if ($idType.primitive)
        if (this.$identifier.name != that.$identifier.name)
        { 
            return false;
        }
#elseif ($idType.arrayType)
        if (!java.util.Arrays.equals(this.$identifier.name, that.$identifier.name))
        { 
            return false;
        }
#else
        if (this.$identifier.name == null ? that.$identifier.name != null : !this.${identifier.name}.equals(that.$identifier.name)) 
        {
            return false;
        }
#end
#end
        return true;
#end
    }

    /**
#if ($identifiers.empty)
     * This entity does not have any identifiers
#if ($entity.generalization)
     * but since it extends the <code>$entity.generalization.fullyQualifiedEntityImplementationName</code> class
     * it will simply delegate the call up there.
     *
     * @see $entity.generalization.fullyQualifiedEntityName#hashCode()
#else
     * and is not extending any other entity,
     * so this method will only take the identifiers of this entity into account when calculating the hash code.
#end
#else
#if ($entity.generalization)
     * Returns a hash code based on this entity's identifiers and the hash code of the parent entity.
     *
     * @see $entity.generalization.fullyQualifiedEntityName#hashCode()
#else
     * Returns a hash code based on this entity's identifiers.
#end
#end
     */
    public int hashCode()
    {
#if ($identifiers.empty)
        return super.hashCode();
#else
#if ($entity.generalization)
        int hashCode = super.hashCode();
#else
        int hashCode = 0;
#end
#foreach ($identifier in $entity.identifiers)
#set ($idType = $identifier.type)
#if ($idType.booleanType)
        hashCode = 29 * hashCode + (${identifier.name} ? 1 : 0);
#elseif ($idType.arrayType)
        // arrays are not part of the hashCode calculation
#elseif ($idType.primitive)
        hashCode = 29 * hashCode + (int)${identifier.name};
#else
        hashCode = 29 * hashCode + (${identifier.name} == null ? 0 : ${identifier.name}.hashCode());
#end
#end

        return hashCode;
#end
    }

#end
#if (!$entity.abstract)
    /**
     * Constructs new instances of {@link ${entity.fullyQualifiedName}}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link ${entity.fullyQualifiedName}}.
         */
        public static final $entity.fullyQualifiedName newInstance()
        {
            return new ${entity.fullyQualifiedEntityImplementationName}();
        }
    }

#end
}