#set ($generatedFile = "${embeddedValue.packagePath}/${embeddedValue.name}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEmbeddedValue.vsl in andromda-hibernate-cartridge.
//
#if ($stringUtils.isNotBlank($embeddedValue.packageName))
package $embeddedValue.packageName;
#end

/**
$embeddedValue.getDocumentation(" * ")
 */
public abstract class $embeddedValue.name
#if($embeddedValue.generalization)
    extends $embeddedValue.generalization.fullyQualifiedName
#end
    implements java.io.Serializable
{
    /** 
     * The serial version UID of this class. Needed for serialization. 
     */
    private static final long serialVersionUID = ${embeddedValue.serialVersionUID}L;

    /**
     * create method taking all properties.
     */
#set ($parenthesis = "(")
#if ($embeddedValue.properties.empty)
#set ($parenthesis = "()")
#end
    public static ${embeddedValue.implementationName} create${parenthesis} #foreach ($property in $embeddedValue.properties)
 $property.getterSetterTypeName ${property.name}#if($velocityCount != $embeddedValue.properties.size()),#else)
#end
#end
    {
        $embeddedValue.implementationName object = new ${embeddedValue.implementationName}();
#foreach ($property in $embeddedValue.properties)
        object.${property.setterName}(${property.name});
#end
        object.initialize();
        return object;
    }

    /**
     * Create from other $embeddedValue.name instance.
     */
    public static ${embeddedValue.implementationName} create(${embeddedValue.name} otherObject)
    {
        if (otherObject != null)
        {
            return create(#foreach ( $property in $embeddedValue.properties)
 otherObject.${property.getterName}()#if($velocityCount != $embeddedValue.properties.size()),#else);
#end
#end
        }
        else
        {
            return null;
        }
    }

    protected ${embeddedValue.name}()
    {
    }

    /**
     * hook for initializing the object in the subclass
     */
    protected void initialize()
    {
    }

#foreach ($attribute in $embeddedValue.attributes)

    private $attribute.getterSetterTypeName $attribute.name;
    /**
$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $attribute.getterSetterTypeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }
#if ( $embeddedValue.immutable )
    // protected setter, if subclass methods need to normalize the ${embeddedValue.name}
    protected void ${attribute.setterName}($attribute.getterSetterTypeName $attribute.name)
#else
    $attribute.visibility void ${attribute.setterName}($attribute.getterSetterTypeName $attribute.name)
#end
    {
        this.${attribute.name} = $attribute.name;
    }
#end
#### operations as abstract declarations
#foreach ($operation in $embeddedValue.operations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility abstract $returnType.fullyQualifiedName $signature
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $returnType.fullyQualifiedName $signature;
#end

#end
    /**
     * Indicates if the argument is of the same type and all values are equal.
     */
#renderEqualsMethod($class $embeddedValue.name $embeddedValue.attributes)

#set ($attributeCollection = $embeddedValue.attributes)
#renderHashCodeMethod($class $attributeCollection)
}