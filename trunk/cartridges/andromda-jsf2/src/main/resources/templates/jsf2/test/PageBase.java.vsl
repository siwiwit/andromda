// license-header java merge-point
// Generated by andromda-jsf cartridge (test\PageBase.java.vsl) DO NOT EDIT!
#set ($className = "PageBase")
#if ($stringUtils.isNotEmpty($managedBeansPackage))
package $managedBeansPackage;
#end

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.By.ByLinkText;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class ${className} 
{
    public static final String GLOBAL_MESSAGES = "appMessages";
    public static final long WEBDRIVER_TIMEOUT_IN_SECONDS = 30;

    private static final PropertiesUtil messageProperties = new PropertiesUtil(System.getProperty("fileMessageProperties"));
    private WebDriver driver = TestSuiteBase.getDriver();

    /**
     * Create a screenshot
     *
     * @param file Destination file name
     */   
    public void createScreenShotAs(String file) throws IOException 
    {
        File srcFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
        FileUtils.copyFile(srcFile, new File(file));
    }

    /**
     * Return an instance of the WebDriver
     *
     * @return Instance of WebDriver
     */     
    public WebDriver getDriver() 
    {
        return driver;
    }

    /**
     * Gets message propertis
     *
     * @return Message properties
     */     
    public static PropertiesUtil getMessageProperties() 
    {
        return messageProperties;
    }

    /**
     * Gets an element text
     *
     * @param id Element id
     * @return Text of an element
     */     
    public String getTextById(String id) 
    {
        return driver.findElement(By.id(id)).getText();
    }
    
    /**
     * Goes to some url
     *
     * @param url Destiny url
     */     
    public void gotoUrl(String url) 
    {
        driver.get(url);
    }
    
    /**
     * Finds out if the current url contains an url
     *
     * @param url Some url
     * @return True if current url contains some url
     */     
    public boolean isCurrentUrlContains(String url) 
    {
        String  currentUrl = driver.getCurrentUrl();
        return currentUrl.contains(url);
    }
    
    /**
     * Finds out if an element is displayed
     *
     * @param id Element id
     * @return True if element is displayed
     */     
    public boolean isDisplayedById(String id) 
    {
        return driver.findElement(By.id(id)).isDisplayed();
    }

    /**
     * Finds out if the page source code contains some text
     *
     * @param text Some text
     * @return True if page source code contains text
     */     
    public boolean isPageSourceContains(String text) 
    {
        String pageSource = driver.getPageSource();
        return pageSource.contains(text);
    }   
    
    /**
     * Sends a click to an element
     *
     * @param link Link text
     */    
    public void sendClickByLink(String link) 
    {
        driver.findElement(ByLinkText.linkText(link)).click();
    }
    
    /**
     * Sends a click to an element
     *
     * @param id Element id
     */    
    public void sendClickById(String id) 
    {
        waitToBeClickable(id);
        driver.findElement(By.id(id)).click();
    }

    /**
     * Sets the value of a field
     *
     * @param field Field to be set
     */    
    public void setFieldValue(FieldValue field) 
    {
        final WebElement element = driver.findElement(By.id(field.getId()));
        if(field instanceof SelectFieldValue) 
        {
            Select select = new Select(element);
            select.selectByVisibleText(field.getValue());
        } 
        else if(field instanceof SelectMultipleFieldValue) 
        {
            Select select = new Select(element);
            select.deselectAll();
            for(String value : field.getValues()) 
            {
                if(StringUtils.isNotBlank(value)) 
                {
                    select.selectByVisibleText(value);
                }
            }
        }
        else 
        {
            element.clear();
            element.sendKeys(field.getValue());
        }
    }
    
    /**
     * Sets form fields
     *
     * @param fiels Fields to be set
     */    
    public void setForm(FieldValue... fields) 
    {
        for(FieldValue field : fields) 
        {
            setFieldValue(field);
        }
    }

    /**
     * Waits for an element to be visible
     *
     * @param id Element id
     */    
    public void waitVisibilityById(final String id) 
    {
        WebDriverWait wait = new WebDriverWait(driver, WEBDRIVER_TIMEOUT_IN_SECONDS);
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(id)));
    }
    
    /**
     * Waits for global messages to be visible
     *
     */    
    public void waitVisibilityOfGlobalMessages() {
        waitVisibilityById(GLOBAL_MESSAGES);
    }    
    
    /**
     * Waits for an element to be clickable
     *
     * @param id Element id
     */
    public void waitToBeClickable(final String id) 
    {
        WebDriverWait wait = new WebDriverWait(driver, WEBDRIVER_TIMEOUT_IN_SECONDS);
        wait.until(ExpectedConditions.elementToBeClickable(By.id(id)));
    }
}
