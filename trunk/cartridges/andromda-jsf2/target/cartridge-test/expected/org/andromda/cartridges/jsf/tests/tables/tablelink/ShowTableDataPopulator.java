// license-header java merge-point
// Generated by andromda-jsf cartridge (flow\ViewPopulator.java.vsl) DO NOT EDIT!
package org.andromda.cartridges.jsf.tests.tables.tablelink;

import java.io.IOException;
import javax.faces.context.FacesContext;
import javax.faces.el.VariableResolver;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.andromda.presentation.jsf.AdfFacesContextWrapper;
import org.andromda.presentation.jsf.FacesContextUtils;
import org.andromda.presentation.jsf.FormPopulator;
import org.andromda.presentation.jsf.JsfUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.myfaces.trinidad.context.RequestContext;

/**
 * This filter handles the population of forms for the <em>show table data</code>
 * view.
 */
public class ShowTableDataPopulator
    implements Filter
{
    private FilterConfig config;

    /**
     * Initialize the filter
     *
     * @param configIn the configuration
     * @see javax.servlet.Filter#init(FilterConfig)
     */
    public void init(FilterConfig configIn)
    {
        this.config = configIn;
    }

    /**
     * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,
     *      javax.servlet.ServletResponse, javax.servlet.FilterChain)
     */
    public void doFilter(
        ServletRequest request,
        ServletResponse response,
        FilterChain chain) throws IOException, ServletException
    {
        // - we need to retrieve the faces context differently since we're outside of the
        //   faces servlet
        populateFormAndViewVariables(FacesContextUtils.getFacesContext(request, response), null);
        chain.doFilter(request, response);
    }

    /**
     * @see javax.servlet.Filter#destroy()
     */
    public void destroy()
    {
        this.config = null;
    }

    /**
     * @param facesContext
     * @param form
     * @throws ServletException
     */
    public static void populateFormAndViewVariables(final FacesContext facesContext, Object form)
        throws ServletException
    {
        final HttpServletRequest request = (HttpServletRequest)facesContext.getExternalContext().getRequest();
        final HttpSession session = (HttpSession)facesContext.getExternalContext().getSession(true);
        RequestContext adfContext = RequestContext.getCurrentInstance();
        final VariableResolver variableResolver = facesContext.getApplication().getVariableResolver();
        if (form == null)
        {
            // - first try getting the form from the ADF PageFlowScope
            form = adfContext.getPageFlowScope().get("form");
            // - if the form is null, try getting the current adfContext from the session (and then remove it from the session)
            if (form == null)
            {
                final AdfFacesContextWrapper contextWrapper =
                    (AdfFacesContextWrapper)session.getAttribute("AndroMDAADFContext");
                adfContext = contextWrapper != null ? contextWrapper.getCurrentInstance() : null;
                form = adfContext != null ? adfContext.getPageFlowScope().get("form") : null;
                if (form == null)
                {
                    form = session.getAttribute("form");
                    session.removeAttribute("form");
                }
                // - if the form is still null, see if we can get it from a serialized state
                if (form == null)
                {
                    form = JsfUtils.getSerializedForm(facesContext);
                }
                if (form != null)
                {
                    // - add the form to the current process scope since it wasn't in the current one to begin with
                    RequestContext.getCurrentInstance().getPageFlowScope().put("form", form);
                }
            }
            else
            {
                // - remove the ADF context in the event that its present
                session.removeAttribute("AndroMDAADFContext");
            }
        }
        else
        {
            // - since the form argument is not null, set it as the "form" in the PageFlowScope
            //   (to replace the existing "form" attribute)
            adfContext.getPageFlowScope().put("form", form);
        }
        try
        {
            // - populate the forms
            if (form != null)
            {
                ShowTableDataAgainFormImpl tableLinkActivityShowTableDataAgainForm =
                    (ShowTableDataAgainFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataAgainForm");
                // - populate the tableLinkActivityShowTableDataAgainForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataAgainForm, false);
                request.setAttribute("tableLinkActivityShowTableDataAgainForm", tableLinkActivityShowTableDataAgainForm);
                ShowTableDataHyperlinkActionFormImpl tableLinkActivityShowTableDataHyperlinkActionForm =
                    (ShowTableDataHyperlinkActionFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataHyperlinkActionForm");
                // - populate the tableLinkActivityShowTableDataHyperlinkActionForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataHyperlinkActionForm, false);
                request.setAttribute("tableLinkActivityShowTableDataHyperlinkActionForm", tableLinkActivityShowTableDataHyperlinkActionForm);
                ShowTableDataBadActionFormImpl tableLinkActivityShowTableDataBadActionForm =
                    (ShowTableDataBadActionFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataBadActionForm");
                // - populate the tableLinkActivityShowTableDataBadActionForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataBadActionForm, false);
                request.setAttribute("tableLinkActivityShowTableDataBadActionForm", tableLinkActivityShowTableDataBadActionForm);
                ShowTableDataHyperlinkActionDuplicatingParameterFormImpl tableLinkActivityShowTableDataHyperlinkActionDuplicatingParameterForm =
                    (ShowTableDataHyperlinkActionDuplicatingParameterFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataHyperlinkActionDuplicatingParameterForm");
                // - populate the tableLinkActivityShowTableDataHyperlinkActionDuplicatingParameterForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataHyperlinkActionDuplicatingParameterForm, false);
                request.setAttribute("tableLinkActivityShowTableDataHyperlinkActionDuplicatingParameterForm", tableLinkActivityShowTableDataHyperlinkActionDuplicatingParameterForm);
                ShowTableDataHyperlinkNotSpecifyingColumnFormImpl tableLinkActivityShowTableDataHyperlinkNotSpecifyingColumnForm =
                    (ShowTableDataHyperlinkNotSpecifyingColumnFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataHyperlinkNotSpecifyingColumnForm");
                // - populate the tableLinkActivityShowTableDataHyperlinkNotSpecifyingColumnForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataHyperlinkNotSpecifyingColumnForm, false);
                request.setAttribute("tableLinkActivityShowTableDataHyperlinkNotSpecifyingColumnForm", tableLinkActivityShowTableDataHyperlinkNotSpecifyingColumnForm);
                ShowTableDataActionWithBadTableLinkFormImpl tableLinkActivityShowTableDataActionWithBadTableLinkForm =
                    (ShowTableDataActionWithBadTableLinkFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataActionWithBadTableLinkForm");
                // - populate the tableLinkActivityShowTableDataActionWithBadTableLinkForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataActionWithBadTableLinkForm, false);
                request.setAttribute("tableLinkActivityShowTableDataActionWithBadTableLinkForm", tableLinkActivityShowTableDataActionWithBadTableLinkForm);
                ShowTableDataRealisticFormActionFormImpl tableLinkActivityShowTableDataRealisticFormActionForm =
                    (ShowTableDataRealisticFormActionFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataRealisticFormActionForm");
                // - populate the tableLinkActivityShowTableDataRealisticFormActionForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataRealisticFormActionForm, false);
                request.setAttribute("tableLinkActivityShowTableDataRealisticFormActionForm", tableLinkActivityShowTableDataRealisticFormActionForm);
                ShowTableDataImageLinkActionFormImpl tableLinkActivityShowTableDataImageLinkActionForm =
                    (ShowTableDataImageLinkActionFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataImageLinkActionForm");
                // - populate the tableLinkActivityShowTableDataImageLinkActionForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataImageLinkActionForm, false);
                request.setAttribute("tableLinkActivityShowTableDataImageLinkActionForm", tableLinkActivityShowTableDataImageLinkActionForm);
                ShowTableDataGlobalTableActionFormImpl tableLinkActivityShowTableDataGlobalTableActionForm =
                    (ShowTableDataGlobalTableActionFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataGlobalTableActionForm");
                // - populate the tableLinkActivityShowTableDataGlobalTableActionForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataGlobalTableActionForm, false);
                request.setAttribute("tableLinkActivityShowTableDataGlobalTableActionForm", tableLinkActivityShowTableDataGlobalTableActionForm);
                ShowTableDataDuplicateGlobalTableActionFormImpl tableLinkActivityShowTableDataDuplicateGlobalTableActionForm =
                    (ShowTableDataDuplicateGlobalTableActionFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataDuplicateGlobalTableActionForm");
                // - populate the tableLinkActivityShowTableDataDuplicateGlobalTableActionForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataDuplicateGlobalTableActionForm, false);
                request.setAttribute("tableLinkActivityShowTableDataDuplicateGlobalTableActionForm", tableLinkActivityShowTableDataDuplicateGlobalTableActionForm);
                ShowTableDataAnotherDuplicateGlobalTableActionFormImpl tableLinkActivityShowTableDataAnotherDuplicateGlobalTableActionForm =
                    (ShowTableDataAnotherDuplicateGlobalTableActionFormImpl)variableResolver.resolveVariable(
                    facesContext,
                    "tableLinkActivityShowTableDataAnotherDuplicateGlobalTableActionForm");
                // - populate the tableLinkActivityShowTableDataAnotherDuplicateGlobalTableActionForm with any parameters from the previous form
                FormPopulator.populateForm(form, tableLinkActivityShowTableDataAnotherDuplicateGlobalTableActionForm, false);
                request.setAttribute("tableLinkActivityShowTableDataAnotherDuplicateGlobalTableActionForm", tableLinkActivityShowTableDataAnotherDuplicateGlobalTableActionForm);
            }
            // - serialize the form
            if (form != null)
            {
                JsfUtils.serializeForm(facesContext, form);
            }
            // - populate the view variables
            if (form != null)
            {
                final boolean tableDatasReadable = PropertyUtils.isReadable(form, "tableDatas");
                if (tableDatasReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "tableDatasSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("tableDatas", PropertyUtils.getProperty(form, "tableDatas"));
                    }
                }
                final boolean multiboxThingsReadable = PropertyUtils.isReadable(form, "multiboxThings");
                if (multiboxThingsReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "multiboxThingsSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("multiboxThings", PropertyUtils.getProperty(form, "multiboxThings"));
                    }
                }
                final boolean tableDataDefaultExportTypesReadable = PropertyUtils.isReadable(form, "tableDataDefaultExportTypes");
                if (tableDataDefaultExportTypesReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "tableDataDefaultExportTypesSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("tableDataDefaultExportTypes", PropertyUtils.getProperty(form, "tableDataDefaultExportTypes"));
                    }
                }
                final boolean tableDataNoExportTypesReadable = PropertyUtils.isReadable(form, "tableDataNoExportTypes");
                if (tableDataNoExportTypesReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "tableDataNoExportTypesSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("tableDataNoExportTypes", PropertyUtils.getProperty(form, "tableDataNoExportTypes"));
                    }
                }
                final boolean tableDataNotSortablesReadable = PropertyUtils.isReadable(form, "tableDataNotSortables");
                if (tableDataNotSortablesReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "tableDataNotSortablesSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("tableDataNotSortables", PropertyUtils.getProperty(form, "tableDataNotSortables"));
                    }
                }
                final boolean firstReadable = PropertyUtils.isReadable(form, "first");
                if (firstReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "firstSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("first", PropertyUtils.getProperty(form, "first"));
                    }
                }
                final boolean thirdReadable = PropertyUtils.isReadable(form, "third");
                if (thirdReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "thirdSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("third", PropertyUtils.getProperty(form, "third"));
                    }
                }
                final boolean twoReadable = PropertyUtils.isReadable(form, "two");
                if (twoReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "twoSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("two", PropertyUtils.getProperty(form, "two"));
                    }
                }
                final boolean secondReadable = PropertyUtils.isReadable(form, "second");
                if (secondReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "secondSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("second", PropertyUtils.getProperty(form, "second"));
                    }
                }
                final boolean formParam1Readable = PropertyUtils.isReadable(form, "formParam1");
                if (formParam1Readable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "formParam1Set";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("formParam1", PropertyUtils.getProperty(form, "formParam1"));
                    }
                }
                final boolean formParam2Readable = PropertyUtils.isReadable(form, "formParam2");
                if (formParam2Readable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "formParam2Set";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("formParam2", PropertyUtils.getProperty(form, "formParam2"));
                    }
                }
                final boolean parameterWithDefaultValueReadable = PropertyUtils.isReadable(form, "parameterWithDefaultValue");
                if (parameterWithDefaultValueReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "parameterWithDefaultValueSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("parameterWithDefaultValue", PropertyUtils.getProperty(form, "parameterWithDefaultValue"));
                    }
                }
                final boolean fourthReadable = PropertyUtils.isReadable(form, "fourth");
                if (fourthReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "fourthSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("fourth", PropertyUtils.getProperty(form, "fourth"));
                    }
                }
                final boolean thisOneShouldbeNamedFirstReadable = PropertyUtils.isReadable(form, "thisOneShouldbeNamedFirst");
                if (thisOneShouldbeNamedFirstReadable)
                {
                    Boolean propertySet = null;
                    final String isSetPropertyName = "thisOneShouldbeNamedFirstSet";
                    if (PropertyUtils.isReadable(form, isSetPropertyName))
                    {
                        propertySet = (Boolean)PropertyUtils.getProperty(form, isSetPropertyName);
                    }
                    // - only set the property if its been set, or we can't tell if it has
                    if (propertySet == null || propertySet.booleanValue())
                    {
                        request.setAttribute("thisOneShouldbeNamedFirst", PropertyUtils.getProperty(form, "thisOneShouldbeNamedFirst"));
                    }
                }
                final boolean fourthBackingListReadable = PropertyUtils.isReadable(form, "fourthBackingList");
                if (fourthBackingListReadable)
                {
                    Object backingList = PropertyUtils.getProperty(form, "fourthBackingList");
                    request.setAttribute("fourthBackingList", backingList);
                }
            }
        }
        catch (final Throwable throwable)
        {
            throw new ServletException(throwable);
        }
    }
}