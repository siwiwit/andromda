// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\crud\Controller.java.vsl) DO NOT EDIT!
package org.andromda.cartridges.jsf.tests.crud.crud;

/**
 * Java Server Faces Controller of the CrudTest CRUD management.
 */
public abstract class CrudTestController
    extends org.andromda.presentation.jsf.ControllerBase
{
    private static final org.apache.commons.logging.Log logger = org.apache.commons.logging.LogFactory.getLog(CrudTestController.class);

    /**
     * Initializes the controller, calling the doInit method
     *
     * @return the controller view path.
     */
    public String init()
    {
        this.resetUseCaseFormsAndPageVariables();

        try
        {
            final org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doInit(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = org.andromda.presentation.jsf.PatternMatchingExceptionHandler.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(org.andromda.presentation.jsf.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }
        return "/org/andromda/cartridges/jsf/tests/crud/crud/crudtest-crud";
    }

    /**
     * Initializes the controller. This method can be overridden.
     * @param form
     * @throws Exception
     */
    public void doInit(org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form)
        throws Exception
    {

        form.getSearchForm().setStringAttribute(null);
        form.getSearchForm().setIntRequiredAttribute(null);

        form.setManageableList(null);


        form.setEditState(false);
    }

    /**
     * The instance load action.
     * @param event
     */
    public void load(javax.faces.event.ActionEvent event)
    {
        try
        {
            final org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doLoad(java.lang.Long.valueOf(((javax.faces.component.UIParameter)event.getComponent().findComponent("id")).getValue().toString()),form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = org.andromda.presentation.jsf.PatternMatchingExceptionHandler.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(org.andromda.presentation.jsf.Messages.get(messageKey, null));
            }
            resetAllEditableComponentsValues();
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }
    }

    /**
     * Loads the selected instance.
     * @param id
     * @param form
     * @throws Exception
     */
    public void doLoad(java.lang.Long id, org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form)
        throws Exception
    {
        final CrudTestValueObject vo=
            ${application.package}.ManageableServiceLocator.instance().getCrudTestManageableService().readById(id);

        form.setStringAttribute(vo.getStringAttribute());
        form.setIntRequiredAttribute(vo.getIntRequiredAttribute());
        form.setId(vo.getId());

        form.setEditState(true);
    }

    /**
     * The cancel edit action
     *
     * @return the controller view path.
     */
    public String cancel()
    {
        try
        {
            final org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doCancel(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = org.andromda.presentation.jsf.PatternMatchingExceptionHandler.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(org.andromda.presentation.jsf.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }

    /**
     * Executes the edit cancel.
     * @param form
     * @throws Exception
     */
    public void doCancel(org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form)
        throws Exception
    {
        form.setEditState(false);
    }

    /**
     * The new instance action.
     *
     * @return the controller view path.
     */
    public String startNew()
    {
        try
        {
            final org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doStartNew(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = org.andromda.presentation.jsf.PatternMatchingExceptionHandler.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(org.andromda.presentation.jsf.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }

    /**
     * Executes the new instance action.
     * @param form
     * @throws Exception
     */
    public void doStartNew(org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form)
        throws Exception
    {
        form.setStringAttribute(null);
        form.setIntRequiredAttribute(0);
        form.setId(null);


        form.setEditState(true);
    }

    /**
     * The save instance action.
     *
     * @return the controller view path.
     */
    public String save()
    {
        try
        {
            final org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doSave(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = org.andromda.presentation.jsf.PatternMatchingExceptionHandler.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(org.andromda.presentation.jsf.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }

    /**
     * Saves instance action.
     * @param form
     * @throws Exception
     */
    public void doSave(org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form)
        throws Exception
    {
        if(form.getId() == null || form.getId()==0){
            form.setId(
                ${application.package}.ManageableServiceLocator.instance().getCrudTestManageableService().create(
                    form.getStringAttribute()
                    , form.getIntRequiredAttribute()
                    , null
                ).getId()
            );
            this.addInfoMessage(org.andromda.presentation.jsf.Messages.get("manageable.entity.created", new Object[]{org.andromda.presentation.jsf.Messages.get("crud.test")}));
        }
        else{
            ${application.package}.ManageableServiceLocator.instance().getCrudTestManageableService().update(
                form.getStringAttribute()
                , form.getIntRequiredAttribute()
                , form.getId()
            );
            this.addInfoMessage(org.andromda.presentation.jsf.Messages.get("manageable.entity.changed", new Object[]{org.andromda.presentation.jsf.Messages.get("crud.test")}));
        }
        if(form.getManageableList() != null) //only searches again if there was an old search
            doSearch(form); //search again to show the updated item (if it fits the search criteria)

        form.setEditState(false);
    }

    /**
     * The save and new instance action.
     *
     * @return the controller view path.
     */
    public String saveAndNew()
    {
        try
        {
            final org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doSave(form);
                this.doStartNew(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = org.andromda.presentation.jsf.PatternMatchingExceptionHandler.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(org.andromda.presentation.jsf.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }

    /**
     * The search action.
     *
     * @return the controller view path.
     */
    public String search()
    {
        try
        {
            final org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doSearch(form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = org.andromda.presentation.jsf.PatternMatchingExceptionHandler.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(org.andromda.presentation.jsf.Messages.get(messageKey, null));
            }
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }

        resetAllEditableComponentsValues();
        return null;
    }

    /**
     * Executes the search action.
     * @param form
     * @throws Exception
     */
    public void doSearch(org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form)
        throws Exception
    {
        @SuppressWarnings("rawtypes")
        final java.util.List list;
        //if all search fields are null, call readAll()
        if (
             org.apache.commons.lang.StringUtils.isBlank(form.getSearchForm().getStringAttribute())
            && form.getSearchForm().getIntRequiredAttribute() == null
            )
            list=${application.package}.ManageableServiceLocator.instance().getCrudTestManageableService().readAll();
        else
            list = ${application.package}.ManageableServiceLocator.instance().getCrudTestManageableService().read(
                form.getSearchForm().getStringAttribute()
                , form.getSearchForm().getIntRequiredAttribute()
                , null
            );

        form.setManageableList(list);
        if (list.size() >= 250)
            saveMaxResultsWarning();


        form.setEditState(false);
    }

    /**
     * The delete event.
     * @param event
     */
    public void delete(javax.faces.event.ActionEvent event)
    {
        try
        {
            final org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form = this.getForm();

            try
            {
                this.setCurrentActionForm(form);
                this.doDelete(java.lang.Long.valueOf(((javax.faces.component.UIParameter)event.getComponent().findComponent("id")).getValue().toString()),form);
            }
            catch (final Throwable throwable)
            {
                final String messageKey = org.andromda.presentation.jsf.PatternMatchingExceptionHandler.instance().handleException(throwable);
                // - the exception is re-thrown by the exception handler and handled by the catch below if it can't get a messageKey
                //   (no reason to check for presence of messageKey)
                this.addErrorMessage(org.andromda.presentation.jsf.Messages.get(messageKey, null));
            }
            resetAllEditableComponentsValues();
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }
    }

    /**
     * Deletes the selected instance.
     * @param id
     * @param form
     * @throws Exception
     */
    public void doDelete(java.lang.Long id, org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form)
        throws Exception
    {
        ${application.package}.ManageableServiceLocator.instance().getCrudTestManageableService().delete(new java.lang.Long[]{id});
        this.addInfoMessage(org.andromda.presentation.jsf.Messages.get("manageable.entity.deleted", new Object[]{org.andromda.presentation.jsf.Messages.get("crud.test")}));

        doSearch(form);
    }

    /**
     * Shows a message warning the user can exists more records available.
     */
    private void saveMaxResultsWarning()
    {
        addWarningMessage(org.andromda.presentation.jsf.Messages.get("maximum.results.fetched.warning", new Object[]{String.valueOf("250")}));
    }

    /**
     * Export as ODS spreadsheet
     * @return /org/andromda/cartridges/jsf/tests/crud/crud/crudtest-ods-export
     */
    public String odsExport()
    {
        return "/org/andromda/cartridges/jsf/tests/crud/crud/crudtest-ods-export";
    }

    /**
     * Helper method to fill the autocomplete component list.
     * @param event
     */
    public void fillAutocomplete(javax.faces.event.ActionEvent event)
    {
        final javax.faces.context.FacesContext facesContext = this.getContext();
        final java.util.Map<String,String> parameters = facesContext.getExternalContext().getRequestParameterMap();
        final Object fieldValue = parameters.get(this.getParameterValue("searchFieldRequestParamName",event));
        try{
            @SuppressWarnings("rawtypes")
            final java.util.List list = ${application.package}.ManageableServiceLocator.instance().getCrudTestManageableService().read(
                (fieldValue==null || fieldValue.toString().length() == 0) ? null : fieldValue.toString()
                , null
                , null
            );
            final javax.faces.el.ValueBinding vb = facesContext.getApplication().createValueBinding("#{autocompleteResult}");
            vb.setValue(facesContext, list);
        }
        catch (final Throwable throwable)
        {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
        }
    }

    /**
     * Loads an instance of CrudTest.
     *
     * @return CrudTestValueObject from the loaded entity.
     */
    static public CrudTestValueObject load(java.lang.Long id)
    {
        if(id == null || id == 0)
        {
            return null;
        }
        try
        {
            return ${application.package}.ManageableServiceLocator.instance().getCrudTestManageableService().readById(id);
        }
        catch(Exception e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Helper method to fill the select component list.
     *
     * @return a collection with the filtered list.
     */
    public java.util.Collection<javax.faces.model.SelectItem> getAsSelectItems()
    {
        final java.util.Collection<CrudTestValueObject> vos;
        try {
            vos = ${application.package}.ManageableServiceLocator.instance().getCrudTestManageableService().readAll();
        } catch (final Throwable throwable) {
            logger.error(throwable.getMessage(),throwable);
            this.addExceptionMessage(throwable);
            return null;
        }
        final java.util.Collection<javax.faces.model.SelectItem> result=new java.util.ArrayList<javax.faces.model.SelectItem>(vos.size());
        for(CrudTestValueObject vo: vos){
            result.add(new javax.faces.model.SelectItem(vo.getId(),org.apache.commons.lang.ObjectUtils.toString(vo.getStringAttribute())));
        }
        return result;
    }

    /** manageTaskForm */
    public static final String FORM_BEAN_NAME="manageCrudTestForm";

    /**
     * Resolves "manageCrudTestForm".
     *
     * @return the manageable form.
     */
    public org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm getForm()
    {
        final java.util.Map<String,Object> forms=getForms();
        org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm form=(org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm)forms.get(FORM_BEAN_NAME);
        if(form == null){
            form = new org.andromda.cartridges.jsf.tests.crud.crud.ManageCrudTestForm();
            forms.put(FORM_BEAN_NAME,form);
        }
        return form;
    }

    // crud-controller merge-point
}
