// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SessionDaoBase.vsl in andromda-ejb3-cartridge.
//
package org.andromda.howto2.rental;

/**
 * <p>
 * Base EJB3 DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>org.andromda.howto2.rental.Car</code>.
 * </p>
 *
 * @see org.andromda.howto2.rental.CarDao
 */
@javax.ejb.TransactionAttribute(javax.ejb.TransactionAttributeType.REQUIRED)
@javax.ejb.Local({org.andromda.howto2.rental.CarDao.class})
public abstract class CarDaoBase
    implements org.andromda.howto2.rental.CarDao
{
    // ------ Session Context Injection ------

    @javax.annotation.Resource
    protected javax.ejb.SessionContext context;

    // ------ Persistence Context Injection --------

    /**
     * Inject persistence context howtomodelcaching
     */
    @javax.persistence.PersistenceContext(unitName = "howtomodelcaching")
    protected javax.persistence.EntityManager emanager;

    /**
     * @see org.andromda.howto2.rental.CarDao#load(int,)
     */
    public Object load(final int transform, final java.lang.Long id)
        throws org.andromda.howto2.rental.CarDaoException
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Car.load - 'id' can not be null");
        }
        try
        {
            final Object entity = (org.andromda.howto2.rental.Car)emanager.find(org.andromda.howto2.rental.Car.class, id);
            return transformEntity(transform, (org.andromda.howto2.rental.Car)entity);
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#load()
     */
    public org.andromda.howto2.rental.Car load( final java.lang.Long id)
        throws org.andromda.howto2.rental.CarDaoException
    {
        return (org.andromda.howto2.rental.Car)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#loadAll()
     */
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<org.andromda.howto2.rental.Car> loadAll()
        throws org.andromda.howto2.rental.CarDaoException
    {
        return (java.util.Collection<org.andromda.howto2.rental.Car>)this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
        throws org.andromda.howto2.rental.CarDaoException
    {
        try
        {
            javax.persistence.Query query = emanager.createNamedQuery("Car.findAll");
            java.util.List<org.andromda.howto2.rental.Car> results = query.getResultList();
            this.transformEntities(transform, results);
            return results;
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#create(org.andromda.howto2.rental.Car)
     */
    public org.andromda.howto2.rental.Car create(org.andromda.howto2.rental.Car car)
        throws org.andromda.howto2.rental.CarDaoException
    {
        return (org.andromda.howto2.rental.Car)this.create(TRANSFORM_NONE, car);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#create(int transform, org.andromda.howto2.rental.Car)
     */
    public Object create(final int transform, final org.andromda.howto2.rental.Car car)
        throws org.andromda.howto2.rental.CarDaoException
    {
        if (car == null)
        {
            throw new IllegalArgumentException(
                "Car.create - 'car' can not be null");
        }

        try
        {
            emanager.persist(car);
            emanager.flush();
            return this.transformEntity(transform, car);
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#create(java.util.Collection<org.andromda.howto2.rental.Car>)
     */
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<org.andromda.howto2.rental.Car> create(final java.util.Collection<org.andromda.howto2.rental.Car> entities)
        throws org.andromda.howto2.rental.CarDaoException
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#create(int, java.util.Collection<org.andromda.howto2.rental.Car>)
     */
    @SuppressWarnings({"unchecked"})
    public java.util.Collection create(final int transform, final java.util.Collection<org.andromda.howto2.rental.Car> entities)
        throws org.andromda.howto2.rental.CarDaoException
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Car.create - 'entities' can not be null");
        }
        java.util.Collection results = new java.util.ArrayList();
        try
        {
            for (final java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
            {
                results.add(create(transform, (org.andromda.howto2.rental.Car)entityIterator.next()));
            }
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
        return results;
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#create(java.lang.String, java.lang.String, org.andromda.howto2.rental.CarType)
     */
    public org.andromda.howto2.rental.Car create(
        java.lang.String serial,
        java.lang.String name,
        org.andromda.howto2.rental.CarType type)
        throws org.andromda.howto2.rental.CarDaoException
    {
        return (org.andromda.howto2.rental.Car)this.create(TRANSFORM_NONE, serial, name, type);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#create(int, java.lang.String, java.lang.String, org.andromda.howto2.rental.CarType)
     */
    public Object create(
        final int transform,
        java.lang.String serial,
        java.lang.String name,
        org.andromda.howto2.rental.CarType type)
        throws org.andromda.howto2.rental.CarDaoException
    {
        org.andromda.howto2.rental.Car entity = new org.andromda.howto2.rental.Car();
        entity.setSerial(serial);
        entity.setName(name);
        entity.setType(type);
        return this.create(transform, entity);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#create(java.lang.String, org.andromda.howto2.rental.Person, java.lang.String, org.andromda.howto2.rental.CarType)
     */
    public org.andromda.howto2.rental.Car create(
        java.lang.String name,
        org.andromda.howto2.rental.Person owner,
        java.lang.String serial,
        org.andromda.howto2.rental.CarType type)
        throws org.andromda.howto2.rental.CarDaoException
    {
        return (org.andromda.howto2.rental.Car)this.create(TRANSFORM_NONE, name, owner, serial, type);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#create(int, java.lang.String, org.andromda.howto2.rental.Person, java.lang.String, org.andromda.howto2.rental.CarType)
     */
    public Object create(
        final int transform,
        java.lang.String name,
        org.andromda.howto2.rental.Person owner,
        java.lang.String serial,
        org.andromda.howto2.rental.CarType type)
        throws org.andromda.howto2.rental.CarDaoException
    {
        org.andromda.howto2.rental.Car entity = new org.andromda.howto2.rental.Car();
        entity.setName(name);
        entity.setOwner(owner);
        entity.setSerial(serial);
        entity.setType(type);
        return this.create(transform, entity);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#update(org.andromda.howto2.rental.Car)
     */
    public void update(org.andromda.howto2.rental.Car car)
        throws org.andromda.howto2.rental.CarDaoException
    {
        if (car == null)
        {
            throw new IllegalArgumentException(
                "Car.update - 'car' can not be null");
        }
        try
        {
            emanager.merge(car);
            emanager.flush();
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#update(java.util.Collection<org.andromda.howto2.rental.Car>)
     */
    public void update(final java.util.Collection<org.andromda.howto2.rental.Car> entities)
        throws org.andromda.howto2.rental.CarDaoException
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Car.update - 'entities' can not be null");
        }
        try
        {
            for (final java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
            {
                update((org.andromda.howto2.rental.Car)entityIterator.next());
            }
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#remove(org.andromda.howto2.rental.Car)
     */
    public void remove(org.andromda.howto2.rental.Car car)
        throws org.andromda.howto2.rental.CarDaoException
    {
        if (car == null)
        {
            throw new IllegalArgumentException(
                "Car.remove - 'car' can not be null");
        }
        try
        {
            emanager.remove(car);
            emanager.flush();
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
        throws org.andromda.howto2.rental.CarDaoException
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Car.remove - 'id' can not be null");
        }
        try
        {
            final org.andromda.howto2.rental.Car entity = this.load(id);
            if (entity != null)
            {
                this.remove(entity);
            }
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#remove(java.util.Collection<org.andromda.howto2.rental.Car>)
     */
    public void remove(java.util.Collection<org.andromda.howto2.rental.Car> entities)
        throws org.andromda.howto2.rental.CarDaoException
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Car.remove - 'entities' can not be null");
        }
        try
        {
            for (final java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
            {
                remove((org.andromda.howto2.rental.Car)entityIterator.next());
            }
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#findByType(org.andromda.howto2.rental.CarType)
     */
    public java.util.List findByType(org.andromda.howto2.rental.CarType type)
        throws org.andromda.howto2.rental.CarDaoException
    {
        return this.findByType(TRANSFORM_NONE, type);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#findByType(java.lang.String, org.andromda.howto2.rental.CarType)
     */
    public java.util.List findByType(final java.lang.String queryString, final org.andromda.howto2.rental.CarType type)
        throws org.andromda.howto2.rental.CarDaoException
    {
        return this.findByType(TRANSFORM_NONE, queryString, type);
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#findByType(int, org.andromda.howto2.rental.CarType)
     */
    public java.util.List findByType(final int transform, final org.andromda.howto2.rental.CarType type)
        throws org.andromda.howto2.rental.CarDaoException
    {
        try
        {
            javax.persistence.Query queryObject = emanager.createNamedQuery("Car.findByType");
            queryObject.setParameter("type", type.name());
            queryObject.setHint("org.hibernate.cacheRegion", "/org/andromda/howto2/rental/Car_findByType");
            java.util.List results = queryObject.getResultList();
            transformEntities(transform, results);
            return results;
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#findByType(int, java.lang.String, org.andromda.howto2.rental.CarType)
     */
    public java.util.List findByType(final int transform, final java.lang.String queryString, final org.andromda.howto2.rental.CarType type)
        throws org.andromda.howto2.rental.CarDaoException
    {
        try
        {
            javax.persistence.Query queryObject = emanager.createQuery(queryString);
            queryObject.setParameter("type", type.name());
            queryObject.setHint("org.hibernate.cacheRegion", "/org/andromda/howto2/rental/Car_findByType");
            java.util.List results = queryObject.getResultList();
            transformEntities(transform, results);
            return results;
        }
        catch (Exception ex)
        {
            throw new org.andromda.howto2.rental.CarDaoException(ex);
        }
    }

    /**
     * @see org.andromda.howto2.rental.CarDao#allCarsAreRented()
     */
    public boolean allCarsAreRented()
    {
        try
        {
            return this.handleAllCarsAreRented();
        }
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing 'org.andromda.howto2.rental.CarDao.allCarsAreRented()' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #allCarsAreRented()}
      */
    protected abstract boolean handleAllCarsAreRented()
        throws java.lang.Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>org.andromda.howto2.rental.CarDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link org.andromda.howto2.rental.CarDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected Object transformEntity(final int transform, final org.andromda.howto2.rental.Car entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,org.andromda.howto2.rental.Car)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>org.andromda.howto2.rental.CarDao</code>
     * @param entities the collection of entities to transform
     * @return the same collection as the argument, but this time containing the transformed entities
     * @see #transformEntity(int,org.andromda.howto2.rental.Car)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

}