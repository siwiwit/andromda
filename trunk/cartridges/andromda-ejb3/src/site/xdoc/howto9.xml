<?xml version="1.0" encoding="iso-8859-1"?>
<document>
    <properties>
        <author email="vancek@users.sourceforge.net">Vance Karimi</author>
        <title>AndroMDA - EJB3 - HowTo Inheritance</title>
    </properties>
    <body>
        <section name="Inheritance">
            <p>
                The EJB 3.0 specification introduces inheritance:
            </p>
            <i>
                <p>
              An entity may inherit from another entity class. Entities support inheritance, polymorphic
              associations, and polymorphic queries.
                </p>
                <p>
              Both abstract and concrete classes can be entities.  Both abstract and concrete classes can be
              annotated with the <code>Entity</code> annotation, mapped as entities, and queried for as entities.
                </p>
                <p>
            		Entities can extend non-entity classes and non-entity classes can extend entity classes.
                </p>
            </i>
            <p>
                The following howto should give you a basic understanding on how to model your inheritance
                hierarchies using the EJB3 cartridge.
            </p>
            <a name="Non_Inheriting_Entities"/>
			<subsection name="Non Interhiting Entities">
                <p>
                    In a mapped superclass scenario, an entity inherits from a superclass that has persistent state 
                    and mapping information, but the super class isn't an entity and is not mapped to a relation table.
                    This is the strategy employed by the EJB3 cartridge when generating non-inheriting entities if
                    <code>instance</code> scoped operations are modelled on the entity.
                </p>
                <p>
                    A mapped superclass is generated containing
                    almost all of the mapping information.  The subclass contains only the <code>@Entity</code>
                    , <code>@Table</code> and <code>@EntityListeners</code> annotations.  All attribute
                    and relationship mapping information exists in the mapped superclass.  The mapped superclass
                    is regenerated on every run, however the subclass is not.
                </p>
            </subsection>
            <a name="Mapped_Superclasses"/>
			<subsection name="Mapped Superclasses">
                <p>
                    To explicity defined an entity as a mapped superclass, model the 
                    <![CDATA[<<MappedSuperclass>>]]> stereotype on the root entity.  
                </p>
                <p class="highlight">
                    You must explicity define your identifiers either in the mapped superclass or in the inheriting
                    subclass entities.
                </p> 
                <p>
                    The following is an example of this type of inheritance where the <code>Vehicle</code> mapped
                    superclass contains the identifier which is automatically used by the <code>Car</code> entity.
                </p>
				<p>
					<img src="images/org/andromda/test/9/a/uml.gif"/>
				</p>
				<p>
					<ul>
						<li class="gen"><p>Auto-generated source that does not need manual editing</p></li>
						<li class="impl"><p>Auto-generated source that should be edited manually</p></li>
						<li class="changed"><p>File that is affected by the modifications applied in this section</p></li>
					</ul>
				</p>
                <p>
                    <ul>
                        <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto9/a/Vehicle.java"><code>Vehicle.java</code></a></p></li>
                        <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto9/a/CarEmbeddable.java"><code>CarEmbeddable.java</code></a></p></li>
                        <li class="impl"><p><a class="changed" href="src/org/andromda/test/howto9/a/Car.java"><code>Car.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/CarType.java"><code>CarType.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/CarDao.java"><code>CarDao.java</code></a></p></li>
                        <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto9/a/CarDaoBase.java"><code>CarDaoBase.java</code></a></p></li>
                        <li class="impl"><p><a href="src/org/andromda/test/howto9/a/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/CarDaoException.java"><code>CarDaoException.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/Person.java"><code>Person.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/PersonDao.java"><code>PersonDao.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/PersonDaoBase.java"><code>PersonDaoBase.java</code></a></p></li>
                        <li class="impl"><p><a href="src/org/andromda/test/howto9/a/PersonDaoImpl.java"><code>PersonDaoImpl.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/PersonDaoException.java"><code>PersonDaoException.java</code></a></p></li>
                        <li class="impl"><p><a href="src/org/andromda/test/howto9/a/RentalServiceBean.java"><code>RentalServiceBean.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/RentalServiceRemote.java"><code>RentalServiceRemote.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/RentalServiceDelegate.java"><code>RentalServiceDelegate.java</code></a></p></li>
                        <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto9/a/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/RentalServiceException.java"><code>RentalServiceException.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/a/RentalException.java"><code>RentalException.java</code></a></p></li>
                    </ul>
                </p>
                <p>
                    It's worthwhile to note that only a <code>VehicleEmbeddable</code> class is generated which 
                    contains all the mapping information.  
                    This class is regenerated every time AndroMDA runs; any manual changes to this
                    class is overwritten.
                </p>
                <p>
                    A <code>CarEmbeddable</code> mapped superclass with all mapping information 
                    is generated and a <code>Car</code> implementation entity classes.  Remember that this only happens
                    if the entity contains <code>instance</code> scoped operations.
                </p>
                <p>
                    The the Person entity operates under the normal EJB3 cartridge
                    guidelines since there is no inheritance hierarchy for this entity.  Therefore, only a 
                    <code>Person</code> class is generated and should not be modified.
                </p>
			</subsection>
            <a name="Single_Table_Strategy"/>
            <subsection name="Single Table Strategy">
                <p>
                    In this strategy, the complete class hierarchy is persisted to a single table.  To differentiate
                    between class types, a discriminator column is used.  The discriminator column type is
                    specified in the root class along with the inheritance strategy employed.  All classes need to
                    specify the discriminator value associated to each class in the hierarchy.
                </p>
                <p>
                    If the query is based on the root class in the hierarchy, the query is polymorphic which implies
                    that entity subclass instances will be returned.  
                </p>
                <p>
                    <b>Pros:</b> Good support for polymorphic relationships between entities and queries over the class
                    hierarchy.
                </p>
                <p>
                    <b>Cons:</b> Columns corresponding to state of subclasses must be nullable.
                </p>
                <p>
                    The EJB3 cartridge will assume a single table mapping strategy when you model an inheritance
                    hierarchy between entities, unless specified otherwise.
                </p>
				<p>
					<img src="images/org/andromda/test/9/b/uml.gif"/>
				</p>
				<p>
					<ul>
						<li class="gen"><p>Auto-generated source that does not need manual editing</p></li>
						<li class="impl"><p>Auto-generated source that should be edited manually</p></li>
						<li class="changed"><p>File that is affected by the modifications applied in this section</p></li>
					</ul>
				</p>
                <p>
                    <ul>
                        <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto9/b/Vehicle.java"><code>Vehicle.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/VehicleDao.java"><code>VehicleDao.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/VehicleDaoBase.java"><code>VehicleDaoBase.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/VehicleDaoImpl.java"><code>VehicleDaoImpl.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/VehicleDaoException.java"><code>VehicleDaoException.java</code></a></p></li>
                        <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto9/b/CarEmbeddable.java"><code>CarEmbeddable.java</code></a></p></li>
                        <li class="impl"><p><a class="changed" href="src/org/andromda/test/howto9/b/Car.java"><code>Car.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/CarType.java"><code>CarType.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/CarDao.java"><code>CarDao.java</code></a></p></li>
                        <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto9/b/CarDaoBase.java"><code>CarDaoBase.java</code></a></p></li>
                        <li class="impl"><p><a href="src/org/andromda/test/howto9/b/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/CarDaoException.java"><code>CarDaoException.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/Person.java"><code>Person.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/PersonDao.java"><code>PersonDao.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/PersonDaoBase.java"><code>PersonDaoBase.java</code></a></p></li>
                        <li class="impl"><p><a href="src/org/andromda/test/howto9/b/PersonDaoImpl.java"><code>PersonDaoImpl.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/PersonDaoException.java"><code>PersonDaoException.java</code></a></p></li>
                        <li class="impl"><p><a href="src/org/andromda/test/howto9/b/RentalServiceBean.java"><code>RentalServiceBean.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/RentalServiceRemote.java"><code>RentalServiceRemote.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/RentalServiceDelegate.java"><code>RentalServiceDelegate.java</code></a></p></li>
                        <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto9/b/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/RentalServiceException.java"><code>RentalServiceException.java</code></a></p></li>
                        <li class="gen"><p><a href="src/org/andromda/test/howto9/b/RentalException.java"><code>RentalException.java</code></a></p></li>
                    </ul>
                </p>
                <p>
                    Notice in the previous example where <code>Vehicle</code> was defined as a mapped superclass,
                    no DAO components were generated.  In this example, <code>Vehicle</code> is an entity and the
                    the corresponding DAO components were generated. The discriminator components are discussed 
                    below.
                </p>
            </subsection>
            <a name="Discriminator_Components"/>
            <subsection name="Discriminator Components">
                <p>
                    The EJB3 cartridge provides a few tagged values to customise the default values for the
                    discriminator components for a single table inheritance mapping strategy.
                </p>
                <p>
                    The discriminator column name defaults to <code>TYPE</code> of type <code>STRING</code>.  To
                    set the discriminator column name, you model the 
                    <code>@andromda.persistence.discriminator.colum.name</code> tagged value on the root class.
                </p>
                <p>
                    To specify the discriminator colum type, you model the 
                    <code>@andromda.persistence.discriminator.type</code> tagged value on the root class.  Your column
                    type options are:
                    <ul>
                        <li><p>STRING</p></li>
                        <li><p>INTEGER</p></li>
                        <li><p>CHAR</p></li>
                    </ul>
                </p>
                <p>
                    You can set the discriminator column length if the colum type is specified as
                    <code>STRING</code> by modelling the <code>@andromda.persistence.discriminator.column.length</code>
                    tagged value on the root class.  The default is 10.
                </p>
                <p>
                    In some cases, you may want to explicity define the SQL fragment when generating the DDL
                    for the discriminator column.  To do this, simply model the
                    <code>@andromda.persistence.discriminator.colum.definition</code> tagged value on the
                    root class.
                </p>
                <p>
                    Most importantly, you can model the <code>@andromda.persistence.discriminator.value</code>
                    tagged value <b>on all classes</b> in the hierarchy.  This value indicates the row in the table
                    is an entity of the annotated entity type.  This is shown in the above diagram on entities
                    Vehicle and Car.  However, by default, if no discriminator value is specified for single
                    table mapping strategy, the cartridge will capitalize and assign the first letter of the entity
                    as it's discriminator value.
                </p>
            </subsection>
            <a name="Table_Per_Class_Strategy"/>
			<subsection name="Table Per Class Strategy">
                <p>
                    With this strategy, a table exists per class in the hierarchy and each table is comprised of
                    all the properties persisted by that class.  There is no need to define discriminator column
                    types or values for this mapping strategy.
                </p>
                <p>
                    If the query is based on the root class in the hierarchy, the query is polymorphic which implies
                    that entity subclass instances will be returned.
                </p>
                <p>
                    <b>Cons:</b> Poor support for polymorphic relationships. A separate SQL query per subclass is 
                    required before queries are executed.
                </p>
                <p>
                    Since the default inheritance mapping strategy is single table per hierarchy, you can model
                    the <code>@andromda.persistence.inheritance</code> tagged value and set it to 
                    <code>TABLE_PER_CLASS</code> on the root class of the hierarchy.
                    All subclasses follow this same strategy.
                </p>
			</subsection>
            <a name="Table_Join_Strategy"/>
            <subsection name="Table Join Strategy">
                <p>
                    This strategy has a table per class in the hierarchy, however the subclass tables are comprised
                    of ONLY the extra attributes defined in the subclass and not the inheriting fields.
                    There is no need to define discriminator column types or values here.  The primary key column(s)
                    of the subclass table serves as a foreign key to the primary key of the superclass table.
                </p>
                <p>
                    If the query is based on the root class in the hierarchy, the query is polymorphic which implies
                    that entity subclass instances will be returned.
                </p>
                <p>
                    <b>Cons:</b> Perhaps more than 1 join operation is needed to instantiate instances of a subclass.
                </p>
                <p>
                    Since the default inheritance mapping strategy is single table per hierarchy, you can model
                    the <code>@andromda.persistence.inheritance</code> tagged value and set it to 
                    <code>JOINED</code> on the root class of the hierarchy.
                    All subclasses follow this same strategy.
                </p>
            </subsection>
            <a name="Helpful_Hints"/>
            <subsection name="Helpful Hints">
                <p>
                    The PFD EJB 3.0 spec says:
                </p>
                <i>
                    <p>
                		Support for the table per class inheritance mapping strategy is optional in this release.
                    </p>
                    <p>
		                Support for the combination of inheritance strategies within a single entity inheritance 
		                hierarchy is not required by this specification.
		            </p>
                </i>
            </subsection>
        </section>
        <section name="Next">
            <p>
                To learn how to develop Message Driven Beans, click <a href="howto10.html">here</a>.
            </p>
        </section>
    </body>
</document>
