<?xml version="1.0" encoding="iso-8859-1"?>
<document>
    <properties>
        <author email="vancek@users.sourceforge.net">Vance Karimi</author>
        <title>AndroMDA - EJB3 - HowTo Enumerations</title>
    </properties>
    <body>
        <section name="Enumerations">
            <p>
                You might have noticed the attribute named <code>carType</code> in the <code>Car</code> entity. It is
                is of type <code>String</code>, while in fact it makes more sense to restrict the set of possible 
                values for this attribute. This can be achieved using <i>type-safe enumerations</i>. 
                This is the topic discussed on this page.
            </p>
            <p>
                Type-safe enumerations are modelled by means of a regular class, only this time you need
                to use the <![CDATA[<<Enumeration>>]]> stereotype. All attributes on such an enumeration will
                be known as enumeration literals, they will assume the default values you assign to the attributes,
                or the name of the attribute if the default value is missing.
            </p>
            <p>
                In the EJB3 cartridge, enumerations are <i>NOT</i> persisted behind the scenes, unlike the 
                Hibernate framework, however we can still use these enumeration types for entity attributes.
            </p>
            <p>
                In the next picture we have replaced the type of the <code>type</code> attribute in the 
                <code>Car</code> entity from <code>datatype::String</code> to 
                <code>org.andromda.test.howto5.a.CarType</code> and set the enumeration type to <code>STRING</code>
                (default being <code>ORDINAL</code>).
            </p>
            <p>
                <img src="images/org/andromda/test/5/a/uml.gif"/>
            </p>
            <p>
                <ul>
                    <li class="gen"><p>Auto-generated source that does not need manual editing</p></li>
                    <li class="impl"><p>Auto-generated source that should be edited manually</p></li>
                    <li class="changed"><p>File that is affected by the modifications applied in this section</p></li>
                </ul>
            </p>
            <p>
                <ul>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto5/a/CarEmbeddable.java"><code>CarEmbeddable.java</code></a></p></li>
                    <li class="impl"><p><a href="src/org/andromda/test/howto5/a/Car.java"><code>Car.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto5/a/CarType.java"><code>CarType.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto5/a/CarDao.java"><code>CarDao.java</code></a></p></li>
                    <li class="gen"><p><a class="changed" href="src/org/andromda/test/howto5/a/CarDaoBase.java"><code>CarDaoBase.java</code></a></p></li>
                    <li class="impl"><p><a href="src/org/andromda/test/howto5/a/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/CarDaoException.java"><code>CarDaoException.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/Person.java"><code>Person.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/PersonDao.java"><code>PersonDao.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/PersonDaoBase.java"><code>PersonDaoBase.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/PersonDaoImpl.java"><code>PersonDaoImpl.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/PersonDaoException.java"><code>PersonDaoException.java</code></a></p></li>
                    <li class="impl"><p><a href="src/org/andromda/test/howto5/a/RentalServiceBean.java"><code>RentalServiceBean.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/RentalServiceRemote.java"><code>RentalServiceRemote.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/ServiceDelegateBase.java"><code>ServiceDelegateBase.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/RentalServiceDelegate.java"><code>RentalServiceDelegate.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></p></li>
                    <li class="gen"><p><a href="src/org/andromda/test/howto5/a/RentalServiceException.java"><code>RentalServiceException.java</code></a></p></li>
                </ul>
            </p>
            <p>
                The <code>enum</code> declaration in the <code>CarType</code> class defines an <i>enum type</i> class.
            </p>
            <a name="Literals"/>
            <subsection name="Literals">
                <p>
                    Note that in this example the enumeration attributes have been specified using regular variables
                    in Java notation, the <em>initial value</em> has been specified using capitals.
                    Using the EJB3 cartridge, enum types ignore the attribute name.  Therefore, in the EJB3 cartridge
                    you CANNOT have a value that differs from the attribute name.  This option is not available.
<source><![CDATA[
sedan : String = SEDAN
liftback : String = LIFTBACK
stationWagon : String = STATION_WAGON
]]></source>
                    The following is perfectly equivalent, and shorter in use, it specifies the attribute name using
                    capitals and omits the initial value:
<source><![CDATA[
SEDAN : String
LIFTBACK : String
STATION_WAGON : String
]]></source>
                </p>
                <p class="highlight">
                    The latter is recommended for Java applications where it preferred to have literal names matching
                    the persisted values; the enumeration literals will be constants
                    and therefore a capitalized name is desired, and since the name is exactly what will be persisted
                    it is very easy in use too.
                </p>
            </subsection>
            <a name="Enumeration_Types"/>
            <subsection name="Enumeration Types">
                <p>
                    In the above diagram, the tagged value <code>@andromda.persistence.enumeration.type</code>
                    specifies the enumeration type for the <code>type</code> attribute of the <code>Car</code>
                    entity as <code>STRING</code> type.  If your type-safe enumeration has attributes of
                    type String and you wish to use these literal names, then you must specify the
                    <code>@andromda.persistence.enumeration.type</code> tagged value on the entity attribute.
                </p>
                <p>
                    To use the ordinal values relating to the literals of the type-safe enumeration class,
                    you do not need to do model the <code>@andromda.persistence.enumeration.type</code>
                    tagged value.  By default, if an entity attribute has an enumeration type, the ordinal
                    values of the enumeration literals are used.
                </p>
            </subsection>
        </section>
        <section name="Next">
            <p>
                Next we'll learn how to model entity finders and have the Query Language automatically
                generated. Click <a href="howto6.html">next</a> to find out more.
            </p>
        </section>
    </body>
</document>
