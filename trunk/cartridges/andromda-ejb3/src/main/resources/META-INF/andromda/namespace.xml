<?xml version="1.0" encoding="ISO-8859-1" ?>

<namespace name="ejb3">
	<components>
		<component name="cartridge">
			<path>META-INF/andromda/cartridge.xml</path>
		</component>
		<component name="metafacades">
			<path>META-INF/andromda/metafacades.xml</path>
		</component>
		<component name="profile">
			<path>META-INF/andromda/profile.xml</path>
		</component>
	</components>
	<properties>
		<!-- namespace-propertyGroup merge-point -->
		<propertyGroup name="Outlet Properties">
			<documentation>
				Defines the locations to which output is generated.
			</documentation>
            <property name="services">
                <documentation>
                    The location to which all service classes (including the service locator(s))
                    will be generated.
                </documentation>
            </property>
			<property name="entity-beans">
				<documentation>
					The directory to which Entity POJOs are generated.
				</documentation>
			</property>
			<property name="entity-impls">
				<documentation>
					The location to which Entity POJO implementation
					files are generated.
				</documentation>
			</property>
			<property name="entity-config">
			    <documentation>
			       The location where the persistence XML descriptor
			       is generated.
			    </documentation>
			</property>
			<property name="session-beans">
				<documentation>
					The directory to which Session Bean files are
					generated.
				</documentation>
			</property>
			<property name="session-impls">
				<documentation>
					The directory to which Session Bean implementation
					files are generated.
				</documentation>
			</property>
			<property name="session-config">
			    <documentation>
			        The location where the ejb-jar.xml XML descriptor
			        is generated.
			    </documentation>
			</property>
			<property name="message-driven-beans">
				<documentation>
					The directory to which Message Driven Bean files 
					are generated.
				</documentation>
			</property>
			<property name="message-driven-impls">
				<documentation>
					The directory to which Message Driven Bean 
					implementation files are generated.
				</documentation>
			</property>
			<property name="interceptors">
			    <documentation>
			        The directory to which interceptor classes
			        for session beans or message driven beans
			        are generated.
			    </documentation>
			</property>
			<property name="enumerations">
			    <documentation>
			        The directory to which entity JDK 1.5
			        enumerations are generated.
			    </documentation>
			</property>
		</propertyGroup>
		<propertyGroup name="JDBC">
		    <property name="entityManagerName" required="false">
		        <documentation>
		            The name assigned to the entity manager.  If no name
		            is specified, the name of the containing persistence
		            archive without the .par extension is used.
		        </documentation>
		    </property>
		    <property name="entityManagerJTADataSource">
		    	<default>java:/DefaultDS</default>
		    	<documentation>
		    	    Specifies the global JNDI name of the JTA data source.
		    	</documentation>
		    </property>
            <property name="hibernateHbm2DDLAuto" required="false">
            	<default>create</default>
                <documentation>
                    Automatically export schema DDL to the database when deployed. 
                    With create-drop, the database schema will be dropped when
                    the entity is undeployed. Permitted values are:
                    <ul>
                        <li>update</li>
                        <li>create</li>
                        <li>create-drop</li>
                        <li>none</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateDialect" required="false">
            	<default>org.hibernate.dialect.MySQLDialect</default>
            	<documentation>
            	    The SQL dialect of the database.
            	    <ul>
            	        <li>org.hibernate.dialect.MySQLDialect</li>
            	        <li>org.hibernate.dialect.MySQLInnoDBDialect</li>
            	        <li>org.hibernate.dialect.MySQLMyISAMDialect</li>
            	        <li>org.hibernate.dialect.HSQLDialect</li>
            	        <li>org.hibernate.dialect.PostgreSQLDialect</li>
            	        <li>org.hibernate.dialect.DB2Dialect</li>
            	        <li>org.hibernate.dialect.OracleDialect</li>
            	        <li>org.hibernate.dialect.Oracle9Dialect</li>
            	        <li>org.hibernate.dialect.SybaseDialect</li>
            	        <li>org.hibernate.dialect.SQLServerDialect</li>
            	        <li>org.hibernate.dialect.SAPDBDialect</li>
            	        <li>org.hibernate.dialect.InformixDialect</li>
            	        <li>org.hibernate.dialect.IngresDialect</li>
            	        <li>org.hibernate.dialect.ProgressDialect</li>
            	        <li>org.hibernate.dialect.InterbaseDialect</li>
            	        <li>org.hibernate.dialect.PointbaseDialect</li>
            	        <li>org.hibernate.dialect.FrontbaseDialect</li>
            	        <li>org.hibernate.dialect.FirebirdDialect</li>
            	    </ul>
            	</documentation>
            </property>
            <property name="hibernateShowSql" required="false">
                <documentation>
                    Whether or not to log SQL statements.
                </documentation>
            </property>
            <property name="hibernateMaxFetchDepth" required="false">
                <documentation>
                    Sets a maximum "depth" for the outer join fetch tree. Recommended values between 0 and 3
                </documentation>
            </property>
            <property name="hibernateJdbcFetchSize" required="false">
                <documentation>
                    A non-zero value determines the JDBC fetch size
                </documentation>
            </property>
            <property name="hibernateJdbcBatchSize" required="false">
                <documentation>
                    A nonzero value enables use of JDBC2 batch updates by Hibernate.
                    Recommended values between 5 and 30
                </documentation>
            </property>
            <property name="hibernateJdbcUseScrollableResultSet" required="false">
                <documentation>
                    Whether or not to enable use of JDBC2 scrollable resultsets by Hibernate.
                    This property is only necessary when using user supplied connections.
                    Hibernate uses connection metadata otherwise.
                </documentation>
            </property>
            <property name="hibernateJdbcUseStreamsForBinary" required="false">
                <documentation>
                    Whether or not to use streams when writing / reading binary or serializable types to/from JDBC.
                </documentation>
            </property>
		</propertyGroup>
		<propertyGroup name="Cache">
            <property name="hibernateCacheProvider" required="false">
                <documentation>
                    Defines Hibernate Cache Provider implementation class.
                    Possible values for JBoss4/Hibernate are:
                    <ul>
                       <li>org.hibernate.cache.HashtableCacheProvider</li>
                       <li>org.jboss.ejb3.entity.TreeCacheProviderHook</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateTreecacheMbeanObject" required="false">
                <documentation>
                    Defines the Hibernate cache MBean object name
                    used in JBoss4.
                    <ul>
                        <li>jboss.cache:service=EJB3EntityTreeCache</li>
                    </ul>
                </documentation>
            </property>
		</propertyGroup>
        <propertyGroup name="Transactions">
            <property name="hibernateTransactionFlushBeforeCompletion" required="false">
                <documentation>
                    Define if the session will automatically be flushed
                    during the before completion phase of the
                    transaction.  Handy options for CMT demarcation.
                    Possible values are:
                    <ul>
                        <li>true</li>
                        <li>false</li>
                    </ul>
                </documentation>
            </property>
            <property name="hibernateTransactionAutoCloseSession" required="false">
                <documentation>
                    Define if the session will be automatically closed
                    during the after completion phase of the transaction.
                    Handy option when using CMT demarcation.
                    Possible values are:
                    <ul>
                        <li>true</li>
                        <li>false</li>
                    </ul>
                </documentation>
            </property>
        </propertyGroup>
		<propertyGroup name="Name Patterns">
			<property name="entityNamePattern">
				<default>{0}</default>
				<documentation>
					The pattern to use when constructing an entity name.
					<em>{0}</em>
					is used to represent the entity name in the model,
					so if you specified a value of
					<code>{0}Entity</code>
					all the entities generated would have a suffix of
					"Entity".
				</documentation>
			</property>
			<property name="entityImplementationNamePattern">
				<default>{0}Impl</default>
				<documentation>
					The pattern to use when constructing the entity
					implementation name.
				</documentation>
			</property>
			<property name="entityListenerNamePattern">
				<default>{0}Listener</default>
				<documentation>
					The pattern to use when constructing an entity
					listener class name.
				</documentation>
			</property>
			<property name="entityEmbeddableNamePattern">
				<default>{0}Embeddable</default>
				<documentation>
					The pattern to use when constructing an entity
					embeddable super class name.
				</documentation>
			</property>
			<property name="serviceNamePattern">
				<default>{0}Bean</default>
				<documentation>
					The pattern to use when constructing a service bean name.
					<em>{0}</em>
					is used to represent the service bean name in the model,
					so if you specified a value of
					<code>{0}Bean</code>
					all the entities generated would have a suffix of
					"Bean".
				</documentation>
			</property>
			<property name="serviceLocalInterfaceNamePattern">
				<default>{0}Local</default>
				<documentation>
					The pattern to use when constructing the service
					bean local interface name.
				</documentation>
			</property>
			<property name="serviceRemoteInterfaceName">
				<default>{0}Remote</default>
				<documentation>
					The pattern to use when constructing the service
					bean remote interface name.
				</documentation>
			</property>
			<property name="serviceImplementationNamePattern">
				<default>{0}BeanImpl</default>
				<documentation>
					The pattern to use when constructing the service
					bean implementation name.
				</documentation>
			</property>
			<property name="serviceListenerNamePattern">
				<default>{0}Listener</default>
				<documentation>
					The pattern to use when constructing the service
					bean listener class name.
				</documentation>
			</property>
			<property name="serviceDelegateNamePattern">
			    <default>{0}Delegate</default>
			    <documentation>
			        The pattern to use when constructing the service
			        bean delegate class name.
			    </documentation>
			</property>
			<property name="messageDrivenNamePattern">
				<default>{0}MDBBean</default>
				<documentation>
					The pattern to use when construction the JMS message driven
					bean class name.
				</documentation>
			</property>
			<property name="messageDrivenListenerNamePattern">
				<default>{0}Listener</default>
				<documentation>
					The pattern to use when constucting the JMS message driven
					bean listener class name.
				</documentation>
			</property>
			<property name="messageDrivenImplementationNamePattern">
				<default>{0}MDBBeanImpl</default>
				<documentation>
					The pattern to use when constructing the JMS message driven
					bean implementation class name.
				</documentation>
			</property>
			<property name="interceptorNamePattern">
			    <default>{0}</default>
			    <documentation>
			        The pattern to use when constructing the interceptor
			        class name.
			    </documentation>
			</property>
			<property name="entityCompositePrimaryKeyNamePattern">
			    <default>{0}PK</default>
			    <documentation>
			        The pattern to use when constructing the composite
			        primary key class name.
			    </documentation>
			</property>
			<property name="jndiNamePrefix" required="false">
				<documentation>
					The prefix to give to the EJB JNDI names (this
					allows the same EJBs to be deployed multiple times
					in the same container)
				</documentation>
			</property>
		</propertyGroup>
		<propertyGroup name="MDB Properties">
			<property name="messageDrivenDestinationType">
				<default>javax.jms.Queue</default>
				<documentation>
					The default destination type for a JMS message
					driven bean.  Possible values are:
					<ul>
						<li>javax.jms.Queue</li>
						<li>javax.jms.Topic</li>
					</ul>
				</documentation>
			</property>
		</propertyGroup>
		<propertyGroup name="Other Properties">
			<property name="persistenceContainerName">
				<default>jboss</default>
				<documentation>
					The default persistence container engine name.
					Used when specifying specific annotations
					for different persistence containers.
					Possible values are:
					<ul>
						<li>jboss</li>
						<li>weblogic</li>
					</ul>
				</documentation>
			</property>
			<property name="persistenceContextUnitName" required="false">
			    <documentation>
			        Specifies the default persistence context
			        unit name associated with the default Entity
			        Manager.
			    </documentation>
			</property>
			<property name="entityAccessType">
				<default>PROPERTY</default>
				<documentation>
					The value of the
					<code>AccessType</code>
					element of an annotation of the entity that
					determines whether to use properties or fields to
					access the entity state. Currenly, AndroMDA support
					the PROPERTY value ONLY. Possible values are:
					<ul>
						<li>PROPERTY</li>
						<li>FIELD</li>
					</ul>
				</documentation>
			</property>
			<property name="entityDefaultCascade">
				<default>NONE</default>
				<documentation>
					The value of the
					<code>CascadeType</code>
					annotation of the entity association. Possible
					values are:
					<ul>
						<li>ALL</li>
						<li>PERSIST</li>
						<li>MERGE</li>
						<li>REMOVE</li>
						<li>REFRESH</li>
						<li>NONE if one does not exist</li>
					</ul>
				</documentation>
			</property>
			<property name="entityCompositeCascade" required="false">
				<documentation>
					Indicates how a UML composition should be
					interpreted to determine cascadable operations that
					are propogated to the associated entity.
					<ul>
						<li>
							If undefined, the cascade attribute is
							computed by AndroMDA. If default cascade is
							<em>all</em>
							, then cascade is
							<em>all</em>
							otherwise cascade is
							<em>REMOVE</em>
							.
						</li>
						<li>
							If ths property is defined, its value is
							generated at each occurence of a UML
							composition as the inverse side is not
							marked with a cascade annotation element
							which indicates no cascade propgation.
						</li>
					</ul>
				</documentation>
			</property>
			<property name="entityAggergationCascade" required="false">
				<documentation>
					Indicates how a UML aggreation should be interpreted
					to determine cascadable operations that are
					propogated to the associated entity.
					<ul>
						<li>
							If underfined, aggregation is not
							interpreted as a cascade value.
						</li>
						<li>
							If the property is defined, its valie is
							generated at each occurence of a UML
							aggregation ad the inverse side is not
							marked with a cascade annotation element
							which indicates no cascade propogation.
						</li>
					</ul>
				</documentation>
			</property>
			<property name="entityDefaultGeneratorType">
				<default>AUTO</default>
				<documentation>
					Default entity identifier primary key generator type
					set to AUTO unless specified using
					@andromda.persistence.column.generatorType tagged
					value.
				</documentation>
			</property>
			<property name="entityDefaultGeneratorInitialValue">
				<default>1</default>
				<documentation>
					Default generator initial value used when allocating
					id numbers from the generator.
				</documentation>
			</property>
			<property name="entityDefaultGeneratorAllocationSize">
				<default>1</default>
				<documentation>
					Default generator amount to increment by when
					allocating id number from the generator.
				</documentation>
			</property>
			<property name="entityInheritanceStrategy">
				<default>SINGLE_TABLE</default>
				<documentation>
					Defines the entity inheritance strategy used for the
					entity class hierarchy (unless overridden on an
					entity level by the
					<a
						href="profile.html#@andromda._persistence_inheritance">
						@andromda.persistence.inheritance
					</a>
					tagged value, can be the following possible values:
					<ul>
						<li>SINGLE_TABLE - table per hierarchy.</li>
						<li>
							TABLE_PER_CLASS - table per class in
							hierarchy.
						</li>
						<li>JOINED - Table per class.</li>
					</ul>
				</documentation>
			</property>
			<property name="entityDiscriminatorType">
				<default>STRING</default>
				<documentation>
					The value of the
					<code>discriminatorType</code>
					element for the Inheritance annotation of the
					entity. Possible values are:
					<ul>
						<li>STRING</li>
						<li>CHAR</li>
						<li>INTEGER</li>
					</ul>
				</documentation>
			</property>
			<property name="entityDiscriminatorColumnName">
				<default>TYPE</default>
				<documentation>
					The DiscriminatorColumn annotation defines the
					discriminator column for the SINGLE_TABLE and JOINED
					mapping inheritance strategies. The name element
					defines the name of the column to be used for the
					discriminator. It will default to
					<code>TYPE</code>
					if it is required and not specified..
				</documentation>
			</property>
			<property name="entityDefaultAssociationOptional">
				<default>true</default>
				<documentation>
					Default entity association optional attribute for
					Many-to-One and One-to-One relationships. Set using
					the @andromda.persistence.optional tagged value. If
					set to false, then non-null relationships must
					always exist.
				</documentation>
			</property>
			<property name="entityGenericFinders">
			    <default>true</default>
			    <documentation>
			        Specifies whether to include the generic finder 
			        property.  Generic finders in the entity bean include 
			        findByPrimaryKey and findAll.
			        Permitted values are:
			        <ul>
			            <li>true</li>
			            <li>false</li>
			        </ul>
			    </documentation>
			</property>
			<property name="entityDefaultEnumLiteralColumnLength">
			    <default>20</default>
			    <documentation>
			        The default column length specified for the
			        storage of a string based enumeration literal.
			    </documentation>
			</property>
			<property name="securityRealm" required="false">
				<documentation>
					Specifies the security domain to use
					for role based authorization.  Use the
					security realm to match allowed roles.
					This is only applicable for session beans.
				</documentation>
			</property>
			<property name="queryUseNamedParameters">
				<default>true</default>
				<documentation>
					Whether or not named parameters (i.e.
					':someParameter') or unnamed (i.e. '?') parameters
					should be used in the SQL queries embedded within
					the model.
					<strong>NOTE:</strong>
					Does not apply to queries written in OCL.
				</documentation>
			</property>
			<property name="valueObjectPackage">
				<default>{0}</default>
			</property>
			<property name="valueObjectName">
				<default>{0}</default>
			</property>
			<property name="entityViewType">
				<default>local</default>
				<documentation>
					The default view type accessability for an entity POJO bean.
					<ul>
						Permitted values are:
						<li>local</li>
						<li>remote</li>
						<li>both</li>
					</ul>
				</documentation>
			</property>
			<property name="serviceViewType">
				<default>remote</default>
				<documentation>
					The default view type accessability for a session bean.
					<ul>
						Permitted values are:
						<li>local</li>
						<li>remote</li>
						<li>both</li>
					</ul>
				</documentation>
			</property>
			<property name="transactionType">
				<default>REQUIRED</default>
				<documentation>
					The default value to use for transaction types.
					<ul>
						Permitted values are:
						<li>NOT_SUPPORTED</li>
						<li>SUPPORTS</li>
						<li>REQUIRED</li>
						<li>REQUIRES_NEW</li>
						<li>MANDATORY</li>
						<li>NEVER</li>
					</ul>
					<strong>NOTE:</strong>
					Can be overridden on a per entity basis with the
					<a
						href="profile.html#@andromda_ejb_transaction_type">
						@andromda.ejb.transaction.type
					</a>
					tagged value.
				</documentation>
			</property>
            <property name="serviceLocatorName">
                <default>ServiceLocator</default>
                <documentation>
                    The name to give the service locator class.
                </documentation>
            </property>
            <property name="ejb3TypesPackage">
                <default>org.andromda.ejb3</default>
                <documentation>
                    The package to which extra types are generated (i.e. ServiceLocator).
                </documentation>
            </property>
		</propertyGroup>
	</properties>
</namespace>