// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SessionLocal.vsl in andromda-ejb3-cartridge.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($service.fullyQualifiedServiceLocalInterfaceName,'.','/')}.java")

/**
 * Local component interface for the ${service.serviceName} session bean.
$service.getDocumentation(" * ")
 */
public interface ${service.serviceLocalInterfaceName}
#if($service.generalization)
    extends ${service.generalization.fullyQualifiedName}Local
#end
{
#set ($constants = $service.constants)
#if (!$constants.empty)

    // ----------- Accessors For Constants ------------
    
#**##foreach($constant in $constants)
## Only expose the method if it is public.
#*  *##if($constant.visibility == "public")
    /**
     * Get the $attribute.name constant
$constant.getDocumentation("     * ")
     */
    public $constant.type.fullyQualifiedName ${constant.getterName}();

#*  *##end
#**##end
#end
#set ($attributes = $service.instanceAttributes)
#if (!$attributes.empty)

    // --------------- Attributes ---------------------
    
#**##foreach ($attribute in $attributes)
## Only expose the method to the component interface if it is public.
#*  *##if ($attribute.visibility == "public")
    /**
     * Get the $attribute.name property
$attribute.getDocumentation("     * ")
     */
    public $attribute.type.fullyQualifiedName ${attribute.getterName}();
    
#*    *##if(!$attribute.readOnly)
    /**
     * Set the $attribute.name property
     * @param value the new value
     */
    public void ${attribute.setterName}($attribute.type.fullyQualifiedName value);
    
#*    *##end
#*  *##end
#**##end
#end
#set ($operations = $service.businessOperations)
#if (!$operations.empty)

    // ------------ Business Methods  -----------------
    
#**##foreach ($operation in $operations)
##
## Only expose methods that are not lifecycle callbacks
## Only expose public methods with local view type accessability
##
#*  *##if ($operation.viewTypeAbsoluteLocal)
    /**
$operation.getDocumentation("     * ")
     */
#*    *##set ($returnType = $operation.returnType.fullyQualifiedName)
#*    *##if ($operation.exceptionsPresent)
    public $returnType $operation.signature
        throws $operation.exceptionList;
#*    *##else
    public $returnType $operation.signature;
#*    *##end

#*  *##end
#**##end
#end
}