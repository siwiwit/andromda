// license-header java merge-point
/* Autogenerated by AndroMDA (MessageDrivenBean.vsl) - do not edit */
#if ($stringUtils.isNotBlank($mdb.packageName))
package $mdb.packageName;
#end

/**
 * Autogenerated JMS message driven EJB class for the ${mdb.messageDrivenName} bean.
 *
$mdb.getDocumentation(" * ")
 */
@javax.ejb.MessageDriven(activateConfig =
{
    @javax.ejb.ActivationConfigProperty(propertyName="destinationType", propertyValue="${mdb.destinationType}"),
    @javax.ejb.ActivationConfigProperty(propertyName="destination", propertyValue="${mdb.destination}")#if ($mdb.acknowledgeMode || $mdb.messageSelector || $mdb.subscriptionDurability),#end
    
#if ($mdb.acknowledgeMode)
    @javax.ejb.ActivationConfigProperty(propertyName="acknowledgeMode", propertyValue="${mdb.acknowledgeMode}")#if ($mdb.messageSelector || $mdb.subscriptionDurability),#end
    
#end
#if ($mdb.messageSelector)
    @javax.ejb.ActivationConfigProperty(propertyName="messageSelector", propertyValue="${mdb.messageSelector}")#if ($mdb.subscriptionDurability),#end
    
#end
#if ($mdb.subscriptionDurability)
    @javax.ejb.ActivationConfigProperty(propertyName="subscriptionDurability", propertyValue="${mdb.subscriptionDurability}")
#end
}
)
@javax.ejb.CallbackListener(${mdb.fullyQualifiedMessageDrivenListenerName}.class)
#if ($mdb.transactionManagement)
@javax.ejb.TransactionManagement(javax.ejb.TransactionManagementType.${mdb.transactionManagement})
#end
#if (!$mdb.transactionManagementBean)
#**##if ($mdb.transactionType)
@javax.ejb.TransactionAttribute(javax.ejb.TransactionAttributeType.${mdb.transactionType})
#**##end
#end
#if ($mdb.runAs)
@javax.annotation.security.RunAs("${mdb.runAs}")
#end
public abstract class ${mdb.messageDrivenName}
    implements javax.jms.MessageListener
{
    // ------ Message Driven Context Injection ------
    
    @javax.annotation.Resource
    protected javax.ejb.MessageDrivenContext context;
#if ($service.transactionManagementBean)

    // ---------- User Transaction Injection ---------
    
    @javax.annotation.Resource
    protected javax.transaction.UserTransaction userTrans;
#end
#set ($constants = $mdb.getConstants(true))
#if (!$constants.empty)

    // ----------- Constant Definitions -----------
    
#**##foreach($constant in $constants)
    public static final $constant.type.fullyQualifiedName $constant.name = $constant.defaultValue;
#**##end
#end
#set ($references = $mdb.serviceReferences)
#if (!$references.empty)

    // ------ EJB Injection Definitions --------
#**##foreach ($dependency in $references)
#*  *##set ($reference = $dependency.targetElement)

    /**
     * Inject session EJB ${reference.name};
     */
    @javax.annotation.EJB
    protected ${reference.fullyQualifiedServiceName} $stringUtils.uncapitalize(${reference.name});
#**##end
#end

    // --------- Default Constructor ----------
    
    public ${mdb.messageDrivenName}()
    {
        // Empty implementation
    }
#set ($operations = $mdb.operations)
#if (!$operations.empty)

    // -------- User Defined Methods  --------------
    
#**##foreach ($operation in $operations)
#*  *##set ($visibility = $operation.visibility)
#*  *##if ($visibility == "public")
    /**
$operation.getDocumentation("     * ")
     */
#*    *##set ($returnType = $operation.returnType.fullyQualifiedName)
#*    *##if ($operation.exceptionsPresent)
    $visibility abstract $returnType $operation.signature throws $operation.exceptionList;
#*    *##else
    $visibility abstract $returnType $operation.signature;
#*    *##end

#*  *##end
#**##end
#end
}