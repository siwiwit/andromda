// license-header java merge-point
/* Autogenerated by AndroMDA (EntityImpl.vsl)*/
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

#set ($identifier = $entity.identifiers.iterator().next())
/**
 * Autogenerated POJO EJB3 implementation class for ${entity.entityName}.
 *
 * Add any manual implementation within this class.  This class will NOT
 * be overwritten with incremental changes.
 *
$entity.getDocumentation(" * ")
 *
 */

public#if ($entity.abstract) abstract#end class ${entity.entityImplementationName}
    extends ${entity.fullyQualifiedEntityName}
    implements java.io.Serializable
{

    /**
     * The serial version UID of this class required for serialization.
     */
    private static final long serialVersionUID = ${entity.serialVersionUID}L;

    // --------------- constructors -----------------
    
    /**
     * Default ${entity.name} constructor
     */
    public ${entity.entityImplementationName}()
    { 
        super();
    }
    
## Autogenerate a constructor implementation with all attributes.
#set ($instanceAttributes = $transform.filterByVisibility($entity.instanceAttributes, "public"))
#set ($allAttributes = $transform.filterByVisibility($entity.allInstanceAttributes, "public"))
    /**
     * Implementation for the main constructor with all POJO attributes.
     * This method sets all POJO fields defined in this/super class to the
     * values provided by the parameters.
     *
#foreach($attribute in $transform.filterUpdatableAttributes($instanceAttributes))
     * @param $attribute.name Value for the ${attribute.name} property
#end
     */
    public ${entity.entityImplementationName}($transform.getAttributesAsList($allAttributes, true, true)) 
    {
        super($transform.getAttributesAsList($allAttributes, false, true));
    }

#foreach ($operation in $entity.getCreateMethods(true))
#**##set ($opArguments = $transform.getArgumentsAsList(${operation.argumentNames}))
    /**
     * Explicitly defined constuctor with specified args list.
$operation.getDocumentation("    * ")
#**##foreach($attribute in $opArguments)
     * @param $attribute Value for the $attribute property
#**##end
     */
    public ${entity.entityImplementationName}(${operation.typedArgumentList}) 
    {
        super(${operation.argumentNames});
    }
#end

    // --------------- business methods -----------------
#foreach ($operation in $entity.businessOperations)
#**##set ($signature = $operation.signature)
#**##set ($interfaceType = "interface")
#**##set ($visibility = $operation.visibility.toString())
   /**
$operation.getDocumentation("    * ")
    */
#**##set ($returnType = $operation.returnType.fullyQualifiedName)
#**##if ($operation.exceptionsPresent)
    $visibility $returnType $signature
        throws $operation.exceptionList
    {
        // TODO put your implementation here.
#*  *##if ($operation.returnTypePresent)
        return $operation.returnType.javaNullString;
#*  *##end
    }
#**##else
    $visibility $returnType $signature
    {
        // TODO put your implementation here.
#*  *##if ($operation.returnTypePresent)
        return $operation.returnType.javaNullString;
#*  *##end
    }
#**##end
#end
}