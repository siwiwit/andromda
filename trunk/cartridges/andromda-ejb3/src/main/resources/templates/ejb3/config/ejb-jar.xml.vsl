<?xml version="1.0" encoding="${xmlEncoding}"?>
<!--
<!DOCTYPE ejb-jar PUBLIC "-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"
                         "http://java.sun.com/dtd/ejb-jar_2_0.dtd">
-->
<ejb-jar version="3.0">

    <description><![CDATA[No Description.]]></description>
    <display-name>Generated by AndroMDA EJB3 Cartridge</display-name>

    <enterprise-beans>

#foreach ($service in $services)
        <session>
            <description>
                <![CDATA[
                $service.getDocumentation("                ", 64, false)
                ]]>
            </description>
            <ejb-name>${service.fullyQualifiedServiceName}</ejb-name>
#**##if ($service.viewTypeRemote)
            <remote>${service.fullyQualifiedServiceRemoteInterfaceName}</remote>
#**##end
#**##if ($service.viewTypeLocal)
            <local>${service.fullyQualifiedServiceLocalInterfaceName}</local>
#**##end
            <ejb-class>${service.fullyQualifiedServiceImplementationName}</ejb-class>
            <session-type>${service.type}</session-type>
            <transaction-type>Container</transaction-type>
#**##foreach($envEntry in $service.getEnvironmentEntries(true))
            <env-entry>
                <env-entry-name>${envEntry.name}</env-entry-name>
                <env-entry-type>#if ($envEntry.type.primitive)${envEntry.type.wrapperName}#else${envEntry.type.fullyQualifiedName}#end</env-entry-type>
                <env-entry-value>${envEntry.defaultValue}</env-entry-value>
            </env-entry>
#**##end
        </session>

#end
#foreach ($manageable in $manageables)
        <session>
            <description>
                <![CDATA[
                $manageable.getDocumentation("                ", 64, false)
                ]]>
            </description>
            <ejb-name>${manageable.fullyQualifiedManageableServiceName}</ejb-name>
            <remote>${manageable.fullyQualifiedManageableServiceName}</remote>
            <ejb-class>${manageable.fullyQualifiedManageableServiceBaseName}</ejb-class>
            <session-type>Stateless</session-type>
            <transaction-type>Container</transaction-type>
        </session>

#end
#foreach ($mdb in $mdbs)
        <message-driven>
            <description>
                <![CDATA[
                $mdb.getDocumentation("                ", 64, false)
                ]]>
            </description>
            <ejb-name>${mdb.fullyQualifiedMessageDrivenName}</ejb-name>
            <ejb-class>${mdb.fullyQualifiedMessageDrivenImplementationName}</ejb-class>
            <transaction-type>Container</transaction-type>
#**##if ($stringUtils.isNotBlank($mdb.messageSelector))
            <message-selector>
                <![CDATA[${mdb.messageSelector}]]>
            </message-selector>
#**##end
#**##if ($mdb.transactionManagementBean)
            <acknowledge-mode>${mdb.acknowledgeMode}</acknowledge-mode>
#**##end
            <message-driven-destination>
                <destination-type>${mdb.destinationType}</destination-type>
#**##if ($mdb.destinationTypeTopic)
                <subscription-durability>${mdb.subscriptionDurability}</subscription-durability>
#**##end
            </message-driven-destination>
#**##if ($stringUtils.isNotBlank($mdb.runAs))
            <security-identity>
                <run-as>
                    <role-name>${mdb.runAs}</role-name>
                </run-as>
            </security-identity>
#**##end
#**##foreach($envEntry in $mdb.getEnvironmentEntries(true))
            <env-entry>
                <env-entry-name>${envEntry.name}</env-entry-name>
                <env-entry-type>#if ($envEntry.type.primitive)${envEntry.type.wrapperName}#else${envEntry.type.fullyQualifiedName}#end</env-entry-type>
                <env-entry-value>${envEntry.defaultValue}</env-entry-value>
            </env-entry>
#**##end
        </message-driven>
#end
    </enterprise-beans>

    <assembly-descriptor>
#foreach ($interceptor in $interceptors)
##
## Default interceptors
##
#**##if ($interceptor.defaultInterceptor)
#*  *##if (!$defaultInterceptorExists)
        <interceptor-binding>
            <ejb-name>*</ejb-name>
#*    *##set ($defaultInterceptorExists = true)
#*  *##end
            <interceptor-class>${interceptor.fullyQualifiedName}</interceptor-class>
#**##end
#end
#if ($defaultInterceptorExists)
        </interceptor-binding>
#end
#foreach ($service in $services)
##
## Service listener - lifecycle callbacks are defined as an interceptor
##
#**##set ($interceptors = $service.interceptorReferences)
#**##if ($collectionUtils.size($interceptors) >= 1 || $service.listenerEnabled)
        <interceptor-binding>
            <ejb-name>${service.fullyQualifiedServiceName}</ejb-name>
#*  *##if ($service.listenerEnabled) 
            <interceptor-class>${service.fullyQualifiedServiceListenerName}</interceptor-class>
#*  *##end
#*  *##foreach ($interceptor in $interceptors)
            <interceptor-class>${interceptor.fullyQualifiedName}</interceptor-class>
#*  *##end
#*  *##if ($service.excludeDefaultInterceptors)
            <exclude-default-interceptors/>
#*  *##end
        </interceptor-binding>
#**##end
#end
##
## Define method level interceptors for session beans
##
#foreach ($service in $services)
#**##foreach ($operation in $service.businessOperations)
#*  *##set ($interceptors = $operation.interceptorReferences)
#*  *##if ($collectionUtils.size($interceptors) >= 1)
        <interceptor-binding>
            <ejb-name>${service.fullyQualifiedServiceName}</ejb-name>
#*    *##foreach ($interceptor in $interceptors)
            <interceptor-class>${interceptor.fullyQualifiedName}</interceptor-class>
#*    *##end
            <method-name>${operation.name}</method-name>
#*    *##if (!$operation.arguments.empty)
            <method-params>
#*      *##foreach ($argument in $operation.arguments)
                <method-param>${argument.type.fullyQualifiedName}</method-param>
#*      *##end
            </method-params>
#*    *##end
#*    *##if ($operation.excludeClassInterceptors)
            <exclude-class-interceptors/>
#*    *##end
#*    *##if ($operation.excludeDefaultInterceptors)
            <exclude-default-interceptors/>
#*    *##end
        </interceptor-binding>
#*  *##end
#**##end
#end
#foreach ($mdb in $mdbs)
##
## Message-driven bean listener - lifecycle callbacks are defined as an interceptor
##
#**##set ($interceptors = $mdb.interceptorReferences)
#**##if ($collectionUtils.size($interceptors) >= 1 || $mdb.listenerEnabled)
        <interceptor-binding>
            <ejb-name>${mdb.fullyQualifiedMessageDrivenName}</ejb-name>
#*  *##if ($mdb.listenerEnabled) 
            <interceptor-class>${mdb.fullyQualifiedMessageDrivenListenerName}</interceptor-class>
#*  *##end
#*  *##foreach ($interceptor in $interceptors)
            <interceptor-class>${interceptor.fullyQualifiedName}</interceptor-class>
#*  *##end
#*  *##if ($mdb.excludeDefaultInterceptors)
            <exclude-default-interceptors/>
#*  *##end
        </interceptor-binding>
#**##end
#end
    </assembly-descriptor>

</ejb-jar>