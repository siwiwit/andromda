// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SessionDaoBase.vsl in andromda-ejb3-cartridge.
//
#set ($generatedFile = "${entity.packagePath}/${entity.daoBaseName}.java")
#if ($enableTemplating)
#**##set ($entityCollectionType = "java.util.Collection<${entity.fullyQualifiedEntityName}>")
#else
#**##set ($entityCollectionType = "java.util.Collection")
#end
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
#set ($daoInheritance = $entity.generalization && $daoInheritanceEnabled)
#if ($daoInheritance)
#**##set ($rootEntityType = $entity.root.fullyQualifiedEntityName)
#**##set ($rootDaoType = $entity.root.fullyQualifiedDaoName)
#else
#**##set ($rootEntityType = $entity.fullyQualifiedEntityName)
#**##set ($rootDaoType = $entity.fullyQualifiedDaoName)
#end

/**
 * <p>
 * Base EJB3 DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>$entity.fullyQualifiedEntityName</code>.
 * </p>
 *
 * @see $entity.fullyQualifiedDaoName
 */
@javax.ejb.TransactionAttribute(javax.ejb.TransactionAttributeType.REQUIRED)
@javax.ejb.Local({${entity.fullyQualifiedDaoName}.class})
#if ($entity.securityEnabled)
#**##if ($stringUtils.isBlank(${entity.rolesAllowed}))
@javax.annotation.security.PermitAll
#**##else
@javax.annotation.security.RolesAllowed({${entity.rolesAllowed}})
#**##end
#end
public abstract class $entity.daoBaseName
#if ($daoInheritance)
    extends $entity.generalization.fullyQualifiedDaoImplementationName
#end
    implements $entity.fullyQualifiedDaoName
{
    // ------ Session Context Injection ------
    
    @javax.annotation.Resource
    protected javax.ejb.SessionContext context;

    // ------ Persistence Context Injection --------

    /**
     * Inject persistence context #if ($entity.defaultPersistenceContextUnitName)${entity.defaultPersistenceContextUnitName}#end
     
     */
    @javax.persistence.PersistenceContext#if ($entity.defaultPersistenceContextUnitName)(unitName = "${entity.defaultPersistenceContextUnitName}")#end
    
    protected javax.persistence.EntityManager emanager;
    
#foreach($entityRef in $entity.entityReferences)
    private $entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName;

    /**
     * Sets the reference to <code>$entityRef.daoName</code>.
     */
    public void ${entityRef.daoSetterName}($entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName)
    {
        this.$entityRef.daoName = $entityRef.daoName;
    }

    /**
     * Gets the reference to <code>$entityRef.daoName</code>.
     */
    protected $entityRef.targetElement.fullyQualifiedDaoName ${entityRef.daoGetterName}()
    {
        return this.$entityRef.daoName;
    }

#end
#if (!$entity.compositePrimaryKeyPresent)
#**##set ($identifier = $entity.identifiers.iterator().next())
#end
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * @see ${entity.fullyQualifiedDaoName}#load(int,#foreach($identifier in $entity.identifers) $identifier.type.fullyQualifiedName#if ($velocityCount != $entity.identifiers.size()),#end#end)
     */
    public Object load(final int transform,#foreach($identifier in $entity.identifiers) final $identifier.type.fullyQualifiedName $identifier.name#if ($velocityCount != $entity.identifiers.size()),#end#end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
#foreach ($identifier in $entity.identifiers)
#**##if(!$identifier.type.primitive)
        if ($identifier.name == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.load - '$identifier.name' can not be null");
        }
#**##end
#end
        try
        {
#if ($entity.compositePrimaryKeyPresent)
            final Object entity = (${entity.fullyQualifiedEntityName})emanager.find(${entity.fullyQualifiedEntityName}.class, new ${entity.fullyQualifiedEntityCompositePrimaryKeyName}(#foreach ($identifier in $entity.identifiers)#if($identifier.type.primitive) new ${identifier.type.wrapperName}(${identifier.name})#else $identifier.name#end#if ($velocityCount != $entity.identifiers.size()),#end#end));
#else
            final Object entity = (${entity.fullyQualifiedEntityName})emanager.find(${entity.fullyQualifiedEntityName}.class, $identifier.name);
#end
            return transformEntity(transform, ($entity.fullyQualifiedName)entity);
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#load(#foreach($identifier in $entity.identifers) $identifier.type.fullyQualifiedName#if ($velocityCount != $entity.identifiers.size()),#end#end)
     */
    public $rootEntityType load(#foreach($identifier in $entity.identifiers) final $identifier.type.fullyQualifiedName $identifier.name#if ($velocityCount != $entity.identifiers.size()),#end#end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return ($entity.fullyQualifiedEntityName)this.load($entity.daoNoTransformationConstantName,#foreach($identifier in $entity.identifiers) $identifier.name#if ($velocityCount != $entity.identifiers.size()),#end#end);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll()
     */
#if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType loadAll()
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return #if ($enableTemplating)($entityCollectionType)#end#**#this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        try
        {
#if ($entity.genericFinders)
            javax.persistence.Query query = emanager.createNamedQuery("${entity.name}.findAll");
#else
            javax.persistence.Query query = emanager.createQuery("from ${entity.entityName} as entity");
#end
#if ($entity.useQueryCache && !$entity.useDefaultCacheRegion)
            query.setHint("org.hibernate.cacheRegion", "/${entity.fullyQualifiedNamePath}_findAll");
#end
            java.util.List<${entity.fullyQualifiedEntityName}> results = query.getResultList();
            this.transformEntities(transform, results);
            return results;
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }
## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)

    /**
     * @see ${entity.fullyQualifiedDaoName}#create($entity.fullyQualifiedEntityName)
     */
    public $rootEntityType create($entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return ($entity.fullyQualifiedEntityName)this.create($entity.daoNoTransformationConstantName, $argumentName);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int transform, $entity.fullyQualifiedEntityName)
     */
    public Object create(final int transform, final $entity.fullyQualifiedName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }
        
        try
        {
            emanager.persist(${argumentName});
            emanager.flush();
            return this.transformEntity(transform, $argumentName);
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create($entityCollectionType)
     */
#**##if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#**##end
    public $entityCollectionType create(final $entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        return create($entity.daoNoTransformationConstantName, entities);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int, $entityCollectionType)
     */
#**##if ($enableTemplating)
    @SuppressWarnings({"unchecked"})
#**##end
    public java.util.Collection create(final int transform, final $entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - 'entities' can not be null");
        }
        java.util.Collection results = new java.util.ArrayList();
        try
        {
	        for (final java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
	        {
	            results.add(create(transform, ($entity.fullyQualifiedEntityName)entityIterator.next()));
	        }
	    }
	    catch (Exception ex)
	    {
	        throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
	    }
        return results;
    }

#**##if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#*  *##set ($attributes = $entity.getInstanceAttributes(true, $entity.usingAssignedIdentifier))
#*  *##if (!$attributes.empty)
    /**
     * @see ${rootDaoType}#create(${entity.getInstanceAttributeTypeList(true, false)})
     */
    public $rootEntityType create(
#*    *##foreach($attribute in $attributes)
        #if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.type.fullyQualifiedName}#end $attribute.name#if($velocityCount != $attributes.size()),#else)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}#end

#*    *##end
    {
        return ($rootEntityType)this.create($entity.daoNoTransformationConstantName, ${entity.getInstanceAttributeNameList(true, $entity.usingAssignedIdentifier)});
    }

    /**
     * @see ${rootDaoType}#create(int, ${entity.getInstanceAttributeTypeList(true, false)})
     */
    public Object create(
        final int transform,
#*    *##foreach($attribute in $attributes)
        #if ($stringUtils.isNotBlank($attribute.lobType))${attribute.lobType}#else${attribute.type.fullyQualifiedName}#end $attribute.name#if($velocityCount != $attributes.size()),#else)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}#end

#*    *##end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityName}();
#*    *##foreach ($attribute in $attributes)
        entity.${attribute.setterName}($attribute.name);
#*    *##end
        return this.create(transform, entity);
    }

#*  *##end
#*  *##set ($requiredProperties = $entity.getRequiredProperties(true,false))
#*  *##if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,false).size() != $requiredProperties.size())
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(${entity.getRequiredPropertyTypeList(true, false)})
     */
    public $rootEntityType create(
#*    *##foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}#end

#*    *##end
    {
        return ($rootEntityType)this.create($entity.daoNoTransformationConstantName, ${entity.getRequiredPropertyNameList(true,false)});
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int, ${entity.getRequiredPropertyTypeList(true, false)})
     */
    public Object create(
        final int transform,
#*    *##foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}#end

#*    *##end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityName}();
#*    *##foreach ($property in $requiredProperties)
        entity.${property.setterName}($property.name);
#*    *##end
        return this.create(transform, entity);
    }

#*  *##end
#**##end
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#update($entity.fullyQualifiedEntityName)
     */
    public void update($entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
        try
        {
            emanager.merge($argumentName);
            emanager.flush();
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${rootDaoType}#update($entityCollectionType)
     */
    public void update(final $entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - 'entities' can not be null");
        }
        try
        {
		    for (final java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
		    {
		        update(($entity.fullyQualifiedEntityName)entityIterator.next());
		    }
		}
		catch (Exception ex)
		{
		    throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
		}
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#remove($entity.fullyQualifiedEntityName)
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        try
        {
            emanager.remove($argumentName);
            emanager.flush();
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#remove(#foreach ($identifier in $entity.identifiers)$identifier.type.fullyQualifiedName#if ($velocityCount != $entity.identifiers.size()), #end#end)
     */
    public void remove(#foreach ($identifier in $entity.identifiers)$identifier.type.fullyQualifiedName $identifier.name#if ($velocityCount != $entity.identifiers.size()), #end#end)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
#foreach ($identifier in $entity.identifiers)
#**##if(!$identifier.type.primitive)
        if ($identifier.name == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$identifier.name' can not be null");
        }
#**##end
#end
#if (!$entity.compositePrimaryKeyPresent)
#**##set ($loadCall = "this.load($identifier.name)")
#else
#**##set ($loadCall = "this.load(#foreach ($identifier in $entity.identifiers)$identifier.name#if ($velocityCount != $entity.identifiers.size()), #end#end)")
#end
#if ($entity.generalization)
#**##set ($loadCall = "($entity.fullyQualifiedEntityName)${loadCall}")
#end
        try
        {
	        final $entity.fullyQualifiedEntityName entity = $loadCall;
	        if (entity != null)
	        {
	            this.remove(entity);
	        }
	    }
	    catch (Exception ex)
	    {
	        throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
	    }
    }

    /**
     * @see ${rootDaoType}#remove($entityCollectionType)
     */
    public void remove($entityCollectionType entities)
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - 'entities' can not be null");
        }
        try
        {
	        for (final java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
	        {
	            remove(($entity.fullyQualifiedEntityName)entityIterator.next());
	        }
	    }
	    catch (Exception ex)
	    {
	        throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
	    }
    }

#foreach ($finder in $entity.getQueryOperations(true))
#**##set ($returnType = $finder.returnType.fullyQualifiedName)
    /**
     * @see ${entity.fullyQualifiedDaoName}#$finder.getSignature(false)
     */
    $finder.visibility $returnType $finder.signature
#**##if ($finder.exceptionsPresent)
        throws $finder.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##else
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##end
    {
#**##set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#**##if ($finder.returnTypePresent)
#*  *##if (!$finder.returnType.collectionType)
#*    *##set ($finderCall = "($returnType)$finderCall")
#*  *##end
        return $finderCall
#**##else
        $finderCall
#**##end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(java.lang.String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(final java.lang.String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#**##if ($finder.exceptionsPresent)
        throws $finder.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##else
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##end
    {
#**##set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName, queryString#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#**##if ($finder.returnTypePresent)
#*  *##if (!$finder.returnType.collectionType)
#*    *##set ($finderCall = "($returnType)$finderCall")
#*  *##end
        return $finderCall
#**##else
        $finderCall
#**##end
    }

#**##if (!$finder.returnType.collectionType)
#*  *##set ($returnType = "Object")
#**##end
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility#if ($finder.returnTypePresent) $returnType#else void#end ${finder.name}(final int transform#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#**##if ($finder.exceptionsPresent)
        throws $finder.exceptionList, ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##else
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##end
    {
#**##if ($finder.namedQuery)
        try
        {
            javax.persistence.Query queryObject = emanager.createNamedQuery("${entity.name}.${finder.name}");
#*  *##foreach($argument in $finder.arguments)
#*    *##set ($count = $velocityCount - 1)
#*    *##set ($argumentValue = $argument.name)
#*    *##if ($argument.firstResult)
            queryObject.setFirstResult(${argument.name});
#*    *##elseif ($argument.maxResults)
            queryObject.setMaxResults(${argument.name});
#*    *##else
#*      *##if($argument.type.primitive)
#*        *##set ($argumentValue = "new ${argument.type.wrapperName}($argument.name)")
#*      *##else
#*        *##set ($argumentValue = "${argument.name}")
#*        *##if ($argument.enumerationTypeOrdinal)
#*          *##set ($argumentValue = "${argumentValue}.ordinal()")
#*        *##elseif ($argument.enumerationTypeString)
#*          *##set ($argumentValue = "${argumentValue}.name()")
#*        *##end
#*      *##end
#*      *##if ($argument.temporalType)
#*        *##set ($argumentValue = "${argumentValue}, javax.persistence.TemporalType.${argument.temporalType}")
#*      *##end
#*      *##set ($setParameterOperation = "setParameter")
#*      *##if ($argument.type.collectionType || $argument.type.arrayType)
#*        *##set ($setParameterOperation = "${setParameterOperation}List")
#*      *##end
#*      *##if ($finder.useNamedParameters)
            queryObject.${setParameterOperation}("$argument.name", $argumentValue);
#*      *##else
            queryObject.${setParameterOperation}($count, $argumentValue);
#*      *##end
#*    *##end
#*  *##end
#*  *##if ($finder.useQueryCache && !$entity.useDefaultCacheRegion)
            queryObject.setHint("org.hibernate.cacheRegion", "/${entity.fullyQualifiedNamePath}_${finder.name}");
#*  *##end
#*  *##if ($finder.returnTypePresent)
#*    *##if ($finder.returnType.setType)
            java.util.Set results = new java.util.LinkedHashSet(queryObject.getResultList());
            transformEntities(transform, results);
            return results;
#*    *##elseif ($finder.returnType.collectionType)
            java.util.List results = queryObject.getResultList();
            transformEntities(transform, results);
            return results;
#*    *##else
            Object result = queryObject.getSingleResult();
            result = transformEntity(transform, ($entity.fullyQualifiedName)result);
            return result;
#*    *##end
#*  *##else
            queryObject.executeUpdate();
#*  *##end
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
#**##else
#*  *##if ($finder.returnTypePresent)
        return this.${finder.name}(transform, "$finder.getQuery($entity)"#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
#*  *##else
        this.${finder.name}(transform, "$finder.getQuery($entity)"#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
#*  *##end
#**##end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int, java.lang.String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility#if ($finder.returnTypePresent) $returnType#else void#end ${finder.name}(final int transform, final java.lang.String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#**##if ($finder.exceptionsPresent)
        throws ${finder.exceptionList}, ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##else
        throws ${entity.fullyQualifiedDaoDefaultExceptionName}
#**##end
    {
        try
        {
            javax.persistence.Query queryObject = emanager.createQuery(queryString);
#**##foreach($argument in $finder.arguments)
#*  *##set ($count = $velocityCount - 1)
#*  *##set ($argumentValue = $argument.name)
#*  *##if ($argument.firstResult)
            queryObject.setFirstResult(${argument.name});
#*  *##elseif ($argument.maxResults)
            queryObject.setMaxResults(${argument.name});
#*  *##else
#*    *##if($argument.type.primitive)
#*      *##set ($argumentValue = "new ${argument.type.wrapperName}($argument.name)")
#*    *##else
#*      *##set ($argumentValue = "${argument.name}")
#*      *##if ($argument.enumerationTypeOrdinal)
#*        *##set ($argumentValue = "${argumentValue}.ordinal()")
#*      *##elseif ($argument.enumerationTypeString)
#*        *##set ($argumentValue = "${argumentValue}.name()")
#*      *##end
#*    *##end
#*    *##if ($argument.temporalType)
#*      *##set ($argumentValue = "${argumentValue}, javax.persistence.TemporalType.${argument.temporalType}")
#*    *##end
#*    *##set ($setParameterOperation = "setParameter")
#*    *##if ($argument.type.collectionType || $argument.type.arrayType)
#*      *##set ($setParameterOperation = "${setParameterOperation}List")
#*    *##end
#*    *##if ($finder.useNamedParameters)
            queryObject.${setParameterOperation}("$argument.name", $argumentValue);
#*    *##else
            queryObject.${setParameterOperation}($count, $argumentValue);
#*    *##end
#*  *##end
#**##end
#**##if ($finder.useQueryCache && !$entity.useDefaultCacheRegion)
            queryObject.setHint("org.hibernate.cacheRegion", "/${entity.fullyQualifiedNamePath}_${finder.name}");
#**##end
#**##if ($finder.returnTypePresent)
#*  *##if ($finder.returnType.setType)
            java.util.Set results = new java.util.LinkedHashSet(queryObject.getResultList());
            transformEntities(transform, results);
            return results;
#*  *##elseif ($finder.returnType.collectionType)
            java.util.List results = queryObject.getResultList();
            transformEntities(transform, results);
            return results;
#*  *##else
            Object result = queryObject.getSingleResult();
            result = transformEntity(transform, ($entity.fullyQualifiedName)result);
            return result;
#*  *##end
#**##else
            queryObject.executeUpdate();
#**##end
        }
        catch (Exception ex)
        {
            throw new ${entity.fullyQualifiedDaoDefaultExceptionName}(ex);
        }
    }

#end
#foreach ($operation in $entity.daoBusinessOperations)
#**##set ($returnType = $operation.returnType)
#**##set ($signature = $operation.signature)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${operation.getSignature(false)}
     */
    $operation.visibility $returnType.fullyQualifiedName ${operation.name}(${operation.getTypedArgumentList('final')})
#**##if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#**##end
    {
#**##if ($requiredCheckEnabled)
#*  *##foreach ($argument in $operation.arguments)
#*    *##if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${entity.fullyQualifiedDaoName}.${operation.signature} - '${argument.name}' can not be null");
        }
#*    *##end
#*  *##end
#**##end
        try
        {
#**##set ($call = "this.${operation.implementationCall};")
#**##if ($operation.returnTypePresent)
            return $call
#**##else
            $call
#**##end
        }
#**##foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#**##end
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing '${entity.fullyQualifiedDaoName}.${operation.signature}' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #${operation.getSignature(false)}}
      */
    protected abstract $operation.returnType.fullyQualifiedName $operation.implementationSignature
        throws java.lang.Exception;

#end
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>$entity.fullyQualifiedDaoName</code>, please note
     * that the {@link #$entity.daoNoTransformationConstantName} constant denotes no transformation, so the entity itself
     * will be returned.
#if (!$entity.valueObjectReferences.empty)
     * <p/>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link $entity.fullyQualifiedName} - {@link #$entity.daoNoTransformationConstantName}</li>
#**##foreach ($valueObjectRef in $entity.valueObjectReferences)
#*  *##set ($targetElement = $valueObjectRef.targetElement)
     *   <li>{@link $targetElement.fullyQualifiedName} - {@link ${valueObjectRef.transformationConstantName}}</li>
#**##end
     * </ul>
#end
     *
     * If the integer argument value is unknown {@link #${entity.daoNoTransformationConstantName}} is assumed.
     *
     * @param transform one of the constants declared in {@link $entity.fullyQualifiedDaoName}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected Object transformEntity(final int transform, final $entity.fullyQualifiedName entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
#foreach ($valueObjectRef in $entity.allValueObjectReferences)
                case ${valueObjectRef.sourceElement.fullyQualifiedDaoName}.${valueObjectRef.transformationConstantName} :
                    target = ${valueObjectRef.transformationMethodName}(entity);
                    break;
#end
                case $entity.daoNoTransformationConstantName : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,$entity.fullyQualifiedName)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>$entity.fullyQualifiedDaoName</code>
     * @param entities the collection of entities to transform
     * @return the same collection as the argument, but this time containing the transformed entities
     * @see #transformEntity(int,$entity.fullyQualifiedName)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
#foreach ($valueObjectRef in $entity.allValueObjectReferences)
            case ${valueObjectRef.sourceElement.fullyQualifiedDaoName}.${valueObjectRef.transformationConstantName} :
                ${valueObjectRef.transformationToCollectionMethodName}(entities);
                break;
#end
            case $entity.daoNoTransformationConstantName : // fall-through
                default:
                // do nothing;
        }
    }

#foreach ($valueObjectRef in $entity.valueObjectReferences)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection)
     */
    public final void ${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, ${valueObjectRef.transformationAnonymousName});
        }
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link $entity.daoImplementationName} class if you intend to use reporting queries.
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
     */
    protected $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(Object[] row)
    {
        $valueObjectRef.targetElement.fullyQualifiedName target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof $entity.fullyQualifiedEntityName)
                {
                    target = this.${valueObjectRef.transformationMethodName}(($entity.fullyQualifiedEntityName)object);
                    break;
                }
            }
        }
        return target;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link ${valueObjectRef.targetElement.fullyQualifiedName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer $valueObjectRef.transformationAnonymousName =
        new org.apache.commons.collections.Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof $entity.fullyQualifiedEntityName)
                {
                    result = ${valueObjectRef.transformationMethodName}(($entity.fullyQualifiedEntityName)input);
                }
                else if (input instanceof Object[])
                {
                    result = ${valueObjectRef.transformationMethodName}((Object[])input);
                }
                return result;
            }
        };

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection)
     */
    public final void ${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof $valueObjectRef.targetElement.fullyQualifiedName))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, $valueObjectRef.valueObjectToEntityTransformerName);
        }
    }

    private final org.apache.commons.collections.Transformer $valueObjectRef.valueObjectToEntityTransformerName =
        new org.apache.commons.collections.Transformer()
        {
            public Object transform(Object input)
            {
                return ${valueObjectRef.transformationToEntityMethodName}(($valueObjectRef.targetElement.fullyQualifiedName)input);
            }
        };


    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName, $valueObjectRef.targetElement.fullyQualifiedName)
     */
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName source, 
        $valueObjectRef.targetElement.fullyQualifiedName target)
    {
#set ($entityProperties = $entity.allProperties)
#foreach ($property in $valueObjectRef.targetElement.allProperties)
#* *##foreach ($entityProperty in $entityProperties)
#*    *##if ($property.name.equals($entityProperty.name))
#*        *##set ($entityPropertyGetterValue = false)
#*        *##set ($entityPropertyGetterValue = $converter.typeConvert($entityProperty.type.fullyQualifiedName, "source.${entityProperty.getterName}()", $property.type.fullyQualifiedName))
#*        *##if ($entityPropertyGetterValue)
        target.${property.setterName}($entityPropertyGetterValue);
#*        *##else
        // No conversion for target.${property.name} (can't convert source.${entityProperty.getterName}():${entityProperty.type.fullyQualifiedName} to $property.type.fullyQualifiedName)
#*        *##end
#*    *##end
#* *##end
#end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
     */
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(final $entity.fullyQualifiedName entity)
    {
        final $valueObjectRef.targetElement.fullyQualifiedName target = new ${valueObjectRef.targetElement.fullyQualifiedName}();
        this.${valueObjectRef.transformationMethodName}(entity, target);
        return target;
    }
    
    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName, $entity.fullyQualifiedEntityName)
     */
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName source,
        $entity.fullyQualifiedEntityName target,
        boolean copyIfNull)
    {
#set ($entityAttributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#foreach ($entityProperty in $entityAttributes)
#* *##if (!$entityProperty.readOnly)
#*    *##foreach ($property in $valueObjectRef.targetElement.allProperties)
#*        *##if ($property.name.equals($entityProperty.name))
#*            *##set ($propertyGetterValue = false)
#*            *##set ($propertyGetterValue = $converter.typeConvert($property.type.fullyQualifiedName, "source.${property.getterName}()", $entityProperty.type.fullyQualifiedName))
#*            *##if ($propertyGetterValue)
        if (copyIfNull || source.${property.getterName}() != $property.type.javaNullString)
        {
            target.${entityProperty.setterName}($propertyGetterValue);
        }
#*            *##else
        // No conversion for target.${entityProperty.name} (can't convert source.${property.getterName}():${property.type.fullyQualifiedName} to $entityProperty.type.fullyQualifiedName)
#*            *##end        
#*        *##end
#*    *##end
#**##end
#end
    }
    
#end
}