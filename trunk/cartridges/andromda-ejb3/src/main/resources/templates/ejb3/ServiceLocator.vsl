// license-header java merge-point
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($ejb3TypesPackage))
package $ejb3TypesPackage;
#**##set ($generatedFile = "${stringUtils.replace($ejb3TypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $serviceLocatorName
{
    /**
     * The shared instance of this ${serviceLocatorName}.
     */
    private static ${serviceLocatorName} instance;
    
    /**
     * The Context to lookup the service beans.
     */
    protected javax.naming.InitialContext context = null;
    
    /**
     * Private constructor
     */
    private ${serviceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
     * Gets the instance of this Class.  Create it if doesn't already exit, otherwise
     * return the current instance.
     *
     * @return the shared service locator instance.
     */
    public final static $serviceLocatorName getInstance()
    {
        if (instance == null)
        {
            instance = new ${serviceLocatorName}();
        }
        return instance;
    }

    /**
     * Gets the InitialContext.
     * 
     * @param env the Context environment properties.
     * @return the javax.naming.InitialContext.
     * @throws javax.naming.NamingException failure to create InitialContext
     */
    protected synchronized javax.naming.InitialContext getContext(java.util.Properties env)
        throws javax.naming.NamingException
    {
        if (this.context == null)
        {
            this.context = new javax.naming.InitialContext(env);
        }
        return this.context;
    }
    
    /**
     * Instantiate a new InitialContext using the properties table.
     * 
     * @param env passed to the InitialContext constructor.
     * @return the javax.naming.InitialContext.
     * @throws javax.naming.NamingException failure to create InitialContext
     */
    protected synchronized javax.naming.InitialContext newContext(java.util.Properties env)
        throws javax.naming.NamingException
    {
        this.context = new javax.naming.InitialContext(env);
        return this.context;
    }

    /**
     * Shuts down the ServiceLocator and releases any used resources.
     */
    public synchronized void shutdown()
    {
        if (this.context != null)
        {
            try
            {
                this.context.close();
            }
            catch (javax.naming.NamingException ne)
            {
                // ignore
            }
            finally
            {
                this.context = null;
            }
        }
    }

#foreach ($service in $services)
    /**
     * Gets an instance of {@link ${service.fullyQualifiedServiceRemoteInterfaceName}}.
     *
     * @param env the Context environment properties.  Null represents no properties.
     * @throws javax.naming.NamingException failure to lookup remote service interface.
     */
    public final $service.fullyQualifiedServiceRemoteInterfaceName get${service.name}(java.util.Properties env)
        throws javax.naming.NamingException
    {
        return (${service.fullyQualifiedServiceRemoteInterfaceName})
            getContext(env).lookup(${service.fullyQualifiedServiceRemoteInterfaceName}.class.getName());
    }

#end
    /**
     * Gets an instance of the given service.
     *
     * @param serviceName lookup this service from the context.
     * @throws javax.naming.NamingException failure to lookup remote service interface.
     */
    public final Object getService(String serviceName)
        throws javax.naming.NamingException
    {
        return getService(serviceName, null);
    }

    /**
     * Gets an instance of the given service.
     *
     * @param serviceName lookup this service from the context.
     * @param env the Context environment properties.  Null represents no properties.
     * @throws javax.naming.NamingException failure to lookup remote service interface.
     */
    public final Object getService(String serviceName, java.util.Properties env)
        throws javax.naming.NamingException
    {
        return getContext(env).lookup(serviceName);
    }
}