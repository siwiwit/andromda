#set ($className = "$stringUtils.upperCamelCaseName($processDefinition.name)")
#set ($className = "${className}Helper")
#set ($generatedFile = "${className}.java")
#set ($packageName = $processDefinition.packageName)
#if ($stringUtils.isNotBlank($packageName))
#set ($generatedFile = "${processDefinition.packagePath}/${generatedFile}")
##
##
##
#macro (renderLocator $state)
#if ($state.name)
#set ($methodName = "isIn${stringUtils.upperCamelCaseName($state.name)}")
    public static boolean ${methodName}(final org.jbpm.graph.exe.Token token)
    {
        return "$state.name".equals(token.getName());
    }

#end
#end
##
##
##
package $packageName;

import org.jbpm.db.JbpmSession;
import org.jbpm.db.JbpmSessionFactory;
import org.jbpm.graph.def.ProcessDefinition;

#end
/**
 * This helper class provides static utility methods to more easily handle
 * the jBPM process API for the '$processDefinition.name' process.
 */
public class $className
{

#if ($processDefinition.startState.initialState)
#renderLocator($processDefinition.startState.initialState)
#end
#foreach ($state in $processDefinition.states)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.taskNodes)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.nodes)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.decisions)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.joins)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.forks)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.endStates)
#renderLocator($state)
#end
}

