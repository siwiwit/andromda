#set ($className = "$stringUtils.upperCamelCaseName($processDefinition.name)")
#set ($className = "${className}")
#set ($generatedFile = "${className}.java")
#set ($packageName = $processDefinition.packageName)
#if ($stringUtils.isNotBlank($packageName))
#set ($generatedFile = "${processDefinition.packagePath}/${generatedFile}")
##
##
##
#macro (renderLocator $state)
#if ($state.name)
#set ($methodName = "is$stringUtils.upperCamelCaseName($state.nodeClassName)")
    /**
     * Checks whether or not the argument node represent the $state.name state in this process.
     *
     * @param node the node instance to check
     * @return true if the argument is an instance of {@link ${packageName}.${state.nodeClassName}}
     */
    public static boolean ${methodName}(final $processDefinition.nodeInterfaceName node)
    {
        return node instanceof ${state.nodeClassName};
    }

#end
#end
##
##
##
#macro (renderNodeTest $state)
#if ($state.name)
        if (#renderNodeName($state.name).equals(nodeName)) node = new ${state.nodeClassName}(token); else
#end
#end
##
##
##
#macro (renderNodeName $name)
$stringUtils.separate($name,"_").toUpperCase()_NODE_NAME## no newline
#end
##
##
##
#macro (renderTaskName $name)
$stringUtils.separate($name,"_").toUpperCase()_TASK_NAME## no newline
#end
##
##
##
package $packageName;

#end
/**
 * This helper class provides static utility methods to more easily handle
 * the jBPM process API for the '$processDefinition.name' process.
 */
public class $className
{
    /**
     * The name for this process, this is the name used in the corresponding jPDL descriptor file.
     */
    public static final java.lang.String PROCESS_NAME = "$processDefinition.name";

#foreach ($state in $processDefinition.firstActivityGraph.states)
#if ($state.name)
    /**
     * This constant holds a reference to the name of the
     * <em>$state.name</em> state, the value corresponds to the one used by jBPM internally.
     */
    public static final java.lang.String #renderNodeName($state.name) = "$state.name";

#end
#end
#foreach ($state in $processDefinition.firstActivityGraph.pseudostates)
#if ($state.name)
    /**
     * This constant holds a reference to the name of the
     * <em>$state.name</em> pseudostate, the value corresponds to the one used by jBPM internally.
     */
    public static final java.lang.String #renderNodeName($state.name) = "$state.name";

#end
#end
#if ($processDefinition.taskNodes)
#foreach ($task in $processDefinition.tasks)
#if ($task.name)
    /**
     * This constant holds a reference to the name of the
     * <em>$task.name</em> task, the value corresponds to the one used by jBPM internally.
     */
    public static final java.lang.String #renderTaskName($task.name) = "$task.name";

#end
#end
#if ($processDefinition.startState)
    /**
     * Creates a new process instance and returns the node representing the start state
     * in which the root token will be present.
     *
     * @param session the session into which to perform this operation
     * @return the node in which the process is started
     */
    public static $processDefinition.startState.nodeClassName startProcess(final org.jbpm.db.JbpmSession session)
    {
        // the graph session allows us to work with the process definition
        final org.jbpm.db.GraphSession graphSession = session.getGraphSession();

        // find the latest process definition we can use
        final org.jbpm.graph.def.ProcessDefinition processDefinition =
                graphSession.findLatestProcessDefinition(PROCESS_NAME);

        // create a new process
        final org.jbpm.graph.exe.ProcessInstance processInstance = processDefinition.createProcessInstance();

        // return the first node in the process
        return new ${processDefinition.startState.nodeClassName}(processInstance.getRootToken());
    }

#end
    /**
     * This method takes an intenral jBpm node name and construct a wrapper node class around it
     * so it is easier to work with for the users.
     *
     * @param token the token which will be encapsulated by the returned $processDefinition.nodeInterfaceName instance,
     *      must <em>not</em> be <code>null</code>
     * @return an $processDefinition.nodeInterfaceName wrapping the node with the argument name
     * @throws IllegalArgumentException when no matching node could be found for the argument name
     */
    static $processDefinition.nodeInterfaceName createNode(org.jbpm.graph.exe.Token token)
    {
        $processDefinition.nodeInterfaceName node = null;
        final java.lang.String nodeName = token.getNode().getName();

#if ($processDefinition.startState)
#renderNodeTest($processDefinition.startState)
#end
#foreach ($state in $processDefinition.states)
#renderNodeTest($state)
#end
#foreach ($state in $processDefinition.taskNodes)
#renderNodeTest($state)
#end
#foreach ($state in $processDefinition.nodes)
#renderNodeTest($state)
#end
#foreach ($state in $processDefinition.endStates)
#renderNodeTest($state)
#end
            // hmm, apparently we have arrived in an unknown node, this could be a jbpm-cartridge bug
            throw new IllegalArgumentException("No matching node could be found for the process instance: " + nodeName);

        return node;
    }

    /**
     * Finds the process instance with the given id and returns the node representing the state in which
     * the process is in.
     *
     * @param session the session into which to perform this operation
     * @param processInstanceId the identifier for the process instance to load
     * @return the node in which the process instance with the argument id is currently present
     */
    public static $processDefinition.nodeInterfaceName getProcess(final org.jbpm.db.JbpmSession session, final java.lang.Long processInstanceId)
    {
        // the graph session allows us to work with the process definition
        final org.jbpm.db.GraphSession graphSession = session.getGraphSession();

        // load the process using the unique identifier argument
        final org.jbpm.graph.exe.ProcessInstance processInstance = graphSession.loadProcessInstance(processInstanceId.longValue());

        // the token for this process instance
        final org.jbpm.graph.exe.Token token = processInstance.getRootToken();

        // construct the node we're in
        return createNode(token);
    }

#end
#if ($processDefinition.startState)
#renderLocator($processDefinition.startState)
#end
#foreach ($state in $processDefinition.states)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.taskNodes)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.nodes)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.endStates)
#renderLocator($state)
#end
#foreach ($state in $processDefinition.forks)
#renderLocator($state)
#end

    /**
     * Saves the process instance to which this node is associated.
     *
     * @param session the session into which to perform this operation
     * @param node the process instance to persist will be retrieved from this node
     */
    public static void save(final org.jbpm.db.JbpmSession session, final $processDefinition.nodeInterfaceName node)
    {
        session.getGraphSession().saveProcessInstance(node.getToken().getProcessInstance());
    }
}

