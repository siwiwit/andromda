##
##
##
#macro (renderTokenName $name)
$stringUtils.separate($name,"_").toUpperCase()_TOKEN_NAME## no newline
#end
##
##
##
#set ($generatedFile = "${node.nodeClassName}.java")
#if ($stringUtils.isNotBlank($node.nodePackageName))
#set ($generatedFile = "$stringUtils.replace($node.nodePackageName,'.','/')/$generatedFile")
package $node.nodePackageName;

#end
#set ($nodeInterfaceName = $node.processDefinition.nodeInterfaceName)
/**
 * The node representing the $node.name state in the <em>$node.processDefinition.name</em> process.
 */
public final class $node.nodeClassName implements $nodeInterfaceName
{
    private org.jbpm.graph.exe.Token token = null;

#if ($node.split)
#foreach ($transition in $node.outgoing)
    /**
     * The name of one of the child tokens which is created once this node is entered, this particular
     * token is associated with the branch that is created by following the transition called
     * <em>$transition.name</em>.
     */
    public static final java.lang.String #renderTokenName($transition.name) = "$transition.name";

#end
#end
    /**
     * Constructs a new node using the specific process instance token. This constructor is package private
     * because it is not supposed to be instantiated by other regular classes.
     *
     * @param token the token for which this node is constructed
     */
    ${node.nodeClassName}(final org.jbpm.graph.exe.Token token)
    {
        this.token = token;
    }

    /**
     * This node is associated with a specific process instance and this method return the root token
     * for that instance.
     *
     * @return the token with which this node has been associated (constructed)
     */
    public org.jbpm.graph.exe.Token getToken()
    {
        return this.token;
    }

    /**
     * Returns the identifier for the underlying process instance. This method is a conveniece method as it
     * is perfectly equivalent to <code>new java.lang.Long(getToken().getProcessInstance().getId())</code>.
     *
     * @return the identifier for the proces instance to which this node is associated
     */
    public java.lang.Long getProcessInstanceId()
    {
        return new java.lang.Long(this.token.getProcessInstance().getId());
    }

#if ($node.finalState)
    /**
     * Ends the process instance.
     */
    public void endProcess()
    {
        this.token.end();
        this.token.getProcessInstance().end();
    }

#elseif ($node.taskNode)
#if (!$node.tasks.empty)
    /**
     * Returns true if all tasks for this node are ended.
     *
     * @return true if this node does not have any tasks that have not yet been finished, false otherwise
     */
    public boolean isTasksFinished()
    {
        return !this.token.getProcessInstance().getTaskMgmtInstance().hasUnfinishedTasks(this.token);
    }

#end
#foreach ($task in $node.tasks)
#set ($taskName = $stringUtils.upperCamelCaseName($task.name))
    /**
     * Starts this node's <em>$task.name</em> task.
     */
    public void start${taskName}()
    {
        final org.jbpm.taskmgmt.exe.TaskInstance task = this.get${taskName}Task();
        if (task != null)
        {
            task.start();
        }
    }

    /**
     * Finishes this node's <em>$task.name</em> task.
     */
    public void finish${taskName}()
    {
        final org.jbpm.taskmgmt.exe.TaskInstance task = this.get${taskName}Task();
        if (task != null)
        {
            task.end();
        }
    }

    /**
     * Checks whether or not this node's <em>$task.name</em> task has been finished.
     *
     * @return true if this node's $task.name has been finished, false otherwise
     */
    public boolean is${taskName}Finished()
    {
        final org.jbpm.taskmgmt.exe.TaskInstance task = this.get${taskName}Task();
        return task == null ? true : task.hasEnded();
    }

#set ($taskField = "task${taskName}")
    private org.jbpm.taskmgmt.exe.TaskInstance $taskField = null;

    org.jbpm.taskmgmt.exe.TaskInstance get${taskName}Task()
    {
        if (this.$taskField == null)
        {
            final java.util.Collection tasks = this.token.getProcessInstance().getTaskMgmtInstance().getTaskInstances();
            for (final java.util.Iterator taskIterator = tasks.iterator(); taskIterator.hasNext() && this.$taskField == null;)
            {
                final org.jbpm.taskmgmt.exe.TaskInstance taskInstance = (org.jbpm.taskmgmt.exe.TaskInstance)taskIterator.next();
                if ("$task.name".equals(taskInstance.getName()))
                {
                    this.$taskField = taskInstance;
                }
            }
        }
        return this.$taskField;
    }

#end
#end
#if ($node.split)
#foreach ($transition in $node.outgoing)
    /**
     * Returns the current node for the token found in the branch when following the outgoing
     * <em>$transition.name</em> transition. Since this token is a child of the token encapsulated by <em>this
     * node, and since this token can lead a life of its own it cannot be determined which node exactly
     * will be returned, this depends on the set of possible nodes through which the node can navigate.
     *
     * @return the node for this specific child token, or <code>null</code> if this child token does not exist
     */
    public $nodeInterfaceName get$stringUtils.upperCamelCaseName($transition.name)Node()
    {
        $nodeInterfaceName childNode = null;

        final org.jbpm.graph.exe.Token childToken = this.token.getChild("${transition.name}");
        if (childToken != null)
        {
            childNode = ${stringUtils.upperCamelCaseName($node.processDefinition.name)}.createNode(childToken);
        }

        return childNode;
    }

#end
#else
##
## this node can be signalled
##
#foreach ($transition in $node.outgoing)
#if ($node.outgoing.size() == 1)
#if ($transition.name)
#set ($signalMethodName = "signal$stringUtils.upperCamelCaseName($transition.name)")
#else
#set ($signalMethodName = "signal")
#end
#else
#if ($transition.name)
#set ($signalMethodName = "signal$stringUtils.upperCamelCaseName($transition.name)")
#else
#set ($signalMethodName = "signal$stringUtils.upperCamelCaseName($transition.target.name)")
#end
#end
#if ($transition.possibleTargetNodes.size() == 1)
#set ($signalReturnType = $transition.possibleTargetNodes.iterator().next().nodeClassName)
#else
#set ($signalReturnType = $nodeInterfaceName)
#end
    /**
     * Signals the process to leave this node
#if ($transition.name)
     * via the <em>$transition.name</em> transition
#end
     * and proceed to the next one.
#if ($node.initialState)
     * Calling this method will make the process leave the start state and enter the first node.
#end
#if ($target.outgoing.size() > 1)
     * Since this transition leads into a node that will split it up into different transitions
     * this method returns the {@link $nodeInterfaceName} instead of a concrete implementing class type.
#end
     *
     * @return the next node in the process
#if ($transition.name)
     *      after following the <em>$transition.name</em> transition
#end
     */
    public $signalReturnType ${signalMethodName}()
    {
        // signal this token to leave its node
#if ($transition.name)
        this.token.signal("$transition.name");
#else
        this.token.signal();
#end

#if ($transition.possibleTargetNodes.size() == 1)
        // simply return the next node instance
        return new ${transition.possibleTargetNodes.iterator().next().nodeClassName}(this.token);
#else
        // the node we're gonna return
        $signalReturnType targetNode = null;
        // get the name of the new node in which we've arrived
        final java.lang.String nodeName = this.token.getNode().getName();

        // we'll need to figure out which node is the next one
#foreach ($targetNode in $transition.possibleTargetNodes)
        if ("$targetNode.name".equals(nodeName)) targetNode = new ${targetNode.nodeClassName}(this.token); else
#end
            // hmm, apparently we have arrived in an unknown node, this could be a jbpm-cartridge bug
            throw new IllegalArgumentException("No matching node could be found for target token: " + nodeName);

        return targetNode;
#end
    }

#end
#end
}