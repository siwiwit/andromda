##
##
##
#macro (renderStartState $processDefinition $indent)
#if ($processDefinition.startState.initialState)
#set ($state = $processDefinition.startState)
${indent}<start-state#renderName($state)#renderSwimlane($state)>
## due to UML limitations it is not possible to have a task here
#transitions($state "${indent}    " false)
#events($state "${indent}")
## exception handlers not supported at this point
${indent}</start-state>

#end
#end
##
##
##
#macro (renderSwimlanes $processDefinition ${indent})
#if (!$processDefinition.swimlanes.empty)
#foreach ($swimlane in $processDefinition.swimlanes)
#if ($swimlane.assignmentExpressions.empty)
${indent}<swimlane name="$swimlane.name"/>
#else
${indent}<swimlane name="$swimlane.name">
#foreach ($expression in $swimlane.assignmentExpressions)
${indent}    <assignment expression="$expression"/>
#end
${indent}</swimlane>
#end

#end
#end
#end
##
##
##
#macro (renderStates $processDefinition $indent)
#if (!$processDefinition.states.empty)
#foreach ($state in $processDefinition.states)
${indent}<state name="$state.name">
#transitions($state "${indent}    " false)
#events($state "${indent}    ")
${indent}</state>

#end
#end
#end
##
##
##
#macro (renderNodes $processDefinition $indent)
#if (!$processDefinition.nodes.empty)
#foreach ($node in $processDefinition.nodes)
${indent}<node name="$node.name">
#transitions($node "${indent}    " false)
#events($node "${indent}    ")
${indent}</node>

#end
#end
#end
##
##
##
#macro (renderEndStates $processDefinition $indent)
#if (!$processDefinition.endStates.empty)
#foreach ($state in $processDefinition.endStates)
${indent}<end-state name="$state.name"/>

#end
#end
#end
##
##
##
#macro (renderTaskNodes $processDefinition $indent)
#if (!$processDefinition.taskNodes.empty)
#foreach ($state in $processDefinition.taskNodes)
${indent}<task-node name="$state.name">
#tasks($state "${indent}    ")
#transitions($state "${indent}    " false)
#events($state "${indent}    ")
${indent}</task-node>

#end
#end
#end
##
##
##
#macro (renderDecisions $processDefinition $indent)
#if (!$processDefinition.decisions.empty)
#foreach ($decision in $processDefinition.decisions)
${indent}<decision name="$decision.name">
${indent}    <handler class="${decision.clazz}Impl"#renderConfigType($decision)/>
#transitions($decision "${indent}    " true)
${indent}</decision>

#end
#end
#end
##
##
##
#macro (renderForks $processDefinition $indent)
#if (!$processDefinition.forks.empty)
#foreach ($fork in $processDefinition.forks)
${indent}<fork name="$fork.name">
#transitions($fork "${indent}    " false)
${indent}</fork>

#end
#end
#end
##
##
##
#macro (renderJoins $processDefinition $indent)
#if (!$processDefinition.joins.empty)
#foreach ($join in $processDefinition.joins)
${indent}<join name="$join.name">
#transitions($join "${indent}    " false)
${indent}</join>

#end
#end
#end
##
##
##

##
##
##
#macro (events $state $indent)
#if (!$state.beforeSignal.empty)
${indent}<event type="before-signal">
#actions($state.beforeSignal "${indent}    ")
${indent}</event>
#end
#if (!$state.afterSignal.empty)
${indent}<event type="after-signal">
#actions($state.afterSignal "${indent}    ")
${indent}</event>
#end
#if (!$state.nodeEnter.empty)
${indent}<event type="node-enter">
#actions($state.nodeEnter "${indent}    ")
${indent}</event>
#end
#if (!$state.nodeLeave.empty)
${indent}<event type="node-leave">
#actions($state.nodeLeave "${indent}    ")
${indent}</event>
#end
#end
##
##
##
#macro (tasks $taskNode $indent)
#foreach ($task in $taskNode.tasks)
${indent}<task#renderName($task)#renderDueDate($task) blocking="$task.blocking"## no newline
#if ($task.operation.arguments.empty)
/>
#else
>
${indent}    <controller>
#foreach ($parameter in $task.operation.arguments)
#set($access="")#set($comma="")
#if($parameter.required)#set($access="required")#set($comma=",")#end
#if($parameter.readable)#set($access="${access}${comma}read")#set($comma=",")
#elseif($parameter.writable)#set($access="${access}${comma}write")#end
${indent}        <variable name="$parameter.name"#if($access) access="${access}"#end/>
#end
${indent}    </controller>
${indent}</task>
#end
#end
#end
##
##
##
#macro (actions $actions $indent)
#foreach ($action in $actions)
${indent}<action#renderName($action)#renderClass($action)#renderConfigType($action)/>
#end
#end
##
##
##
#macro (transitions $state $indent $considerConditions)
#foreach ($transition in $state.outgoing)
#if($transition.condition || $transition.trigger)
${indent}<transition#renderName($transition) to="$transition.target.name">
#if ($transition.trigger)
${indent}   <action#renderName($transition.trigger)#renderClass($transition.trigger)#renderConfigType($transition.trigger)/>
#end
#if($considerConditions && $transition.condition)
${indent}   <condition>
${indent}       <![CDATA[${transition.condition}]]>
${indent}   </condition>
#end
${indent}</transition>
#else
${indent}<transition#renderName($transition) to="$transition.target.name"/>
#end
#end
#end
##
##
##
#macro (renderName $element)
#if ($element.name)
 name="$element.name"## no newline
#end
#end
##
##
##
#macro (renderClass $element)
#if ($element.clazz)
 class="${element.clazz}Impl"## no newline
#end
#end
##
##
##
#macro (renderConfigType $element)
#if ($element.configType)
 config-type="$element.configType"## no newline
#end
#end
##
##
##
#macro (renderDueDate $element)
#if ($element.dueDate)
 duedate="$element.dueDate"## no newline
#end
#end
##
##
##
#macro (renderSwimlane $element)
#if ($element.swimlane)
 swimlane="$element.swimlane.name"## no newline
#end
#end
