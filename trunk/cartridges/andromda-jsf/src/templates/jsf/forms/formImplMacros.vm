##
##  This macro renders the backing list support for the form implementation
##
#macro(renderBackingListImplSupport $field $ownerParameter)
#if ($field.labelListName)
#set ($labelListName = $field.labelListName)
#set ($valueListName = $field.valueListName)
#set ($backingListName = $field.backingListName)
#else
#set ($labelListName = $field.getLabelListName($ownerParameter))
#set ($valueListName = $field.getValueListName($ownerParameter))
#set ($backingListName = $field.getBackingListName($ownerParameter))
#end

    /**
     * Stores the values.
     */
    private Object[] $valueListName;
    
    /**
     * Stores the labels
     */
    private Object[] $labelListName;
#set ($listType = "Object[]")
#set ($backingListMethod = $stringUtils.capitalize($backingListName))
#set ($valueListMethod = $stringUtils.capitalize($valueListName))
#set ($labelListMethod = $stringUtils.capitalize($labelListName))
    public $listType get${backingListMethod}()
    {
        $listType values = this.${valueListName};
        $listType labels = this.${labelListName};

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }

        final int length = Math.min(labels.length, values.length);
        javax.faces.model.SelectItem[] backingList = new javax.faces.model.SelectItem[length];

        for (int ctr = 0; ctr < length; ctr++)
        {
            backingList[ctr] = new javax.faces.model.SelectItem(values[ctr], String.valueOf(labels[ctr]));
        }
        return backingList;
    }

    public $listType get${valueListMethod}()
    {
        return this.$valueListName;
    }

    public void set${valueListMethod}($listType $valueListName)
    {
        this.$valueListName = $valueListName;
    }

    public $listType get${labelListMethod}()
    {
        return this.$labelListName;
    }

    public void set${labelListMethod}($listType $labelListName)
    {
        this.$labelListName = $labelListName;
    }

#set ($setBackingListMethodSignature = "set${backingListMethod}(java.util.Collection items, String valueProperty, String labelProperty, Class valuePropertyType)")
    public void $setBackingListMethodSignature
    {
        if (valueProperty == null || labelProperty == null)
        {
            throw new IllegalArgumentException("${action.formImplementationName}.${setBackingListMethodSignature} requires non-null arguments");
        }
        this.${valueListName} = null;
        this.${labelListName} = null;
        if (items != null)
        {
            this.${valueListName} = new Object[items.size()];
            this.${labelListName} = new Object[items.size()];

            try
            {
                int ctr = 0;
                for (final java.util.Iterator iterator = items.iterator(); iterator.hasNext(); ctr++)
                {
                    final Object item = iterator.next();
                    this.${valueListName}[ctr] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty.trim());
                    // - if the valuePropertyType is specified, attempt to convert all values to that type
                    if (valuePropertyType != null)
                    {
                        final Object value = this.${valueListName}[ctr];
                        if (value != null && !valuePropertyType.isInstance(value))
                        {
                            try
                            {
                                this.${valueListName}[ctr] = org.apache.commons.beanutils.ConvertUtils.convert(String.valueOf(value), valuePropertyType);      
                            }
                            catch (final Exception exception)
                            {
                                // - ignore, means we couldn't perform the conversion
                            }
                        }                   
                    }
                    this.${labelListName}[ctr] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty.trim());
                }
            }
            catch (final Throwable throwable)
            {
                throw new RuntimeException(throwable);
            }
        }
    }
    
    public void set${backingListMethod}(java.util.Collection items, String valueProperty, String labelProperty)
    {
        this.set${backingListMethod}(items, valueProperty, labelProperty, null);
    }
    
#if ($field.type.arrayType || $field.type.collectionType)
#if ($field.backingListName)
#set ($backingValueName = $field.backingValueName)
#else
#set ($backingValueName = $field.getBackingValueName($ownerParameter))
#end
#set ($backingValueMethod = $stringUtils.capitalize($backingValueName))
    private $field.type.fullyQualifiedName $backingValueName;

    public void set${backingValueMethod}($field.type.fullyQualifiedName $backingValueName)
    {
        this.$backingValueName = $backingValueName;
    }
    
    public $field.type.fullyQualifiedName get${backingValueMethod}()
    {
        return this.$backingValueName;
    }
#end
#end
##
## This macro renders the the date/time formatters within the form implementation
## 
#macro(renderDateTimeFormatters $field $ownerParameter)
#if ($field.backingListName)
#set ($dateFormatter = $field.dateFormatter)
#set ($timeFormatter = $field.timeFormatter)
#set ($fieldName = $field.name)
#else
#set ($dateFormatter = $field.getDateFormatter($ownerParameter))
#set ($timeFormatter = $field.getTimeFormatter($ownerParameter))
#set ($fieldName = $field.getFormPropertyName($ownerParameter))
#end
#set ($lenient = !$field.strictDateFormat)
#if ($field.type.dateType)
        java.text.DateFormat $dateFormatter = new java.text.SimpleDateFormat("$field.format");
        ${dateFormatter}.setLenient($lenient);
        this.dateTimeFormatters.put("$fieldName", $dateFormatter);
#elseif ($field.type.timeType)
        java.text.DateFormat $timeFormatter = new java.text.SimpleDateFormat("$field.format");
        this.dateTimeFormatters.put("$fieldName", $timeFormatter);
#end
#end