#set ($generatedFile = "${controller.fullyQualifiedNamePath}.java")
// license-header java merge-point
package $controller.packageName;

/**
$controller.getDocumentation(" * ")
 */
public abstract class $controller.name
    implements java.io.Serializable
{
#foreach ($operation in $controller.operations)
    /**
$operation.getDocumentation("     * ")
     */
    $operation.formSignature;

#end

#foreach ($action in $controller.useCase.actions)
#if (!$action.formFields.empty)
    /**
     * Retrieves the {@link $action.fullyQualifiedFormImplementationName} form instance (normally you wont't
     * need to call this method explicitly, however this is here for times when you need to access the
     * <em>$action.formBeanName</em> instance outside of its assigned controller operation).
     */
    protected $action.fullyQualifiedFormImplementationName $action.formImplementationGetter
    {
        return ($action.fullyQualifiedFormImplementationName)this.resolveVariable("$action.formBeanName");
    }
    
#end
    public java.lang.String ${action.triggerName}()
    {
        String forward = null;
        try
        {
#if (!$action.formFields.empty)
#set ($formPopulationOperationRequired = true)
            final $action.fullyQualifiedFormImplementationName form =
                this.$action.formImplementationGetter;

            // - pass any parameters from the previous form along
            ${managedBeansPackage}.${formPopulatorName}.populateForm(this.resolveVariable("$action.formKey"), form);
            // - populate the form with any request parameters that may match
            this.populateFormFromRequestParameters(form, form.getDateTimeFormatters());
#end
#if (!$deferredOperations.empty)
            try
            {
#end
                forward = #processTransition($action)
#if (!$action.formFields.empty && $action.formResetRequired)
                form.reset();
#end
#if (!$deferredOperations.empty)
            }
            catch (final Throwable throwable)
            {
                final String message = ${managedBeansPackage}.Messages.get(
                    ${managedBeansPackage}.${patternMatchingExceptionHandler}.instance().handleException(throwable), null);
                this.addErrorMessage(message);
            }
#end
#if (!$action.formFields.empty)
            this.getSession(true).setAttribute("$action.formKey", form);
#end
        }
        catch (final Throwable throwable)
        {
            this.addExceptionMessage(throwable);
            // - set the forward to null so that we stay on the current view
            forward = null;
        }
        return forward;
    }

#foreach ($actionState in $action.actionStates)
    /**
$actionState.getDocumentation("     * ")
     */
    private java.lang.String ${actionState.actionMethodName}(#if (!$action.formFields.empty)final $action.fullyQualifiedFormImplementationName form#end)
    {
        java.lang.String forward = null;
#if ($actionState.controllerCalls.empty)
        forward = #processTransition($actionState.forward)
#else
#foreach ($controllerCall in $actionState.controllerCalls)
#if (!$action.actionFormFields.empty)
        $controllerCall.formCall;
#else
        // we pass an empty form implementation to the controller, we know there are no parameters on this operation because the
        // cartridge would have issued a model validation error
        ${controllerCall.name}(new ${controllerCall.interfaceName}());
#end
#end
        forward = #processTransition($actionState.forward)
#end
        return forward;
    }

#end
#foreach ($decisionTransition in $action.decisionTransitions)
    /**
$decisionTransition.getDocumentation("     * ")
     */
    private java.lang.String __${decisionTransition.operationCall.name}(#if (!$action.formFields.empty)final $action.fullyQualifiedFormImplementationName form#end)
    {
        final String value = java.lang.String.valueOf($decisionTransition.operationCall.formCall);
#foreach ($outcome in $decisionTransition.target.outgoing)
#set ($defaultOutcome = $outcome)
        if (value.equals("$outcome.guard.name"))
        {
            return #processTransition($outcome)
        }
#end
        // we take the last action in case we have an invalid return value from the controller
        return #processTransition($defaultOutcome)
    }

#end
#end
#foreach ($serviceRef in $controller.serviceReferences)
#if ($stringUtils.isNotBlank($serviceRef.targetElement.accessorImplementation))
    /**
     * Returns a reference to the $serviceRef.name back-end service.
     */
    protected final $serviceRef.targetElement.fullyQualifiedName ${serviceRef.getterName}()
    {
        try
        {
            return $serviceRef.targetElement.accessorImplementation;
        }
        catch (final Throwable throwable)
        {
            throw new RuntimeException(throwable);
        }
    }

#end
#end
    /**
     * Gets the current faces context.  This object is the point
     * from which to retrieve any request, session, etc information.
     *
     * @return the JSF faces context instance.
     */
    protected javax.faces.context.FacesContext getContext()
    {
        return javax.faces.context.FacesContext.getCurrentInstance();
    }

    /**
     * A helper method that gets the current request from the faces
     * context.
     *
     * @return the current HttpServletRequest instance.
     */
    protected javax.servlet.http.HttpServletRequest getRequest()
    {
        return (javax.servlet.http.HttpServletRequest)this.getContext().getExternalContext().getRequest();
    }

    /**
     * A helper method that gets the current reponse from the faces
     * context.
     *
     * @return the current HttpServletReponse instance.
     */
    protected javax.servlet.http.HttpServletResponse getResponse()
    {
        return (javax.servlet.http.HttpServletResponse)this.getContext().getExternalContext().getResponse();
    }

    /**
     * A helper method that gets the current session from the faces
     * context.
     *
     * @param create If the create parameter is true, create (if necessary) and return a
     *        session instance associated with the current request. If the create
     *        parameter is false return any existing session instance associated with the
     *        current request, or return null if there is no such session.
     * @return the current HttpSession instance.
     */
    protected javax.servlet.http.HttpSession getSession(final boolean create)
    {
        return (javax.servlet.http.HttpSession)this.getContext().getExternalContext().getSession(create);
    }
    
    /**
     * Attempts to resolve the variable, given, the <code>name</code> of
     * the variable using the faces context variable resolver instance.
     * 
     * @return the resolved variable or null if not found.
     */
    protected java.lang.Object resolveVariable(final String name)
    {
        final javax.faces.context.FacesContext context = this.getContext();
        return context != null ? context.getApplication().getVariableResolver().resolveVariable(context, name) : null;    
    }

    /**
     * Finds the root cause of the given <code>throwable</code> and
     * adds the message taken from that cause to the faces context messages.
     *
     * @param throwable the exception information to add.
     */
    private final void addExceptionMessage(
        Throwable throwable)
    {
        String message = null;
        final Throwable rootCause = org.apache.commons.lang.exception.ExceptionUtils.getRootCause(throwable);
        if (rootCause != null)
        {
            message = rootCause.toString();
        }
        if (message == null || message.trim().length() == 0)
        {
            message = throwable.toString();
        }
        this.addErrorMessage(message);
    }

    /**
     * Adds the given error <code>message</code> to the current faces context.
     *
     * @param message the message to add.
     */
    protected void addErrorMessage(final String message)
    {
        this.addMessage(javax.faces.application.FacesMessage.SEVERITY_ERROR, message);
    }

    /**
     * Adds the given warning <code>message</code> to the current faces context.
     *
     * @param message the message to add.
     */
    protected void addWarningMessage(final String message)
    {
        this.addMessage(javax.faces.application.FacesMessage.SEVERITY_WARN, message);
    }

    /**
     * Adds the given info <code>message</code> to the current faces context.
     *
     * @param message the message to add.
     */
    protected void addInfoMessage(final String message)
    {
        this.addMessage(javax.faces.application.FacesMessage.SEVERITY_INFO, message);
    }

    /**
     * Adds the given fatal <code>message</code> to the current faces context.
     *
     * @param message the message to add.
     */
    protected void addFatalMessage(final String message)
    {
        this.addMessage(javax.faces.application.FacesMessage.SEVERITY_FATAL, message);
    }

    /**
     * Adds a message to the faces context (which will show up on your view when using the
     * lt;h:messages/gt; tag).
     *
     * @param severity the severity of the message
     * @param message the message to add.
     */
    protected void addMessage(final javax.faces.application.FacesMessage.Severity severity, final String message)
    {
        final javax.faces.application.FacesMessage facesMessage = new javax.faces.application.FacesMessage(severity, message, message);
        javax.faces.context.FacesContext.getCurrentInstance().addMessage(
            null,
            facesMessage);
    }
#if ($formPopulationOperationRequired)

    /**
     * Populates the form from the given parameters.  If the request parameter is null or an empty
     * string, then null is placed on the form.
     *
     * @param form the form to populate.
     * @param formatters any date or time formatters.
     */
    private final void populateFormFromRequestParameters(final Object form, final java.util.Map formatters)
    {
        try
        {
            final java.util.Map parameters = this.getContext().getExternalContext().getRequestParameterMap();
            for (final java.util.Iterator iterator = parameters.keySet().iterator(); iterator.hasNext();)
            {
                final String name = (String)iterator.next();
                if (org.apache.commons.beanutils.PropertyUtils.isWriteable(form, name))
                {
                    final java.beans.PropertyDescriptor descriptor =
                        org.apache.commons.beanutils.PropertyUtils.getPropertyDescriptor(form, name);
                    if (descriptor != null)
                    {
                        final String parameter = (String)parameters.get(name);
                        Object value = null;
                        // - only convert if the string is not empty
                        if (parameter != null && parameter.trim().length() > 0)
                        {
                            final java.text.DateFormat formatter = (java.text.DateFormat)formatters.get(name);
                            // - if the formatter is available we use that, otherwise we attempt to convert
                            if (formatter != null)
                            {
                                value = formatter.parse(parameter);
                            }
                            else
                            {
                                value = org.apache.commons.beanutils.ConvertUtils.convert(parameter, descriptor.getPropertyType());
                            }
                            org.apache.commons.beanutils.PropertyUtils.setProperty(form, name, value);
                        }
                    }
                }
            }
        }
        catch (final Throwable throwable)
        {
            throw new RuntimeException(throwable);
        }
    }
#end
#foreach ($sessionObjectRef in $controller.sessionObjectReferences)
#set ($targetElement = $sessionObjectRef.targetElement)

    /**
     * Returns the current $targetElement.name from the session found in the argument request.
     * <p/>
     * In case an object was found in the session but it was not of the correct type, this method
     * will return <code>null</code>.
     * <p/>
     * If there is no session, it will be created; if the session does not contain the session-object
     * the object will be instantiated and subsequently stored in the session.
     */
    protected final $targetElement.fullyQualifiedName ${sessionObjectRef.getterName}()
    {
        $targetElement.fullyQualifiedName object = null;
        final javax.servlet.http.HttpSession session = this.getSession(true);

        Object attribute = session.getAttribute("$sessionObjectRef.name");
        if (attribute instanceof $targetElement.fullyQualifiedName)
        {
            object = ($targetElement.fullyQualifiedName)attribute;
        }
        else if (attribute == null)
        {
            object = new ${targetElement.fullyQualifiedName}();
            ${sessionObjectRef.setterName}(object);
        }
        return object;
    }

    /**
     * Set the argument $targetElement .name object in the session corresponding with the argument request.
     * If the session does not exist it will be created.
     */
    protected final void ${sessionObjectRef.setterName}(final $targetElement.fullyQualifiedName object)
    {
        this.${sessionObjectRef.setterName}(object, true);
    }

    /**
     * Set the argument $targetElement.name object in the session corresponding with the argument request.
     * Any existing object will be overwritten.
     *
     * @param createSession denotes whether or not the session should be created automatically in case it
     * would not yet exist
     */
    protected final void ${sessionObjectRef.setterName}($targetElement.fullyQualifiedName object, boolean createSession)
    {
        final javax.servlet.http.HttpSession session = this.getSession(createSession);
        if (session != null)
        {
            session.setAttribute("$sessionObjectRef.name", object);
        }
    }

    /**
     * Removes the argument $targetElement.name object from the session corresponding with the argument request.
     * In any of the following cases this method will do nothing:
     * <ul>
     *   <li>No session corresponds to the argument request</li>
     *   <li>No $targetElement.name object could be found in the request</li>
     *   <li>The object is not of the correct type</li>
     * </ul>
     */
    protected final void remove${stringUtils.capitalize($sessionObjectRef.name)}()
    {
        final javax.servlet.http.HttpSession session = this.getSession(false);
        if (session != null)
        {
            Object attribute = session.getAttribute("$sessionObjectRef.name");
            if (attribute instanceof $targetElement.fullyQualifiedName)
            {
                session.removeAttribute("$sessionObjectRef.name");
            }
        }
    }

#end
}
##
##  This macro determines what to do when processing a transition
##
#macro (processTransition $transition)
#if (!$transition)
null;
#elseif ($transition.enteringFinalState || $transition.enteringView)
"$transition.name";
#elseif ($transition.enteringDecisionPoint)
__${transition.operationCall.name}(#if (!$action.formFields.empty)form#end);
#else
${transition.target.actionMethodName}(#if (!$action.formFields.empty)form#end);
#end
#end
