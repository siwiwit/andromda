#if ($umlUtils.shouldOutput($class))
## IMPORTANT!!! We can remove this when we upgrade to AndroMDA 3.4
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: UnexpectedException.vsl in andromda-java-cartridge.
//
#if ($stringUtils.isNotBlank($class.packageName))
package $class.packageName;
#end

#parse("templates/java/ExceptionUtilsImports.vm")

/**
$class.getDocumentation(" * ")
 */
#if ($XMLBindingAnnotations)
    @XmlRootElement(name="#if ($webFault)$faultClass#else$class.name#end")
    // Annotate get/set fields with @XmlTransient, not the private fields.
    @XmlAccessorType(XmlAccessType.PROPERTY)
    @XmlType(name="testApplicationException")
    @WebFault( name="${class.name}", faultBean="$class.fullyQualifiedName", targetNamespace="http://$javaUtils.reversePackage($class.packageName)")
#end
public#if($class.abstract) abstract#end class ${class.name}
#if($class.generalization)
    extends ${class.generalization.fullyQualifiedName}
#else
    extends RuntimeException
#end
#if (!$class.interfaceAbstractions.empty)
    implements $class.implementedInterfaceList
#end
{
#if ($serializable)
    /** The serial version UID of this class. Throwable implements Serializable so declaration not needed. */
    private static final long serialVersionUID = ${class.serialVersionUID}L;

#end
    /**
     * The default constructor.
     */
    public ${class.name}()
    {
        // Avoid compiler warning from uncommented empty method
    }

    /**
     * Constructs a new instance of ${class.name}
     *
     * @param throwable the parent Throwable
     */
    public ${class.name}(Throwable throwable)
    {
        super(findRootCause(throwable));
    }

    /**
     * Constructs a new instance of ${class.name}
     *
     * @param message the throwable message.
     */
    public ${class.name}(String message)
    {
        super(message);
    }

    /**
     * Constructs a new instance of ${class.name}
     *
     * @param message the throwable message.
     * @param throwable the parent of this Throwable.
     */
    public ${class.name}(String message, Throwable throwable)
    {
        super(message, findRootCause(throwable));
    }

    private Object[] messageArguments;

    /**
     * Gets the message arguments that can be used by message resources (in
     * something like the presentation tier)
     *
     * @return
     */
    public Object[] getMessageArguments()
    {
        return messageArguments;
    }

    /**
     * Sets the message arguments that can be used by message resources (in
     * something like the presentation tier)
     *
     * @param messageArguments
     */
    public void setMessageArguments(Object[] messageArguments)
    {
        this.messageArguments = messageArguments;
    }
#parse("templates/java/ExceptionUtils.vm")

}
#end