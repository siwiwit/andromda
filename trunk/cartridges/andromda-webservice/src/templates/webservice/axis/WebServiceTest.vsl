#if (!$service.allowedOperations.empty)
package $service.testPackageName;
#set ($generatedFile = "${stringUtils.replace($service.fullyQualifiedTestName,'.','/')}.java")

#set ($fullyQualifiedTestServiceLocator = $testServiceLocatorName)
#if($stringUtils.isNotEmpty($testServiceLocatorPackage))
#set ($fullyQualifiedTestServiceLocator = "${testServiceLocatorPackage}.${fullyQualifiedTestServiceLocator}")
#end

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

/**
 * JUnit test for web service {@link ${service.fullyQualifiedName}}.
 * <p>
 *   NOTE: You must generate the client stubs for the $service.fullyQualifiedName WSDL
 *   using axis's java2wsdl tool in order to run these tests.
 * </p>
 *
 * @see $service.fullyQualifiedName
 */
public abstract class $service.testName
    extends TestCase
{

    /**
     * Constructor for ${service.name}Test.
     *
     * @param testName name of the test.
     */
    public ${service.testName}(String testName)
    {
        super(testName);
    }

    /**
     * Allows the ${service.testName} to be run by JUnit as a suite.
     */
    public static Test suite()
    {
           return new TestSuite(${service.testImplementationName}.class);
    }

    /**
     * Runs the ${service.testName} test case.
     */
    public static void main(String[] args)
    {
        junit.textui.TestRunner.main(new String[] {${service.testImplementationName}.class.getName()});
    }

    /**
     * The service under test.
     */
    private ${service.testPackageName}.${service.name} service = null;

    /**
     * Returns the service under test {@link ${service.testPackageName}.${service.name}}
     */
    protected ${service.testPackageName}.${service.name} getService()
        throws Exception
    {
        if (this.username != null || this.password != null)
        {
            this.service = ${fullyQualifiedTestServiceLocator}.instance().get${service.name}(username, password);
        }
        else
        {
            this.service = ${fullyQualifiedTestServiceLocator}.instance().get${service.name}();
        }
        return this.service;
    }

    /**
     * The username providing access to the service under test.
     */
    private String username;

    /**
     * Sets the <code>username</code> providing access to the
     * service under test.
     *
     * @param username the username providing access to the
     *        service under test.
     */
    protected void setUsername(String username)
    {
        this.username = username;
    }

    /**
     * The password providing access to the service under test.
     */
    private String password;

    /**
     * Sets the <code>password</code> for the service under test.
     *
     * @param password the password for the service under test.
     */
    protected void setPassword(String password)
    {
        this.password = password;
    }

#foreach ($operation in $service.allowedOperations)
    /**
     * Tests: {@link ${service.fullyQualifiedName}#${operation.signature}}
     *
     * @see ${service.fullyQualifiedName}#${operation.signature}
     */
    public void $operation.testSignature
        throws java.lang.Exception
    {
        ${operation.testImplementationCall};
    }

    /**
     * Provides the actual test implementation for {@link #${operation.signature}}
     */
    protected abstract void ${operation.testImplementationSignature}
        throws java.lang.Exception;

#end
}
#end