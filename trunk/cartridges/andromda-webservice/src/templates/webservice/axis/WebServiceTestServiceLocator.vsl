#parse("templates/webservice/axis/AxisGlobals.vm")
#if (!$ejbsEnabled)
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceLocator.vsl in andromda-webservice-cartridge.
//
#set ($generatedFile = "${testServiceLocatorName}.java")
#if($stringUtils.isNotEmpty($testServiceLocatorPackage))
package $testServiceLocatorPackage;
#set ($generatedFile = "${stringUtils.replace($testServiceLocatorPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $testServiceLocatorName
{   
    private $testServiceLocatorName()
    {
        // shouldn't be instantiated
    }
    
    /**
     * The shared instance of this ${testServiceLocatorName}.
     */
    private final static $testServiceLocatorName instance = new $testServiceLocatorName();
    
    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final $testServiceLocatorName instance() 
    {
        return instance;
    }
    
#foreach ($service in $services)
#set ($serviceGetterName = "get${service.name}")
#set ($fullyQualifiedTestService = "${service.testPackageName}.${service.name}")
    /**
     * Gets an instance of {@link ${fullyQualifiedTestService}}, using the 
     * given <code>username</code> and <code>password</code> to log in.
     */
    public final $fullyQualifiedTestService $serviceGetterName(String username, String password)
        throws Exception
    {
#set ($serviceLocatorClass = "${service.testPackageName}.${service.name}ServiceLocator")
#set ($serviceLocatorStubClass = "${service.testPackageName}.${service.name}SoapBindingStub")   
        $serviceLocatorClass locator = new $serviceLocatorClass();
        $fullyQualifiedTestService service = locator.${serviceGetterName}();
        $serviceLocatorStubClass stub = ($serviceLocatorStubClass)service;	
        if (username != null)
        {
            stub.setUsername(username);
        }
        if (password != null)
        {
            stub.setPassword(password);
        }
        return service;
    }
    
    /**
     * Gets an instance of {@link ${service.fullyQualifiedName}} 	
     */
    public final $fullyQualifiedTestService $serviceGetterName()
        throws Exception
    {
        return $serviceGetterName(null, null);        
    }

#end
}
#end