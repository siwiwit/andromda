#if ($umlUtils.shouldOutput($pkg))
#set ($pkgTypes = $webServiceUtils.getPackageTypes($pkg, $extensionInheritanceDisabled))
#if (!$pkgTypes.empty)
<!-- Generated by andromda-webservice cartridge (jaxws/jaxws-package-xsd.vsl) on $webServiceUtils.date DO NOT EDIT! -->
    <xs:schema targetNamespace="http://$webServiceUtils.reversePackage($pkg.fullyQualifiedName)/"
        attributeFormDefault="$pkg.attributeFormDefault.toLowerCase()" elementFormDefault="$pkg.elementFormDefault.toLowerCase()" version="1.0"
        jxb:version="2.1" jxb:extensionBindingPrefixes="xjc"
## ${service.namespacePrefix} does not return the proper value in this context, works OK in jaxws-wsdl.vsl
        xmlns:impl="http://$webServiceUtils.reversePackage($pkg.fullyQualifiedName)/"
#set ($pkgRefs = $webServiceUtils.getPackageReferences($pkg, $extensionInheritanceDisabled))
#foreach ($pkgRef in $pkgRefs)
        xmlns:$webServiceUtils.getPkgAbbr($pkgRef)="http://$webServiceUtils.reversePackage($pkgRef.fullyQualifiedName)/"
#end
        xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
        xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
        xmlns:xs="$xmlSchemaNamespace">
#foreach ($pkgRef in $pkgRefs)
        <xs:import namespace="http://$webServiceUtils.reversePackage($pkgRef.fullyQualifiedName)/" xmlns="http://www.w3.org/2001/XMLSchema"
            schemaLocation="${webServiceUtils.reversePackage($pkgRef.fullyQualifiedName)}.xsd"/>
#end
        <!-- Service TypeMapping elements -->
#foreach ($type in $pkgTypes)
##foreach ($type in $webServiceUtils.getPackageTypes($pkg, $extensionInheritanceDisabled))
#if ($umlUtils.shouldOutput($type))
#set ($arrayItemName = ${stringUtils.uncapitalize($type.getSchemaType(false, false))})
## TODO: Add nillable option for all minOccurs=0 elements/attributes
#if ($type.many && $useArrayWrapper)
        <xs:complexType name="$type.wsdlArrayName">
            <xs:sequence>
                <xs:element name="$arrayItemName" minOccurs="0" maxOccurs="unbounded" form="qualified" type="${type.namespacePrefix}:${type.qName}" />
            </xs:sequence>
        </xs:complexType>
#end
## If the declared type ends in [] (configurable metafacade property)
#if ($type.arrayType && $useArrayWrapper)
        <xs:complexType name="$type.getSchemaType(false, true)">
            <xs:sequence>
                <xs:element name="$arrayItemName" minOccurs="0" maxOccurs="unbounded" form="qualified" type="$type.getSchemaType(true, false)" />
            </xs:sequence>
        </xs:complexType>
#else
#* *##if ($type.enumeration)
##       <!-- Enumeration $type.name $type.getSchemaType(false, true): qName=${type.qName} -->
#*     *##foreach ($literal in $type.literals)
##       <!-- $type.name literal: $literal -->
#*         *##if (!$stringUtils.isBlank($literal.type.schemaType))#set ($enumType = $literal.type.schemaType)#end
#*     *##end
#if ($stringUtils.isBlank($type.qName))#set ($typeName = ${type.name})#else#set ($typeName = $type.qName)#end
        <xs:simpleType name="${typeName}">
#if ($stringUtils.isNotBlank($type.getDocumentation("", 9999, false)))
            <xs:annotation><xs:documentation>
#if (!$stringUtils.containsNone($type.getDocumentation("", 64, false), "\"'&<>"))<![CDATA[#end
$type.getDocumentation("                ", 100, false)
#if (!$stringUtils.containsNone($type.getDocumentation("", 64, false), "\"'&<>"))]]>#end
            </xs:documentation></xs:annotation>
#end
#if ($stringUtils.isBlank($enumType))#set ($enumType = "xs:string")#end
            <xs:restriction base="$enumType">
#*     *##foreach ($literal in $type.literals)
##            <!-- $type.name literal: $literal -->
#if ($stringUtils.isNotBlank($literal.getDocumentation("", 9999, false)))
                <xs:enumeration value="${escapeUtils.escapeXml($literal.enumerationValue.replaceAll('"', ''))}">
                    <xs:annotation><xs:documentation>
#if (!$stringUtils.containsNone($literal.getDocumentation("", 64, false), "\"'&<>"))<![CDATA[#end
$literal.getDocumentation("                        ", 100, false)
#if (!$stringUtils.containsNone($literal.getDocumentation("", 64, false), "\"'&<>"))]]>#end
                    </xs:documentation></xs:annotation>
                </xs:enumeration>
#else
                <xs:enumeration value="${escapeUtils.escapeXml($literal.enumerationValue.replaceAll('"', ''))}"/>
#end
#*     *##end
            </xs:restriction>
        </xs:simpleType>
#* *##else
##        <!-- $type $type.name many=$attribute.many namespacePrefix=$type.namespacePrefix packageName=$type.packageName AschemaType=$attribute.type.schemaType qName=$type.qName isMany=$isMany schemaType=$schemaType -->
##if (!$service.allowedOperationExceptions.contains($type))
#if ($type.hasStereotype("ValueObject"))
        <!-- ValueObject -->
#if ($type.hasStereotype("WebFault") && $type.hasStereotype("Exception") || $type.hasStereotype("ApplicationException") || $type.hasStereotype("UnexpectedException"))
#if ($type.name.contains("Exception"))
#set ($typeName = $type.name.replace("Exception", "Fault"))
#else
#set ($typeName = "${type.name}Fault")
#end
#else
#set ($typeName = "$type.qName")
#end
##        <!-- WebFault=$type.hasStereotype("WebFault") Exception=$type.hasStereotype("Exception") ApplicationException=$type.hasStereotype("ApplicationException") UnexpectedException=$type.hasStereotype("UnexpectedException") -->
        <xs:element name="$typeName" type="impl:$typeName" />
        <xs:complexType name="$typeName">
#if ($stringUtils.isNotBlank($type.getDocumentation("", 9999, false)))
            <xs:annotation><xs:documentation>
#if (!$stringUtils.containsNone($type.getDocumentation("", 64, false), "\"'&<>"))<![CDATA[#end
$type.getDocumentation("                ", 100, false)
#if (!$stringUtils.containsNone($type.getDocumentation("", 64, false), "\"'&<>"))]]>#end
            </xs:documentation></xs:annotation>
#end
#set ($extensionRequired = $type.generalization && !$extensionInheritanceDisabled)
#if ($extensionRequired)
                <xs:complexContent>
                <xs:extension base="${type.generalization.namespacePrefix}:$type.generalization.qName">
#end
#set ($attributes = $type.getAttributes($extensionInheritanceDisabled))
#set ($otherEnds = $type.getNavigableConnectingEnds($extensionInheritanceDisabled))
##set ($otherEnds = $type.getNavigableConnectingEnds($extensionInheritanceDisabled))
## Output sequence if there are attributes/associations, and there are complex types or if everything is an element
##            <!-- Model: qName=${type.qName} hasComplexTypes=$webServiceUtils.hasComplexTypes($type, $extensionInheritanceDisabled) package=${type.packageName} attributes=$attributes.size() otherEnds=$otherEnds.size() schemaType=${type.getSchemaType(false, true)} otherEnds.empty=$otherEnds.empty attributes.empty=$attributes.empty !($useAttributes && $attributes.empty) -->
##            <!-- Model: qName=${type.qName} package=${type.packageName} schemaType=${type.getSchemaType(false, true)} -->
#if (!$otherEnds.empty||!($useAttributes && $attributes.empty) || $webServiceUtils.hasComplexTypes($type, $extensionInheritanceDisabled))
## xs:all indicates elements can exist in any order but can only appear once or not at all - can't use for arrays
## What we really need here is to see if any of the included elements are array elements maxOccurs > 1
#if ($useArrayWrapper)
            <xs:all>
#else
            <xs:sequence>
#end
#foreach ($attribute in $attributes)
#set ($attributeType = $attribute.type)
## Attribute type may be something other than WSDLType, i.e. Enumeration
#if (!$attributeType.wSDLTypeMetaType)
#if ($attributeType.packageName.equals($pkg.fullyQualifiedName))
#set ($pkgAbbr='impl')
#else
#set ($pkgAbbr=${webServiceUtils.getPkgAbbr($attributeType.package)})
#end
#set ($schemaType = "$pkgAbbr:${attributeType.name}")
#elseif ($attribute.many && $useArrayWrapper)
#set ($schemaType = "${attributeType.namespacePrefix}:${attributeType.wsdlArrayName}")
#elseif (!$attributeType.packageName.equals($pkg.fullyQualifiedName) && $stringUtils.isNotBlank($attributeType.packageName) && $attributeType.packageName.indexOf('.')>0 && !$attributeType.schemaType.startsWith("xs:"))
#set ($schemaType = "${webServiceUtils.getPkgAbbr($attributeType.package)}:${attributeType.qName}")
#else
#set ($schemaType = "$attribute.type.schemaType")
#end
#if (!$useArrayWrapper && ($attribute.many || $attributeType.arrayType))
#set ($maxOccurs=' maxOccurs="unbounded"')
#set ($isMany=true)
#else
#set ($maxOccurs='')
#set ($isMany=false)
#end
#set ($quote='"')
#if ($attribute.defaultValuePresent)
#set ($default=${attribute.defaultValue.replaceAll('"', '')})
#set ($use = " minOccurs=${quote}0$quote default=$quote$default$quote")
#elseif (!$attribute.nillable)
#set ($use = ' minOccurs="1"')
#else
#set ($use = ' minOccurs="0"')
#end
##                <!-- $attribute $attribute.type $attribute.name many=$attribute.many type=$type
##namespacePrefix=$type.namespacePrefix packageName=$type.packageName schemaType=$type.schemaType
##AschemaType=$attribute.type.schemaType qName=$type.qName -->
#if ((!$useAttributes) || ($isMany) || (!$stringUtils.substring($attribute.type.schemaType, 0, 3).equals("xs:")))
#if ($stringUtils.isNotBlank($attribute.getDocumentation("", 9999, false)))
                <xs:element name="$attribute.name" type="$schemaType"${use}${maxOccurs}>
                    <xs:annotation><xs:documentation>
#if (!$stringUtils.containsNone($attribute.getDocumentation("", 64, false), "\"'&<>"))<![CDATA[#end
$attribute.getDocumentation("                        ", 100, false)
#if (!$stringUtils.containsNone($attribute.getDocumentation("", 64, false), "\"'&<>"))]]>#end
                    </xs:documentation></xs:annotation>
                </xs:element>
#else
                <xs:element name="$attribute.name" type="$schemaType"${use}${maxOccurs}/>
#end
#end
#*     *##end
##if (!$otherEnds.empty)
##                <!-- Model associationEnds -->
##end
#foreach ($otherEnd in $otherEnds)
#set ($otherEndType = $otherEnd.type)
##                <!-- $otherEnd.name type.packageName=$type.packageName schemaType=$schemaType type.qName=$type.qName pkg=$pkg.fullyQualifiedName type.namespacePrefix=${type.namespacePrefix}  -->
#if ($otherEnd.many && $useArrayWrapper)
#set ($schemaType = "${otherEndType.namespacePrefix}:${otherEndType.wsdlArrayName}")
#elseif ($otherEndType.packageName.equals($pkg.fullyQualifiedName) && $stringUtils.isNotBlank($otherEndType.packageName) && $otherEndType.packageName.indexOf('.')>0)
#if ($stringUtils.isBlank(${otherEndType.namespacePrefix}) || $stringUtils.isBlank(${otherEndType.qName}))
#set ($schemaType = "impl:${otherEndType.name}")
#else
#set ($schemaType = "${otherEndType.namespacePrefix}:${otherEndType.qName}")
#end
#else
#if ($otherEndType.packageName.equals($pkg.fullyQualifiedName)))
#set ($schemaType = "impl:${otherEndType.name}")
#elseif ($stringUtils.isBlank(${otherEndType.qName}))
#set ($schemaType = "${webServiceUtils.getPkgAbbr($otherEndType.package)}:${otherEndType.name}")
#else
#set ($schemaType = "${webServiceUtils.getPkgAbbr($otherEndType.package)}:${otherEndType.qName}")
#end
#end
#if (!$useArrayWrapper && ($otherEnd.many || $otherEndType.arrayType))
#set ($maxOccurs=' maxOccurs="unbounded"')
#else
#set ($maxOccurs='')
#end
##                <!-- $otherEnd.name type.packageName=$type.packageName schemaType=$schemaType type.qName=$type.qName type.arrayType=$type.arrayType -->
#if ($stringUtils.isNotBlank($otherEnd.getDocumentation("", 9999, false)))
                <xs:element name="$otherEnd.name" type="${schemaType}"#if ($otherEnd.nillable) minOccurs="0"#else minOccurs="1"#end${maxOccurs}>
                    <xs:annotation><xs:documentation>
#if (!$stringUtils.containsNone($otherEnd.getDocumentation("", 64, false), "\"'&<>"))<![CDATA[#end
$otherEnd.getDocumentation("                        ", 100, false)
#if (!$stringUtils.containsNone($otherEnd.getDocumentation("", 64, false), "\"'&<>"))]]>#end
                    </xs:documentation></xs:annotation>
                </xs:element>
#else
                <xs:element name="$otherEnd.name" type="${schemaType}"#if ($otherEnd.nillable) minOccurs="0"#else minOccurs="1"#end${maxOccurs}/>
#end
#end
#if ($useArrayWrapper)
            </xs:all>
#else
            </xs:sequence>
#end
#end
#if ($useAttributes)
#foreach ($attribute in $attributes)
#set ($attributeType = $attribute.type)
#if ($attribute.many || $attributeType.arrayType)
#set ($isMany=true)
#else
#set ($isMany=false)
#end
#if ($attributeType.schemaType.startsWith("xs:") && !$isMany)
## Metafacade: Paramerter.getUpper returns -1 for multiplicity *
## Use optional/required instead of nillable. If default, parameter is always optional
##set ($quote='"')
#if ($attribute.defaultValuePresent)
##if ($attribute.type.name.equals("String") || $attribute.type.name.equals("Character") || $attribute.type.name.equals("char"))
##set ($default='"' + ${attribute.defaultValue.replaceAll('"', '')} + '"')
##else
#set ($default=${attribute.defaultValue.replaceAll('"', '')})
##end
#set ($use = " use=${quote}optional$quote default=$quote$default$quote")
#elseif (!$attribute.nillable)
#set ($use = ' use="required"')
#else
#set ($use = "")
#end
##            <!-- $attribute.name type=$attribute.getterSetterTypeName packageName=$attribute.packageName typeName=$attribute.fullyQualifiedName typeNameMdl=$attribute.getFullyQualifiedName(false) schemaType=$type.schemaType default=$attribute.defaultValuePresent -->
            <xs:attribute name="$attribute.name" type="$attributeType.schemaType"${use}>
#if ($stringUtils.isNotBlank($attribute.getDocumentation("", 9999, false)))
              <xs:annotation>
                <xs:documentation>
#if (!$stringUtils.containsNone($attribute.getDocumentation("", 64, false), "\"'&<>"))<![CDATA[#end
$attribute.getDocumentation("                        ", 100, false)
#if (!$stringUtils.containsNone($attribute.getDocumentation("", 64, false), "\"'&<>"))]]>#end
                </xs:documentation>
## JAXB does not bind wrapped types properly - always primitive if no custimization, always wrapped if customization
#if ($attribute.type.booleanType && $attribute.type.wrappedPrimitive && $stringUtils.isNotBlank($XMLBooleanAdapter))
                <xs:appinfo><jxb:property><jxb:baseType>
                  <xjc:javaType name="Boolean" adapter="$XMLBooleanAdapter"/>
                </jxb:baseType></jxb:property></xs:appinfo>
#end
              </xs:annotation>
#else
## JAXB does not bind wrapped types properly - always primitive if no custimization, always wrapped if customization
#if ($attribute.type.booleanType && $attribute.type.wrappedPrimitive && $stringUtils.isNotBlank($XMLBooleanAdapter))
              <xs:annotation><xs:appinfo><jxb:property><jxb:baseType>
                <xjc:javaType name="Boolean" adapter="$XMLBooleanAdapter"/>
              </jxb:baseType></jxb:property></xs:appinfo></xs:annotation>
#end
#end
            </xs:attribute>
#end
#end
#end
#*     *##if ($extensionRequired)
            </xs:extension>
            </xs:complexContent>
#*     *##end
        </xs:complexType>
##if ($type.hasStereotype("WebFault") && $type.hasStereotype("ValueObject"))
##        </xs:element>
##end
##end
##end
#end
#end
#end
#end
#end
    </xs:schema>
#end
#end