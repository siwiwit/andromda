// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA, can be edited
 *
 * TEMPLATE: jaxws/JettyServer.java.vsl in andromda-webservices-cartridge
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
 * SERVICE:  $service.name
##foreach ($stereotype in $service.stereotypes)
## * STEREOTYPE:  $stereotype.name
##end
#end
#end
*/
##if ($stringUtils.isNotBlank($service.packageName))
##package ${service.packageName}.test;
##end

import org.mortbay.jetty.Connector;
import org.mortbay.jetty.Handler;
import org.mortbay.jetty.Server;
import org.mortbay.jetty.handler.DefaultHandler;
import org.mortbay.jetty.handler.HandlerCollection;
import org.mortbay.jetty.nio.SelectChannelConnector;
import org.mortbay.jetty.webapp.WebAppContext;

/**
 * Simple class to start a web server with one simple class, to test web services
 * and web server configuration. Based on CXF Samples: java_first_spring_support
 */
public class JettyServer
{
    /**
     * @throws Exception
     */
    protected JettyServer() throws Exception
    {
        System.out.println("Starting Jetty Server");

        /**
         * Important: This code simply starts up a servlet container and adds
         * the web application in src/webapp to it. Normally you would be using
         * Jetty or Tomcat and have the webapp packaged as a WAR. This is simply
         * a convenience so you do not need to configure your servlet container to
         * see CXF in action or run integration tests!. For additional logging and debugging, add:
         * -Djava.util.logging.config.file=%CXF_HOME%/etc/logging.properties.
         * See https://cwiki.apache.org/confluence/display/CXF20DOC/Debugging+and+Logging
         * Or add mda/log4j.xml to the test classpath.
         */
        Server server = new Server();

        SelectChannelConnector connector = new SelectChannelConnector();
        connector.setPort($webservicePort);
        server.setConnectors(new Connector[] {connector});

        WebAppContext webappcontext = new WebAppContext();
        webappcontext.setContextPath("/$webContext");

        // Rational Developer requires this to be the Web Content directory.
        webappcontext.setWar("WebContent");

        HandlerCollection handlers = new HandlerCollection();
        handlers.setHandlers(new Handler[] {webappcontext, new DefaultHandler()});

        //EventLogInInterceptor myInterceptor = new EventLogInInterceptor();
        //org.apache.cxf.endpoint.Server CXFserver = serverFactoryBean.create();
        //CXFserver.getEndpoint().getInInterceptors().add(myInterceptor);

        server.setHandler(handlers);
        server.start();
        System.out.println("Jetty Server running on port $webservicePort under context $webContext...");
        server.join();
    }

    /**
     * @param args
     * @throws Exception
     */
    public static void main(String args[]) throws Exception
    {
        new JettyServer();
    }
}