#if ($umlUtils.shouldOutput($service))
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    jaxws/WebServiceInterface.vsl in andromda-webservices-cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($operation in $service.allowedOperations)
#if ($operation.hasStereotype("WebServiceOpeation"))
#foreach ($stereotype in $operation.stereotypes)
 * STEREOTYPE:  $stereotype.name in $operation.name
#end
#end
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  $constraint.name: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end $constraint.body
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end
#set ($defaultParameterStyle=${stringUtils.upperCase($defaultParameterStyle)})

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.ParameterStyle;
import javax.jws.soap.SOAPBinding.Style;
import javax.jws.soap.SOAPBinding.Use;
#if ($operation.restAtom)
import org.apache.abdera.model.Feed;
#end
#if (!$cxfVersion.startsWith("2.0"))
import javax.xml.bind.annotation.XmlSeeAlso;
#end
## Request and Response Wrapper classes are copied from CXF scratch area after running buildWS.xml
#if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
#end

/**
 * WebService Endpoint Interface class for the $service.name service. Declared as
 * wsdl:portType name=""${service.name}" in ${service.name}.wsdl. Implemented by
 * ${service.fullyQualifiedName}SEIImpl which delegates to ${service.name}WSDelegate
$service.getDocumentation(" * ")
 */

@WebService(targetNamespace="http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end",
            name = "${service.name}")
## Always use Doc/Literal bare, multiple in parameters will be wrapped automatically, assume all parameters are IN only
#set ($packageRefs = $webServiceUtils.getServiceDescendantPackages($service, true))
#if (!$packageRefs.empty && !$cxfVersion.startsWith("2.0"))
@XmlSeeAlso({
#foreach ($pkg in $packageRefs)
    ${pkg.fullyQualifiedName}.ObjectFactory.class,
#end
    ObjectFactory.class})
#end
@SOAPBinding(style = Style.${stringUtils.upperCase($service.style)}, use = Use.${stringUtils.upperCase($service.use)}, parameterStyle = ParameterStyle.${stringUtils.upperCase($defaultParameterStyle)})
#if ($stringUtils.equals(${persistenceContainerName}, "jboss"))
@org.jboss.ws.annotation.PortComponent(contextRoot = "${webServiceContextRoot}", urlPattern="${webServiceUrlPattern}/${service.qName}/*")
#end
public interface ${service.name}SEI
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}SEI
#end
{
#foreach ( $operation in $service.allowedOperations)
## Only expose public methods
#if ($operation.visibility == "public")

   /**
    * Invokes the $operation.name service method on ${service.name}. $operation.restAtom
$operation.getDocumentation("    * ")
##if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
##set ($returnType = "$stringUtils.capitalize(${operation.operationName})Response")
##    * @param $stringUtils.capitalize(${operation.operationName})RequestWrapper ${operation.operationName}RequestWrapper
##    * @return ${operation.operationName}Response $returnType
##else
#if (!$useArrayWrapper && $operation.many)
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
#end
#foreach ($parameter in $operation.arguments)
#if (!$useArrayWrapper && $parameter.many)
#set($multiplicity="*")
#else
#set ($multiplicity=$parameter.upper)
#end
    * @param $parameter.name $parameter.type.fullyQualifiedName required=$parameter.required Multiplicity $multiplicity
#end
#if ($operation.restAtom)
    * @return ${operation.operationName}Response org.apache.abdera.model.Feed
#elseif ($operation.returnTypePresent)
    * @return ${operation.operationName}Response $returnType
#end
##end
#foreach ( $exception in $operation.exceptions)
    * @throws $exception.fullyQualifiedName
#end
##    * @throws RemoteException if ${service.name}.${operation.name} fails
#foreach ($constraint in $operation.constraints)
    * CONSTRAINT:  ${constraint.name}: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end ${constraint.body}
#end
    */
## dotNet web services will not generate correctly from WSDL unless action is specified
##    // specify action = "urn:${operation.name}" if MS Interoperability is desired. WS operationName can be made unique here, if needed.
    @SOAPBinding(style = Style.${stringUtils.upperCase($service.style)}, use = Use.${stringUtils.upperCase($service.use)}, parameterStyle = ParameterStyle.${stringUtils.upperCase($defaultParameterStyle)})
#if (!$operation.returnTypePresent && !$operation.exceptionsPresent)
    @javax.jws.Oneway
#end
#if ($stringUtils.isBlank($operation.returnType.packageName) || $operation.returnType.schemaType.startsWith("xs:"))
#set ($type=$operation.returnType.schemaType)
#set ($typeName="$operation.returnParameter.name")
#else
#set ($type="${webServiceUtils.getPkgAbbr($operation.returnType.package)}:${operation.returnType.name}")
#set ($typeName="${stringUtils.uncapitalize($operation.returnType.name)}")
#end
#if ($operation.returnTypePresent)
## Avoid primitive types for wrapper attribute names, reserved keywords
#if ($stringUtils.isNotBlank($operation.returnParameter.name))
#set ($returnName=$stringUtils.capitalize($operation.returnParameter.name))
#else
#set ($returnName="#if ($stringUtils.isBlank($operation.returnType.packageName) || $operation.returnType.schemaType.startsWith('xs:'))_#end${operation.returnType.name}")
#end
#else
#set ($returnName=$stringUtils.capitalize($operation.name))
#end
    @WebResult(name = "$returnName", targetNamespace = "http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end") //, partName = "${operation.name}Response")
#if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
#if ($operation.returnTypePresent || $operation.exceptionsPresent)
    @ResponseWrapper(localName = "${operation.operationName}Response", targetNamespace = "http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end", className = "${service.packageName}.$stringUtils.capitalize($operation.operationName)Response")
#end
    @RequestWrapper(localName = "${operation.operationName}", targetNamespace = "http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end", className = "${service.packageName}.$stringUtils.capitalize($operation.operationName)")
#end
    @WebMethod(action = "${operation.operationName}", operationName = "${operation.operationName}")
    public #if ($operation.restAtom)org.apache.abdera.model.Feed#else$returnType#end $operation.name
##if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
##    (
##        @WebParam(targetNamespace = "http://$targetNamespace", name = "${operation.name}")
##        $stringUtils.capitalize(${operation.name}) ${operation.name}
##else
    (
#if (!$operation.arguments.empty)
#set ($comma = "  ")
#foreach ($parameter in $operation.arguments)
#if ($stringUtils.isNotBlank($parameter.type.packageName) && !$parameter.type.packageName.equals("PrimitiveTypes"))
#set ($targetNamespace="$webServiceUtils.reversePackage($parameter.type.packageName)#if($addNamespaceBackslash)/#end")
#else
#set ($targetNamespace="$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end")
#end
## Exception in webservices cartridge test: parameter upper not supported by UML14 facade
#if (!$useArrayWrapper && $parameter.many)
#set ($paramType="java.util.List<${parameter.type.fullyQualifiedName}>")
#else
#set ($paramType=$parameter.getterSetterTypeName)
#end
##end
## If parameter.name not supplied by WebParam, it defaults to arg0, arg1 etc from wsdlgen tools
      ${comma}@WebParam(name = "$parameter.name", targetNamespace = "http://$targetNamespace" , mode = WebParam.Mode.IN)
        $paramType $parameter.name
#set ($comma = ", ")
#end
#end
##end
#if ($operation.exceptionsPresent)
    )
        throws $operation.exceptionList;
##set ($comma = "throws")
##foreach ($exception in $operation.exceptions)
##        $comma $exception.fullyQualifiedName
##set ($comma = ",")
##end
##    ;
#else
    );
#end
#end
#end
}

#end
