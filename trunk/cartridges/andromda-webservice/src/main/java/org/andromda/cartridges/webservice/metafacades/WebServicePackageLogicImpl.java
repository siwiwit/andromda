// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.webservice.metafacades;

import java.text.MessageFormat;
import java.util.Collection;
import org.andromda.cartridges.webservice.WebServiceGlobals;
import org.andromda.cartridges.webservice.WebServiceUtils;
import org.andromda.metafacades.uml.PackageFacade;
import org.apache.commons.lang.StringUtils;

/**
 *
 * MetafacadeLogic implementation for org.andromda.cartridges.webservice.metafacades.WebServicePackage.
 *
 * @see org.andromda.cartridges.webservice.metafacades.WebServicePackage
 */
public class WebServicePackageLogicImpl
    extends WebServicePackageLogic
{
    private static final String DEFAULT = "default";

    /**
     * Public constructor for WebServicePackageLogicImpl
     * @param metaObject
     * @param context
     * @see org.andromda.cartridges.webservice.metafacades.WebServicePackage
     */
    public WebServicePackageLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * The property defining the default style to give the web services.
     */
    private static final String DEFAULT_ATTRIBUTE_FORM = "UNQUALIFIED";

    /**
     *
     * @return findTaggedValue(WebServiceGlobals.ATTRIBUTE_FORM_DEFAULT) or DEFAULT_ATTRIBUTE_FORM
     * @see org.andromda.cartridges.webservice.metafacades.WebServicePackage#getAttributeFormDefault()
     */
    protected String handleGetAttributeFormDefault()
    {
        String style = (String)this.findTaggedValue(WebServiceGlobals.ATTRIBUTE_FORM_DEFAULT);
        if (StringUtils.isEmpty(style) || style.equals(DEFAULT))
        {
            style = DEFAULT_ATTRIBUTE_FORM;
        }
        return style;
    }

    /**
     * The property defining the default style to give the web services.
     */
    private static final String DEFAULT_ELEMENT_FORM = "QUALIFIED";

    /**
     *
     * @return findTaggedValue(WebServiceGlobals.ELEMENT_FORM_DEFAULT) or DEFAULT_ELEMENT_FORM
     * @see org.andromda.cartridges.webservice.metafacades.WebServicePackage#getElementFormDefault()
     */
    protected String handleGetElementFormDefault()
    {
        String style = (String)this.findTaggedValue(WebServiceGlobals.ELEMENT_FORM_DEFAULT);
        if (StringUtils.isEmpty(style) || style.equals(DEFAULT))
        {
            style = DEFAULT_ELEMENT_FORM;
        }
        return style;
    }

    /**
     * reverseNamespace
     */
    static final String REVERSE_NAMESPACE = "reverseNamespace";
    /**
     *
     * @return findTaggedValue(WebServiceGlobals.XML_NAMESPACE) or REVERSE_NAMESPACE
     * @see org.andromda.cartridges.webservice.metafacades.WebServicePackage#getNamespace()
     */
    protected String handleGetNamespace()
    {
        String namespace = (String)this.findTaggedValue(WebServiceGlobals.XML_NAMESPACE);
        if (StringUtils.isEmpty(namespace))
        {
            if (Boolean.valueOf(String.valueOf(this.getConfiguredProperty(REVERSE_NAMESPACE))).booleanValue())
            {
                namespace = WebServiceUtils.reversePackage(this.getName());
            }
            String namespacePattern = (String)this.getConfiguredProperty(WebServiceLogicImpl.NAMESPACE_PATTERN);
            namespace = MessageFormat.format(
                namespacePattern,
                new Object[] {StringUtils.trimToEmpty(namespace)});
        }
        return namespace;
    }

    /**
     * @return findTaggedValue(WebServiceGlobals.XML_XMLNS) or WebServiceUtils.getPkgAbbr(this)
     * @see org.andromda.cartridges.webservice.WebServiceUtils#getPkgAbbr(PackageFacade)
     */
    protected String handleGetXmlns()
    {
        WebServiceUtils utils = new WebServiceUtils();
        String namespace = (String)this.findTaggedValue(WebServiceGlobals.XML_XMLNS);
        if (StringUtils.isEmpty(namespace))
        {
            namespace = utils.getPkgAbbr(this);
        }
        else
        {
            utils.addPkgAbbr(this, namespace);
        }
        return namespace;
    }

    /**
     *
     * @return new WebServiceUtils().getPackageReferences(this, true)
     * @see org.andromda.cartridges.webservice.WebServiceUtils#getPackageReferences(PackageFacade, boolean)
     */
    protected Collection<PackageFacade> handleGetPackages()
    {
        return new WebServiceUtils().getPackageReferences(this, true);
    }

    /**
     * <p>
     * Package Abbreviation
     * </p>
     * @return findTaggedValue(WebServiceGlobals.XML_XMLNS) or WebServiceUtils.getPkgAbbr(this)
     * @see org.andromda.cartridges.webservice.metafacades.WebServicePackage#getPackageAbbr()
     */
    protected String handleGetPackageAbbr()
    {
        WebServiceUtils utils = new WebServiceUtils();
        String namespace = (String)this.findTaggedValue(WebServiceGlobals.XML_XMLNS);
        if (StringUtils.isEmpty(namespace))
        {
            namespace = utils.getPkgAbbr(this);
        }
        else
        {
            utils.addPkgAbbr(this, namespace);
        }
        return namespace;
    }

    /**
     * <p>
     * Packages referenced by this package
     * </p>
     * @return WebServiceUtils.getPackageReferences(this, true)
     * @see org.andromda.cartridges.webservice.metafacades.WebServicePackage#getPackageReferences()
     * @see org.andromda.cartridges.webservice.WebServiceUtils#getPackageReferences(WebServiceLogicImpl, java.util.Set, String, boolean)
     */
    protected Collection<PackageFacade> handleGetPackageReferences()
    {
        WebServiceUtils utils = new WebServiceUtils();
        return utils.getPackageReferences(this, true);
    }

    /**
     *
     * @param follow
     * @return WebServiceUtils.getPackageReferences(this, follow)
     * @see org.andromda.cartridges.webservice.metafacades.WebServicePackage#getPackageReferences(boolean)
     */
    protected Collection<PackageFacade> handleGetPackageReferences(boolean follow)
    {
        WebServiceUtils utils = new WebServiceUtils();
        return utils.getPackageReferences(this, follow);
    }

    /**
     * Allow sorting and use in TreeSet
     * @see Comparable#compareTo(Object)
     */
    public int compareTo(Object object)
    {
        if (object==null || !(object instanceof WebServicePackageLogic))
        {
            return -1;
        }
        return ((WebServicePackageLogic)object).getFullyQualifiedName().compareTo(this.getFullyQualifiedName());
    }
}