## Include global definitions. ##
#parse("templates/EJBglobals.vm")
##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

import javax.ejb.EntityContext;
import javax.ejb.RemoveException;

/**
 * #firstJavadocParagraph(${class} "upper" "The $entityname entity bean.")
 *
#remainingJavadocParagraphs($class " ")
 *
 * <p>This class is intended to hold manual changes to the autogenerated 
 * implementation in {@link ${entityname}Bean}.</p>
 */
public abstract class ${entityname}BeanImpl extends ${entityname}Bean
{
    // concrete business methods that were declared
    // abstract in class ${entityname}Bean ...

#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) != "FinderMethod")
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#set ($msig = $transform.getOperationSignature($op))
#set ($visibility = $transform.getVisibility($op))
#set ($exceptions = "")
#set ($exceptions = $transform.findTagValue($op, "@andromda.java.throws"))
#if ($exceptions == "")
#set ($exceptions = $transform.findFullyQualifiedName($defaultException))
#end
## Public static methods are exposed on the home 
## interface instead of the component interface and must
## be prepended with "ejbHome"
#if ($visibility == "public" && $transform.isStatic($op)) 
#set ($msig = "ejbHome${str.upperCaseFirstLetter($msig)}")
#end
    /**
#generateDocumentation ($op "     ")
     */
#if ($exceptions != "")
    $visibility $returntype ${msig}
        throws $exceptions {
#else
    $visibility $returntype ${msig} {
#end
        // TODO put your implementation here.
#if ("void" != $returntype)

        // Dummy return value, just that the file compiles
#if (!$str.isPrimitiveType($returntype))
        return null;
#elseif ("boolean" == $returntype)
        return false;
#else
        return ($returntype)0;
#end
#end
    }

#end
#end

    // ------------ and the rest of the EJB stuff ---------------

    private EntityContext context;

    public void setEntityContext(EntityContext ctx)
    {
        //Log.trace("${class.name}Bean.setEntityContext...");
        context = ctx;
    }

    public void unsetEntityContext()
    {
        //Log.trace("${class.name}Bean.unsetEntityContext...");
        context = null;
    }

    public void ejbRemove() throws RemoveException
    {
        //Log.trace(
        //    "${class.name}Bean.ejbRemove...");
    }

    public void ejbLoad()
    {
        //Log.trace("${class.name}Bean.ejbLoad...");
    }

    public void ejbStore()
    {
        //Log.trace("${class.name}Bean.ejbStore...");
    }

    public void ejbPassivate()
    {
        //Log.trace("${class.name}Bean.ejbPassivate...");
    }

    public void ejbActivate()
    {
        //Log.trace("${class.name}Bean.ejbActivate...");
    }
}
