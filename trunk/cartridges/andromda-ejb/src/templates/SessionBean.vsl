/* Autogenerated by AndroMDA - do not edit */
## Include global definitions definitions. ##
#parse("templates/EJB.vm")
## Define project specific properties and macros ##
#macro(ejbRefName $class)ejb/${transform.replace($transform.findPackageName(${class.package}), '.', '/')}/${class.name}#end
##
## Global macro definitions. Normally, these do not need to be changed ##
#macro ( firstJavadocParagraph $item $case $default)
#set ( $parIter = false )
#foreach ( $tgv in $item.taggedValues )
#if ( $tgv.tag == "documentation" && !$parIter)
#set ($parIter = $transform.formatHTMLStringAsParagraphs($tgv.value).iterator())
#end
#end
#set ($text = "")
#if ($parIter && $parIter.hasNext())
#foreach ($line in ${parIter.next().lines} )
#set ($text = "$text $line")
#end
#set ($text = ${text.trim()})
#end
#if ($text == "")
#set ($text = "$default")
#end
#if ($case == "upper")
$str.upperCaseFirstLetter($text)
#elseif ($case == "lower")
$str.lowerCaseFirstLetter($text)
#else
$text
#end
#end
##
#macro ( remainingJavadocParagraphs $item $indent)
#set ($skip = true)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
#if ($skip)
#set ($skip = false)
#else
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
#end
##
#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
##
#macro (copyTaggedValues $item $indent $exclude)
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag.startsWith("@") && ! $exclude.contains($tgv.tag))
${indent}* $tgv.tag $tgv.value
#end
#end
#end
##
#set ($viewtype = $transform.findTagValue($class.taggedValues, "@andromda.ejb.viewType"))
#if (!$viewtype)
#set ($viewtype = "both")
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Autogenerated EJB implementation class for #firstJavadocParagraph(${class} "lower" "the $servicename session bean.")
#remainingJavadocParagraphs($class " ")
 *
#if ($class.isAbstract())
 * @ejb.bean generate="false"
#else
 * @ejb.bean generate="true"
#end
 *     name="$servicename"
 *     type="$servicetype"
 *     view-type="$viewtype"
 *     jndi-name = "#ejbRefName($class)/Remote"
 *     local-jndi-name = "#ejbRefName($class)/Local"
 *
 * @ejb.interface 
 *     local-class="${packagename}.${servicename}Local"
 *     remote-class="${packagename}.${servicename}"
 * @ejb.home 
 *     local-class="${packagename}.${servicename}LocalHome"
 *     remote-class="${packagename}.${servicename}Home"
 *
## Generate environment entries for all static, readonly attributes stereotyped
## as <<EnvEntry>>
#foreach($att in $transform.getStaticAttributes($class))
#if ($transform.getStereotype($att) == "EnvEntry")
#set ($value = $att.initialValue.body)
## Add string delimiters if they are not already present
#if (!$value.startsWith('"') || !$value.endsWith('"'))
#set ($value = '"' + $value + '"')
#end
 * @ejb.env-entry 
 *     name = "$att.name"
 *     type = "$transform.getFullyQualifiedName($att.type)"
 *     value = $value
 *
#end
#end
#foreach ( $dep in $class.dependencies )
#if ($transform.getStereotype($dep.id) == "EntityRef" || $transform.getStereotype($dep.id) == "ServiceRef")
#set ($myClass = $transform.findClassById($dep.targetType))
#set ($viewtype = "")
#set ($viewtype = $transform.findTagValue($myClass.taggedValues, "@andromda.ejb.viewType"))
#if ($viewtype == "")
#set ($viewtype = $transform.getEjbRefViewType(${myClass}))
#end
 *
 * @ejb.ejb-ref 
 *     ejb-name="${myClass.name}" 
 *     view-type="$viewtype" 
 *     ref-name="#ejbRefName($myClass)"
#end
#if ($transform.getStereotype($dep.id) == "ResourceRef")
#set ($myClass = $transform.findClassById($dep.targetType))
#set ($jndiRef = $transform.findTagValue($dep.id, "@andromda.ejb.resource-ref.jndi-name"))
#set ($resAuth = $transform.findTagValue($dep.id, "@andromda.ejb.resource-ref.res-auth"))
#if (!$resAuth)
#set ($resAuth = "Container")
#end
#set ($resName = $dep.name)
#if (!$resName)
#set ($resName = $myClass.name)
#end
 *
 * @ejb.resource-ref 
 *     res-ref-name="resource/$resName" 
 *     res-type="${transform.findFullyQualifiedName($myClass)}" 
 *     res-auth="$resAuth"
#if ($jndiRef)
 *
 * @jboss.resource-ref 
 *     res-ref-name = "resource/$resName" 
 *     jndi-name = "$jndiRef" 
#end
#end
#end
#copyTaggedValues($class " " [ "@andromda.ejb.viewType", "@andromda.ejb.transactionType" ])
 *
 */
public abstract class ${servicename}Bean 
       extends $beanparentclass
       implements javax.ejb.SessionBean
{
    // ----------- constant definitions --------------------
#foreach($att in $transform.getStaticAttributes($class))
#if ($transform.getStereotype($att) != "EnvEntry")
#set ($attType = $transform.getFullyQualifiedName($att.type))
#set ($ATT_NAME = $str.toDatabaseAttributeName($att.name, '_'))
    private static final $attType $ATT_NAME = $att.initialValue.body;
#end
#end
    
    // -- accessors for environment entries and constants --
#foreach($att in $transform.getStaticAttributes($class))
#set($attType = $transform.getFullyQualifiedName($att.type))
#set($AttName = $str.upperCaseFirstLetter($att.name))
#set ($visibility = $transform.getVisibility($att))

    /**
#if($transform.getStereotype($att) == "EnvEntry")
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} environment entry")
#else
#set ($ATT_NAME = $str.toDatabaseAttributeName($att.name, '_'))
     * Get #firstJavadocParagraph(${att} "lower" "the {@link #$ATT_NAME} constant")
#end
#remainingJavadocParagraphs($att "     ")
     *
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
     * @ejb.interface-method
#end
     */
    $visibility $attType get$AttName(){
#if($transform.getStereotype($att) == "EnvEntry")
        javax.naming.InitialContext initialContext = null;
        try {
            initialContext = new javax.naming.InitialContext();
            return (${attType}) initialContext.lookup("java:comp/env/$att.name");
        } catch (javax.naming.NamingException cause) {
            RuntimeException ex = new IllegalStateException(
                "Cannot access environment entry \"$att.name\".");
            // In order to set the exception cause on JDK 1.4
            // and stay JDK 1.3 compatible nonetheless, we need
            // a bit of reflection magic here...
            try {
                java.lang.reflect.Method initCause =
                  ex.getClass().getMethod("initCause", 
                                        new Class[] {Throwable.class});
                initCause.invoke(ex, new Object[] { cause });
            } catch (Throwable t) {
               // Ignore any errors here - we simply make do without the cause
            }
            throw ex;
        } finally {
            try {
                if (initialContext != null) { initialContext.close(); }
            } catch (javax.naming.NamingException ignore) {
                // Silently ignore naming exceptions at cleanup time
            }
        }
#else
        return $ATT_NAME;
#end
    }
## If the attribute is public, expose it to the home interface as well
#if($visibility == "public")

    /**
     * Home interface method for accessing {@link #get$AttName}.
     * @ejb.home-method
     * @see #get$AttName
     */
     public $attType ejbHomeGet$AttName() {
         return get$AttName();
     }
#end
#end

#set ($instanceAttributes = ${transform.getInstanceAttributes($class.id)})
#if(!${instanceAttributes.isEmpty()})
    // --------------- attributes ---------------------
#foreach ( $att in $instanceAttributes)
#set($attType = $transform.getFullyQualifiedName($att.type))    
#set($AttName = $str.upperCaseFirstLetter($att.name))
#set ($transactionType = $transform.findTagValue($att, "@andromda.ejb.transactionType", true))
#set ($visibility = $transform.getVisibility($att))
    /** #firstJavadocParagraph(${att} "upper" "The ${att.name} property") */
    private ${attType} $att.name;
    
    /**
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
#remainingJavadocParagraphs($att "     ")
     *
#if ($transactionType)
     * @ejb.transaction type="$transactionType"
#end
#if($visibility == "public")
     * @ejb.interface-method 
#end
     */
    $visibility $attType get$AttName() {
       return $att.name;
    }

## Only generate a setter if the attribute is not read-only
## Note: It's no use to generate final fields for read-only attributes because
## the fields are likely to be initialized in ejbActivate() or a similiar 
## method and not in the constructor.
#if (!$transform.isReadOnly($att))
    /**
     * Set #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
     * @param value the new value
#if($visibility == "public")
     * @ejb.interface-method 
#end     
#if ($transactionType)
     * @ejb.transaction type="$transactionType"
#end
     */
    $visibility void set$AttName($attType value) {
       this.$att.name = value;
    }
    
#end
#end
#end
    // ---------------- business methods  ----------------------

#foreach ( $op in $class.operations)
#if (${transform.getStereotype($op.id)} != "CreateMethod")
#set ($transactionType = $transform.findTagValue($op, "@andromda.ejb.transactionType", true))
#set ($msig = $transform.getOperationSignature($op))
#set ($interfaceType = "interface")
#set ($visibility = ${transform.getVisibility($op)})
#set($exceptions = "")
#set ($exceptions = $transform.findTagValue($op, "@andromda.java.throws"))
#if ($exceptions="")
#set ($exceptions = $transform.findFullyQualifiedName($defaultException))
#end
## Public static methods are exposed on the home 
## interface instead of the component interface
#if ($visibility == "public" && ${transform.isStatic($op)}) 
#set ($interfaceType = "home")
#set ($msig = "ejbHome${str.upperCaseFistLetter($msig)}")
#end
   /**
#generateDocumentation ($op "    ")
## Only public methods have transactions and are exported to the interfaces
#if ($visibility == "public")
    * @ejb.${interfaceType}-method 
#if ($transactionType)
    * @ejb.transaction type="$transactionType"
#end
#end
    */
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#if ($exceptions == "")
    $visibility abstract $returntype ${msig};    
#else
    $visibility abstract $returntype ${msig}
        throws $exceptions;
#end

#end
#end

    // ---------------- create methods --------------------
## Handle explicitly defined create methods. Since we can't know 
## what the user intended to do with the arbitrary parameters to these methods,
## we generate an abstract ejbCreate() and delegate the implementation to the user.
#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) == "CreateMethod")
#set ($transactionType = $transform.findTagValue($op, "@andromda.ejb.transactionType", true))

    /**
#generateDocumentation ($op "    ")
     * 
     * @ejb.create-method
#if ($transactionType)
     * @ejb.transaction type="$transactionType"
#end
     */
    public abstract void ejbCreate($transform.getOperationTypedParameterList($op));
    
    public void ejbPostCreate($transform.getOperationTypedParameterList($op)) {
    }
#end
#end
## Default create method with no arguments.

   /**
## Only expose the method to the interface for concrete EJBs
#if (!$class.isAbstract())
    * @ejb.create-method
    * @ejb.transaction type="Required"
#end
    */
    public void ejbCreate()
           throws javax.ejb.CreateException
    {}

    public void ejbPostCreate()
           throws javax.ejb.CreateException
    {}

## Autogenerated create method with all attributes. Only present for stateful beans.
#set ($allAttributes = ${transform.getAllInstanceAttributes($class.id)})
#if (${allAttributes.isEmpty()} == false)
    /**
     * Create method with all attribute values.
#set ($inheritedAttributes = ${transform.getInheritedInstanceAttributes($class.id)})
#foreach($att in $allAttributes)
     * @param $att.name Value for #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
#end
     * @ejb.create-method
     * @ejb.transaction type="Required"
     */
    public void ejbCreate($transform.getAttributesAsList($allAttributes, true, true))
           throws javax.ejb.CreateException
    {
#if(!${inheritedAttributes.isEmpty()})
        // Call ejbCreate method for the super type
        super.ejbCreate($transform.getAttributesAsList($inheritedAttributes, false, true));
#end
#foreach ( $att in $transform.getInstanceAttributes($class))
## Don't use a setter here - we may have none if the attribute is marked readonly
        this.${att.name} = ${att.name};
#end
    }

    public void ejbPostCreate($transform.getAttributesAsList($allAttributes, true, true))
           throws javax.ejb.CreateException
    {
#if(!${inheritedAttributes.isEmpty()})
        // Call postCreate method for the super type
        super.ejbPostCreate($transform.getAttributesAsList($inheritedAttributes, false, true));
#end
    }
#end

    // ---------------- accessor methods for bean references ---------------

#foreach ( $dep in $class.dependencies )
#set ($viewtype = "")
#if ($transform.getStereotype($dep.id) == "EntityRef" || $transform.getStereotype($dep.id) == "ServiceRef")
#set ($referencedClass = $transform.findClassById($dep.targetType))
#set ($viewtype = $transform.findTagValue($myClass.taggedValues, "@andromda.ejb.viewType"))
#if ($viewtype == "")
#set ($viewtype = $transform.getEjbRefViewType(${referencedClass}))
#end
#if ($viewtype == "local")
#set ($homeInterfaceName = "${referencedClass.name}LocalHome")
#set ($fqHomeInterfaceName = "${transform.findFullyQualifiedName($referencedClass)}LocalHome")
    /**
     * Get the local home interface of the ${referencedClass.name} bean.
     * The home interface is obtained from the initial context 
     * by looking up the bean reference name.
     * @return local home interface for ${referencedClass.name}. 
     */
    protected static ${fqHomeInterfaceName} get${homeInterfaceName}() throws javax.naming.NamingException
    {
        javax.naming.InitialContext initialContext = 
            new javax.naming.InitialContext();
        try {
            // Local homes shouldn't be narrowed, as there is no RMI involved.
            ${fqHomeInterfaceName} home = 
                (${fqHomeInterfaceName}) initialContext.lookup("java:comp/env/#ejbRefName($referencedClass)");
            return home;
        } finally {
            initialContext.close();
        }
    }
#end
#if ($viewtype == "remote")
#set ($homeInterfaceName = "${referencedClass.name}Home")
#set ($fqHomeInterfaceName = "${transform.findFullyQualifiedName($referencedClass)}Home")
    /**
     * Get the remote home interface of the ${referencedClass.name} bean.
     * The home interface is obtained from the initial context 
     * by looking up the bean reference name.
     * @return remote home interface for ${referencedClass.name}. Lookup using bean ref name.
     */
    protected static ${fqHomeInterfaceName} get${homeInterfaceName}() throws javax.naming.NamingException
    {
        javax.naming.InitialContext initialContext = 
            new javax.naming.InitialContext();
        try {
            Object home = 
                 initialContext.lookup("java:/comp/env/#ejbRefName($referencedClass)");
            return ($fqHomeInterfaceName) 
                   javax.rmi.PortableRemoteObject.narrow(home, 
                   ${fqHomeInterfaceName}.class);
        } finally {
            initialContext.close();
        }
    }
#end
#end
#if ($transform.getStereotype($dep.id) == "ResourceRef")
#set ($referencedClass = $transform.findClassById($dep.targetType))
#set ($resClassName = "${transform.findFullyQualifiedName($referencedClass)}")
#set ($resName = $dep.name)
#if (!$resName)
#set ($resName = $referencedClass.name)
#end
    /**
     * Get the ${resName} resource. 
     * The resource is obtained by looking up
     * <code>java:/comp/env/resource/$resName</code> in JNDI
     * @return the ${resName} resource
     */
    protected static ${resClassName} get${str.upperCaseFirstLetter($resName)}() throws javax.naming.NamingException
    {
        javax.naming.InitialContext initialContext = 
            new javax.naming.InitialContext();
        try {
            Object resource = 
                 initialContext.lookup("java:/comp/env/resource/$resName");
            return ($resClassName) resource;
        } finally {
            initialContext.close();
        }
    }
#end
#end
}
