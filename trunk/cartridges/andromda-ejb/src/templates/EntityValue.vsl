/* Autogenerated by AndroMDA - do not edit */
## Define project specific properties and macros ##
#set ($tablename = $str.toDatabaseAttributeName($entityname, '_'))
## Include global definitions. ##
#parse("templates/EJBglobals.vm")
##
##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Value object for #firstJavadocParagraph(${class} "lower" "the $entityname entity bean.")
#remainingJavadocParagraphs($class " ")
 *
 *
 */
#set ($parentClass = $transform.getGeneralization($class.id))
public class ${entityname}Value 
#if ($parentClass)
#set ($parentStereotype = $transform.getStereotype($myClass))
#if ( $parentStereotype == "Entity")
       extends ${transform.findFullyQualifiedName($parentClass)}Value
#end
#end
       implements ${entityname}Attr, java.io.Serializable
{
    // --------------- constructors -------------------
    /** Construct a new, empty value object */
    public ${entityname}Value() {}
    
#set ($attributes = $transform.filterByVisibility($transform.getAllInstanceAttributes($class.id), "public"))
#if (!$attributes.isEmpty())
#set ($inheritedAttributes = $transform.filterByVisibility($transform.getInheritedInstanceAttributes($class.id), "public"))
    /**
     * Construct a new value object with all attributes set.
#foreach($att in $attributes)
     * @param $att.name Value for #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
#end
     */
    public ${entityname}Value($transform.getAttributesAsList($attributes, true, true)#foreach ($rel in $relations), ${transform.getRelationTargetType($rel)} $rel.target.roleName#end)
    {
        super($transform.getAttributesAsList($inheritedAttributes, false, true));
#foreach ($att in $transform.filterByVisibility($transform.getInstanceAttributes($class.id), "public"))
        this.$att.name = $att.name;
#end
    }
#end

    // --------------- helper methods -----------------
#if (!$class.isAbstract())
#set ($pkfieldname = $transform.getPrimaryKeyAttribute($class))
#if($pkfieldname == "")
#set ($pkfields = $transform.findPkFields($class.id))
    /** Get the primary key for this class */
    public $pkclassname getPrimaryKey() {
        $pkclassname pk = new $pkclassname();
#foreach ($pkfield in $pkfields)
        pk.$pkfield.name = get${str.upperCaseFirstLetter($pkfield.name)}();
#end
        return pk;
    }

#end    
#end    
    // --------------- attributes ---------------------
#foreach ( $att in $transform.getInstanceAttributes($class))
#set ($visibility = $transform.getVisibility($att))
## Only generate code for the attribute if it is public
#if($visibility == "public")
#set($attType = $transform.getFullyQualifiedName($att.type))    
#set($AttName = $str.upperCaseFirstLetter($att.name))
    /** 
     * #firstJavadocParagraph(${att} "upper" "The ${att.name} property") 
     */    
    private $attType $att.name;

    /**
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
#remainingJavadocParagraphs($att "     ")
     */
    public $attType get$AttName() { 
        return $att.name; 
    }

#if(!$transform.isReadOnly($att))
    /**
     * Set #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
     * @param value the new value
     */
    public void set$AttName($attType value) {
        this.$att.name = value;
    }
#end
#end
#end
}
