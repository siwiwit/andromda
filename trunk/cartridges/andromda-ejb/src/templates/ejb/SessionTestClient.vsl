#if ($useEventLogger)
## Do not generate this file if not using WDW Core Framework
// license-header java merge-point
/* Autogenerated by AndroMDA - do not edit
 * 
 * TEMPLATE:    SessionTestClient.vsl in andromda-ejb-cartridge
 * MODEL CLASS: ${service.validationName}
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  ${stereotype.name}
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package ${service.packageName}.test;
#end

import java.rmi.RemoteException;
import junit.framework.Test;
import com.disney.test.CoreServiceTest;
import com.disney.test.DataDrivenTestSuite;
import com.disney.test.TestDriverDefinition;
import com.wdpr.core.framework.xml.XMLCoder;
//import com.wdpr.core.framework.ejb.EJBUtility;

/**
 * Remote component interface for the $service.name session bean.
$service.getDocumentation(" * ")
 */
public class ${service.name}Test 
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}Test
#else
    extends CoreServiceTest
#end
{
    /**
     * Constructor with service name
     * @param name Service name to be tested
     */
    public ${service.name}Test(String name)
    {
        super(name);
    }

    /**
     * Constructor with service name and scenario - allows running one scenario data line from spreadsheet
     * @param name Service name to be tested
     * @param scenario the first column of the spreadsheet
     */
    public ${service.name}Test(String name, Object scenario)
    {
        super(name, scenario);
    }

    /**
     * JUnit test suite, calls DataDrivenTestSuite with data from ${service.name}.xls
     * @return DataDrivenTestSuite with ServiceName driver
     */
    public static Test suite()
    {
        //     TestDriverDefinition parameters: dataClass, filename, sheet name. Populates dataClass with spreadsheet contents.
        TestDriverDefinition driverDef = new TestDriverDefinition(${service.name}TestData.class, "${service.name}.xls", "${service.name}");
        DataDrivenTestSuite suite = new DataDrivenTestSuite(${service.name}Test.class, driverDef);
        // TODO: post processing of data and suite elements through a delegate class/method
        return suite;
    }

    /* Unused private method - is it needed for anything? 
    private ${service.fullyQualifiedName} getService()
    {
        return (${service.fullyQualifiedName}) EJBUtility.getEJBObject("${service.name}", ${service.fullyQualifiedName}Home.class);
    }
    */

    // ---------------- test methods  ----------------------
#foreach ( $operation in $service.businessOperations)
## Only expose public methods
#if ($operation.visibility == "public")

#set ($returnType = $operation.returnType.fullyQualifiedName)
   /**
    * Invokes the $operation.name service method on ${service.name}.
$operation.getDocumentation("    * ")
#foreach ( $parameter in $operation.parameters)
#if (${parameter.name} != "ReturnResult" && ${parameter.name} != "" && ${parameter.name} != $operation.returnType.name)
    * @param $parameter.name
#end
#end
    * @return ${operation.name}Return $returnType
#foreach ( $exception in $operation.exceptions)
    * @throws $exception.fullyQualifiedName
#end
    * @throws RemoteException if ${service.name} fails
    */
    public $returnType $operation.signature
#if ($operation.exceptionsPresent)
        throws $operation.getExceptionList('RemoteException')
#else
        throws RemoteException
#end
    {
        this.logStart();
        ${service.fullyQualifiedName}Client client = new ${service.fullyQualifiedName}Client();

        $operation.returnType.fullyQualifiedName ${operation.name}Return = client.${operation.name}(${operation.argumentNames});
        System.out.println(" Result = " + XMLCoder.encode(${operation.name}Return));
        this.log("Finished test!");
        return ${operation.name}Return;
    }
#end
#end

    /**
     * JUnit test data class, used by DataDrivenTestSuite in suite()
     */
    public static class ${service.name}TestData
    {
        // TODO: Add test data fields here (populated by ${service.name}.xls spreadsheet
        // TODO: Recursively list every primitive parameter in entire operation parameter hierarchy
#foreach ( $operation in $service.businessOperations)
#foreach ( $parameter in $operation.parameters)
#if (${parameter.name} != "ReturnResult")
        private $parameter.type.fullyQualifiedName ${operation.name}${parameter.name};
        /**
         * Data value for ${parameter.name} ${operation.name} on used by DataDrivenTestSuite in suite().
         * ${operation.name}${parameter.name} must be the column name of the parameter in the spreadsheet
         * @param value $parameter.type.name to be populated manually
         */
        public void set${operation.name}${parameter.name}($parameter.type.fullyQualifiedName value)
        {
            this.${operation.name}${parameter.name} = value;
        }
#end
#end
#end
    }
}
#end