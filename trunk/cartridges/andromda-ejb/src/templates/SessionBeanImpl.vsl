## Include global definitions definitions. ##
#parse("templates/EJB.vm")
## Global macro definitions. Normally, these do not need to be changed ##
#macro ( firstJavadocParagraph $item $case $default)
#set ( $parIter = false )
#foreach ( $tgv in $item.taggedValues )
#if ( $tgv.tag == "documentation" && !$parIter)
#set ($parIter = $transform.formatHTMLStringAsParagraphs($tgv.value).iterator())
#end
#end
#set ($text = "")
#if ($parIter && $parIter.hasNext())
#foreach ($line in ${parIter.next().lines} )
#set ($text = "$text $line")
#end
#set ($text = ${text.trim()})
#end
#if ($text == "")
#set ($text = "$default")
#end
#if ($case == "upper")
$str.upperCaseFirstLetter($text)
#elseif ($case == "lower")
$str.lowerCaseFirstLetter($text)
#else
$text
#end
#end
##
#macro ( remainingJavadocParagraphs $item $indent)
#set ($skip = true)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
#if ($skip)
#set ($skip = false)
#else
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
#end
##
#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

import javax.ejb.SessionContext;


/**
 * #firstJavadocParagraph(${class} "upper" "The $servicename session bean.")
 *
#remainingJavadocParagraphs($class " ")
 *
 * <p>This class is intended to hold manual changes to the autogenerated 
 * implementation in {@link ${servicename}Bean}.</p>
 */
public class ${servicename}BeanImpl extends ${servicename}Bean
{
    // concrete business methods that were declared
    // abstract in class ${servicename}Bean ...

#foreach ( $op in $class.operations)
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#set ($msig = $transform.getOperationSignature($op))
#set ($visibility = $transform.getVisibility($op))
#set ($exceptions = $transform.findTagValue($op, "@andromda.java.throws"))
#if (!$exceptions)
#set ($exceptions = $transform.findFullyQualifiedName($defaultException))
#end
## Public static methods are exposed on the home 
## interface instead of the component interface and must
## be prepended with "ejbHome"
#if ($visibility == "public" && $transform.isStatic($op)) 
#set ($msig = "ejbHome${str.upperCaseFistLetter($msig)}")
#end
    /**
#generateDocumentation ($op "     ")
     */
#if ($exceptions)
    $visibility $returntype ${msig}
        throws $exceptions {
#else
    $visibility $returntype ${msig} {
#end
        // TODO put your implementation here.
#if ("void" != $returntype)

        // Dummy return value, just that the file compiles
#if (!$str.isPrimitiveType($returntype))
        return null;
#elseif ("boolean" == $returntype)
        return false;
#else
        return ($returntype)0;
#end
#end
    }

#end

    // ------------ and the rest of the EJB stuff ---------------
    private SessionContext context;
    
    public void setSessionContext(SessionContext ctx)
    {
        //Log.trace("${servicename}BeanImpl.setSessionContext...");
        context = ctx;
    }

    public void ejbRemove()
    {
        //Log.trace("${servicename}BeanImpl.ejbRemove...");
    }

    public void ejbPassivate()
    {
        //Log.trace("${servicename}BeanImpl.ejbPassivate...");
    }

    public void ejbActivate()
    {
        //Log.trace("${servicename}BeanImpl.ejbActivate...");
    }
}
