/* Autogenerated by AndroMDA (EntityHome.vsl) - do not edit */
## Include global definitions. ##
#parse("templates/EJBglobals.vm")
##
#set ($parentClass = $transform.getGeneralization($class.id))
#if ($parentClass)
#set ($parentStereotype = $transform.getStereotype($myClass))
#if ( $parentStereotype == "Entity")
## Extend the home interface of the super type if the super type 
## is an <<Entity>>
#set ($parentInterface = "${transform.findFullyQualifiedName($parentClass)}LocalHome")
#end
#end
#if (!$parentInterface)
#set ($parentInterface = "javax.ejb.EJBLocalHome")
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Home interface for #firstJavadocParagraph(${class} "lower" "the $entityname entity bean.")
#remainingJavadocParagraphs($class " ")
 *
#copyTaggedValues($class " " [ "@andromda.ejb.viewType", "@andromda.ejb.transactionType",  "@andromda.ejb.noSyntheticCreateMethod" ])
 */
public interface ${entityname}LocalHome  extends $parentInterface {
## Only expose JNDI names on concrete EJBs.
#if (!$class.isAbstract())
    // -- accessors for environment entries and constants --
	public static final String COMP_NAME="java:comp/env/#ejbRefName($class)/Local";
	public static final String JNDI_NAME="#ejbRefName($class)/Local";
#end

#foreach($att in $transform.getStaticAttributes($class))
#set ($visibility = $transform.getVisibility($att))
## Only expose the method to the home interface if it is public.
#if($visibility == "public")
#set($attType = $transform.getFullyQualifiedName($att.type))
#set($AttName = $str.upperCaseFirstLetter($att.name))

    /**
#if($transform.getStereotype($att) == "EnvEntry")
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} environment entry")
#else
#set ($ATT_NAME = $str.toDatabaseAttributeName($att.name, '_'))
     * Get #firstJavadocParagraph(${att} "lower" "the $ATT_NAME constant")
#end
#remainingJavadocParagraphs($att "     ")
     */
    public $attType get$AttName();
#end
#end
    // ---------------- home methods  ----------------------
#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) != "FinderMethod" && $transform.getStereotype($op.id) != "CreateMethod" && $transform.getStereotype($op.id) != "SelectMethod")
#set ($visibility = $transform.getVisibility($op))
## Only expose public static methods (public nonstatic methods go on the
## component interface)
#if ($visibility == "public" && $transform.isStatic($op)) 
#set ($msig = $transform.getOperationSignature($op))
   /**
#generateDocumentation ($op "    ")
    */
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#if ($defaultException)
    public $returntype ${msig} throws $defaultException.name;
#else
    $visibility $returntype ${msig};
#end
#end
#end
#end
## Only expose create and finder methods on concrete EJBs.
#if (!$class.isAbstract())

    // ---------------- finder methods  ----------------------
    
    /** 
     * Find this entity by its primary key
     * @param key the primary key;
     */
     public ${class.name} findByPrimaryKey($pkclassname key) 
            throws javax.ejb.FinderException;
            
#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) == "FinderMethod")
#set ($msig = $transform.getOperationSignature($op))
   /**
#generateDocumentation ($op "    ")
    */
    public ${transform.findFullyQualifiedName($op.getType())} ${msig} 
           throws javax.ejb.FinderException;
    
#end
#end
    // ---------------- create methods --------------------
## Handle explicitly defined create methods.
#foreach ( $op in $transform.getAllCreateMethods($class.id))

    /**
#generateDocumentation ($op "    ")
     *
     */
    public ${entityname} create($transform.getOperationTypedParameterList($op))
           throws javax.ejb.CreateException;
#end

## Only expose the autogenerated create method with all attributes if it 
## is not explicitly switched off.
#if (!$transform.findTagValue($class, "@andromda.ejb.noSyntheticCreateMethod"))

    /**
     * Create method with all CMP attribute values.
#set ($allAttributes = $transform.filterByVisibility($transform.getAllInstanceAttributes($class.id), "public"))
#foreach($att in $allAttributes)
     * @param $att.name Value for #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
#end
     */
    public ${entityname} create($transform.getAttributesAsList2($allAttributes, true, true))
           throws javax.ejb.CreateException;
#set ($relations = $transform.findEntityRelationsForSource($class))
#if (!$relations.isEmpty())

    /**
     * Create method with all CMP attribute values and CMR relations.
#foreach($att in $allAttributes)
     * @param $att.name Value for #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
#end
#foreach ($rel in $relations)
     * @param $rel.target.roleName Value for #firstJavadocParagraph(${rel.target} "lower" "the ${rel.target.roleName} relation role")
#end
     */
    public ${entityname} create($transform.getAttributesAsList2($allAttributes, true, true)#foreach ($rel in $relations), ${transform.getRelationTargetType($rel)} $rel.target.roleName#end)
           throws javax.ejb.CreateException;
#end
#end
#end
}
