<?xml version="1.0" encoding="UTF-8"?>

<document>
    <properties>
        <title>Bpm4Struts Cartridge Modeling</title>
    </properties>
    <body>
        <section name="Bpm4Struts Cartridge Modeling">
            <p>
    			The page describes the modeling standards one must follow to in order
    			to use the Bpm4Struts Cartridge.
            </p>
            <p>
                Most of the model elements will require a stereotype to be processed correctly, below you will find
                a table indicating on which model element you may put what stereotype, it will also
                denote which effect this has on the generation process.
            </p>
            <subsection name="Supported Stereotypes">
                <table>
                    <tr>
                        <th>Stereotype</th>
                        <th>Model element</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>FrontEndSessionObject</td>
                        <td>Class</td>
                        <td>These classes can be associated to controllers. They represent objects that persist
                            during the session of the user. For each such session object associated with a controller
                            the controller will have accessor methods for this object. <i>Use a dependency from the controller
                            to the session object to properly model this relationship, a controller can depend on many
                            such session objects; and in the same way a session object might be shared between controllers.</i>
                        </td>
                    </tr>
                    <tr>
                        <td>FrontEndApplication</td>
                        <td>UseCase</td>
                        <td>This use-case is the application's starting point, you will also need the FrontEndUseCase here</td>
                    </tr>
                    <tr>
                        <td>FrontEndUseCase</td>
                        <td>UseCase</td>
                        <td>A use-case that participates in the front-end processes</td>
                    </tr>
                    <tr>
                        <td>FrontEndView</td>
                        <td>Action State</td>
                        <td>Designates a JSP page</td>
                    </tr>
                    <tr>
                        <td>FrontEndException</td>
                        <td>Transition</td>
                        <td>Designates an exception occuring while processing an action, goes out of an action state and into a JSP page</td>
                    </tr>
                </table>
            </subsection>

            <subsection name="Supported Tagged Values">
                <p class="std">
                    Sometimes it happens you want to add information to the model but there is no clean way of doing it.
                    In those cases you may want to resort to tagged values, but these cases should be considered with
                    caution. A tagged value is something extra, something optional, and the application should
                    run fine without them.
                </p>
                <p class="std">
                    Bpm4struts allows you to add tagged values here and there but provides a default value
                    in case they are missing.
                </p>
                <p class="std">
                    What follows is a table indicating on which model element the tagged value applies
                    and a description of the meaning.
                </p>
                <p class="std">
                    <table cellpadding="5" rules="all">
                        <tr>
                            <th>Tagged value</th>
                            <th>Model element</th>
                            <th>Default value</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>@andromda.struts.action.type (*)</td>
                            <td>Transition coming out of an action state carrying the <![CDATA[<<FrontEndView>>]]> stereotype</td>
                            <td>form</td>
                            <td>Indicates the type of trigger causing the action, possible values are hyperlink and form</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.action.redirect</td>
                            <td>Transition coming out of an action state carrying the <![CDATA[<<FrontEndView>>]]> stereotype</td>
                            <td>false</td>
                            <td>Indicates whether or not HTTP redirection should occur when forwarded on to the next action</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.action.success.message</td>
                            <td>Transition coming out of an action state carrying the <![CDATA[<<FrontEndView>>]]> stereotype</td>
                            <td>false</td>
                            <td>On action completion will have a success message rendered on screen</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.action.warning.message</td>
                            <td>Transition coming out of an action state carrying the <![CDATA[<<FrontEndView>>]]> stereotype</td>
                            <td>false</td>
                            <td>On action completion will have a warning message rendered on screen</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.action.resettable</td>
                            <td>Transition coming out of an action state carrying the <![CDATA[<<FrontEndView>>]]> stereotype</td>
                            <td>false</td>
                            <td>
                                Set this value to <code>true</code> if you want to be able
                                to reset forms to their initial values
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.type</td>
                            <td>Parameter</td>
                            <td>text</td>
                            <td>
                                Indicates the type of parameter, this information will be used when rendering the pages,
                                possible values are: link, multibox, text, textarea, checkbox, radio, select, password
                                and hidden.
                                One of the tables below give some more information about field formats, for a list of
                                possible types see <a href="user-guide.html#Field_Types">this page</a>
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.radio</td>
                            <td>Parameter</td>
                            <td>integer, or comma-separated list of properties</td>
                            <td>
                                Can be used in combination with the <code>@andromda.struts.view.field.type=radio</code>
                                tagged value. Use it to specify the number of options to render, the values of these
                                options will always be the same, alternatively
                                you can specify a comma-separated list of runtime properties if you prefer the values
                                to be updateable at runtime. If this tagged value is not specified the cartridge will
                                assume it to have value '3'.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.multibox</td>
                            <td>Parameter</td>
                            <td>the name of a page-variable</td>
                            <td>
                                Can only be used in combination with
                                <code>@andromda.struts.view.field.type=multibox</code> in a table. This tagged value
                                specified the incoming page-variable that is holding the values to match against. If
                                a match is found the checkbox will be checked for the corresponding row.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.reset</td>
                            <td>Parameter</td>
                            <td>false</td>
                            <td>
                                Indicates whether or not the field should be reset (to its orginal value)
                                after the execution of the action.  This is useful when you want only 
                                some of the parameters reset on the form but not all of them.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.required</td>
                            <td>Parameter</td>
                            <td>true</td>
                            <td>Denotes whether or not this is a required field. If a field is required its type will always be checked (you cannot enter a String value when an int is expected)</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.format (**)</td>
                            <td>Parameter</td>
                            <td>N/A</td>
                            <td>The format of this field's value</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.validwhen</td>
                            <td>Parameter</td>
                            <td>N/A</td>
                            <td>Additional validation to be performed, specify a
                                Struts-validator condition here (see
                                <a href="http://struts.apache.org/userGuide/dev_validator.html"
                                    target="_blank">Struts-Validator</a> and go to the section labeled
                                <code>http://struts.apache.org/userGuide/dev_validator.html</code>. The required
                                parentheses will automatically be placed around your condition.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.validators</td>
                            <td>Parameter</td>
                            <td>N/A</td>
                            <td>Custom validation to be performed, you can add one or more of your own validators here.
                                Make sure you add your validator definitions in <code>validator-rules.xml</code>,
                                there is a <a href="../andromda-cartridges/index.html#mergeMappingsUri">merge point</a>
                                that can be used to have them automatically inserted.
                                Validator values look like this: <code>myValidator</code>,
                                <code>myValidator(myVar=myArg)</code>,
                                <code>myValidator(myVar=myArg,myVar2=myArg2)</code>, etc...
                                Specify each validator using a new value, don't specify all of them in a single value.
                                Be careful when using multiple validators with the same 'var' name, the last one
                                found will be used! Normally speaking this should not happen, so try to avoid it 
                                (I recommend against using names used by known validators: minlength,
                                test, datePattern, ...)
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.readonly</td>
                            <td>Parameter</td>
                            <td>false</td>
                            <td>Indicated the parameter is read only, it's value cannot be entered by the user</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.exception.type</td>
                            <td>Transition w/ FrontEndException</td>
                            <td>java.lang.Exception</td>
                            <td>Indicates which exception this handler takes care of</td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.controller.usecase</td>
                            <td>A controller class</td>
                            <td>N/A</td>
                            <td>The value should correspond to the use-case holding the activity graph
                                which has this controller as its context. This is used when deferring operations to
                                the controller. Please note that if your CASE tool supports setting the context of an
                                activity graph you will not need to explicitely set this tagged value. This feature
                                has been provided to support tool such as Poseidon that have only limited UML support.
                                If you are a MagicDraw user you will not need to use this tagged value, instead
                                assign the controller by right clicking on it and selecting "Assign...".
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.usecase.activity</td>
                            <td>A use-case with the &lt;&lt;FrontEndUseCase&gt;&gt; stereotype</td>
                            <td>N/A</td>
                            <td>For tools that do not allow the placement of activity graphs inside of a use-case
                                you can use this tagged value to point to an activity graph, this will link them and
                                denotes that the graphs specifies this use-case.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.table.columns</td>
                            <td>A signal trigger parameter on a transition incoming to a FrontEndView action state,
                                the type of the parameter must either be an array or a java.util.Collection
                                implementation</td>
                            <td>N/A</td>
                            <td>The collection will be displayed in tabular format using the
                                <a href="http://www.displaytag.org">&lt;display:*&gt;</a>
                                tag-library. Each column in this table will be mapped to a property of the object
                                type contained in the collection. So you will need to make sure all objects
                                have accessor methods for the property you list in this tagged value.
                                Properties are separated using a comma ','. More than one value maybe be assigned to
                                this tag, all properties will correctly be resolved.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.table.maxrows</td>
                            <td>Same as @andromda.struts.view.table.columns</td>
                            <td>15</td>
                            <td>This value represents the maximum number of entries shown at the same time,
                                also known as the 'page size'. If the number of entries is a number greater
                                than this value then a list of pages will be displayed to jump to the other values.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.table.sortable</td>
                            <td>Same as @andromda.struts.view.table.columns</td>
                            <td>true</td>
                            <td>Indicates whether or not it should be possible to sort the columns by clicking
                                on the header.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.table.export</td>
                            <td>Same as @andromda.struts.view.table.columns</td>
                            <td>xml csv excel pdf</td>
                            <td>Denotes the different formats into which it should be possible to export the list
                                The tagged value may be assigned multiple values, use a combination of
                                <code>csv</code>, <code>xml</code>, <code>pdf</code> and <code>excel</code>.
                                By default it is possible to export to all known formats. You may use the
                                <code>none</code> value to disable exporting for this table, this value will take
                                priority over any other ones if specified.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.table.decorator</td>
                            <td>Same as @andromda.struts.view.table.export</td>
                            <td>false</td>
                            <td>Whether or not to generate a displaytag table decorator for this table. Can be used
                                in combination with the <code>generateTableDecorators</code> namespace property.
                            </td>
                        </tr>
                        <tr>
                            <td>@andromda.struts.view.field.tablelink</td>
                            <td>Action parameter</td>
                            <td>N/A</td>
                            <td>The value is of the format
                                <code>table.column</code>
                                where
                                <code>table</code> denotes a parameter coming into
                                the page of type Collection (and containing a tagged value
                                to indicate it is to be displayed as a table); the
                                <code>column</code> part is used to indicate which column of
                                the corresponding table is to be used for linking.
                                The result will be that the specified table column will contain
                                a hyperlink reference to the action on which this parameter
                                resides, this is useful to eg. display a list of persons and view
                                their details by simply clicking on their names in the table
                                (for that to work this parameter's type should be 'link', use the
                                <code>@andromda.struts.view.field.type=link</code> tagged value for that).
                                The column name is optional, if you do not specify it the name
                                of the parameter will be assumed.
                                By setting the parameter type you can have any widget rendered into the table.
                            </td>
                        </tr>
                        <tr>
                            <a name="@andromda.role.name"/>
                            <td>@andromda.role.name</td>
                            <td>A user (indirectly) associated with a <![CDATA[<<FrontEndUseCase>>]]></td>
                            <td>N/A</td>
                            <td>
                                Optionally allows you to define the name of the role (if it needs
                                to be different than the name of the actor that defines the role).
                            </td>
                        </tr>	
                    </table>
                </p>
                <p class="std">
                    (*) See below for the difference between both action types
                    <br/>
                    (**) For information on how to specify field validation formats see the table below.
                </p>
                <p class="std">
                    <table cellpadding="5" rules="all">
                        <tr>
                            <th>Type</th>
                            <th>Value</th>
                            <th>Arguments</th>
                            <th>Example</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>int, float, double, java.lang.Integer, java.lang.Float, java.lang.Double</td>
                            <td>range</td>
                            <td>2 of this type</td>
                            <td>range 2 12</td>
                            <td>Specifies in which range the value of this attribute must fall</td>
                        </tr>
                        <tr>
                            <td>java.util.Date, java.sql.Date</td>
                            <td>N/A</td>
                            <td>[strict] (format)</td>
                            <td>strict dd/MM/yyyy </td>
                            <td>The format in which dates need to be specified (optionally strict) (*)</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>minlength</td>
                            <td>an integer value</td>
                            <td>minlength 4</td>
                            <td>Specifies the minimum number of characters</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>maxlength</td>
                            <td>an integer value</td>
                            <td>maxlength 4</td>
                            <td>Specifies the maximum number of characters</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>pattern</td>
                            <td>a regular expression</td>
                            <td>pattern [a-zA-Z]*</td>
                            <td>Validates format according to a regular expression (**), the leading
                                '^' and trailing '$' must not be specified</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>creditcard</td>
                            <td>N/A</td>
                            <td>creditcard</td>
                            <td>Validates the value to be a creditcard number, according to what is known as the Luhn check</td>
                        </tr>
                        <tr>
                            <td>java.lang.String</td>
                            <td>email</td>
                            <td>N/A</td>
                            <td>email</td>
                            <td>Checks if the specified value is a possible email address, IP addresses are also taken into account</td>
                        </tr>
                    </table>
                </p>
                <p class="std">
                    (*) The format is specified by the java.text.SimpleDateFormat class from the Java 2 SDK, please
                    refer to the JavaDoc documentation of that class for more information, this format is case-sensitive
                    <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html">
                    SimpleDateFormat JavaDoc</a>
                    <br/>
                    (**) The pattern expression is a Perl regular expression as you would you use in Javascript,
                    by convention it requires the ^ and $ to denote respectively the beginning and ending of the pattern
                    <a href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/guide/regexp.html#1010689">
                    Netscape's guide to regular expressions in Javascript</a>
                </p>
            </subsection>
        </section>
    </body>
</document>
