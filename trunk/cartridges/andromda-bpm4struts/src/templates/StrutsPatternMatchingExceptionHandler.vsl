//
// Attention: Generated code! Do not modify by hand!
// Generated by: StrutsPatternMatchingExceptionHandler.vsl in andromda-bpm4struts-cartridge.
//
#set ($className = "PatternMatchingExceptionHandler")
#set ($generatedFile = "$str.replace($exceptionHandlerPackage, '.', '/')/${className}.java")
package $exceptionHandlerPackage;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.beanutils.PropertyUtils;

/**
 * <p>
 *  A configurable pattern matching error handler retrieves exception mapping
 *  keys from an exception, and re-throws the exception if a pattern can not be
 *  retrieved.  This is used to retrieve keys from the back-end exceptions 
 *  which can be mapped to exception messages keyed in an application resource 
 *  file.
 * </p>
 */
public class $className
{
    private static final $className instance = new PatternMatchingExceptionHandler();
    
    private static final Pattern compiledPattern = Pattern.compile("$exceptionHandlerPattern");

    /**
     * Gets the shared PatternMatchingExceptionHandler instance.
     * 
     * @return the shared instance
     */
    public static PatternMatchingExceptionHandler instance()
    {
        return instance;
    }

    /**
     * Handles Exceptions by retrieving the message and attempting to extract
     * the specified pattern defined within this class. If a string can not be
     * found matching the pattern, the exception is re-thrown
     * 
     * @param exception the Exception containing the message to retrieve
     * @return the retrieved string matching the pattern.
     */
    public String handleException(Exception exception) throws Exception
    {
        exception = (Exception)this.findRootCause(exception);
        String matched = null;
        if (exception != null && exception.getMessage() != null)
        {
            Matcher matcher = compiledPattern.matcher(
                exception.getMessage().replaceAll("[$\\s]+", " "));
            try
            {
                if (matcher.matches())
                {
                    matched = matcher.group(3);
                }
                if (matched == null)
                {
                    throw exception;
                }
            }
            catch (IllegalStateException ex)
            {
                // no match was found rethrow the exception
                throw exception;
            }
            return matched;
        }
        throw exception;
    }
    
	/**
	 * Finds the root cause of the parent exception
	 * by traveling up the exception tree
	 */
    private Throwable findRootCause(Throwable th) 
    {
    	if (th != null) 
    	{
            // Reflectively get any exception causes.
            try 
            {
                Throwable targetException = null;
                // java.lang.reflect.InvocationTargetException 
                String exceptionProperty = "targetException";
                if (PropertyUtils.isReadable(th, exceptionProperty)) 
                {
                    targetException = (Throwable)PropertyUtils.getProperty(th, exceptionProperty);
                } 
                else 
                {
                	exceptionProperty = "causedByException";
                    //javax.ejb.EJBException
                    if (PropertyUtils.isReadable(th, exceptionProperty)) 
                    {
                    	targetException = (Throwable)PropertyUtils.getProperty(th, exceptionProperty);
                    }
                }
                if (targetException != null) 
                {
                	th = targetException;
                }
            } 
            catch (Exception ex) 
            {
            	// just print the exception and continue
                ex.printStackTrace();
            }
            
            if (th.getCause() != null) 
            {
                th = th.getCause();
                th = findRootCause(th);
            }
        }
        return th;
	}
}