## Only generate the controller impl if there are operations defined
#set ($generatedFile = "${controller.fullPath}Impl.java")
#if (!$controller.operations.empty)
##
##  CONSTANTS
##
#set ($useCase = $controller.useCase)
#set ($formBeanClassName = $useCase.formBeanClassName)
##
##  START TEMPLATE
##
package $controller.packageName;

import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ${controller.name}Impl extends ${controller.name}
{
#foreach ($operation in $controller.operations)
#set ($visibility = $operation.visibility)
#set ($returnType = $operation.returnType.fullyQualifiedName)
#if (!$returnType)
#set ($returnType = "void")
#end
    /**
$operation.getDocumentation("     * ")
     */
    $visibility final $returnType ${operation.name}(ActionMapping mapping, $operation.interfaceName form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#set($allowDummyData = ($dummyData == 'true'))
#if ($allowDummyData)
#set ($formFields = $operation.formFields)
#if ($formFields.empty)
        // nothing to be done for this operation, there are no properties that can be set
#else
        // all properties receive a default value, just to have the application running properly
#foreach ($field in $operation.formFields)
#if ($field.table)
        form.${field.setterName}(${field.name}DummyList);
#elseif ($field.date)
        form.${field.setterName}AsDate($field.resetValue);
#else
        form.${field.setterName}($field.resetValue);
#end
#if ($field.backingListPresent)
#set ($backingListName = $field.backingListName)
#set ($backingListMethod = $str.upperCaseFirstLetter($backingListName))
        form.set${backingListMethod}($field.backingListResetValue);
#end
#end
#end
#end
#if ($returnType != "void")
#if ($returnType=="boolean")
        return false;
#elseif ($operation.returnType.primitiveType)
        return 0;
#else
        return null;
#end
#end
    }
#set ($returnType = false)

#end
## here we populate tabular data with dummy values
#set ($quote = '"')
#foreach ($field in $useCase.formFields)
#if ($field.table)
    private final java.util.Collection ${field.name}DummyList =
        java.util.Arrays.asList( new Object[] {
#set ($count = 0)
#foreach ($itemSeparator in [",", ",", ",", ",", ""])
#set ($count = $count + 1)
#set ($constructor = '')
#set ($paramSeparator = '')
#foreach ($columnName in $field.tableColumnNames)
#set ($constructor = "$constructor$paramSeparator$quote${columnName}-$count$quote")
#set ($paramSeparator = ', ')
#end
            new $str.upperCaseFirstLetter($field.name)DummyItem($constructor)$itemSeparator
#end
        } );

    public final class $str.upperCaseFirstLetter($field.name)DummyItem implements java.io.Serializable
    {
#set ($constructor = '')
#set ($paramSeparator = '')
#foreach ($columnName in $field.tableColumnNames)
        private String $columnName = null;
#set ($constructor = "$constructor${paramSeparator}String ${columnName}")
#set ($paramSeparator = ', ')
#end

        public $str.upperCaseFirstLetter($field.name)DummyItem($constructor)
        {
#foreach ($columnName in $field.tableColumnNames)
            this.$columnName = $columnName;
#end
        }
#foreach ($columnName in $field.tableColumnNames)

        public void set$str.upperCaseFirstLetter($columnName)(String $columnName)
        {
            this.$columnName = $columnName;
        }

        public String get$str.upperCaseFirstLetter($columnName)()
        {
            return this.$columnName;
        }
#end
    }
#end

#end
}
#end