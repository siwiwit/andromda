## Only generate the controller impl if there are operations defined
#set ($generatedFile = "${class.fullPath}.java")
#if (!$class.operations.empty)
##
##  CONSTANTS
##
#set ($useCase = $class.useCase)
#set ($formBeanClassName = $useCase.formBeanClassName)
##
##  START TEMPLATE
##
package $class.packageName;

import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

class $class.name implements ${class.name}Interface
{
#foreach ($operation in $class.operations)
#set ($parameters = $operation.arguments)
#set ($visibility = $operation.visibility)
#set ($returnType = $operation.returnType.fullyQualifiedName)
#if (!$returnType)
#set ($returnType = "void")
#end
    /**
$operation.getDocumentation("     * ")
#if ($parameters.size() == 0)
     * <p/>
     * This method does not receive any parameters through the form bean.
#elseif ($parameters.size() == 1)
#set ($parameter = $parameters.iterator().next())
     * <p/>
     * This method receives the "$parameter.name" parameter,
     * it is of type <code>$parameter.type.name</code> and is available
     * through the argument form bean.
#else
     * <p/>
     * This method receives the following parameters; they are all available
     * through the argument form bean.
     * <p/>
     * <table cellpadding="3" rules="all">
     *    <tr>
     *       <th>Parameter Name</th>
     *       <th>Parameter Type</th>
     *    </tr>
#foreach ($parameter in $parameters)
     *    <tr>
     *       <td>$parameter.name</td>
     *       <td>$parameter.type.name</td>
     *    </tr>
#end
     * </table>
#end
     */
    $visibility final $returnType ${operation.name}(ActionMapping mapping, $formBeanClassName form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#foreach ($parameter in $parameters)
        final $parameter.type.name $parameter.name = form.${parameter.getterName}();
#end

        /*
         * By default this method populates the complete form, it is up to you to replace this
         * by those fields that are required (this cannot be determined here because it might be
         * the case that many action call this controller method, each with their own set of
         * parameters)
         */
        populateForm(form);
#if ($returnType != "void")

#if ($returnType=="boolean")
        return false;
#elseif ($operation.returnType.primitiveType)
        return 0;
#else
        return null;
#end
#end
    }

#set ($returnType = false)
#end

    /**
     * This method exists solely to make the application work at runtime by populating
     * the complete form with default values.
     * <p/>
     * You may remove everything under here, including this comment. Simply make sure
     * you properly populate the form when implementing the operations.
     */
    private void populateForm($formBeanClassName form)
    {
#foreach ($field in $useCase.formFields)
#if ($field.table)
        form.${field.setterName}(${field.name}DummyList);
#elseif ($field.date)
        form.${field.setterName}AsDate($field.resetValue);
#else
        form.${field.setterName}($field.resetValue);
#end
#if ($field.hasBackingList())
#set ($backingListName = $field.backingListName)
#set ($backingListMethod = $str.upperCaseFirstLetter($backingListName))
        form.set${backingListMethod}($field.backingListResetValue);
#end
#end
    }

## here we populate tabular data with dummy values
#set ($quote = '"')
#foreach ($field in $useCase.formFields)
#if ($field.table)
    private final static java.util.Collection ${field.name}DummyList =
        java.util.Arrays.asList( new Object[] {
#set ($count = 0)
#foreach ($itemSeparator in [",", ",", ",", ",", ""])
#set ($count = $count + 1)
#set ($constructor = '')
#set ($paramSeparator = '')
#foreach ($columnName in $field.tableColumnNames)
#set ($constructor = "$constructor$paramSeparator$quote${columnName}-$count$quote")
#set ($paramSeparator = ', ')
#end
            new $str.upperCaseFirstLetter($field.name)DummyItem($constructor)$itemSeparator
#end
        } );

    public final static class $str.upperCaseFirstLetter($field.name)DummyItem implements java.io.Serializable
    {
#set ($constructor = '')
#set ($paramSeparator = '')
#foreach ($columnName in $field.tableColumnNames)
        private String $columnName = null;
#set ($constructor = "$constructor${paramSeparator}String ${columnName}")
#set ($paramSeparator = ', ')
#end

        public $str.upperCaseFirstLetter($field.name)DummyItem($constructor)
        {
#foreach ($columnName in $field.tableColumnNames)
            this.$columnName = $columnName;
#end
        }
#foreach ($columnName in $field.tableColumnNames)

        public void set$str.upperCaseFirstLetter($columnName)(String $columnName)
        {
            this.$columnName = $columnName;
        }

        public String get$str.upperCaseFirstLetter($columnName)()
        {
            return this.$columnName;
        }
#end
    }
#end
#end

}
#end