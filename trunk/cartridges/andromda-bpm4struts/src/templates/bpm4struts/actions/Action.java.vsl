#parse("templates/bpm4struts/actions/Action.java.vm")
#set ($generatedFile = "${action.fullActionPath}.java")
##
##  CONSTANTS
##
#set ($controllerClass = $action.controller)
#set ($formBeanClassName = $action.formBeanClassName)
#set ($roles = $action.actionRoles)
#set ($resettableActionParameters = $action.resettableActionParameters)
#set ($actionForwards = $action.actionForwards)
#set ($actionExceptions = $action.actionExceptions)
#set ($actionStates = $action.actionStates)
#set ($decisionTransitions = $action.decisionTransitions)
#set ($security = $stringUtils.isNotBlank($securityRealm) && $stringUtils.isNotBlank($roles) )
##
##  MACROS
##
#macro (saveMessages $transition $indent)
#if ($transition.successMessagesPresent)
#foreach ($message in $transition.successMessages.entrySet())
${indent}${controllerClass.name}Factory.get${controllerClass.name}Instance().saveSuccessMessage(request, "$message.key");
#end
#end
#if ($transition.warningMessagesPresent)
#foreach ($message in $transition.warningMessages.entrySet())
${indent}${controllerClass.name}Factory.get${controllerClass.name}Instance().saveWarningMessage(request, "$message.key");
#end
#end
#end
##
##  START TEMPLATE
##
// license-header java merge-point
package $action.packageName;

/**
$action.getDocumentation(" * ")
 */
public final class $action.actionClassName extends org.apache.struts.action.Action
{
    public org.apache.struts.action.ActionForward execute(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
    {
#if (!$action.actionFormFields.empty)
        final $formBeanClassName specificForm = ($formBeanClassName)form;

#if ($action.useCaseStart)
## for each final state targetting this use-case we check the incoming variables that ought to
## survive the trip to this use-case, those parameters will have been put into session scope
## and here we move them into the new form
#if ($action.formScopeRequest)
        final Object previousFormObject = request.getAttribute("$formName");
#else
        final Object previousFormObject = request.getSession().getAttribute("$formName");
#end

#foreach ($finalState in $action.useCase.referencingFinalStates)
#foreach ($finalStateAction in $finalState.actions)
#set ($formBeanType = $finalStateAction.formBeanType)
        if (previousFormObject instanceof $formBeanType)
        {
            final $formBeanType previousForm = ($formBeanType)previousFormObject;
#foreach ($parameter in $finalStateAction.getInterUseCaseParameters($finalState))
            specificForm.${parameter.setterName}(previousForm.${parameter.getterName}());
#end
        }
        else
#end
#end
#if (!$action.useCase.referencingFinalStates.empty)
        {
            // do nothing
        }
#end
#end
        org.apache.struts.action.ActionForward forward = null;

        try
        {
            forward = #processTransition($action)
        }
        catch (java.lang.Exception exception)
        {
#populateCurrentFormOnError()
            throw exception;
        }

#if ($action.formScopeRequest)
        request.setAttribute("$formName", form);

#else
        request.getSession().setAttribute("$formName", form);

#end
#saveMessages($action "        ")
#if (!$resettableActionParameters.empty)

#foreach ($field in $resettableActionParameters)
        specificForm.${field.resetName}();
#end
#end

        return forward;
#else
        return #processTransition($action)
#end
    }

#foreach ($actionState in $actionStates)
    /**
$actionState.getDocumentation("     * ")
     */
    private org.apache.struts.action.ActionForward ${actionState.actionMethodName}(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
    {
#set ($controllerCalls = $actionState.controllerCalls)
        org.apache.struts.action.ActionForward forward = null;
#if ($controllerCalls.empty)
#saveMessages($actionState.forward "        ")
        forward = #processTransition($actionState.forward)
#else

        try
        {
#foreach ($controllerCall in $controllerCalls)
#if (!$action.actionFormFields.empty)
            ${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerCall.name}(mapping, ($formBeanClassName)form, request, response);
#else
            // we pass an empty form implementation to the controller, we know there are no parameters on this operation because the
            // cartridge would have issued a model validation error
            ${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerCall.name}(mapping, new ${controllerCall.interfaceName}(){}, request, response);
#end
#end
            forward = #processTransition($actionState.forward)
        }
        catch (java.lang.Exception exception)
        {
            final String messageKey = ${exceptionHandlerPackage}.PatternMatchingExceptionHandler.instance().handleException(exception);
            ${controllerClass.name}Factory.get${controllerClass.name}Instance().saveErrorMessage(request, messageKey);
            throw exception;
        }

#saveMessages($actionState.forward "        ")

#end
        return forward;
    }

#end
#foreach ($decisionTransition in $decisionTransitions)
#set ($controllerMethodName = $decisionTransition.operationCall.name)
#set ($decisionMethodName = "__$controllerMethodName")
    /**
$decisionTransition.getDocumentation("     * ")
     */
    private org.apache.struts.action.ActionForward ${decisionMethodName}(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
    {
#if (!$action.actionFormFields.empty)
        final String value = String.valueOf(${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerMethodName}(mapping, ($formBeanClassName)form, request, response));
#else
        // we pass an empty form implementation to the controller, we know there are no parameters on this operation because the
        // cartridge would have issued a model validation error
        final String value = String.valueOf(${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerMethodName}(mapping, new ${decisionTransition.operationCall.interfaceName}(){}, request, response));
#end

#set ($defaultOutcome = false)## keeps track of the last transition
#foreach ($outcome in $decisionTransition.target.outgoing)
#set ($defaultOutcome = $outcome)
        if (value.equals("$outcome.guardName"))
        {
#saveMessages($outcome "            ")
            return #processTransition($outcome)
        }
#end

        // we take the last action in case we have an invalid return value from the controller
        return #processTransition($defaultOutcome)
    }

#end
}
