##
## Set global invariants
##
#set ($stateMachine = $transform.getStateMachine($class))
#set ($initialState = $transform.getInitialState($stateMachine))
#set ($controllerClass = $transform.getControllerClass($class))
#set ($controllerClassName = $transform.toJavaClassName($controllerClass))
#set ($controllerFormName = $transform.toJavaClassName($transform.getControllerForm($class)))
#if (!$controllerFormName) ## If there is no form, use the default one
#set ($controllerFormName = "ActionForm")
#end
#set ($className = "${controllerClassName}Abstract")
#set ($packageName = $transform.getPackageName($controllerClass))
##
## This macro is designed to generate code that goes into the body of a method.
##
## For action states and final states it will render an action forward.
##
## For object flow states it will render a method call that will need
## manual implementation.
##
## For decision points (Pseudostate.CHOICE) it will render a call to
## another method that will handle the decision.
##
## If the argument transition has a guard it will be evaluated before
## execution
##
#macro ( processTransition $transition $indent )
#set ($transitionGuard = $transition.guard)
#if ($transitionGuard)
#set ($transitionGuardName = $transform.toJavaMethodName($transitionGuard))
${indent}if ($transitionGuardName())
${indent}{
#set ($indent2 = $indent)## backup original indentation
#set ($indent = "$indent    ")
#end
#set ($target = $transition.target)
#if ( $transform.dynamicHelper.isFinalState($target) || $transform.dynamicHelper.isActionState($target) )
#set ($forwardName = $transform.toForwardName($target))
${indent}return mapping.findForward("$forwardName");
#elseif ( $transform.dynamicHelper.isObjectFlowState($target) )
#set ($objectFlowTypeName = $transform.toJavaClassName($target))
#set ($objectFlowStateState = $transform.getObjectFlowStateState($target))
#set ($objectFlowStateStateMethodName = "set$objectFlowTypeName$transform.toJavaClassName($objectFlowStateState)")
${indent}return $objectFlowStateStateMethodName(mapping, form, request, response);
#elseif ( $transform.dynamicHelper.isDecisionPoint($target) )
${indent}return $transform.toJavaMethodName($target)(mapping, form, request, response);
#end
#if ($transitionGuard)
#set ($indent = $indent2)## restore original indentation
${indent}}
${indent}else
${indent}{
${indent}    // if the guard fails we restart the use-case
${indent}    return mapping.findForward("$transform.toForwardName($initialState)");
${indent}}
#end
#end
##
## Package declaration and imports
##
package $packageName;

import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

##
## Set collections from which methods will be rendered, we convert them to sets
## because we don't want to render doubles (just to make sure)
##
#set ($guardNames = $transform.toSet($transform.getGuardNames($stateMachine)))
#set ($actionStates = $transform.toSet($transform.dynamicHelper.getActionStates($stateMachine)))
#set ($objectFlowStates = $transform.toSet($transform.dynamicHelper.getObjectFlowStates($stateMachine)))
#set ($guardedTransitions = $transform.toSet($transform.dynamicHelper.getGuardedTransitions($stateMachine)))
##
## Start of the class declaration, notice how it extends DispatchAction, not Action
##
public abstract class ${className} extends DispatchAction
{
##
## Since there is only one initial state (with only one outgoing transition we will make the unspecified method
## call the first state vertex.
##
    public final ActionForward unspecified(ActionMapping mapping, $controllerFormName form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#processTransition ( $transform.dynamicHelper.getNextStateTransition($initialState) "        " )
    }

##
## Each action state will have a corresponding dispatch method, depending on the outgoing
## transitions the macro is called.
##
## If there is only one transition this method is fairly simply, for more transitions
## there needs to be some logic to determine which one has been called. This is done by
## means of a request parameter (notice what happens if there is no custom form class,
## the transition value will be retrieved from the request context in that case).
##
## Each transition needs to have a trigger or this script will not work (hard requirement).
##
#foreach ($actionState in $actionStates)
#set ($methodName = $transform.toJavaMethodName($actionState))
#set ($methodNameImpl = "${methodName}Impl")
    public final ActionForward ${methodName}(ActionMapping mapping, $controllerFormName form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#set ($transitions = $transform.dynamicHelper.getNextTriggeredTransitions($actionState))
#if ($transitions.size() > 1)
#if ($controllerFormName.equals("ActionForm"))
        final String trigger = request.getParameter("trigger").toUpperCase();
#else
        final String trigger = form.getTrigger().toUpperCase();
#end

#set ($conditionSuffix = ".equals(trigger)")
#foreach ($transition in $transitions)
        if ("$transform.toFinalMemberName($transition.trigger)"$conditionSuffix)
        {
#processTransition ( $transform.dynamicHelper.getNextStateTransition($transition) "            " )
        } else
#end
        {
            // the form property has not been set to a valid value, application bug!
            return null;
        }
#else
#processTransition ( $transform.dynamicHelper.getNextStateTransition($actionState) "        " )
#end
    }

#end
##
## We need a boolean method for each guard in the state machine
##
#foreach ($guardName in $guardNames)
    protected abstract boolean ${guardName}Impl(ActionMapping mapping, $controllerFormName form, HttpServletRequest request, HttpServletResponse response);

#end
##
## For each object flow state we will have a method that implements the logic to actually
## set the specified object in the desired state, this is done in the implementation class.
##
#foreach ($objectFlowState in $objectFlowStates)
#set ($objectFlowTypeName = $transform.toJavaClassName($objectFlowState))
#set ($objectFlowStateState = $transform.getObjectFlowStateState($objectFlowState))
#set ($methodName = "set$objectFlowTypeName$transform.toJavaClassName($objectFlowStateState)")
    private final ActionForward ${methodName}(ActionMapping mapping, $controllerFormName form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        ${methodName}Impl(mapping, form, request, response);

#processTransition ( $transform.dynamicHelper.getNextStateTransition($objectFlowState) "        " )
    }

    protected abstract void ${methodName}Impl(ActionMapping mapping, $controllerFormName form, HttpServletRequest request, HttpServletResponse response) throws Exception;

#end
}














