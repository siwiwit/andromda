#set ($generatedFile = "${class.fullFormBeanPath}.java")
##
##  CONSTANTS
##
#set ($formBeanClassName = $class.formBeanClassName)
#set ($fields = $class.formFields)
##
##  START TEMPLATE
##
package $class.packageName;

import java.io.Serializable;

import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.ValidatorForm;

import javax.servlet.http.HttpServletRequest;

/**
 * @struts.form
 *      name="$class.formBeanName"
 */
public class $formBeanClassName extends ValidatorForm implements Serializable
{
#foreach ($field in $fields)
    private $field.type.fullyQualifiedName $field.name;
#if ($field.hasBackingList())
    private $field.backingListType $field.backingListName;
#end
#end

#foreach ($field in $fields)
#set ($fieldType = $field.type.fullyQualifiedName)
#set ($fieldName = $field.name)
#if ($field.isCollectionType())
    public void ${field.setterName}($fieldType $fieldName)
    {
        this.$fieldName = $fieldName;
    }

    public $fieldType ${field.getterName}()
    {
        return this.${fieldName};
    }

    public void ${field.setterName}AsArray(Object[] $fieldName)
    {
        this.$fieldName = java.util.Arrays.asList($fieldName);
    }

    public Object[] ${field.getterName}AsArray()
    {
        return this.${fieldName}.toArray();
    }
#else
    public void ${field.setterName}($fieldType $fieldName)
    {
        this.$fieldName = $fieldName;
    }

    public $fieldType ${field.getterName}()
    {
        return this.$fieldName;
    }
#end

#if ($field.hasBackingList())
#set ($backingListName = $field.backingListName)
#set ($backingListMethod = $str.upperCaseFirstLetter($backingListName))
    public void set${backingListMethod}($field.backingListType $backingListName)
    {
        this.$backingListName = $backingListName;
    }

    public $field.backingListType get${backingListMethod}()
    {
        return this.$backingListName;
    }

#end
#end
    public void reset(ActionMapping mapping, HttpServletRequest request)
    {
#foreach ($field in $fields)
#if ($field.mustReset())
        this.$field.name = $field.nullValue;
#end
#end
    }

#if ($fields.empty == false)
#set ($separator = '')
    public String toString()
    {
        final StringBuffer buffer = new StringBuffer().append('[');

#foreach ($field in $fields)
#if ($field.arrayType || $field.collectionType)
        buffer.append("${separator}${field.name}=" + toString(this.${field.getterName}()));
#else
        buffer.append("${separator}${field.name}=" + String.valueOf(this.${field.getterName}()));
#end
#set ($separator = ',')
#if ($field.hasBackingList())
        buffer.append("${separator}${field.backingListName}=" + toString(this.get${backingListMethod}()));
#end
#end

        return buffer.append(']').toString();
    }
#end

    private final static String toString(java.util.Collection objects)
    {
        return (objects==null) ? null : toString(objects.toArray());
    }

    private final static String toString(Object[] objects)
    {
        if (objects == null)
        {
            return null;
        }
        else
        {
            final StringBuffer buffer = new StringBuffer('[');
            String prefix = "";
            for (int i=0; i<objects.length; i++)
            {
                buffer.append(prefix);
                buffer.append(objects[i]);
                prefix = ",";
            }
            return buffer.append(']').toString();
        }
    }


}
