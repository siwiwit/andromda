#set ($generatedFile = "${controller.fullPath}.java")
#set ($operations = $controller.operations)
#if (!$operations.empty)
##
##  CONSTANTS
##
#set ($sessionObjects = $controller.sessionObjects)
##
##  START TEMPLATE
##
package $controller.packageName;

import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
#if (!$sessionObjects.empty)
import javax.servlet.http.HttpSession;
#end

import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

/**
$controller.getDocumentation(" * ")
 *
#foreach ($service in $controller.services)
#set ($serviceName = $service.name)
#set ($packageName = $service.packageName)
#set ($ejbRefName = "ejb/${packageName}/${serviceName}")
 * @jboss.ejb-ref-jndi
 *      ref-name="${serviceName}Ref"
 *     jndi-name="${ejbRefName}/Remote"
 *
#end
 */
public abstract class ${controller.name} implements java.io.Serializable
{
#foreach ($operation in $operations)
#set ($parameters = $operation.arguments)
#set ($visibility = $operation.visibility)
#set ($returnType = $operation.returnType.fullyQualifiedName)
#if (!$returnType)
#set ($returnType = "void")
#end
    /**
$operation.getDocumentation("     * ")
     */
    $visibility abstract $returnType ${operation.name}(ActionMapping mapping, $operation.interfaceType form, HttpServletRequest request, HttpServletResponse response) throws Exception;

#set ($returnType = false)
#end
#foreach ($sessionObject in $sessionObjects)
#set ($accessorSuffix = $str.capitalize($sessionObject.name))
    protected final $sessionObject.fullyQualifiedName get${accessorSuffix}(HttpServletRequest request)
    {
        $sessionObject.fullyQualifiedName object = null;
        HttpSession session = request.getSession(false);
        if (session != null)
        {
            Object attribute = session.getAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);
            if (attribute instanceof $sessionObject.fullyQualifiedName)
            {
                object = ($sessionObject.fullyQualifiedName)attribute;
            }
        }
        return object;
    }

    protected final void set${accessorSuffix}(HttpServletRequest request, $sessionObject.fullyQualifiedName object)
    {
        set${accessorSuffix}(request, object, true);
    }

    protected final void set${accessorSuffix}(HttpServletRequest request, $sessionObject.fullyQualifiedName object, boolean createSession)
    {
        HttpSession session = request.getSession(createSession);
        if (session != null)
        {
            session.setAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY, object);
        }
    }

    protected final void remove${accessorSuffix}(HttpServletRequest request)
    {
        HttpSession session = request.getSession(false);
        if (session != null)
        {
            session.removeAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);
        }
    }

#end

    protected final void saveWarningMessage(HttpServletRequest request, String message)
    {
        ActionMessages messages = (ActionMessages)request.getAttribute("$warningMessagesKey");
        if (messages == null)
        {
            messages = new ActionMessages();
            request.setAttribute("$warningMessagesKey", messages);
        }
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(message));
    }

    protected final void saveSuccessMessage(HttpServletRequest request, String message)
    {
        ActionMessages messages = (ActionMessages)request.getAttribute("$successMessagesKey");
        if (messages == null)
        {
            messages = new ActionMessages();
            request.setAttribute("$successMessagesKey", messages);
        }
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(message));
    }

#if ($backendType != "")
#foreach ($service in $controller.services)
#set ($serviceVariable = "instance$service.name")
#set ($serviceAccessor = "get$service.name")
#if ($backendType == "spring")
#set ($serviceInterface = "$service.fullyQualifiedName")
#set ($serviceInstantiation = "new ${serviceInterface}Impl()")
#elseif ($backendType == "ejb")
#set ($serviceInterface = "${service.fullyQualifiedName}Bean")
#set ($serviceInstantiation = "${service.name}Util.getHome().create()")
#elseif ($backendType == "webservice")
## @TODO
#end
    private $serviceInterface $serviceVariable = null;
    protected final synchronized $serviceInterface $serviceAccessor ()
    {
        return ($serviceVariable == null)
            ? $serviceVariable = $serviceAccessor (true)
            : $serviceVariable;
    }

    protected final synchronized $serviceInterface $serviceAccessor (boolean renew)
    {
        return (renew)
            ? $serviceVariable = $serviceInstantiation
            : $serviceAccessor ();
    }

#end
#end
}
#end
