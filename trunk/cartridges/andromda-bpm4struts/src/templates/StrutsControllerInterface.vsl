#set ($generatedFile = "${controller.fullPath}.java")
#set ($operations = $controller.operations)
#if (!$operations.empty)
##
##  CONSTANTS
##
#set ($sessionObjects = $controller.sessionObjects)
##
##  START TEMPLATE
##
package $controller.packageName;

import org.apache.struts.action.ActionMapping;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
#if (!$sessionObjects.empty)
import javax.servlet.http.HttpSession;
#end

/**
$controller.getDocumentation(" * ")
 *
#foreach ($service in $controller.services)
#set ($serviceName = $service.name)
#set ($packageName = $service.packageName)
#set ($ejbRefName = "ejb/${packageName}/${serviceName}")
 * @web.ejb-ref
 *           name="${serviceName}Ref"
 *           type="Session"
 *           home="${packageName}.${serviceName}Home"
 *         remote="${packageName}.${serviceName}"
 *           link="${serviceName}"
 *
 * @jboss.ejb-ref-jndi
 *      ref-name="${serviceName}Ref"
 *     jndi-name="${ejbRefName}/Remote"
 *
#end
 */
public abstract class ${controller.name} implements java.io.Serializable
{
#foreach ($operation in $operations)
#set ($parameters = $operation.arguments)
#set ($visibility = $operation.visibility)
#set ($returnType = $operation.returnType.fullyQualifiedName)
#if (!$returnType)
#set ($returnType = "void")
#end
#foreach ($action in $operation.deferringActions)
    $visibility abstract $returnType ${operation.name}(ActionMapping mapping, $action.formBeanType form, HttpServletRequest request, HttpServletResponse response) throws Exception;
#end

#set ($returnType = false)
#end
#foreach ($sessionObject in $sessionObjects)
#set ($accessorSuffix = $str.upperCaseFirstLetter($sessionObject.name))
    protected final $sessionObject.fullyQualifiedName get${accessorSuffix}(HttpServletRequest request)
    {
        $sessionObject.fullyQualifiedName object = null;
        HttpSession session = request.getSession();
        if (session != null)
        {
            Object attribute = session.getAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);
            if (attribute instanceof $sessionObject.fullyQualifiedName)
            {
                object = ($sessionObject.fullyQualifiedName)attribute;
            }
        }
        return object;
    }

    protected final void set${accessorSuffix}(HttpServletRequest request, $sessionObject.fullyQualifiedName object)
    {
        HttpSession session = request.getSession();
        if (session != null)
        {
            session.setAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY, object);
        }
    }

    protected final void remove${accessorSuffix}(HttpServletRequest request)
    {
        HttpSession session = request.getSession();
        if (session != null)
        {
            session.removeAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);
        }
    }

#end
}
#end
