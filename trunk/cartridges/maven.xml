<project default="install"
         xmlns:j="jelly:core"
         xmlns:ant="jelly:ant"
         xmlns:maven="jelly:maven">
           
    <!-- ==================================================================
               Installs all libraries in the local repository                                                    
         ================================================================== -->
    <goal name="install">
        <attainGoal name="multiproject:install"/>	
    </goal> 
           
    <preGoal name="java:compile"> 
        <attainGoal name="generate-source"/>
    </preGoal>
    
    <preGoal name="site:run-reports">
        <j:set var="docsBuild" value="true"/>
        <attainGoal name="generate-source"/>
        <attainGoal name="generate-howto-codefiles"/>
    </preGoal>
    
    <!-- ==================================================================
         Generates the source required to build the cartridges.                                                   
         ================================================================== -->
    <goal name="generate-source">
   
        <ant:available 
            file="${maven.build.src}"
            type="dir" 
            property="buildSrcAvailable"/> 	
        
        <j:if test="${buildSrcAvailable}">
            <ant:uptodate property="generationRequired" 
                          targetfile="${metafacade.model.file}" >
                <ant:srcfiles dir="${maven.build.src}" includes="**/*"/>
            </ant:uptodate>
            <!-- add the paths of the generated source to the
                 maven compile path -->
            <ant:path
                id="metafacade.generated.src"
                location="${maven.build.src}"/>
            <maven:addPath
                id="maven.compile.src.set"
                refid="metafacade.generated.src"/>     
        </j:if>	

        <!-- keep the generation from executing more than once -->
        <j:if test="${generationRequired or buildSrcAvailable eq null}">
            <ant:available 
                file="${maven.src.dir}/uml"
                type="dir" 
                property="hasModel"/>

            <j:if test="${!empty(hasModel)}">
                <j:choose>
                    <j:when test="${maven.andromda.bootstrap.mode}">
                        <attainGoal name="andromda:run-bootstrap"/>
                    </j:when>
                    <j:otherwise>
                        <attainGoal name="andromda:run"/>						
                    </j:otherwise>
                </j:choose>
                <!-- add the paths of the generated source to the
                     maven compile path -->
                <ant:path
                    id="metafacade.generated.src"
                    location="${maven.build.src}"/>
                <maven:addPath
                    id="maven.compile.src.set"
                    refid="metafacade.generated.src"/>     		         	
            </j:if>
        </j:if>
    </goal>

    <!-- ==================================================================
         Generates the howto code files for the documentation
         ================================================================== -->
    <goal name="generate-howto-codefiles">
        <ant:available
            file="${maven.docs.src}/resources/HowToModel.xml.zip"
            type="file"
            property="howtoModelAvailable"/>

        <ant:echo message="${maven.docs.src}/resources/HowToModel.xml.zip"/>
        <ant:echo message="${howtoModelAvailable}"/>
        <ant:echo message=""/>

        <!-- Comment out for the moment [MW] -->
        <!-- j:if test="${howtoModelAvailable}">
            <j:set var="maven.andromda.model.uri" value="${howto.model.uri}"/>
            <j:set var="maven.andromda.modelValidation" value="${howto.modelValidation}" defaultValue="true"/>
            <j:set var="maven.andromda.cartridgeFilter" value="${howto.cartridgeFilter}"/>
            <j:set var="maven.andromda.modelPackage.0.name" value="${howto.modelPackage.0.name}"/>
            <j:set var="maven.andromda.modelPackage.0.shouldProcess" value="${howto.modelPackage.0.shouldProcess}"/>
            <j:set var="howto.property.name.1" value="${howto.property.value.1}"/>
            <j:set var="${howto.property.name.2}" value="${howto.property.value.2}"/>
            <j:set var="${howto.property.name.3}" value="${howto.property.value.3}"/>
            <j:set var="${howto.property.name.4}" value="${howto.property.value.4}"/>
            <attainGoal name="andromda:run"/>
        </j:if -->
    </goal>

    <preGoal name="test:test">
        <!-- only process the cartridge tests if we have a test cartridge model defined AND
             the docs are NOT being built -->
        <j:if test="${context.getVariable('andromda.cartridge.model.uri') != null and docsBuild eq null}">
            <j:choose>
                <j:when test="${maven.andromda.bootstrap.mode}">
                    <attainGoal name="cartridge:test-bootstrap"/>
                </j:when>
                <j:otherwise>
                    <attainGoal name="cartridge:test"/>						
                </j:otherwise>
            </j:choose>
        </j:if>
    </preGoal>
    
    <!-- ===================================================================
         Intercept the 'site' goal so that we can fake out the reports 
         by copying our real source to a temp directory and then setting the 
         pom's source directory to point to that one (since the reports only 
         handle one source directory per project).  The report plugins  
         really should support multiple source directories but right now 
         the don't so we do this to get around it.                         
         =================================================================== -->
    <preGoal name="site">
        <!-- the temp directory to copy all the source -->
        <j:set var="reportBuildSrcDir" value="${maven.build.dir}/report/copiedsrc"/>
        <ant:delete dir="${reportBuildSrcDir}"/>
        <j:set var="buildSrcDir" value="${maven.build.src}"/>
        <j:set var="sourceDirectory" value="${pom.build.sourceDirectory}"/>
        <ant:available
            property="sourceDirectoryPresent"
            file="${sourceDirectory}"/>
        <j:if test="${sourceDirectoryPresent}">
            <ant:copy todir="${reportBuildSrcDir}">
                <ant:fileset dir="${sourceDirectory}"/>
            </ant:copy>
        </j:if>
        <ant:available
            property="buildSrcDirPresent"
            file="${buildSrcDir}"/>
        <j:if test="${buildSrcDirPresent}">
            <ant:copy todir="${reportBuildSrcDir}">
                <ant:fileset dir="${buildSrcDir}"/>
            </ant:copy>
        </j:if>
        <j:set var="dummy" value="${pom.build.setSourceDirectory(reportBuildSrcDir)}"/>    	
    </preGoal>
    
    <!-- ===================================================================
         Reset the pom.build.sourceDirectory back to the real source now
         that we're done with the javadoc and jxr reports.
         =================================================================== -->
    <postGoal name="site">
        <j:set var="dummy" value="${pom.build.setSourceDirectory(sourceDirectory)}"/>
    </postGoal>
           
</project>
