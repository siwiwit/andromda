/* This OCL file contains valid OCL syntax which the parser should 
   be able to successfully parse. */

-- BODY

context org::Bookpart::findAllParts() : Collection (Bookpart)
body thisIsUnique :
	self.allInstances() -> select(la : Bookpart, la2 : SomeType, la3 : AnotherType | la.title = 'test' and la2.title = 'test')
	
-- INV
	
context Person
inv: Person::allInstances()->isUnique(socSecNr)

context ProgramPartner
inv totalPoints:
deliveredServices.transactions.points->sum() < 10000
    
/* 
    The following invariant states that the maximum number of points
    that may be earned by all services of a program partner is equal
    to 10,000 
*/
context ProgramPartner
    inv totalPointsEarning:
        deliveredServices.transactions   -- all transactions
            ->select( Earning )          -- select earning ones
                .points -> sum()         -- sum all points
                    < 100000             -- sum smaller than 10,000
                    
context CustomerCard
    inv: let correctDate : Boolean =
        self.validFrom.isBefore(Date::now) and
        self.goodThru.isAfter(Date::now)
    in
        if valid then
            correctDate = false
        else
            correctDate = true
        endif

-- PRE AND POST
        
context Person::getMortgage(security : House)
    pre: self.mortgages.monthlyPayment -> sum() <= self.salary * 0.30
   
context Person::getMortgage(security : House)
    pre: security.value >= security.mortgages.principal -> sum()
        
context LoyaltyAccount::isAccountEmpty() : Boolean
    post: result = (points = 0)
        
context LoyaltyProgram::enroll(c : Customer)
    pre : c.name <> ''
    post: participants = participants@pre->including( c )