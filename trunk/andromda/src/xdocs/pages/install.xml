<?xml version="1.0" encoding="iso-8859-1"?>

<document>

  <properties>
    <author email="mbohlen@mbohlen.de">Matthias Bohlen</author>
    <title>AndroMDA - Installation</title>
    <gennews>yes</gennews>
  </properties>

  <body>

    <freetext name="Section 1">
      <h1>How to install AndroMDA</h1>
      <p class="std">
        <b>Download, unzip, CLASSPATH!</b><br />
        (or was it "Ready ... steady ... go!" ?)
      </p>
      <p class="std">
        The installation of AndroMDA itself is quite easy (the real challenge
        will come later!).
      </p>
      <p class="std">
        Download the files <code>andromda_nnn.zip</code> and <code>andromda_libs_nnn.zip</code> from
        the
        <a href="http://sourceforge.net/project/showfiles.php?group_id=73047">
          AndroMDA file list
        </a>
        on SourceForge's web site and unzip them into the same directory of your choice.
      </p>
      <p class="std">
        The <code>andromda_nnn.zip</code> ZIP contains the following files:
        <ul>
          <li class="std">
            Template files <code>*.vsl</code> - templates for entity beans
            and session beans, written in the
            Velocity scripting laguage. Customize these templates if
            you do not like what you see when the generator has done
            its job!
          </li>
          <li class="std">
            <code>andromda.jar</code> - the executable code. Put this jar file into
            your CLASSPATH when you run your personal Ant build script.
          </li>
          <li class="std">
            <code>xmi-to-simpleOO.xsl</code> - an XSLT stylesheet that transforms
            XMI output from Poseidon to the so-called SimpleOO format
            that AndroMDA can read. If you use another CASE tool
            with a slightly different XMI dialect, you
            will possibly have to adjust this stylesheet.
          </li>
          <li class="std">
            <code>doc</code> - a directory with the documentation of the package.
            Currently, this is only JavaDoc, but there will be more.
          </li>
          <li class="std">
            <code>sample</code> - a directory with a sample model and an associated
            sample <code>build.xml</code> file so that you can run AndroMDA.
          </li>
          <li class="std">
            <code>src</code> - a directory with the sources of AndroMDA. This contains
            the hand-written Java classes. The executable contains some more classes
            that were generated by JAXB. These will be re-generated when you run
            ant on <code>build.xml</code>.
          </li>
        </ul>
      </p>
      <p class="std">
        The <code>andromda_libs_nnn.zip</code> ZIP contains the following files:
        <ul>
          <li class="std">
            <code>lib</code> - a directory with the required jars for other software
            components that AndroMDA uses. Currently, you will find Velocity, JUnit,
            XDoclet and log4j JARs there.
          </li>
        </ul>
      </p>
      <p class="std">
        <b>Other software that you will need</b>
      </p>
      <p class="std">
        AndroMDA is based upon some other software components that
        you will need to download from the Internet and include in
        the CLASSPATH of your build script, too. These components
        are:
        <ul>
          <li class="std">
            XDoclet - that very special package for generating
            various EJB-related files (interfaces, deployment descriptors, etc.)
            from attributed bean classes.
            The distribution ZIP already contains
            the XDoclet jars in its <code>lib</code> directory.
            Should you need a new version, you can download it from the
            <a href="http://sourceforge.net/project/showfiles.php?group_id=31602">
              XDoclet file list
            </a>
            on SourceForge's web site and unzip it into a directory of your choice.
            Then, read <code>docs/index.html</code> under that directory for installation
            and usage. Study <code>samples/script/build.xml</code> and try to rebuild
            the sample so that all CLASSPATH settings are correct
            before you proceed.
          </li>
          <li class="std">
            Velocity - the template processing engine that will
            produce the Java files from the AndroMDA bean templates,
            driven by an object model that AndroMDA provides.
            The distribution ZIP already contains
            velocity-dep.jar in its <code>lib</code> directory.
            Should you need a new version, you can download it from
            <a href="http://jakarta.apache.org/velocity">
              the Apache Velocity website
            </a>
            . In that case, unpack Velocity into a directory of your choice and
            include <code>velocity-dep.jar</code> in your CLASSPATH when you
            run your personal Ant build script.
          </li>
          <li class="std">
            Ant - the famous build tool, made by the Apache Jakarta project.
            You can download it from
            <a href="http://jakarta.apache.org/ant">
              the Apache Ant website
            </a>
            . Unpack ant into a directory of your choice and set the property
            <code>myant.home</code> in your file <code>build.properties</code>
            before you run your personal Ant build script.
          </li>
          <li class="std">
            JAXB - SUN's package for XML data binding. AndroMDA needs this
            package to read the XML-formatted object model that will
            drive the template engine. The JAXB license conditions do not
            allow to redistribute the JARs with AndroMDA.
            So, go to SUN's web site and download the package called
            <a href="http://java.sun.com/xml/jaxb/index.html">
                JavaTM Architecture for XML Binding (JAXB) 1.0 Beta Implementation
            </a>.
            Unpack it into a directory of your choice and set the property
            <code>jaxb.home</code> in your file <code>build.properties</code>
            before you run your personal Ant build script.
          </li>
        </ul>

      </p>
    </freetext>

    <news name="JAXB" href="http://java.sun.com/xml/jaxb/index.html">
      <p>
        <b>Java Architecture for XML Binding</b> is available from SUN as an
        Early Access release. This architecture provides an API and tools
        that automate the mapping between XML documents and Java objects.
      </p>
      <p>
        In many cases, the JAXB-generated classes are much more efficient than
        using a SAX (Simple API for XML) parser or an implementation of the
        DOM (Document Object Model) API. They are, generally, more
        efficient, because using the generated classes is usually faster
        and, perhaps most importantly, often requires a much smaller
        footprint in memory than a generic parser.
      </p>
    </news>

    <news name="Velocity" href="http://jakarta.apache.org/velocity/">
      <p>
        Velocity is a product written by the famous <b>Apache
        Jakarta</b> project. It can be used to generate Java, web
        pages, SQL, PostScript and other output from
        templates. It can be used either as a standalone
        utility for generating source code and reports, or as
        an integrated component of other systems.
      </p>
    </news>

  </body>
</document>
