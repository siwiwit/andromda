package org.andromda.core.cartridge;

import java.io.File;
import java.text.MessageFormat;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * This class implements the <code>&lt;template&gt;</code> tag in a cartridge
 * descriptor file.
 * 
 * @author <a href="http://www.mbohlen.de">Matthias Bohlen </a>
 * @author Anthony Mowers
 * @author Chad Brandon
 */
public class Template
    extends Resource
{
    /**
     * The default constructor used by the XmlObjectFactory to instantiate the
     * template configuration.
     */
    public Template()
    {
        this.supportedModelElements = new TemplateModelElements();
    }

    /**
     * Sets the pattern that is used to build the name of the output file.
     * 
     * @param outputPattern the pattern in java.text.MessageFormat syntax
     */
    public void setOutputPattern(String outputPattern)
    {
        this.outputPattern = outputPattern;
    }

    /**
     * Gets the pattern that is used to build the name of the output file.
     * 
     * @return String the pattern in java.text.MessageFormat syntax
     */
    public String getOutputPattern()
    {
        return outputPattern;
    }

    /**
     * Tells us whether output files should be generated if this template does
     * not produce any output.
     * 
     * @param generateEmptyFiles generate files for empty output yes/no
     */
    public void setGenerateEmptyFiles(boolean generateEmptyFiles)
    {
        this.generateEmptyFiles = generateEmptyFiles;
    }

    /**
     * Tells us whether output files are generated by this template if the
     * template produces empty output.
     * 
     * @return boolean
     */
    public boolean isGenerateEmptyFiles()
    {
        return generateEmptyFiles;
    }

    /**
     * Returns the fully qualified output file, this means:
     * <ul>
     * <li>the output pattern has been translated</li>
     * <li>the output dir name has been prepended</li>
     * </ul>
     * 
     * @param inputClassName name of the class from the model
     * @param inputPackageName name of the package from the model in which the
     *        class is contained
     * @param directory the directory as a File.
     * @return File absolute directory.
     */
    public File getOutputLocation(
        String inputClassName,
        String inputPackageName,
        File directory)
    {
        int dotIndex = this.getPath().indexOf(".");
        String pathBaseName = this.getPath().substring(0, dotIndex);

        //clean the strings since they could be null
        inputClassName = StringUtils.trimToEmpty(inputClassName);
        inputPackageName = StringUtils.trimToEmpty(inputPackageName);

        File file = null;
        if (directory != null)
        {
            Object[] arguments =
            {
                inputPackageName.replace('.', File.separatorChar),
                inputClassName,
                pathBaseName
            };

            String outputFileName;
            //if singleFileOutput is set to true, then
            //just use the output pattern as the file to
            //output to, otherwise we replace using message format.
            if (this.isOutputToSingleFile())
            {
                outputFileName = outputPattern;
            }
            else
            {
                outputFileName = MessageFormat.format(outputPattern, arguments);
            }

            file = new File(directory, outputFileName);
        }
        return file;
    }

    /**
     * Tells us the model elements that are supported by this template (i.e.
     * will be processed by this template)
     * 
     * @return TemplateModelElements all the model elements that should be
     *         processed by thsi template
     * @see org.andromda.core.cartridge.TemplateModelElements
     */
    public TemplateModelElements getSupportedModeElements()
    {
        final String methodName = "Template.getModelElements";
        if (this.supportedModelElements == null)
        {
            throw new TemplateException(methodName
                + " - supportedModelElements is null!");
        }
        return this.supportedModelElements;
    }

    /**
     * Sets the model elements that are suported by this template.
     * 
     * @param supportedModelElements the TemplateModelElements instance.
     * @see org.andromda.core.cartridge.TemplateModelElements
     */
    public void setSupportedModelElements(
        TemplateModelElements supportedModelElements)
    {
        this.supportedModelElements = supportedModelElements;
    }

    /**
     * If output to single file is <code>true</code> then all model elements
     * found by the processor (i.e. all those having matching modelElements)
     * will be output to one file.
     * 
     * @return Returns the outputToSingleFile.
     */
    public boolean isOutputToSingleFile()
    {
        return outputToSingleFile;
    }

    /**
     * @param outputToSingleFile The outputToSingleFile to set.
     */
    public void setOutputToSingleFile(boolean outputToSingleFile)
    {
        this.outputToSingleFile = outputToSingleFile;
    }

    /**
     * @see java.lang.Object#toString()
     */
    public String toString()
    {
        return ToStringBuilder.reflectionToString(this);
    }

    private TemplateModelElements supportedModelElements = null;
    private String outputPattern;
    private boolean generateEmptyFiles;
    private boolean outputToSingleFile = false;
}