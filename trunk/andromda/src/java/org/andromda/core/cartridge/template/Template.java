package org.andromda.core.cartridge.template;

import org.andromda.core.cartridge.Resource;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.ToStringBuilder;

import java.io.File;

/**
 * This class implements the <code>&lt;template&gt;</code> tag in a cartridge descriptor file.
 *
 * @author <a href="http://www.mbohlen.de">Matthias Bohlen </a>
 * @author Anthony Mowers
 * @author Chad Brandon
 */
public class Template extends Resource
{
    /**
     * The default constructor used by the XmlObjectFactory to instantiate the template configuration.
     */
    public Template()
    {
        this.supportedModelElements = new ModelElements();
    }

    private boolean generateEmptyFiles;

    /**
     * Tells us whether output files should be generated if this template does not produce any output.
     *
     * @param generateEmptyFiles generate files for empty output yes/no
     */
    public void setGenerateEmptyFiles(boolean generateEmptyFiles)
    {
        this.generateEmptyFiles = generateEmptyFiles;
    }

    /**
     * Tells us whether output files are generated by this template if the template produces empty output.
     *
     * @return boolean
     */
    public boolean isGenerateEmptyFiles()
    {
        return generateEmptyFiles;
    }

    /**
     * Returns the fully qualified output file, this means: <ul> <li>the output pattern has been translated</li> <li>the
     * output dir name has been prepended</li> </ul>
     *
     * @param modelElementName name of the element from the model
     * @param packageName      name of the package from the model in which the class is contained
     * @param directory        the directory as a File.
     * @return File absolute directory.
     */
    public File getOutputLocation(String modelElementName, String packageName, File directory)
    {
        File file = null;
        // if singleFileOutput is set to true, then
        // just use the output pattern as the file to
        // output to, otherwise we replace using message format.
        if (this.isOutputToSingleFile())
        {
            file = super.getOutputLocation(new String[]{this.getOutputPattern(), }, directory);
        }
        else
        {
            file = super.getOutputLocation(new String[]{StringUtils.trimToEmpty(packageName).replace('.',
                    File.separatorChar), modelElementName, }, directory);
        }
        return file;
    }

    /**
     * Tells us the model elements that are supported by this template (i.e. will be processed by this template)
     *
     * @return ModelElements all the model elements that should be processed by thsi template
     * @see org.andromda.core.cartridge.template.ModelElements
     */
    public ModelElements getSupportedModeElements()
    {
        final String methodName = "Template.getModelElements";
        if (this.supportedModelElements == null)
        {
            throw new TemplateException(methodName + " - supportedModelElements is null!");
        }
        return this.supportedModelElements;
    }

    /**
     * Sets the model elements that are suported by this template.
     *
     * @param supportedModelElements the ModelElements instance.
     * @see org.andromda.core.cartridge.template.ModelElements
     */
    public void setSupportedModelElements(ModelElements supportedModelElements)
    {
        this.supportedModelElements = supportedModelElements;
    }

    private boolean outputToSingleFile = false;

    /**
     * If output to single file is <code>true</code> then all model elements found by the processor (i.e. all those
     * having matching modelElements) will aggregated and output to one single file.
     *
     * @return Returns the outputToSingleFile.
     */
    public boolean isOutputToSingleFile()
    {
        return outputToSingleFile;
    }

    /**
     * Sets whether or not we should aggregate elements and output to a single file.
     *
     * @param outputToSingleFile The outputToSingleFile to set.
     */
    public void setOutputToSingleFile(boolean outputToSingleFile)
    {
        this.outputToSingleFile = outputToSingleFile;
    }

    /**
     * Indicates whether or not files should be output when there are no elements when aggregating.
     */
    private boolean outputOnEmptyElements = true;

    /**
     * Indicates that when there are no elements in the collection of elements (when {@link #isOutputToSingleFile()} is
     * <code>true</code>, whether or not the file should be output.  Default is <code>true</code>
     *
     * @return true/false
     * @see #isOutputToSingleFile()
     */
    public boolean isOutputOnEmptyElements()
    {
        return this.outputOnEmptyElements;
    }

    /**
     * Sets whether or not we should output a file when no elements exist in the collection of elements when {@link
     * #isOutputToSingleFile()} returns <code>true</code>.
     *
     * @param outputOnNoElements the boolean flag.
     * @see #isOutputOnEmptyElements()
     * @see #isOutputToSingleFile()
     */
    public void setOutputOnEmptyElements(boolean outputOnEmptyElements)
    {
        this.outputOnEmptyElements = outputOnEmptyElements;
    }

    /**
     * @see java.lang.Object#toString()
     */
    public String toString()
    {
        return ToStringBuilder.reflectionToString(this);
    }

    private ModelElements supportedModelElements = null;
}