<?xml version="1.0" encoding="iso-8859-1"?>

<document>
    <properties>
        <author email="martin.west@dsl.pipex.com">Martin West</author>
        <title>AndroMDA Developer Debugging Hints and Tips</title>
    </properties>
    <body>
        <section name="AndroMDA Developer Debugging">
            <p>
                This document provides guidelines on debugging the internals of AndroMDA. 
                Logging is managed by 
                <a href="http://team.andromda.org/docs/andromda-core/apidocs/org/andromda/core/common/AndroMDALogger.html">
                    AndroMDALogger
                </a>.
            </p>
        </section>
		<section>
            <subsection name="Overriding log4j settings">
                <p>
                    Too override the default log4j settings:.
                    <ul>
                        <li>Create a file <a href="resources/log4j.txt">log4j.xml</a></li>
                        <li>Add a line to your project.properties
                            <source>maven.andromda.loggingConfigurationUri=file:/some_location/log4j.xml</source>
                            or other maven file where properties are picked up from. 
                        </li>
                        <li>Modify as required. For more information consult the 
                            <a href="http://logging.apache.org/log4j/docs/manual.html">log4j
                            documentation</a> or this 
                            <a href="http://www.vipan.com/htdocs/log4jhelp.html">useful 
                            tutorial</a>. For pattern settings see 
                            <a href="http://logging.apache.org/log4j/docs/api/org/apache/log4j/PatternLayout.html">
                                PatternLayout
                            </a> javadoc.
                            The sample one above turns off INFO messages and 
                            limits others to WARN apart from the ejb cartridge which is set
                            to DEBUG.
                        </li>
                    </ul>  	
                </p>
            </subsection>
            <subsection name="Log4J Categories">
                <table>
                    <tr>
                        <th>Category</th>
                        <th>Usage</th>
                    </tr>
                    <tr>
                        <td>AndroMDA</td>
                        <td>General Information messages</td>
                    </tr>
                    <tr>
                        <td>namespaces</td>
                        <td>Information messages for namespaces.</td>
                    </tr>
                    <tr>
                        <td>AndroMDA:NAMESPACE_NAME</td>
                        <td>Information messages for the specific namespace.</td>
                    </tr>
                    <tr>
                        <td>org.andromda.namespaces.CARTRIDGE</td>
                        <td>Debug messages for the specific cartridge.</td>
                    </tr>
                </table>
             </subsection>			
            <subsection name="Core Debugging">
                <p>
                    TBC
                </p>
            </subsection>
            <subsection name="Cartridge Debugging">
                <p>
                    The base class, 
                    <a href="http://team.andromda.org/docs/andromda-core/apidocs/org/andromda/core/metafacade/MetafacadeBase.html">
                    MetaFacadeBase</a> of Facade logic classes contains an instance variable logger.
                    This logger will have been initialized to use the appropriate namespace
                    category for the cartridge which contains this class. When using the debug calls
                    the isDebugEnabled method should be used to reduce the overhead of debug calls
                    <source language="java">
if (logger.isDebugEnabled()) 
{
    logger.debug("A debug message '" + metaObject + "," + context + "'");
}
                     </source>
                     The logger instance variable is not initialized until after the object is
                     constructed and therefore not available in the constructor. To circumvent this
                     the following code can be employed:
                     <source language="java">
Logger namespaceLogger = AndroMDALogger.getNamespaceLogger("ejb");
if (namespaceLogger.isDebugEnabled()) 
{
    namespaceLogger.warn("EJBEntityFacadeLogicImpl(" + metaObject + "," + context + ")");
}
                    </source>
                </p>
            </subsection>
		</section>
    </body>
</document>