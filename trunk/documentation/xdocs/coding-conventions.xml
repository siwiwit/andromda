<?xml version="1.0" encoding="iso-8859-1"?>

<document>

    <properties>
        <author email="chdbrandon@yahoo.com">Chad Brandon</author>
        <title>AndroMDA Developer Coding Conventions</title>
    </properties>

    <body>

        <section name="AndroMDA Developer Coding Conventions">
            <p>
                This document describes a list of coding conventions that are required for 
                code submissions to the project. By default, the coding conventions for 
                most Open Source Projects should follow the existing coding conventions in 
                the file that you are working on. For example, if the bracket is on the 
                line after the if statement, then you should write all your code to have 
                that convention. 
            </p>
            <p>
                Below is a list of coding conventions that are specific to AndroMDA. 
                Anything else not specifically mentioned here should follow the official 
                <a href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Sun Java Coding Conventions</a>.
            </p>
        </section>
        <section name="Java Coding Conventions">
            <ul>
                <li>
                    <p>
                        <strong>Brackets:</strong> All brackets (class, method, if, try, etc) 
                        must begin and end on a new line. Example : 
                    </p>
                  <source>
public class SomeClass
{
    public void someMethod()
    {
        if (xxx)
        {
        }
    }
}
                    </source>
                </li>
                <li>
                    <p>
                        <strong>Iterators:</strong> Looping using an iterator, do these in for-loops 
                        instead of while loops (because this allows the iterator itself is scoped 
                        into that block). Example:
                   </p>
                   <source>
for (Iterator stereotypeIt = stereotypes.iterator(); stereotypeIt.hasNext();)
{
    ModelElement stereotype = (ModelElement)stereotypeIt.next();
    stereoTypeNames.add(stereotype.getName());
}                        
                    </source>
                </li>
                <li>
                    <p>
                        <strong>Identations:</strong> 4 spaces. <strong>NO tabs</strong>. Period. 
                        We understand that a lot of you like to use tabs, but the fact of the 
                        matter is that in a distributed development environment, when the cvs 
                        commit messages get sent to a mailing list, they are almost impossible 
                        to read if you use tabs. 
                    </p>
                </li>
                <li>
                    <p>
                        <strong>Comments:</strong> Javadoc SHOULD exist on all your class members 
                        (methods + class variables), including the private ones. Also, if you are 
                        working on existing code and there currently isn't a javadoc for that 
                        method/class/variable or whatever, then you should contribute and add it. 
                        This will improve the project as a whole.  Also add code comments when 
                        you think it's necessary (like assumptions), especially when the code 
                        is not obvious. 
                    </p>
                </li>
                <li>
                    <p>
                       <strong>Author References:</strong> If you contribute to a file (code or documentation), 
                       add yourself to the top of the file (below the existing authors). For java files 
                       the preferred Javadoc format is:             
                    </p>
                    <source>
                        @author FirstName LastName
                    </source>
                </li>
                <li>
                    <p>
                        <strong>Exiting Methods:</strong> There should be only a single 
                        point of exit out of a method (i.e. a single return statement).
                    </p>
                </li>
                <li>
                    <p>
                        <strong>Variable Names:</strong> <em>attr</em> should be written
                        as <code>attribute</code>, <em>collIdents</em> should be 
                        <code>identifiers</code> (the type is Collection, don?t specify that 
                        in the name), <strong>the code should read as plain English</strong>.
                    </p>
                </li>
                <li>
                    <p>
                        <strong>Strings:</strong> Avoid hardcoding values, Strings as well as 
                        numbers, etc should go into a properties file or a class holding constants. 
                    </p>
                </li>
            </ul>
        </section>
        <section name="Template Coding Conventions">
            <ul>
                <li>
                    <p>
                       <strong>Referencing properties:</strong> In Velocity (etc) try to do 
                       <code>$variable.property</code> instead of $variable.getProperty(), 
                       the two calls are equivalent but the former better matches our metamodels 
                       and (is less code to write).
                    </p>        
                </li>
            </ul>      
        </section>
    </body>
</document>
