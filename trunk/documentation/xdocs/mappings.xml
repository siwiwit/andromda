<?xml version="1.0" encoding="UTF-8"?>

<document>
    <properties>
        <author email="draftdog@users.sourceforge.net">Wouter Zoons</author>
        <title>Default Mappings</title>
    </properties>
    <body>
        <section name="Default Mappings">
            <p>
                When modeling applications in UML for AndroMDA you will never use language or technology
                specific types directly. Instead you will use platform independent datatypes which will
                be mapped onto the ones you need during the code generation process. This allows you to
                target different platforms without having to edit your model.
            </p>
            <p>
                Mappings are configured using properties, an example can be found in the
                <code>/mda/project.xml</code> file, generated by the
                <a href="maven-andromdapp-plugin/index.html"><code>andromdapp:generate</code></a> Maven plugin.
                Here's a fragment taken from this file <em>(notice how the sql mappings are controlled by a
                runtime property defined in /project.properties)</em>:
<source language="xml"><![CDATA[
    <dependency>
        <groupId>andromda</groupId>
        <artifactId>maven-andromda-plugin</artifactId>
        <version>${andromda}</version>
        <type>plugin</type>
        <properties>
            ...
            <!--
                here we configure the mappings to be used,
                we specify the logical names for each mapping
            -->
            <languageMappingsUri>Java</languageMappingsUri>
            <wrapperMappingsUri>JavaWrapper</wrapperMappingsUri>
            <sqlMappingsUri>${sql.mappings}</sqlMappingsUri>
            <jdbcMappingsUri>JDBC</jdbcMappingsUri>
            ...
        </properties>
    </dependency>
]]></source>
            </p>
            <p>
                The logical names can be found in the mapping file itself, at the top of the file, as
                shown here:
<source language="xml"><![CDATA[
    <mappings name="Java">
        ..
        <mapping>
            <from>datatype::String</from>
            <to>java.lang.String</to>
        </mapping>
        ...
    </mappings>
]]></source>
            </p>
            <p>
                Different types of mappings exist, the ones that ship with the AndroMDA distribution
                are listed here:
            </p>
            <subsection name="Language Mappings">
                <p>
                    <ul>
                        <li><a href="mappings/JavaMappings.xml">JavaMappings.xml</a></li>
                        <li><a href="mappings/XmlSchemaMappings.xml">XmlSchemaMappings.xml</a></li>
                    </ul>
                </p>
            </subsection>
            <subsection name="Wrapper Mappings">
                <p>
                    <ul>
                        <li><a href="mappings/JavaWrapperMappings.xml">JavaWrapperMappings.xml</a></li>
                    </ul>
                </p>
            </subsection>
            <subsection name="JDBC Mappings">
                <p>
                    <ul>
                        <li><a href="mappings/JdbcMappings.xml">JdbcMappings.xml</a></li>
                        <li><a href="mappings/HibernateTypeMappings.xml">HibernateTypeMappings.xml</a></li>
                    </ul>
                </p>
            </subsection>
            <subsection name="SQL Mappings">
                <p>
                    <ul>
                        <li><a href="mappings/DB2Mappings.xml">DB2Mappings.xml</a></li>
                        <li><a href="mappings/FirebirdMappings.xml">FirebirdMappings.xml</a></li>
                        <li><a href="mappings/HypersonicSqlMappings.xml">HypersonicSqlMappings.xml</a></li>
                        <li><a href="mappings/MSSQLMappings.xml">MSSQLMappings.xml</a></li>
                        <li><a href="mappings/MySQLMappings.xml">MySQLMappings.xml</a></li>
                        <li><a href="mappings/Oracle9iMappings.xml">Oracle9iMappings.xml</a></li>
                        <li><a href="mappings/PostgreSQLMappings.xml">PostgreSQLMappings.xml</a></li>
                        <li><a href="mappings/SapDBMappings.xml">SapDBMappings.xml</a></li>
                    </ul>
                </p>
            </subsection>
            <section name="Customizing the default mappings">
                <subsection name="Submitting new default mappings">
                    <p>
                        Not all possible mappings are known by AndroMDA, if you are using a database
                        or language for which no mappings exist, then you're welcome to create your
                        own mappings file and submit it to us, we'll make sure it will be integrated
                        into the project.
                    </p>
                    <p>
                        If you are subscribed to the
                        <a href="mailto:andromda-devel@lists.sourceforge.net">AndroMDA Developer mailing list</a>
                        you can send an email to
                        <a href="mailto:andromda-devel@lists.sourceforge.net">andromda-devel@lists.sourceforge.net</a>,
                        or better yet: file an issue in JIRA, that way it's easier to keep track of:
                        <a href="http://jira.andromda.org/">http://jira.andromda.org/</a>.
                    </p>
                </subsection>
                <subsection name="Extending and Overriding">
                    <p>
                        It might happen you want to have a mapping that is slightly different than the
                        default one known by AndroMDA. Well, in that case you can either <em>extend</em> or 
                        <em>override</em> the default mapping by specifying your own mapping file.
                    </p>
                    <p>
                        This is done by simply using a URI for the value of a mapping namespace property 
                        instead of the logical name, here are
                        a few examples for several types of mappings, you can find them in the andromda-plugin
                        dependency of <code>/mda/project.xml</code> (which means these apply to all namespaces/cartridges):
<source language="xml"><![CDATA[
    <languageMappingsUri>file:${maven.src.dir}/mappings/MyJavaMappings.xml</languageMappingsUri>

    <wrapperMappingsUri>file:${maven.src.dir}/mappings/MyJavaWrapperMappings.xml</wrapperMappingsUri>

    <jdbcMappingsUri>file:${maven.src.dir}/mappings/MyJdbcMappings.xml</jdbcMappingsUri>

    <sqlMappingsUri>file:${maven.src.dir}/mappings/MySqlMappings.xml</sqlMappingsUri>
]]></source>
                    </p>
                    <p>
                        If you were overriding a mapping, all you'd do is customize an existing file and tell AndroMDA
                        to use the the URI to your new mapping file (like you see above).  If, on the other hand, you want 
                        to <strong>extend</strong> a mapping (this is much better in most cases because then you only need to add or 
                        customize the specific <![CDATA[<mapping/>]]> entry(s) you need and inherit the default ones), you'll 
                        need to add the <em>extends</em> element to your mapping file.  Note this example is saying to extend
                        the mappings found with the logical name <em>Hibernate</em>:
<source language="xml"><![CDATA[
    <mappings name="HibernateExtension">
        <extends>Hibernate</extends>
        ...
        <mapping>
            <from>datatype::boolean</from>
            <from>datatype::Boolean</from>
            <to>yes_no</to>
        </mapping>
        ...
    </mappings>
]]></source>
                     You can also extend a mapping using a relative path (relative to the location of the mapping you're defining
                     it within).  Notice how this time we have the relative
                     path <em>../../mappings/HibernateTypeMappings.xml</em> to the mappings file we're extending 
                     (assuming it exists within that location):
<source language="xml"><![CDATA[
    <mappings name="HibernateExtension">
        <extends>../../mappings/HibernateTypeMappings.xml</extends>
        ...
        <mapping>
            <from>datatype::boolean</from>
            <from>datatype::Boolean</from>
            <to>yes_no</to>
        </mapping>
        ...
    </mappings>
]]></source>
                    </p>
                    <p class="highlight">
                        All mappings can be found in the andromda-plugin jar, just unzip
                        it and go into <code>/plugin-resources/andromda/mappings</code>, you can unzip them
                        into your own location, edit them, and use them to override the defaults as explained
                        before.
                    </p>
                </subsection>
            </section>
        </section>
    </body>
</document>
