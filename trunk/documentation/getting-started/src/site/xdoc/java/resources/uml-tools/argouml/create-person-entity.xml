<?xml version="1.0" encoding="iso-8859-1"?>

<document>
    <properties>
        <author email="tfmorris@tigris.org">Tom Morris</author>
        <title>Create Person Entity using ArgoUML</title>
    </properties>

    <body>

        <section name="Create Person Entity using ArgoUML">
            <p>
                This page provides directions to create the Person entity using ArgoUML. The model is
                shown below for your reference.
            </p>

            <p>
                <div align="center">
                    <img src="../../../images/argouml/PersonEntity.png"/>
                </div>
            </p>

            <p>
              <ol>
                <li>Download an ArgoUML compatible version of the AndroMDA profile
                    from <a href="http://argouml.tigris.org/source/browse/*checkout*/argouml-mdr/contrib/andromda/andromda-profile-3.1.xmi.zip">
                    the ArgoUML CVS</a>.</li>
                <li>Start ArgoUML.</li>
                <li>Select File > Open Project... open the AndroMDA 3.1 profile
                    and save as C:/TimeTracker/mda/src/uml/TimeTrackerModel.zargo.
                    </li>
                <li>Edit timetracker/mda/project.properties and change
                	<code>maven.andromda.model.uri=file:${maven.src.dir}/uml/TimeTrackerModel.xmi</code>
                    to
                    	<code>maven.andromda.model.uri=jar:file:${maven.src.dir}/uml/TimeTrackerModel.zargo!/TimeTrackerModel.xmi</code>
</li>
                <li>The TimeTracker model will now open showing the two default diagrams
                    (an empty Class Diagram and an empty Use Case Diagram) and the contents of the
                    AndroMDA profile.</li>
                <li>In the Explorer pane, click on the root model to select it.  Now go to the Properties
                    panel at the bottom of the screen and rename the model to TimeTracker by typing the
                    new name in the Name: field.</li>
                <li>Now click the Package icon (looks like a tabbed folder) immediately above the name
                    field on property panel.  A new package will be created under the TimeTracker model
                    and the keyboard focus will be in its name field on the property pane.
                    Type in <code>org.andromda.timetracker</code> as the name of the package. AndroMDA
                    will map this package to a Java package with the same name. Note: Make sure the package name is
                    exactly <code>org.andromda.timetracker</code>, with no leading or trailing spaces. We
                    have found that some browsers introduce a leading space in the package name if you copy
                    it from this page!</li>
                <li>Now create a package called <code>domain</code> under <code>org.andromda.timetracker</code>.
                    We will create our entities and supporting classes in this package. Note that AndroMDA
                    does not require this package structure. We are doing it simply to separate our business
                    domain classes from other classes such as value objects etc.</li>
                <li>With the <code>domain</code> package still selected go to the menu bar and
                    choose Create -> New Class Diagram.  Go to the property panel at the bottom
                    and give it the name <code>Domain Objects</code>.</li>
                <li>In the toolbar immediately above the diagram's drawing area click on the Class icon (4th icon
                    from the left). Now click anywhere inside the diagram. A new class will be created.
                    The class will be automatically selected as indicated by the 4 knobs around it.
                    (If you somehow deselected the class, then select it again by clicking on it.)
                    Now type the word "Person". This word will be entered as the name of the class.</li>
                <li>Let's add some documentation for the <code>Person</code> class. It is always a good
                    idea to document your model. Documentation added to model elements such as classes,
                    attributes and methods is carried over to the code as comments. Click on the
                    Documentation tab in the property panel. Add the following
                    sentence in the Documentation field:
                    "This class represents any person whose time needs to be tracked."</li>
                <li>Now add the stereotype <code>Entity</code> to class <code>Person</code>. There are two
                    ways to do this which you can choose from depending on your work style.
                    <nl>
                        <li>You can right-click on the class and select Apply Stereotypes. In the next level menu,
                        check the box next to Entity.</li>
                        <li>You can go to the Stereotypes tab on the property panel and select Entity in
                        the left hand Available Stereotypes column and click the arrows to move it right
                        to the Applied Stereotypes column.</li>
                    </nl>
                    The <code>Person</code> class will now have the <code>Entity</code>
                    stereotype.</li>
                <li>Let's add <code>username</code> as an attribute of <code>Person</code>.
                    Right-click on the Person class and select Add -&gt; New Attribute. A new attribute is
                    inserted with the specification "+newAttr : int". Double click on the new attribute to
                    select the old specification and write over this specification with
                    this new one: "+username : String" and press Enter. Note that
                    attributes are always generated as private members of a class. However the visibilities
                    of the associated getter and setter are determined by the visibility of the attribute
                    specification. In this case we have specified public visibility (by using the plus sign)
                    and hence the <code>username</code> getter and setter will be public.</li>
                <li>Now add two more public attributes called <code>firstName</code> and <code>lastName</code>
                    to the <code>Person</code> class. Make them <code>String</code> type.  If you prefer
                    a point and click interface rather than typing the specification, you can work from
                    the property panel and set the visibility, type, etc individual using that dialog.</li>
                <li>Make sure your class diagram matches the one shown above exactly. (It is okay if your
                    class shows an empty operation compartment. This can be hidden very easily).</li>
                <li>Save your <code>TimeTracker</code> model by selecting File > Save Project.</li>
              </ol>
            </p>

            <p>
              Congratulations! You have now specified the <code>Person</code> entity of the <code>TimeTracker</code>
              application. We are now ready to generate some code. Please go back to the main tutorial page and
              continue from where you left off.
            </p>
        </section>

    </body>
</document>
