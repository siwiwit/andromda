<?xml version="1.0" encoding="iso-8859-1"?>

<document>
    <properties>
        <author email="naresh@andromda.org">Naresh Bhatia</author>
        <title>Create a Service</title>
    </properties>

    <body>
        <section name="Create a Service">
            <p>
                In this section we will create the <code>PeopleService</code>. This service
                exposes three methods to manage information about people working at
                Northwind. The model for <code>PeopleService</code> is shown below.
            </p>

            <p>
                <div align="center">
                    <img src="images/magicdraw/PeopleService.jpg"/>
                </div>
            </p>

            <p>
                Note that we have added a dependency from <code>PeopleService</code> to the
                <code>Person</code> entity. This will make sure that the PeopleService
                has access to the <code>PersonDao</code>.
            </p>

            <p>
                Now add <code>PeopleService</code> to your model. To do this,
                click the link below for your UML modeling tool.
            </p>

            <p>
                <a href="resources/uml-tools/argouml/create-people-service.html" target="_blank">ArgoUML</a>
                <a href="resources/uml-tools/magicdraw/create-people-service.html" target="_blank">MagicDraw</a>
            </p>
        </section>

        <section name="Generate Code">
                <p> Follow the steps below to generate code.
                    <ol>
                        <li>Open a Command Prompt and change your directory to <code>C:/timetracker</code>.</li>
                        <li>Execute the command <code>maven -o clean install</code>. Make sure you get a
                        <code>BUILD SUCCESSFUL</code> message.</li>
                    </ol>
                </p>

                <p>
                    Just like data access objects, a service is also generated as a trio of classes: an interface,
                    an abstract base class and a concrete implementation. Here are the 3 classes generated for
                    <code>PeopleService</code>

                    <ol>
                        <li><strong>PeopleService.java:</strong> <code>PeopleService</code> is the interface
                        that specifies the service methods. Since this interface is needed by client applications as
                        well as the service implementation, it is generated in the target branch of the <code>common</code>
                        project.</li>

                        <li><strong>PeopleServiceBase.java:</strong> <code>PeopleServiceBase</code> implements the
                        methods specified by the <code>PeopleService</code> interface. These methods essentially
                        do some parameter checking and then delegate the actual business functionality to "handle" methods.
                        Handle methods are expected to be implemented manually in the <code>PeopleServiceImpl</code> class.
                        <code>PeopleServiceBase</code> also contains references to DAOs that the service depends on.
                        PeopleServiceBase.java is generated in the target branch of the <code>core</code> project.</li>

                        <li><strong>PeopleServiceImpl.java:</strong> <code>PeopleServiceImpl</code> is a concrete extension
                        of the <code>PeopleServiceBase</code> class. This is where developers are expected to code
                        the main business logic for the service methods. PeopleServiceImpl.java is generated in the source branch
                        of the <code>core</code> project.</li>
                    </ol>
                </p>
        </section>

        <section name="Implement Service Methods">
            <p>
                This section shows how to implement the 3 "handle" methods in <code>PeopleServiceImpl</code>.
                Open the file <code>PeopleServiceImpl.java</code> under
                C:/timetracker/core/src/java/org/andromda/timetracker/service and follow the instructions below.
            </p>

            <subsection name="handleCreatePerson()">
                <p>This service method accepts a <code>PersonVO</code> and creates the person in the database. It returns the
                id of the newly created person. Fill in the implementation of this method as shown bolow.</p>

<source language="java">
protected java.lang.Long handleCreatePerson(org.andromda.timetracker.vo.PersonVO personVO)
    throws java.lang.Exception
{
    Person person = Person.Factory.newInstance();
    getPersonDao().personVOToEntity(personVO, person, true);
    getPersonDao().create(person);
    return person.getId();
}
</source>
                <p>We first create a new instance of a person in memory using the Person factory. We then initialize the person
                from the supplied value object - the default implementation of <code>personVOToEntity()</code> works well for this.
                Now we ask <code>PersonDao</code> to create the person in the database. Finally we return the id of the newly
                created person to the caller.</p>
            </subsection>

            <subsection name="handleGetPerson()">
                <p>This service method accepts a person's <code>id</code> and returns the associated
                <code>PersonVO</code>. It is implemented using a direct DAO call that retrieves
                the <code>Person</code>, converts it to a <code>PersonVO</code> and returns it.</p>

<source language="java">
protected org.andromda.timetracker.vo.PersonVO handleGetPerson(java.lang.Long id)
    throws java.lang.Exception
{
    return (PersonVO)getPersonDao().load(PersonDao.TRANSFORM_PERSONVO, id);
}
</source>
            </subsection>

            <subsection name="handleGetAllPeople()">
                <p>This service method returns all people in the TimeTracker database as an array of <code>PersonVO</code> objects.
                It is implemented as a direct call to <code>PersonDao.loadAll()</code>, which returns a collection of <code>PersonVO</code>
                objects. This collection is converted to an array and returned.</p>

<source language="java">
protected org.andromda.timetracker.vo.PersonVO[] handleGetAllPeople()
    throws java.lang.Exception
{
    Collection people = getPersonDao().loadAll(PersonDao.TRANSFORM_PERSONVO);
    return (PersonVO[])people.toArray(new PersonVO[people.size()]);
}
</source>
            </subsection>

            <subsection name="Imports">
                <p>Add the required import statements to the file after the package statement as shown below.</p>

<source language="java">
package org.andromda.timetracker.service;

import java.util.Collection;
import org.andromda.timetracker.domain.Person;
import org.andromda.timetracker.domain.PersonDao;
import org.andromda.timetracker.vo.PersonVO;
</source>
            </subsection>

            <p>After implementing the code show above, save the file and compile the application.
                <ol>
                    <li>Open a Command Prompt and change your directory to <code>C:/timetracker</code>.</li>
                    <li>Execute the command <code>maven -o install</code>. Make sure you get a
                    <code>BUILD SUCCESSFUL</code> message.</li>
                </ol>
            </p>
        </section>

        <section name="What's Next?">
            <p>
                Now that we have modeled the <code>PeopleService</code>, it is finally time to see all our effort working
                in a client application. Click <a href="create-console-app.html">here</a> to create a console client
                application.
            </p>
        </section>
    </body>
</document>
