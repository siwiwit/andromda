<project default="dist" xmlns:maven="jelly:maven" xmlns:j="jelly:core"
    xmlns:ant="jelly:ant" xmlns:util="jelly:util" xmlns:artifact="artifact">
    
    <!-- ==================================================================
               Installs all component libraries into the local repository                                                    
         ================================================================== -->
    <goal name="install-components" prereqs="initialize">
        <j:set var="maven.multiproject.includes" value="${component.install.includes}"/>
        <attainGoal name="multiproject:install"/>
    </goal> 
    
    <!-- ==================================================================
               Installs all sample libraries into the local repository                                                    
         ================================================================== -->
    <goal name="install-samples" prereqs="initialize">
        <j:set var="maven.multiproject.includes" value="${sample.install.includes}"/>
        <attainGoal name="multiproject:install"/>
    </goal>
    
    <!-- ==================================================================
               Installs all libraries into the local repository                                                    
         ================================================================== -->
    <goal name="install" prereqs="initialize">
        <j:set var="maven.multiproject.includes" value="${component.install.includes},${sample.install.includes}"/>
        <attainGoal name="multiproject:install"/>
    </goal>
        
    <!-- ==================================================================
               Deploys all libraries into the remote repository                                                    
         ================================================================== -->
    <goal name="deploy" prereqs="initialize">
        <j:set var="maven.multiproject.includes" value="${component.install.includes}"/>
        <attainGoal name="multiproject:deploy"/>
    </goal>
    
    <!-- ==================================================================
               Transfer distribution to team server.
         ================================================================== -->
    <goal name="xfr-dist" prereqs="initialize">
        <j:set var="maven.multiproject.includes" value="${component.install.includes}"/>
        <attainGoal name="multiproject:deploy"/>
    </goal>
    
    <!-- ==================================================================
               Deploys all libraries into the remote repository while 
               skipping all tests (allows deploys to occurr faster).                                                   
         ================================================================== -->
    <goal name="deploy-no-tests" prereqs="initialize">
        <j:set var="maven.multiproject.includes" value="${component.install.includes}"/>
        <j:set var="maven.test.skip" value="true" scope="parent"/>
        <attainGoal name="multiproject:deploy"/>
    </goal>
    
    <!-- ==================================================================
               Clean                                                     
         ================================================================== -->
    <goal name="clean">
        <j:set var="maven.multiproject.includes" value="${component.install.includes},${sample.install.includes}"/>
        <attainGoal name="multiproject:clean"/>
        <maven:maven
            descriptor="${basedir}/documentation/project.xml"
            goals="clean:clean"/>
        <attainGoal name="clean:clean"/>
        <!-- get rid of all the log files -->
        <ant:delete>
            <ant:fileset dir=".">
                <ant:include name="**/*.log*"/>
                <ant:exclude name="maven.log"/>
            </ant:fileset>
        </ant:delete>
    </goal>
    
    <!-- ==================================================================
               Builds ALL documentation and inludes it in the binary dist                                          
         ================================================================== -->
    <goal name="docs" prereqs="dist-init,initialize">
        <maven:maven descriptor="${basedir}/documentation/project.xml" goals="build"/>
        <ant:copy todir="${binaryDistDir}">
            <ant:fileset dir="documentation/target">
                <ant:include name="*.zip"/>
            </ant:fileset>
        </ant:copy>
        <!-- include it in the binary dist -->
        <j:set var="zipFile" value="${distribution.dir}/${distName}.zip"/>
        <ant:zip zipfile="${zipFile}">
            <ant:zipfileset dir="${binaryDistDir}" prefix="${distName}"/>
        </ant:zip>
    </goal>
    
    <!-- ======================= DISTRIBUTION GOALS ======================= -->
    <!-- ==================================================================
             Creates the AndroMDA distributions                                                    
         ================================================================== -->
    <goal name="dist">
        <attainGoal name="dist-src"/>
        <attainGoal name="dist-bin"/>
    </goal>
    
    <!-- ==================================================================
             Creates the AndroMDA binary distribution                                                     
         ================================================================== -->
    <goal name="dist-bin" prereqs="dist-init">
        <ant:delete dir="${binaryDistDir}"/>
        <attainGoal name="install"/>
        <ant:mkdir dir="${binaryDistLibDir}"/>
        <!-- first add the components -->
        <maven:reactor basedir="${basedir}" banner="Gathering Components: "
            includes="${component.install.includes}" postProcessing="true" ignoreFailures="false"/>
        <j:forEach var="reactorProject" items="${reactorProjects}">
            <ant:echo>Adding Component: '${reactorProject}'</ant:echo>
            <j:set var="fromDir" value="${reactorProject.file.parent}/target"/>
            <j:set var="type" value="${reactorProject.context.getVariable('maven.multiproject.type')}"/>
            <j:if test="${type == null || type == ''}">
                <j:set var="type" value="jar"/>
            </j:if>
            <j:choose>
                <!-- we handle the andromda-ant module a little different 
                    (we don't want it bundled maven style) -->
                <j:when test="${reactorProject.artifactId.indexOf('andromda-ant') ne '-1'}">
                    <j:set var="toDir" value="${binaryDistDir}/ant"/>
                    <ant:copy todir="${toDir}">
                        <ant:fileset dir="${fromDir}">
                            <ant:include name="*.jar"/>
                            <ant:include name="*.xml"/>
                            <ant:include name="*.txt"/>
                        </ant:fileset>
                    </ant:copy>
                </j:when>
                <j:otherwise>
                    <j:set var="toDir" value="${binaryDistDir}/${reactorProject.groupId}/${type}s"/>
                    <ant:copy todir="${toDir}">
                        <ant:fileset dir="${fromDir}">
                            <ant:include name="*.jar"/>
                        </ant:fileset>
                    </ant:copy>
                    <!-- copy any models -->
                    <j:set var="modelType" value="xml.zip"/>
                    <j:set var="toDir" value="${binaryDistDir}/${reactorProject.groupId}/${modelType}s"/>
                    <ant:copy todir="${toDir}">
                        <ant:fileset dir="${fromDir}">
                            <ant:include name="*.${modelType}"/>
                        </ant:fileset>
                    </ant:copy>
                </j:otherwise>
            </j:choose>
            <ant:copy todir="${toDir}/../..">
                <ant:fileset dir="${fromDir}/..">
                    <ant:include name="LICENSE"/>
                </ant:fileset>
            </ant:copy>
            <!-- don't copy the dependencies for the maven plugin -->
            <j:if test="${reactorProject.artifactId.indexOf('maven') eq '-1'}">
                <j:forEach var="lib" items="${reactorProject.artifacts}">
                    <!-- don't copy 'andromda' or 'jelly' dependencies -->
                    <j:set var="dep" value="${lib.dependency}"/>
                    <j:set var="groupId" value="${lib.dependency.groupId}"/>
                    <j:if test="${groupId.indexOf('andromda') eq '-1' and groupId.indexOf('jelly') eq '-1'}">
                        <ant:copy todir="${binaryDistLibDir}/${dep.artifactDirectory}">
                            <ant:fileset dir="${maven.repo.local}/${dep.artifactDirectory}">
                                <ant:include name="${dep.type}s/${dep.artifactId}-${dep.version}.${dep.extension}"/>
                            </ant:fileset>
                        </ant:copy>
                    </j:if>
                </j:forEach>
            </j:if>
        </j:forEach>
        <!-- now add the samples -->
        <maven:reactor basedir="${basedir}" banner="Gathering Samples: "
            includes="${sample.dist.includes}" postProcessing="true" ignoreFailures="false"/>
        <j:forEach var="project" items="${reactorProjects}" varStatus="counter">
            <j:set var="fromDir" value="${project.file.parentFile}"/>
            <j:set var="toDir" value="${binaryDistDir}/${fromDir.parentFile.name}/${project.artifactId}"/>
            <ant:copy todir="${toDir}">
                <ant:fileset dir="${fromDir}">
                    <ant:exclude name="**/*.log*"/>
                    <ant:exclude name="**/target/**"/>
                </ant:fileset>
            </ant:copy>
            <!-- Copy over the hibernate db scripts to the animal-quiz -->
            <j:if test="${project.artifactId.startsWith('animal-quiz')}">
                <j:set var="coreDir" value="${toDir}/core"/>
                <j:set var="coreDirPresent" value="coreDirPresent${counter}"/>
                <ant:available property="${coreDirPresent}" file="${coreDir}"/>
                <j:if test="${context.getVariable(coreDirPresent) != null}">
                    <ant:copy todir="${coreDir}">
                        <ant:fileset dir="${basedir}/etc/hibernate"/>
                    </ant:copy>
                </j:if>
            </j:if>
            <j:set var="toDir" value="${binaryDistDir}/${fromDir.parentFile.name}"/>
            <j:set var="fromDir" value="${project.file.parentFile.parent}"/>
            <ant:copy todir="${toDir}">
                <ant:fileset dir="${fromDir}">
                    <ant:include name="*.html"/>
                    <ant:include name="*.properties"/>
                </ant:fileset>
            </ant:copy>
        </j:forEach>
        <!-- copy all dependencies for samples -->
        <maven:reactor basedir="${basedir}"
            includes="${sample.install.includes}" postProcessing="true" ignoreFailures="false"/>
        <j:forEach var="project" items="${reactorProjects}">
            <j:forEach var="lib" items="${project.artifacts}">
                <j:set var="dep" value="${lib.dependency}"/>
                <!-- don't copy andromda dependencies -->
                <j:if test="${lib.dependency.groupId.indexOf('andromda') == '-1'}">
                    <ant:copy todir="${binaryDistLibDir}/${dep.artifactDirectory}">
                        <ant:fileset dir="${maven.repo.local}/${dep.artifactDirectory}">
                            <ant:include name="${dep.type}s/${dep.artifactId}-${dep.version}.${dep.extension}"/>
                        </ant:fileset>
                    </ant:copy>
                </j:if>
            </j:forEach>
        </j:forEach>
        <!-- create the distribution maven files we need for the samples -->
        <j:set var="templatesDir" value="${basedir}/samples/templates"/>
        <!-- create the distribution project.xml -->
        <j:set var="distPom" value="${templatesDir}/distribution-pom.jelly"/>
        <j:file name="${toDir}/project.xml" trim="false">
            <j:import file="${distPom}" inherit="true"/>
        </j:file>
        <!-- Copy over the maven.xml files that will be in the dist (they are copied 
             over the source distribution ones) -->
        <ant:copy todir="${toDir}" overwrite="true">
            <ant:fileset dir="${templatesDir}">
                <ant:exclude name="*.jelly"/>
                <ant:exclude name="*.txt"/>
            </ant:fileset>
        </ant:copy>
        <!-- zip it all up -->
        <j:set var="zipFile" value="${distribution.dir}/${distName}.zip"/>
        <ant:zip zipfile="${zipFile}">
            <ant:zipfileset dir="${binaryDistDir}" prefix="${distName}"/>
        </ant:zip>
        <!-- add all libs to the source distribution as well -->
        <j:set var="distName" value="${pom.groupId}-src-${pom.currentVersion}"/>
        <j:set var="zipFile" value="${distribution.dir}/${distName}.zip"/>
        <ant:zip zipfile="${zipFile}" update="true">
            <ant:zipfileset dir="${binaryDistLibDir}" prefix="${distName}/lib"/>
        </ant:zip>
    </goal>
    
    <!-- ==================================================================
             Performs the distribution initialization                                                   
         ================================================================== -->
    <goal name="dist-init">
        <j:set var="distName" value="${pom.groupId}-bin-${pom.currentVersion}"/>
        <j:set var="binaryDistDir" value="${distribution.dir}/${distName}"/>
        <j:set var="binaryDistLibDir" value="${binaryDistDir}/lib"/>
    </goal>
    
    <!-- ==================================================================
             Creates the AndroMDA source distribution                                                     
         ================================================================== -->
    <goal name="dist-src">
        <j:set var="distName" value="${pom.groupId}-src-${pom.currentVersion}"/>
        <ant:mkdir dir="${distribution.dir}"/>
        <!-- zip everything into the source archive -->
        <j:set var="zipFile" value="${distribution.dir}/${distName}.zip"/>
        <ant:zip zipfile="${zipFile}">
            <ant:zipfileset dir="${basedir}" prefix="${distName}">
                <ant:exclude name="**/*.log*"/>
                <ant:exclude name="**/target/**"/>
                <ant:exclude name="**/*.bak*"/>
                <ant:exclude name="**/*.mdr"/>
                <ant:exclude name="**/.*"/>
                <ant:exclude name="**/.*/**"/>
            </ant:zipfileset>
        </ant:zip>
    </goal>
    
    <!-- ==================================================================
             Performs any initalization required for the build                                                 
         ================================================================== -->
    <goal name="initialize" prereqs="init-bootstrap">
        <!-- if we have any artifacts in the lib directory (other than the 
             bootstrap artifacts) install them into the local repository -->
        <ant:copy todir="${maven.repo.local}">
            <ant:fileset dir="${lib.dir}">
                <ant:exclude name="**/*.txt"/>
                <!-- don't copy the bootstraps over since they are handeled
                     seperately -->
                <ant:exclude name="**/*bootstrap/**"/>
            </ant:fileset>
        </ant:copy>
    </goal>
    
    <!-- ======================== BOOTSTRAP GOALS ======================== -->
    <!-- The version of bootstrap artifacts -->
    <j:set var="bootstrapVersion" value="bootstrap"/>
    
    <!-- ==================================================================
             Initializes the bootstrap artifacts (copies them to 
             the local repository and renames each artifact version 
             to the current version of the app)                                                  
         ================================================================== -->
    <goal name="init-bootstrap">
        <ant:fileScanner var="bootstrapArtifacts">
            <ant:fileset dir="${lib.dir}">
                <ant:patternset>
                    <ant:include name="*bootstrap/**/*"/>
                </ant:patternset>
            </ant:fileset>
        </ant:fileScanner>
        <j:forEach var="file" items="${bootstrapArtifacts.iterator()}">
            <j:set var="versionIndex" value="${file.name.lastIndexOf(bootstrapVersion)}"/>
            <j:if test="${versionIndex ne '-1'}">
                <j:set var="artifactNoVersion" value="${file.name.substring(0,versionIndex)}"/>
                <j:set var="artifactDir" value="${file.parentFile.parentFile.name}"/>
                <j:set var="types" value="${file.parentFile.name}"/>
                <j:set var="artifactTypesPath" value="${maven.repo.local}/${artifactDir}/${types}"/>
                <ant:copy file="${file}" tofile="${artifactTypesPath}/${artifactNoVersion}${pom.currentVersion}.jar"/>
            </j:if>
        </j:forEach>
    </goal>
    
    <!-- =================================================================
             Install all bootstrap artifacts to the local repository
             IMPORTANT: Since bootstrap dependencies depend on each other,
             we need to install them ALL at the end at once (instead of
             one at a time).
         ================================================================= -->
    <goal name="bootstrap-install" prereqs="initialize">
        <attainGoal name="preprocess-bootstrap-modules"/>
        <echo>+-------------------------------------------------------------------+</echo>
        <echo>| I N S T A L L I N G B O O T S T R A P A R T I F A C T S |</echo>
        <echo>+-------------------------------------------------------------------+</echo>
        <j:forEach var="bootstrapProject" items="${bootstrapProjects}" begin="0" varStatus="index">
            <j:set var="artifactId" value="${bootstrapProject.artifactId}"/>
            <j:set var="groupId" value="${bootstrapProject.groupId}"/>
            <j:if test="${groupId.indexOf(bootstrapVersion) == '-1'}">
                <j:set var="bootstrapGroupId" value="${groupId}-${bootstrapVersion}"/>
                <j:set var="dummy" value="${bootstrapProject.setGroupId(bootstrapGroupId)}"/>
            </j:if>
            <j:set var="bootstrapArtifactId" value="${artifactId}-${bootstrapVersion}"/>
            <j:set var="dummy" value="${bootstrapProject.setArtifactId(bootstrapArtifactId)}"/>
            <j:set var="artifactDirectory" value="${bootstrapProject.file.parent}/target"/>
            <j:set var="artifactName" value="${artifactId}-${bootstrapProject.currentVersion}.jar"/>
            <util:file var="artifactFile" name="${artifactDirectory}/${artifactName}"/>
            <j:set var="dummy" value="${bootstrapProject.setCurrentVersion(bootstrapVersion)}"/>
            <j:set var="newArtifactFile" value="${artifactId}-${bootstrapProject.currentVersion}.jar"/>
            <ant:copy file="${artifactFile}" tofile="${lib.dir}/${bootstrapProject.groupId}/${bootstrapTypes.get(index)}s/${newArtifactFile}"/>
        </j:forEach>
    </goal>
    
    <!-- =================================================================
             Performs preprocessing on the bootstrap modules, basically
             executes them and loads the modules and their types into lists.
         ================================================================= -->
    <goal name="preprocess-bootstrap-modules">
        <!-- set bootstrap mode to true -->
        <j:set var="maven.andromda.bootstrap.mode" value="true" scope="parent"/>
        <util:tokenize var="bootstrapModules" delim=",">${bootstrap.modules}</util:tokenize>
        <j:set var="listType" value="java.util.ArrayList"/>
        <j:useList var="bootstrapProjects" class="${listType}"/>
        <j:useList var="bootstrapTypes" class="${listType}"/>
        <j:forEach var="bootstrapModule" items="${bootstrapModules}">
            <util:tokenize var="moduleAndType" delim=":">${bootstrapModule}</util:tokenize>
            <j:set var="module" value="${moduleAndType.get(0)}"/>
            <j:set var="type" value="${moduleAndType.get(1)}"/>
            <maven:reactor basedir="${basedir}" includes="${module}"
                goals="clean:clean,jar:jar" ignoreFailures="false"
                postProcessing="true" banner="Processing Bootstrap Artifact:"/>
            <!-- load up the bootstrapLists -->
            <j:forEach var="reactorProject" items="${reactorProjects}">
                <!-- add the reactor project to the list of bootstrap projects -->
                <j:set var="dummy" value="${bootstrapProjects.add(reactorProject)}"/>
                <!-- add the bootstrap type to the list of bootsrap project types -->
                <j:set var="dummy" value="${bootstrapTypes.add(type)}"/>
            </j:forEach>
        </j:forEach>
    </goal>
        
    <!-- =================================================================
             Copy the distribution to the server.
         ================================================================= -->
    <goal name="deploy-distribution">
        <!-- rsync the docs first, they should go quite quick unless there are
             major changes -->
        <!-- Add -n to test, just lists out the files that would be xfr'ed -->
        <j:set var="rsync_arg1" value="-Caz"/>
        <j:set var="rsync_src" value="${basedir}/documentation/target/docs"/>
        <j:set var="rsync_tgt" value="${andromda.distribution.username}@${andromda.distribution.server}:${andromda.server.directory}"/>
        <ant:echo message="rsync ${rsync_arg1} ${rsync_src} ${rsync_tgt}"/>
        <ant:exec executable="rsync">
            <ant:arg line="${rsync_arg1} ${rsync_src} ${rsync_tgt}"/>
        </ant:exec>
        <!-- Add -n to test, just lists out the files that would be xfr'ed -->
        <j:set var="rsync_arg1" value="-vCoprz"/>
        <j:set var="rsync_arg2" value="--include='/distributions/*.zip'"/>
        <j:set var="rsync_arg3" value="--exclude='/distributions/*'"/>
        <j:set var="rsync_src" value="${distribution.dir}"/>
        <j:set var="rsync_tgt" value="${andromda.distribution.username}@${andromda.distribution.server}:${andromda.server.distribution.directory}"/>
        <ant:echo message="rsync ${rsync_arg1} ${rsync_arg2} ${rsync_arg3} ${rsync_src} ${rsync_tgt}"/>
        <!-- NB if you specify as individual args someone mangles the arg
			and you get stat errors -->
        <ant:exec executable="rsync">
            <ant:arg line="${rsync_arg1} ${rsync_arg2} ${rsync_arg3} ${rsync_src} ${rsync_tgt}"/>
        </ant:exec>
    </goal>
    
</project>