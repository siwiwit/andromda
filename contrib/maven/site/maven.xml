<project xmlns:artifact="artifact"
    xmlns:j="jelly:core"
    xmlns:ant="jelly:ant"
    xmlns:maven="jelly:maven"
    xmlns:velocity="jelly:velocity">

    <j:set var="parser.src.dir" value="${maven.src.dir}/parser"/>
    <j:set var="parser.src.generated.dir" value="${maven.build.src}/java"/>
    <j:set var="parser.grammar.file.xml" value="xml.grammar"/>
    <j:set var="parser.grammar.file.java" value="java.grammar"/>
    <j:set var="parser.grammar.file.velocity" value="velocity.grammar"/>

    <preGoal name="jar:jar">
        <!-- The following builds the bootstrap plugin.
             You build the bootstrap plugin, by supplying the
             property 'maven.andromda.bootstrap.mode=true'-->
        <j:set var="bootstrapMode" value="${maven.andromda.bootstrap.mode}"/>
        <j:if test="${bootstrapMode == null or bootstrapMode == ''}">
            <j:set var="bootstrapMode" value="false"/>
        </j:if>
        <j:set var="bootstrap" value=""/>
        <j:if test="${bootstrapMode}">
            <j:set var="bootstrap" value="-bootstrap"/>
            <j:set var="bootstrapPluginId" value="andromda-site${bootstrap}-plugin"/>
            <j:set var="bootstrapGroupId" value="${pom.groupId}${bootstrap}"/>
            <j:set var="dummy" value="${pom.setArtifactId(bootstrapPluginId)}"/>
            <j:set var="dummy" value="${pom.setGroupId(bootstrapGroupId)}"/>
        </j:if>
        <!-- Replace reference(s) to the '${bootstrap} property' -->
        <ant:replace file="${maven.build.dest}/plugin.jelly"
            token="$${bootstrap}"
            value="${bootstrap}">
        </ant:replace>
        <velocity:merge
            name="${maven.build.dest}/plugin.properties"
            basedir="${basedir}"
            template="/plugin.properties"/>
        <ant:delete file="${maven.build.dest}/project.xml"/>
        <velocity:merge
            name="${maven.build.dest}/project.xml"
            basedir="${basedir}"
            template="/project.xml"/>
    </preGoal>

    <!-- Override the default plugin:install to just install
         the plugin into the local repository (since we don't
         want this plugin in the $MAVEN_HOME/plugins directory) -->
    <goal name="plugin:install">
        <attainGoal name="jar:jar"/>
        <artifact:install
            artifact="${maven.build.dir}/${maven.final.name}.jar"
            type="plugin"
            project="${pom}"/>
    </goal>

    <preGoal name="java:compile" >
        <attainGoal name="build-xml-parser"/>
        <attainGoal name="build-java-parser"/>
        <attainGoal name="build-velocity-parser"/>
        <!-- add the path of the generated source to the maven compile path -->
        <ant:path id="parser.gen.src" location="${parser.src.generated.dir}"/>
        <maven:addPath id="maven.compile.src.set" refid="parser.gen.src"/>
        <ant:property name="path" refid="maven.dependency.classpath"/>
    </preGoal>

    <!-- ===================================================================
         Checks if the parser generated code needs to be generated/re-generated
         =================================================================== -->
    <goal name="check-xml-update">
        <ant:uptodate property="xml.uptodate"
            targetfile="${parser.src.generated.dir}/org/andromda/maven/site/highlight/xml/parser/Parser.dat">
            <ant:srcfiles dir="${parser.src.dir}" includes="${parser.grammar.file.xml}"/>
        </ant:uptodate>
    </goal>
    <goal name="check-java-update">
        <ant:uptodate property="java.uptodate"
            targetfile="${parser.src.generated.dir}/org/andromda/maven/site/highlight/java/parser/Parser.dat">
            <ant:srcfiles dir="${parser.src.dir}" includes="${parser.grammar.file.java}"/>
        </ant:uptodate>
    </goal>
    <goal name="check-velocity-update">
        <ant:uptodate property="velocity.uptodate"
            targetfile="${parser.src.generated.dir}/org/andromda/maven/site/highlight/velocity/parser/Parser.dat">
            <ant:srcfiles dir="${parser.src.dir}" includes="${parser.grammar.file.velocity}"/>
        </ant:uptodate>
    </goal>

    <!-- ===================================================================
         Generates the parser files using SableCC (@see www.sablecc.org)
         =================================================================== -->
    <goal name="build-xml-parser" prereqs="check-xml-update">
        <j:choose>
            <j:when test="${xml.uptodate}">
                <ant:echo>XML parser grammar has not changed since last generation.</ant:echo>
            </j:when>
            <j:otherwise>
                <ant:mkdir dir="${parser.src.generated.dir}"/>
                <ant:taskdef name="sablecc"
                    classname="org.sablecc.ant.taskdef.Sablecc"
                    classpathref="maven.dependency.classpath"/>
                <ant:sablecc outputdirectory="${parser.src.generated.dir}" src="${parser.src.dir}">
                    <ant:include name="${parser.grammar.file.xml}"/>
                </ant:sablecc>
            </j:otherwise>
        </j:choose>
    </goal>
    <goal name="build-java-parser" prereqs="check-java-update">
        <j:choose>
            <j:when test="${java.uptodate}">
                <ant:echo>Java parser grammar has not changed since last generation.</ant:echo>
            </j:when>
            <j:otherwise>
                <ant:mkdir dir="${parser.src.generated.dir}"/>
                <ant:taskdef name="sablecc"
                    classname="org.sablecc.ant.taskdef.Sablecc"
                    classpathref="maven.dependency.classpath"/>
                <ant:sablecc outputdirectory="${parser.src.generated.dir}" src="${parser.src.dir}">
                    <ant:include name="${parser.grammar.file.java}"/>
                </ant:sablecc>
            </j:otherwise>
        </j:choose>
    </goal>
    <goal name="build-velocity-parser" prereqs="check-velocity-update">
        <j:choose>
            <j:when test="${velocity.uptodate}">
                <ant:echo>Velocity parser grammar has not changed since last generation.</ant:echo>
            </j:when>
            <j:otherwise>
                <ant:mkdir dir="${parser.src.generated.dir}"/>
                <ant:taskdef name="sablecc"
                    classname="org.sablecc.ant.taskdef.Sablecc"
                    classpathref="maven.dependency.classpath"/>
                <ant:sablecc outputdirectory="${parser.src.generated.dir}" src="${parser.src.dir}">
                    <ant:include name="${parser.grammar.file.velocity}"/>
                </ant:sablecc>
            </j:otherwise>
        </j:choose>
    </goal>

    <!-- ===================================================================
         Clean's the parser generated output
         =================================================================== -->
    <goal name="clean-parser">
        <ant:delete dir="${parser.src.generated.dir}"/>
    </goal>

</project>