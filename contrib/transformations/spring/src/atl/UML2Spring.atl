module UML2Spring;

create OUT: SPRING from IN: UML;

uses UMLHelpers;

-- Transform UML classes that have the stereotype "Service"
-- to Spring services.
rule UMLServiceToSpringService {
	from e : UML!Class (e.hasStereotype('Service'))
	to out : SPRING!Service (
		name <- e.name,
		methods <- e.feature (e.oclIsTypeOf(UML!Operation))
	)
}

-- Transform UML operations to 3GL methods.
rule UMLOpTo3GLMethod {
	from e : UML!Operation
	to out : SPRING!Method (  -- this should rather read "3GL!Method"
		name <- e.name,
		type <- e.parameter->select(x|x.kind=#pdk_return)->asSequence()->first().type,
		parameters <- e.parameter->select(x|x.kind<>#pdk_return)->asSequence()
	)
}

-- Transform UML parameters to 3GL parameters.
rule UMLParameterTo3GLParameter {
	from e : UML!Parameter (e.kind <> #pdk_return)
	to out : SPRING!Parameter (   -- this should rather read "3GL!Parameter"
		name <- e.name,
		type <- e.type
	)
}
