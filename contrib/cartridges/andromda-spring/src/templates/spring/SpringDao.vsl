//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package $entity.packageName;

#set ($superclass = $entity.generalization)
/**
 * @see $entity.fullyQualifiedEntityName
 */
public interface $entity.daoName
#if($superclass)  
	extends $superclass.fullyQualifiedDaoName
#end
{

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $entity.name.toLowerCase())   
    /**
     * Creates an instance of $entity.fullyQualifiedEntityName and adds it to the persistent store.
     */
	public void create($entity.fullyQualifiedEntityName $argumentName);
	
#set ($attributes = $entity.getAttributes(true,false))
#if (!$attributes.empty)
	/**
	 * Creates a new <code>$entity.fullyQualifiedEntityName</code> 
	 * instance from <strong>all</strong> attributes and adds it to 
	 * the persistent store.  
	 */ 
	public void create(
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else);#end
            
#end  
#set ($requiredAttributes = $entity.getRequiredAttributes(true,false))
#if ($attributes.size() != $requiredAttributes.size())

	/**
	 * Creates a new <code>$entity.fullyQualifiedEntityName</code> 
	 * instance from only <strong>required</strong> attributes and 
	 * adds it to the persistent store.  
	 */ 
	public void create(
#foreach($attribute in $requiredAttributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $requiredAttributes.size()),#else);#end
            
#end  
#end

#end	
	/**
	 * Updates the <code>${argumentName}</code> instance in the persistent store. 
	 */ 
	public void update($entity.fullyQualifiedEntityName $argumentName);

	/**
	 * Loads an instance of $entity.fullyQualifiedEntityName from the persistent store.
	 */
    public $entity.fullyQualifiedEntityName load($identifier.type.fullyQualifiedName $identifier.name);
	
	/**
	 * Removes the instance of $entity.fullyQualifiedEntityName from the persistent store.
	 */
	public void remove($entity.fullyQualifiedEntityName $argumentName);
	
	/**
	 * Removes all entities in the given <code>entities<code> collection.
	 */
	public void remove(java.util.Collection entities);
	
#end
#foreach ( $operation in $entity.operations )
	/**
$operation.getDocumentation("     * ")  	
	 */
#if ($operation.hasExceptions())
	$operation.visibility $operation.returnType.fullyQualifiedName $operation.signature 
    	throws $operation.exceptionList;
#else
    $operation.visibility $operation.returnType.fullyQualifiedName $operation.signature;
#end
#if ($operation.query)

	/**
     * <p>
     *   Does the same thing as {@link #${operation.getSignature(false)}) with an 
     *   additional flag called <code>transform</code> if this flag is set to <code>false</code> then 
     *   finder results will not be transformed during retrieval.  If this flag is <code>true</code> 
     *   then finder results <strong>WILL BE</strong> will be passed through an operation which can
     *   optionally transform the entities (into value objects for example).  By default, transformation 
     *   does not occur.
     * </p>  	
	 */
#if ($operation.hasExceptions())
	$operation.visibility $operation.returnType.fullyQualifiedName ${operation.name}(boolean transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
    	throws $operation.exceptionList;
#else
    $operation.visibility $operation.returnType.fullyQualifiedName ${operation.name}(boolean transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end
#end

#end
}
