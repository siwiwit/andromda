#set ($generatedFile = "${entity.packagePath}/${entity.daoName}.cs")
// Name: ${entity.daoName}.cs
// license-header cs merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: NSpringDaoInterface.vsl in andromda-nspring-cartridge.

using System;

#if ($stringUtils.isNotBlank($entity.packageName))
namespace $entity.packageName
{
#end
#set ($superclass = $entity.generalization)
#if ($superclass)
## TODO: Need to get the root of the hierarchy, not the immediate superclass
#set ($daoNoTransformationEnumName = "Transform${superclass.Name}.$superclass.daoNoTransformationConstantName")
#set ($newKeyword = "new ")
#else
#set ($daoNoTransformationEnumName = "Transform${entity.Name}.$entity.daoNoTransformationConstantName")
#set ($newKeyword = "")
#end
    /// <summary>
    /// This enumeration is used to define transformation flags. Using these flag
    /// entities can be converted automatically into value objects or other types.
    /// Different methods in a dao class support this feature: look for an
    /// <code>int</code> parameter called <code>transform</code>.
    /// </summary>
    public enum Transform$entity.Name
    {
#if (!$superclass)
        // Denotes no transformation will occur.
        $entity.daoNoTransformationConstantName = 0,

#end
#foreach ($valueObjectRef in $entity.valueObjectReferences)
        // Transform into objects of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
        $valueObjectRef.transformationConstantName = $valueObjectRef.transformationConstantValue#if($velocityCount != $entity.valueObjectReferences.size()),#end

#end
    }

    /// <summary>
    /// @see $entity.fullyQualifiedEntityName
    /// </summary>
    public interface $entity.daoName
#if($superclass)
        : $superclass.fullyQualifiedDaoName
#else
        : AndroMDA.NHibernateSupport.INHibernateDaoSupport
#end
    {
#foreach ($valueObjectRef in $entity.valueObjectReferences)
        /// <summary>
        /// Converts this DAO's entity to an object of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
        /// </summary>
        $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName entity);

        /// <summary>
        /// Converts this DAO's entity collection to a list of instances of type {@link $valueObjectRef.targetElement.fullyQualifiedName}.
        /// </summary>
        System.Collections.IList ${valueObjectRef.transformationToListMethodName}(System.Collections.ICollection entities);

        /// <summary>
        /// Converts an instance of type {@link $valueObjectRef.targetElement.fullyQualifiedName} to this DAO's entity.
        /// </summary>
        $entity.fullyQualifiedEntityName ${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name));

        /// <summary>
        /// Converts a collection of instances of type {@link $valueObjectRef.targetElement.fullyQualifiedName} to this DAO's entity list.
        /// </summary>
        System.Collections.IList ${valueObjectRef.transformationToEntityListMethodName}(System.Collections.ICollection instances);

#end
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
        /// <summary>
        /// Loads an instance of $entity.fullyQualifiedEntityName from the persistent store.
        /// </summary>
        ${newKeyword}$entity.root.fullyQualifiedEntityName Load($identifier.type.fullyQualifiedName $identifier.name);

        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #Load($identifier.type.fullyQualifiedName)} with an
        ///   additional flag called <code>transform</code>.  If this flag is set to <code>$daoNoTransformationEnumName</code> then
        ///   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
        ///   defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
        ///   optionally transform the entity (into a value object for example).  By default, transformation does
        ///   not occur.
        /// </p>
        ///
        /// @param $identifier.name the identifier of the entity to load.
        /// @return either the entity or the object transformed from the entity.
        /// </summary>
        ${newKeyword}Object Load(int transform, $identifier.type.fullyQualifiedName $identifier.name);

        /// <summary>
        /// Loads all entities of type {@link ${entity.fullyQualifiedEntityName}}.
        ///
        /// @return the loaded entities.
        /// </summary>
        ${newKeyword}System.Collections.IList LoadAll();

        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #LoadAll()} with an
        ///   additional flag called <code>transform</code>.  If this flag is set to <code>$daoNoTransformationEnumName</code> then
        ///   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
        ///   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
        ///   transform the entity (into a value object for example).  By default, transformation does
        ///   not occur.
        /// </p>
        ///
        /// @param transform the flag indicating what transformation to use.
        /// @return the loaded entities.
        /// </summary>
        ${newKeyword}System.Collections.IList LoadAll(int transform);

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
        /// <summary>
        /// Creates an instance of $entity.fullyQualifiedEntityName and adds it to the persistent store.
        /// </summary>
        $entity.root.fullyQualifiedEntityName Create($entity.fullyQualifiedEntityName $argumentName);

        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #Create($entity.fullyQualifiedEntityName)} with an
        ///   additional flag called <code>transform</code>.  If this flag is set to <code>$daoNoTransformationEnumName</code> then
        ///   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
        ///   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
        ///   transform the entity (into a value object for example).  By default, transformation does
        ///   not occur.
        /// </p>
        /// </summary>
        Object Create(int transform, $entity.fullyQualifiedEntityName $argumentName);

        /// <summary>
        /// Creates a new instance of $entity.fullyQualifiedEntityName and adds
        /// from the passed in <code>entities</code> collection
        ///
        /// @param entities the collection of $entity.fullyQualifiedEntityName
        ///        instances to create.
        ///
        /// @return the created instances.
        /// </summary>
        ${newKeyword}System.Collections.ICollection Create(System.Collections.ICollection entities);

        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #Create($entity.fullyQualifiedEntityName)} with an
        ///   additional flag called <code>transform</code>.  If this flag is set to <code>$daoNoTransformationEnumName</code> then
        ///   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
        ///   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
        ///   transform the entities (into value objects for example).  By default, transformation does
        ///   not occur.
        /// </p>
        /// </summary>
        ${newKeyword}System.Collections.ICollection Create(int transform, System.Collections.ICollection entities);

#if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#set ($attributes = $entity.getAttributes(true,false))
#if (!$attributes.empty)
        /// <summary>
        /// <p>
        ///   Creates a new <code>$entity.fullyQualifiedEntityName</code>
        ///   instance from <strong>all</strong> attributes and adds it to
        ///   the persistent store.
        /// </p>
        /// </summary>
        $entity.root.fullyQualifiedEntityName Create(
#foreach($attribute in $attributes)
            $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else);#end

#end

        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #Create($entity.getAttributeTypeList(true,false))} with an
        ///   additional flag called <code>transform</code>.  If this flag is set to <code>$daoNoTransformationEnumName</code> then
        ///   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
        ///   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
        ///   transform the entity (into a value object for example).  By default, transformation does
        ///   not occur.
        /// </p>
        /// </summary>
        Object Create(
            int transform,
#foreach($attribute in $attributes)
            $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else);#end

#end

#end
#set ($requiredProperties = $entity.getRequiredProperties(true,false))
#if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,false).size() != $requiredProperties.size())
        /// <summary>
        /// <p>
        ///  Creates a new <code>$entity.fullyQualifiedEntityName</code>
        ///  instance from only <strong>required</strong> properties (attributes
        ///  and association ends) and adds it to the persistent store.
        /// </p>
        /// </summary>
        $entity.root.fullyQualifiedEntityName Create(
#foreach($property in $requiredProperties)
            $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else);#end

#end

        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #Create($entity.getRequiredAttributeTypeList(true,false))} with an
        ///   additional flag called <code>transform</code>.  If this flag is set to <code>$daoNoTransformationEnumName</code> then
        ///   the returned entity will <strong>NOT</strong be transformed.  If this flag is any of the other constants
        ///   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
        ///   transform the entity (into a value object for example).  By default, transformation does
        ///   not occur.
        /// </p>
        /// </summary>
        Object Create(
            int transform,
#foreach($property in $requiredProperties)
            $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else);#end

#end
#end

#end
#end
        /// <summary>
        /// Updates the <code>$argumentName</code> instance in the persistent store.
        /// </summary>
        void Update($entity.fullyQualifiedEntityName $argumentName);

        /// <summary>
        /// Updates all instances in the <code>entities</code> collection in the persistent store.
        /// </summary>
        ${newKeyword}void Update(System.Collections.ICollection entities);

        /// <summary>
        /// Removes the instance of $entity.fullyQualifiedEntityName from the persistent store.
        /// </summary>
        void Remove($entity.fullyQualifiedEntityName $argumentName);

        /// <summary>
        /// Removes the instance of $entity.fullyQualifiedEntityName having the given
        /// <code>identifier</code> from the persistent store.
        /// </summary>
        ${newKeyword}void Remove($identifier.type.fullyQualifiedName $identifier.name);

        /// <summary>
        /// Removes all entities in the given <code>entities<code> collection.
        /// </summary>
        ${newKeyword}void Remove(System.Collections.ICollection entities);

#foreach ($operation in $entity.queryOperations)
#set ($returnType = $operation.returnType.fullyQualifiedName)
        /// <summary>
    $operation.getDocumentation("    /// ")
        /// </summary>
#if ($operation.exceptionsPresent)
        $returnType $operation.signature
            throws $operation.exceptionList;
#else
        $returnType $operation.signature;
#end

#if(!$operation.criteriaFinder)
        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #${operation.getSignature(false)}} with an
        ///   additional argument called <code>queryString</code>.  This <code>queryString</code>
        ///   argument allows you to override the query string defined in {@link #${operation.getSignature(false)}}.
        /// </p>
        /// </summary>
#if ($operation.exceptionsPresent)
        ${newKeyword}$returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
            throws $operation.exceptionList;
#else
        ${newKeyword}$returnType ${operation.name}(String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

#if ($operation.query && !$operation.returnType.collectionType)
#set ($returnType = "Object")
#end
        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #${operation.getSignature(false)}} with an
        ///   additional flag called <code>transform</code>.  If this flag is set to <code>$daoNoTransformationEnumName</code> then
        ///   finder results will <strong>NOT</strong> be transformed during retrieval.
        ///   If this flag is any of the other constants defined here
        ///   then finder results <strong>WILL BE</strong> passed through an operation which can optionally
        ///   transform the entities (into value objects for example).  By default, transformation does
        ///   not occur.
        /// </p>
        /// </summary>
#if ($operation.exceptionsPresent)
        ${newKeyword}$returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
            throws $operation.exceptionList;
#else
        ${newKeyword}$returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end

        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #${operation.name}(boolean#if(!$operation.arguments.empty), ${operation.argumentTypeNames}#end)} with an
        ///   additional argument called <code>queryString</code>.  This <code>queryString</code>
        ///   argument allows you to override the query string defined in {@link #${operation.name}(int#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)}.
        /// </p>
        /// </summary>
#if ($operation.exceptionsPresent)
        ${newKeyword}$returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end)
            throws $operation.exceptionList;
#else
        ${newKeyword}$returnType ${operation.name}(int transform, String queryString#if(!$operation.arguments.empty), ${operation.typedArgumentList}#end);
#end
#else
        /// <summary>
        /// <p>
        ///   Does the same thing as {@link #${operation.getSignature(false)}} with an
        ///   additional flag called <code>transform</code>.  If this flag is set to <code>$daoNoTransformationEnumName</code> then
        ///   finder results will <strong>NOT</strong> be transformed during retrieval.
        ///   If this flag is any of the other constants defined here
        ///   then finder results <strong>WILL BE</strong> passed through an operation which can optionally
        ///   transform the entities (into value objects for example).  By default, transformation does
        ///   not occur.
        /// </p>
        /// </summary>
#if ($operation.exceptionsPresent)
        ${newKeyword}$returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end)
            throws $operation.exceptionList;
#else
        ${newKeyword}$returnType ${operation.name}(int transform#if(!$operation.arguments.empty), ${operation.getTypedArgumentList('final')}#end);
#end
#end

#end
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType.fullyQualifiedName)
        /// <summary>
    $operation.getDocumentation("    /// ")
        /// </summary>
#if ($operation.exceptionsPresent)
        ${newKeyword}$returnType $operation.signature
            throws $operation.exceptionList;
#else
        ${newKeyword}$returnType $operation.signature;
#end

#end
    }
#if ($stringUtils.isNotBlank($entity.packageName))
}
#end