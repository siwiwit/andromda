#set ($generatedFile = "${embeddedValue.packagePath}/${embeddedValue.name}.cs")
// Name: ${embeddedValue.name}.cs
// license-header cs merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEmbeddedValue.vsl in andromda-nhibernate-cartridge.

using System;

#if ($stringUtils.isNotBlank($embeddedValue.packageName))
namespace $embeddedValue.packageName
{
#end
    /// <summary>
$embeddedValue.getDocumentation("    /// ")
    /// </summary>
    [Serializable]
    public abstract class $embeddedValue.name
#if($embeddedValue.generalization)
        : $embeddedValue.generalization.fullyQualifiedName
#end
    {
        // ----- Attributes -----
#foreach ($attribute in $embeddedValue.attributes)
        private $attribute.getterSetterTypeName $attribute.name;
#end

        // ----- Constructors -----
        /// <summary>
        /// Creates a new instance of {@link ${embeddedValue.name}}
        /// taking all properties.
        /// </summary>
#set ($parenthesis = "(")
#if ($embeddedValue.attributes.empty)
#set ($parenthesis = "()")
#end
        public static $embeddedValue.name newInstance${parenthesis}
#foreach ($attribute in $embeddedValue.attributes)
            $attribute.getterSetterTypeName ${attribute.name}#if($velocityCount != $embeddedValue.attributes.size()),#else)
#end

#end
        {
            $embeddedValue.implementationName obj = new ${embeddedValue.implementationName}();
#foreach ($attribute in $embeddedValue.attributes)
            obj.${attribute.name} = ${attribute.name};
#end
            obj.initialize();
            return obj;
        }

        /// <summary>
        /// Creates a new instance from other $embeddedValue.name instance.
        /// </summary>
        public static ${embeddedValue.name} newInstance($embeddedValue.name otherObject)
        {
            if (otherObject != null)
            {
                return newInstance(
#foreach ($attribute in $embeddedValue.attributes)
                    otherObject.${attribute.name}#if($velocityCount != $embeddedValue.attributes.size()),#else);
#end

#end
            }
            return null;
        }

        protected ${embeddedValue.name}()
        {
        }

        /// <summary>
        /// Hook for initializing the object in the subclass
        /// </summary>
        protected void initialize()
        {
        }

        // ----- Accessors -----
#foreach ($attribute in $embeddedValue.attributes)
#set ($typeName = $attribute.getterSetterTypeName)
        /// <summary>
$attribute.getDocumentation("        /// ")
#if ($embeddedValue.immutable)
        /// protected setter, if subclass methods need to normalize the $embeddedValue.name
#end
        /// </summary>
#if ($embeddedValue.immutable)
        public $typeName ${stringUtils.upperCamelCaseName($attribute.name)}
        {
            get { return $attribute.name; }
        }
        protected void ${attribute.setterName}($attribute.getterSetterTypeName $attribute.name)
        {
            this.${attribute.name} = $attribute.name;
        }
#else
        public $typeName ${stringUtils.upperCamelCaseName($attribute.name)}
        {
            get { return $attribute.name; }
            set { this.$attribute.name = value; }
        }
#end

#end
#foreach ($operation in $embeddedValue.operations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
        /// <summary>
$operation.getDocumentation("        /// ")
        /// </summary>
#if ($operation.exceptionsPresent)
        $operation.visibility abstract $returnType.fullyQualifiedName $signature
            throws $operation.exceptionList;
#else
        $operation.visibility abstract $returnType.fullyQualifiedName $signature;
#end

#end
        /// <summary>
        /// Indicates if the argument is of the same type and all attributes are equal.
        /// </summary>
#renderEqualsMethod($embeddedValue)

        /// <summary>
        /// Returns a hash code based on class attributes.
        /// </summary>
#renderHashCodeMethod($embeddedValue $embeddedValue.attributes)
    }
#if ($stringUtils.isNotBlank($embeddedValue.packageName))
}
#end