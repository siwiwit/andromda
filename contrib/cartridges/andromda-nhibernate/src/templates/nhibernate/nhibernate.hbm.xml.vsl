#parse("templates/nhibernate/nhibernate.hbm.xml.vm")
#set ($generatedFile = "${entity.packagePath}/${entity.entityName}.hbm.xml")
<?xml version="1.0" encoding="$xmlEncoding"?>
<!--
     Name: ${entity.entityName}.hbm.xml
     license-header java merge-point

     Attention: Generated code! Do not modify by hand!
     Generated by: nhibernate.hbm.xml.vsl in andromda-nhibernate-cartridge.
  -->
<hibernate-mapping
    xmlns="urn:nhibernate-mapping-2.0"
    default-cascade="$entity.hibernateDefaultCascade">

    <class
        name="$entity.fullyQualifiedEntityImplementationName, ${coreAssemblyName}"
        table="$entity.tableName"
        dynamic-insert="$entity.dynamicInsert"
        dynamic-update="$entity.dynamicUpdate"
        #if ($entity.hibernateProxy) proxy="$entity.fullyQualifiedEntityImplementationName"#end>

#if($hibernateEnableCache.equalsIgnoreCase("true"))
        <cache usage="$entity.hibernateCacheType" />
#end
## **** Generate <id> ****
#if (!$entity.identifiers.empty)
#set ($identifier = $entity.identifiers.iterator().next())
#end
        <id name="${stringUtils.upperCamelCaseName($identifier.name)}" type="$identifier.type.fullyQualifiedName" unsaved-value="$identifier.type.javaNullString">
            <column name="$identifier.columnName" sql-type="$identifier.sqlType"/>
            <generator class="$entity.hibernateGeneratorClass">
#if ($entity.sequenceHibernateGeneratorClass)
                <param name="sequence">${entity.tableName}${sequenceIdentifierSuffix}</param>
#elseif ($entity.foreignHibernateGeneratorClass)
                <param name="property">$entity.parentEnd.name</param>
#end
            </generator>
        </id>

## **** Generate <discriminator> ****
#if (!$entity.specializations.empty && $entity.hibernateInheritanceClass)
        <discriminator column="$entity.hibernateDiscriminatorColumn" type="$entity.hibernateDiscriminatorType"/>

#end
## **** Generate <version> ****
#if ($stringUtils.isNotBlank($entity.hibernateVersionProperty))
        <version name="$entity.hibernateVersionProperty" type="Int32" column="$entity.hibernateVersionProperty"/>

#end
## **** If super inheritance is 'interface', render super properties etc ****
#foreach ($generalization in $entity.allGeneralizations)
#if($generalization.mappingRequiresSuperProperties)
#renderPropertiesAndAssociations($generalization "" )
#end
#end
## **** render the properties and associations (if any) ****
#renderPropertiesAndAssociations($entity "" )
## **** render the subclass elements if class or subclass strategy. ****
#if ($entity.requiresSpecializationMapping)
#foreach ($entity in $entity.specializations)
#renderSubClass($entity)
#end## foreach
#end## ($entity.requiresMappingSpecialization)
    </class>

</hibernate-mapping>