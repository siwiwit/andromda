#set ($generatedFile = "${controller.fullyQualifiedNamePath}.java")
// license-header java merge-point
package $controller.packageName;

/**
$controller.getDocumentation(" * ")
 */
public abstract class $controller.name
    implements java.io.Serializable
{

#foreach ($operation in $controller.operations)
    /**
$operation.getDocumentation("     * ")
     */
    $operation.formSignature;

#end
#foreach ($action in $controller.useCase.actions)
    public java.lang.String ${action.triggerName}()
    {
#foreach ($forward in $action.actionForwards)
        String forward = "$forward.name";
#end
        try
        {
#if (!$action.formFields.empty)
            final javax.faces.context.FacesContext facesContext =
                javax.faces.context.FacesContext.getCurrentInstance();
            final javax.faces.el.VariableResolver variableResolver = facesContext.getApplication().getVariableResolver();
            final $action.fullyQualifiedFormImplementationName form =
                ($action.fullyQualifiedFormImplementationName)variableResolver.resolveVariable(
                    facesContext,
                    "$action.formBeanName");
            final Object previousForm = variableResolver.resolveVariable(facesContext, "$globalFormBeanName");
            try
            {          
                // - populate the form with any parameters from the previous form
                org.apache.commons.beanutils.BeanUtils.copyProperties(form, previousForm);
            
                // - populate the form with any request parameters that may match
                org.apache.commons.beanutils.BeanUtils.populate(form, this.getContext().getExternalContext().getRequestParameterMap());
            }
            catch (final Exception exception)
            {
                // ignore - means we couldn't populate
            }
#end
#foreach ($deferredOperation in $action.deferredOperations)
            this.$deferredOperation.formCall;
#end
#if (!$action.formFields.empty)
            javax.servlet.http.HttpSession session = (javax.servlet.http.HttpSession)facesContext.getExternalContext().getSession(true);
            session.setAttribute("$globalFormBeanName", form);
#end
        }
        catch (final Throwable throwable)
        {
            this.addExceptionMessage(throwable);
            // -  set the forward to null so that we stay on the current view
            forward = null;
        }
        return forward;
    }

#end
#foreach ($serviceRef in $controller.serviceReferences)
#if ($stringUtils.isNotBlank($serviceRef.targetElement.accessorImplementation))
    /**
     * Returns a reference to the $serviceRef.name back-end service.
     */
    protected final $serviceRef.targetElement.fullyQualifiedName ${serviceRef.getterName}()
    {
        try
        {
            return $serviceRef.targetElement.accessorImplementation;
        }
        catch (final Throwable throwable)
        {
            throw new RuntimeException(throwable);
        }
    }

#end
#end
    /**
     * Gets the current faces context.  This object is the point
     * from which to retrieve any request, session, etc information.
     *
     * @return the JSF faces context instance.
     */
    protected javax.faces.context.FacesContext getContext()
    {
        return javax.faces.context.FacesContext.getCurrentInstance();
    }

    /**
     * A helper method that gets the current request from the faces
     * context.
     *
     * @return the current HttpServletRequest instance.
     */
    protected javax.servlet.http.HttpServletRequest getRequest()
    {
        return (javax.servlet.http.HttpServletRequest)this.getContext().getExternalContext().getRequest();
    }

    /**
     * A helper method that gets the current reponse from the faces
     * context.
     *
     * @return the current HttpServletReponse instance.
     */
    protected javax.servlet.http.HttpServletResponse getResponse()
    {
        return (javax.servlet.http.HttpServletResponse)this.getContext().getExternalContext().getResponse();
    }

    /**
     * A helper method that gets the current session from the faces
     * context.
     *
     * @param create If the create parameter is true, create (if necessary) and return a
     *        session instance associated with the current request. If the create
     *        parameter is false return any existing session instance associated with the
     *        current request, or return null if there is no such session.
     * @return the current HttpSession instance.
     */
    protected javax.servlet.http.HttpSession getSession(final boolean create)
    {
        return (javax.servlet.http.HttpSession)this.getContext().getExternalContext().getSession(create);
    }
    
    /**
     * Finds the root cause of the given <code>throwable</code> and
     * adds the message taken from that cause to the faces context messages.
     * 
     * @param throwable the exception information to add.
     */
    private final void addExceptionMessage(
        Throwable throwable)
    {
        String message = null;
        final Throwable rootCause = org.apache.commons.lang.exception.ExceptionUtils.getRootCause(throwable);
        if (rootCause != null)
        {
            message = rootCause.getMessage();
        }
        if (message == null || message.trim().length() == 0)
        {
            message = throwable.getMessage();    
        }
        final javax.faces.application.FacesMessage facesMessage = new javax.faces.application.FacesMessage(javax.faces.application.FacesMessage.SEVERITY_ERROR, message, message);
        javax.faces.context.FacesContext.getCurrentInstance().addMessage(
            null,
            facesMessage);
    }
}