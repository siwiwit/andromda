#set ($generatedFile = "${controller.fullyQualifiedNamePath}.java")
// license-header java merge-point
package $controller.packageName;

/**
$controller.getDocumentation(" * ")
 */
public abstract class $controller.name
    implements java.io.Serializable
{

#foreach ($operation in $controller.operations)
    /**
$operation.getDocumentation("     * ")
     */
    $operation.formSignature;
    
#end
#foreach ($action in $controller.useCase.actions)
    public java.lang.String ${action.triggerName}()
    {
#if (!$action.formFields.empty)
        final javax.faces.context.FacesContext facesContext = 
            javax.faces.context.FacesContext.getCurrentInstance();
        final javax.faces.el.VariableResolver variableResolver = facesContext.getApplication().getVariableResolver();
        final $action.fullyQualifiedFormImplementationName form = 
            ($action.fullyQualifiedFormImplementationName)variableResolver.resolveVariable(
                facesContext, 
                "$action.formBeanName");
#foreach ($deferredOperation in $action.deferredOperations)
        this.$deferredOperation.formCall;
#end
#foreach ($useCaseFormAction in $action.otherUseCaseFormActions)
        final $useCaseFormAction.fullyQualifiedFormImplementationName $useCaseFormAction.formBeanName = 
            ($useCaseFormAction.fullyQualifiedFormImplementationName)variableResolver.resolveVariable(
                facesContext, 
                "$useCaseFormAction.formBeanName");
        try
        {
            org.apache.commons.beanutils.BeanUtils.copyProperties($useCaseFormAction.formBeanName, form);
        }
        catch (final Throwable throwable)
        {
            throw new RuntimeException(throwable);
        }
#end
#end
#foreach ($forward in $action.actionForwards)
        return "$forward.name";
#end
    }
    
#end
#foreach ($serviceRef in $controller.serviceReferences)
#if ($stringUtils.isNotBlank($serviceRef.targetElement.accessorImplementation))
    /**
     * Returns a reference to the $serviceRef.name back-end service.
     */
    protected final $serviceRef.targetElement.fullyQualifiedName ${serviceRef.getterName}()
    {
        try
        {
            return $serviceRef.targetElement.accessorImplementation;
        }
        catch (final Throwable throwable)
        {
            throw new RuntimeException(throwable);
        }
    }

#end
#end
    /**
     * Gets the current faces context.  This object is the point
     * from which to retrieve any request, session, etc information.
     * 
     * @return the JSF faces context instance.
     */
    protected javax.faces.context.FacesContext getContext()
    {
        return javax.faces.context.FacesContext.getCurrentInstance();
    }
}