<project name="CarRentalSystemSample" default="build">

    <!-- Load user environment parameters -->
    <!-- This should define the properties andromda-core.home and build.classpath -->
    <property file="build.properties" />
    <property name="andromda-core.home" location="${andromda.home}/andromda-core"/>
    <property name="andromda-java.home" location="${andromda.home}/cartridges/andromda-java"/>
    <property name="andromda-ejb.home" location="${andromda.home}/cartridges/andromda-ejb"/>
    <property name="andromda-hibernate.home" location="${andromda.home}/cartridges/andromda-hibernate"/>
    <property name="andromda-struts.home" location="${andromda.home}/cartridges/andromda-struts"/>

    <property file="${andromda-core.home}/andromda-core.properties"/>
    <property file="${andromda-core.home}/xdoclet.properties"/>
    <property file="${andromda-java.home}/andromda-java.properties"/>
    <property file="${andromda-ejb.home}/andromda-ejb.properties"/>
    <property file="${andromda-hibernate.home}/andromda-hibernate.properties"/>
    <property file="${andromda-struts.home}/andromda-struts.properties"/>

    <!-- classpath for using AndroMDA to compile UML -->
    <path id="andromda.classpath">
       <pathelement location="${andromda-core.home}/andromda.jar"/>
       <pathelement path="${andromda-core.classpath}"/>
       <pathelement path="${andromda-java.classpath}"/>
       <pathelement path="${andromda-ejb.classpath}"/>
       <pathelement path="${andromda-hibernate.classpath}"/>
       <pathelement path="${andromda-struts.classpath}"/>
    </path>
    
    <path id="j2ee.classpath">
      <pathelement location="${jboss.home}/server/default/lib/jboss-j2ee.jar"/>
      <pathelement location="${jboss.home}/server/default/lib/javax.servlet.jar"/>
    </path>
    
    <!-- Define our class path -->
    <path id="build.class.path">
        <path refid="andromda.classpath"/>
        <pathelement path="${xdoclet.classpath}"/>
        <path refid="j2ee.classpath"/>
    </path>


    <!-- ============================================================= -->
    <!--               Directory settings                              -->
    <!-- ============================================================= -->


    <!-- Physical source directories -->
    <property name="src.app.dir"             value="src/app" />
    <property name="src.common.dir"          value="src/common" />
    <property name="src.ejb.dir"             value="src/ejb" />
    <property name="src.hibernate.dir"       value="src/hibernate" />
    <property name="src.web.dir"             value="src/web" />
    <property name="src.servlet.dir"         value="${src.web.dir}/servlet" />
    <property name="src.webpages.dir"        value="${src.web.dir}/pages" />
    <property name="src.webconfig.dir"       value="${src.web.dir}/config" />
    <property name="src.appconfig.dir"       value="${src.app.dir}/config" />

    <!-- Output directories for generators -->
    <property name="andromda.ejb.generated.dir"        value="${src.ejb.dir}/generated" />
    <property name="andromda.ejb.manual.dir"           value="${src.ejb.dir}/manual" />

    <property name="andromda.hibernate.generated.dir"  value="${src.hibernate.dir}/generated" />
    <property name="andromda.hibernate.manual.dir"     value="${src.hibernate.dir}/manual" />

    <property name="andromda.web.action.dir"  value="${src.servlet.dir}/manual" />
    <property name="andromda.web.form.dir"    value="${src.servlet.dir}/generated" />
    <property name="andromda.web.page.dir"    value="${src.webpages.dir}" />
    <property name="andromda.web.config.dir"  value="${src.webconfig.dir}/generated" />

    <!-- Setup directory structure -->
    <target name="init" depends="check-environment">
        <tstamp/>
        <mkdir dir="dist"/>

        <mkdir dir="build"/>
        <mkdir dir="build/earstage"/>
        <mkdir dir="build/ejbstage"/>
        <mkdir dir="build/hibernatestage"/>
        <mkdir dir="build/hibernateservice"/>
        <mkdir dir="build/webstage/WEB-INF/classes"/>
        <mkdir dir="build/webstage/WEB-INF/lib/tlds"/>
    </target>

    <!-- Remove directory structure structure -->
    <target name="clean" description="Removes all generated files">
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="dist"/>
            <fileset dir="build"/>
            <fileset dir="${andromda.ejb.generated.dir}"/>
            <fileset dir="${andromda.hibernate.generated.dir}"/>
            <fileset dir="${src.servlet.dir}/generated"/>
            <fileset dir="${src.webconfig.dir}/generated"/>
        </delete>
    </target>

    <!-- ============================================================= -->
    <!--               Highlevel user tasks                            -->
    <!-- ============================================================= -->

    <target name="build" depends="init,jars,hibernate-schema"
            description="Builds all jars and the database schema"/>

    <target name="dist" depends="clean,build"
            description="Builds distribution structure">
      <copy todir="dist">
          <fileset dir="build/" includes="*.ear" />
          <fileset dir="build/" includes="hibernate-schema.txt" />
      </copy>
    </target>

    <!--
        "ant deploy-ejb" will deploy the *.ear file into JBoss's
        default server configuration.
    -->
    <target name="deploy-ejb" depends="dist"
            description="Deploys generated ear in JBoss">
      <copy todir="${jboss.home}/server/default/deploy" >
          <fileset dir="build/" includes="*ejb.ear" />
      </copy>
    </target>

    <!--
        "ant deploy-hibernate" will deploy the *.ear file into JBoss's
        default server configuration.
    -->
    <target name="deploy-hibernate" depends="dist"
            description="Deploys generated Hibernate ear in JBoss">
      <copy todir="${jboss.home}/server/default/deploy" >
          <fileset dir="build/" includes="*hibernate.ear" />
      </copy>
    </target>

    <!-- ============================================================= -->
    <!--               Internal subtasks                               -->
    <!-- ============================================================= -->

    <!-- Put andromda to work. -->
    <!-- Generate the enterprise bean sources from the UML model -->
    <target name="genejbjava" depends="init">

        <property name="andromda.classpath" refid="andromda.classpath"/>
        <echo message="andromda.classpath = ${andromda.classpath}"/>

        <taskdef name="andromda"
                 classname="org.andromda.core.anttasks.AndroMDAGenTask"
                 classpathref="andromda.classpath"/>


        <unzip src="CarRentalSystem15.zargo" dest="build/model/unzipped" />

        <andromda basedir="build/model/unzipped"
                 includes="CarRentalSystem15.xmi"
                 lastModifiedCheck="false"
                 typeMappings="${andromda-core.home}/src/xml/TypeMapping.xml"
        >
            <userProperty name="foreignKeySuffix" value="_FK" />

            <outlet cartridge="java"      outlet="value-objects"  dir="${andromda.ejb.generated.dir}" />

            <outlet cartridge="ejb"       outlet="entity-beans"   dir="${andromda.ejb.generated.dir}" />
            <outlet cartridge="ejb"       outlet="session-beans"  dir="${andromda.ejb.generated.dir}" />
            <outlet cartridge="ejb"       outlet="entity-impls"   dir="${andromda.ejb.manual.dir}" />
            <outlet cartridge="ejb"       outlet="session-impls"  dir="${andromda.ejb.manual.dir}" />

            <outlet cartridge="struts"    outlet="forms"   dir="${andromda.web.form.dir}" />
            <outlet cartridge="struts"    outlet="actions" dir="${andromda.web.action.dir}" />
            <outlet cartridge="struts"    outlet="pages"   dir="${andromda.web.page.dir}" />
            <outlet cartridge="struts"    outlet="config"  dir="${src.webconfig.dir}/generated" />

        </andromda>
    </target>

    <target name="genhibernatejava" depends="init">
        <taskdef name="andromda"
                 classname="org.andromda.core.anttasks.AndroMDAGenTask"
                 classpathref="andromda.classpath"
        />

        <unzip src="CarRentalSystem15.zargo" dest="build/model/unzipped" />

        <andromda basedir="build/model/unzipped"
                 includes="CarRentalSystem15.xmi"
                 lastModifiedCheck="false"
                 typeMappings="${andromda-core.home}/src/xml/TypeMapping.xml"
        >
            <userProperty name="foreignKeySuffix" value="_FK" />

            <outlet cartridge="java"      outlet="value-objects"  dir="${andromda.hibernate.generated.dir}" />

            <outlet cartridge="hibernate" outlet="entities"       dir="${andromda.hibernate.generated.dir}" />
            <outlet cartridge="hibernate" outlet="entity-impls"   dir="${andromda.hibernate.manual.dir}" />
            <outlet cartridge="hibernate" outlet="session-beans"  dir="${andromda.hibernate.generated.dir}" />
            <outlet cartridge="hibernate" outlet="session-impls"  dir="${andromda.hibernate.manual.dir}" />

        </andromda>
    </target>

    <target name="genhibernate" depends="init,genhibernatejava">
        <delete>
            <fileset dir="build/hibernateservice" includes="**/*.hbm.xml" />
        </delete>

        <taskdef
            name="hibernatedoclet"
            classname="xdoclet.modules.hibernate.HibernateDocletTask"
            classpathref="build.class.path"
        />

        <hibernatedoclet destdir="build/hibernateservice">
            <fileset dir="${andromda.hibernate.generated.dir}">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${andromda.hibernate.manual.dir}">
                <include name="**/*.java" />
            </fileset>

            <hibernate />

            <jbossservice
                destdir="build/hibernateservice/META-INF"
                jndiname="java:/hibernate/SessionFactory"
                servicename="CarRentalSystemHibernateSessionFactory"
                dialect="cirrus.hibernate.sql.HSQLDialect"
                datasource="java:/DefaultDS"
                showSql="true"
            />
        </hibernatedoclet>
        <!--
             hibernatedoclet has a bug under Windows: It generates
             resource references in jboss-service.xml, using "\\"
             instead of "/" as a package path separator.

             Let's compensate for this using the following "replace" task.
         -->
        <replace file="build/hibernateservice/META-INF/jboss-service.xml" >
            <replacetoken><![CDATA[\]]></replacetoken>
            <replacevalue><![CDATA[/]]></replacevalue>
        </replace>


        <taskdef name="ejbdoclet"
                 classname="xdoclet.modules.ejb.EjbDocletTask"
                 classpathref="build.class.path"
        />

        <ejbdoclet destdir="${andromda.hibernate.generated.dir}"
                   ejbspec="2.0"
                   force="false">

            <fileset dir="${andromda.hibernate.generated.dir}">
                <include name="**/*Bean.java" />
            </fileset>

            <utilobject/>

            <remoteinterface/>
            <homeinterface/>
            <localinterface/>
            <localhomeinterface/>

            <deploymentdescriptor
                destdir="build/hibernatestage/META-INF/"/>

            <jboss version="3.0"
                   xmlencoding="UTF-8"
                   typemapping="Hypersonic SQL"
                   datasource="java:/DefaultDS"
                   destdir="build/hibernatestage/META-INF/"/>

        </ejbdoclet>

        <!--
             XDoclet stores the *Bean classes into ejb-jar.xml
             but the used andromda templates have created
             subclasses *BeanImpl.  Replace
             the names in the deployment descriptor so that
             everyone is happy.
         -->
        <replace file="build/hibernatestage/META-INF/ejb-jar.xml" >
            <replacetoken><![CDATA[ServiceBean</ejb-class>]]></replacetoken>
            <replacevalue><![CDATA[ServiceBeanImpl</ejb-class>]]></replacevalue>
        </replace>

    </target>

    <!-- Let XDoclet generate all remaining EJB sources from the beans -->
    <target name="genejbcomp" depends="init,genejbjava">
        <taskdef name="ejbdoclet"
                 classname="xdoclet.modules.ejb.EjbDocletTask"
                 classpathref="build.class.path"
        />

        <ejbdoclet destdir="${andromda.ejb.generated.dir}"
                   ejbspec="2.0"
                   force="false">

            <fileset dir="${andromda.ejb.generated.dir}">
                <include name="**/*Bean.java" />
            </fileset>

            <utilobject/>

            <deploymentdescriptor
                destdir="build/ejbstage/META-INF/"/>

            <jboss version="3.0"
                   xmlencoding="UTF-8"
                   typemapping="Hypersonic SQL"
                   datasource="java:/DefaultDS"
                   destdir="build/ejbstage/META-INF/"/>

        </ejbdoclet>

        <!--
             XDoclet stores the *Bean classes into ejb-jar.xml
             but the used andromda templates have created
             subclasses *BeanImpl and *BeanCMP.  Replace
             the names in the deployment descriptor so that
             everyone is happy.
         -->
        <replace file="build/ejbstage/META-INF/ejb-jar.xml" >
            <replacetoken><![CDATA[ServiceBean</ejb-class>]]></replacetoken>
            <replacevalue><![CDATA[ServiceBeanImpl</ejb-class>]]></replacevalue>
        </replace>
        <replace file="build/ejbstage/META-INF/ejb-jar.xml" >
            <replacetoken><![CDATA[Bean</ejb-class>]]></replacetoken>
            <replacevalue><![CDATA[BeanCMP</ejb-class>]]></replacevalue>
        </replace>
    </target>


    <!-- Compile all ejb files, generated and hand-written -->
    <target name="compile-ejb" depends="init,genejbcomp">

        <property name="build.class.path" refid="build.class.path"/>
        <echo message="build.class.path = ${build.class.path}"/>
        
        <!-- Compile EJB classes -->
        <javac destdir="build/ejbstage" includes="**/*.java"
               includeAntRuntime="false">
            <src path="${src.common.dir}" />
            <src path="${andromda.ejb.generated.dir}" />
            <src path="${andromda.ejb.manual.dir}" />
            <src path="${andromda.ejb.generated.dir}"  />
            <classpath refid="build.class.path"/>
        </javac>

        <!-- Compile web application classes -->
        <javac destdir="build/webstage/WEB-INF/classes"
               includes="**/*.java"
               includeAntRuntime="false">
            <src path="${src.common.dir}" />
            <src path="${andromda.web.action.dir}"  />
            <src path="${andromda.web.form.dir}"    />
            <classpath>
                <path  refid="build.class.path" />
                <pathelement path="build/ejbstage" />
            </classpath>
        </javac>
    </target>


    <!-- Compile all hibernate files, generated and hand-written -->
    <target name="compile-hibernate" depends="init,genhibernate">

        <!-- Compile hibernate classes -->
        <javac destdir="build/hibernatestage" includes="**/*.java"
               includeAntRuntime="false">
            <src path="${src.common.dir}" />
            <src path="${andromda.hibernate.generated.dir}" />
            <src path="${andromda.hibernate.manual.dir}" />
            <classpath refid="build.class.path"/>
        </javac>

    </target>


    <!-- Create the archive structures on disk, first -->
    <target name="copystages" depends="init,compile-ejb,compile-hibernate">
        <!-- Copy the web pages and message resource file -->
        <copy todir="build/webstage/">
            <fileset dir="${andromda.web.page.dir}" includes="*.jsp"/>
            <fileset dir="${andromda.web.page.dir}" includes="*.html"/>
            <fileset dir="${src.webconfig.dir}"    includes="ApplicationResources*.properties"/>
        </copy>
        <!-- Copy the web configuration files -->
        <copy todir="build/webstage/WEB-INF/">
            <fileset dir="${src.webconfig.dir}" includes="*.xml"/>
            <fileset dir="${andromda.web.config.dir}" includes="struts-config.xml" />
        </copy>
        <!-- Copy the Struts and Struts support libraries -->
        <copy todir="build/webstage/WEB-INF/lib/">
            <fileset dir="${andromda-struts.home}/lib/" includes="struts.jar"/>
            <fileset dir="${andromda-struts.home}" includes="andromda-struts.jar"/>
        </copy>
        <copy todir="build/webstage/WEB-INF/lib/tlds/">
            <fileset dir="${andromda-struts.home}/lib/tld/" includes="struts*.tld"/>
        </copy>

        <!-- Copy the hibernate libraries -->
        <copy todir="build/hibernateservice/lib/">
            <fileset dir="${andromda-hibernate.home}/lib/" includes="hibernate.jar"/>
        </copy>
        <!-- Copy the hibernate libraries -->
        <copy todir="build/hibernatestage/lib/">
            <fileset dir="${andromda-hibernate.home}/lib/" includes="*.jar"/>
        </copy>
    </target>


    <!-- Create the EJB jar, the web WAR and the application EAR -->
    <target name="jars-ejb" depends="copystages">
        <delete>
            <fileset dir="build/earstage" includes="**/*"/>
        </delete>
        <!-- Put everything in build/ejbstage into car-rental-system-ejb.jar. -->
        <!-- Newer ant versions have an ejb task, but this works as well. -->
        <jar taskname="ejb-jar" jarfile="build/earstage/car-rental-system-ejb.jar">
            <fileset dir="build/ejbstage/" includes="**/*"/>
        </jar>
        <!-- Put everything in build/webstage into car-rental-system-web.war. -->
        <jar taskname="web-war" jarfile="build/earstage/car-rental-system-web.war">
            <fileset dir="build/webstage/" includes="**/*"/>
        </jar>
        <!-- Put application deployment descriptor in META-INF -->
        <copy taskname="app-xml"
              file="${src.appconfig.dir}/application-ejb.xml"
              tofile="build/earstage/META-INF/application.xml"/>
        <!-- Put everything in build/earstage into car-rental-system-web.ear. -->
        <jar taskname="app-ear" jarfile="build/car-rental-system-ejb.ear">
            <fileset dir="build/earstage/" includes="**/*"/>
        </jar>
    </target>

    <!-- Create the Hibernate sar, the Hibernate jar, the web WAR and the application EAR -->
    <target name="jars-hibernate" depends="copystages">
        <delete>
            <fileset dir="build/earstage" includes="**/*"/>
        </delete>
        <jar taskname="hibernate-sar" jarfile="build/earstage/car-rental-system-hibernate.sar">
            <fileset dir="build/hibernateservice/" includes="**/*"/>
        </jar>
        <jar taskname="hibernate-jar" jarfile="build/earstage/car-rental-system-hibernate.jar">
            <fileset dir="build/hibernatestage/" includes="**/*"/>
        </jar>
        <!-- Put everything in build/webstage into car-rental-system-web.war. -->
        <jar taskname="web-war" jarfile="build/earstage/car-rental-system-web.war">
            <fileset dir="build/webstage/" includes="**/*"/>
        </jar>
        <copy taskname="app-xml"
              file="${src.appconfig.dir}/application-hibernate.xml"
              tofile="build/earstage/META-INF/application.xml"/>
        <!-- Put everything in build/earstage into car-rental-system-web.ear. -->
        <jar taskname="app-ear" jarfile="build/car-rental-system-hibernate.ear">
            <fileset dir="build/earstage/" includes="**/*"/>
        </jar>
    </target>

    <!-- Generate the SQL database schema from the hibernate mapping files -->
    <target name="hibernate-schema" description="Generates database schema" depends="jars-hibernate" >
        <fileset id="hibernate.mapping.files" dir="build/hibernateservice">
            <include name="**/*.hbm.xml"/>
        </fileset>
        <pathconvert refid="hibernate.mapping.files" property="hibernate.mappings" pathsep=" "/>

        <echo message="mapping files: ${hibernate.mappings}"/>
        <path id="schema.classpath">
            <pathelement path="${build.class.path}"/>
            <pathelement location="build/earstage/car-rental-system-hibernate.jar"/>
        </path>

        <java classname="cirrus.hibernate.tools.SchemaExport" fork="true">
            <arg value="--output=build/hibernate-schema.txt"/>
            <arg value="--text"/>
            <arg line="${hibernate.mappings}"/>
            <jvmarg value="-Dhibernate.dialect=cirrus.hibernate.sql.HSQLDialect"/>
            <classpath refid="schema.classpath" />
        </java>
    </target>


    <!-- Create all the jars, wars, sars and ears -->
    <target name="jars" depends="jars-ejb,jars-hibernate" />


    <target name="check-environment">
        <property name="classpath" refid="build.class.path"/>
        <echo message=" path=${classpath}"/>

        <antcall target="check-andromda"/>

        <available property="mdr.present"
                classname="org.netbeans.mdr.NBMDRepositoryImpl"
                classpathref="build.class.path"/>
        <antcall target="wrong-mdr"/>

        <available property="velocity.present"
                   classname="org.apache.velocity.context.Context"
                   classpathref="build.class.path" />
        <antcall target="wrong-velocity"/>

        <available property="ejbdoclet.present"
                   classname="xdoclet.modules.ejb.EjbDocletTask"
                   classpathref="build.class.path" />
        <antcall target="wrong-ejbdoclet"/>

        <available property="ant.present"
                   classname="org.apache.tools.ant.types.EnumeratedAttribute"
                   classpathref="build.class.path" />
        <antcall target="wrong-ant"/>

        <available property="log4j.present"
                   classname="org.apache.log4j.Category"
                   classpathref="build.class.path" />
        <antcall target="wrong-log4j"/>

        <available property="j2ee.present"
                   classname="javax.ejb.EntityBean"
                   classpathref="build.class.path" />
        <antcall target="wrong-j2ee"/>

        <!-- test andromda at the end because task class cannot load
             when there are missing referenced classes (e.g. Velocity classes)
        -->
        <available property="andromda.present"
                   classname="org.andromda.core.anttasks.AndroMDAGenTask"
                   classpathref="andromda.classpath" />
        <antcall target="wrong-andromda"/>
    </target>

    <target name="check-andromda" unless="andromda-core.home">
        <fail>
            Property "andromda-core.home" is not set. Please use the file
            "build.properties" in the directory ${basedir} to set
            this property. It must point to the andromda installation
            directory which contains the file "andromda.jar".
        </fail>
    </target>

    <target name="wrong-andromda" unless="andromda.present">
        <fail>
            Property "build.classpath" is set but it doesn't seem
            to contain the andromda jar.
        </fail>
    </target>
    
    <target name="wrong-mdr" unless="mdr.present">
      <fail>
          Property "build.classpath" is set but it doesn't seem
          to contain the necessary MDR jars such as
          mdrapi.jar, nbmdr.jar, jmi.jar, jmiutils.jar, jmitooolkit.jar, mof.jar,
          uml14.jar, openide-lookup.jar, openide-fs.jar
      </fail>
    </target>

    <target name="wrong-velocity" unless="velocity.present">
        <fail>
            Property "build.classpath" is set but it doesn't seem
            to contain the Velocity jar.
        </fail>
    </target>

    <target name="wrong-ejbdoclet" unless="ejbdoclet.present">
        <fail>
            Property "build.classpath" is set but it doesn't seem
            to contain the Xdoclet jar.
        </fail>
    </target>

    <target name="wrong-ant" unless="ant.present">
        <fail>
            Property "build.classpath" is set but it doesn't seem
            to contain the ant jar.
        </fail>
    </target>

    <target name="wrong-log4j" unless="log4j.present">
        <fail>
            Property "build.classpath" is set but it doesn't seem
            to contain the log4j jar.
        </fail>
    </target>

    <target name="wrong-j2ee" unless="j2ee.present">
        <fail>
            Property "build.classpath" is set but it doesn't seem
            to contain the J2EE jars.
        </fail>
    </target>

</project>
