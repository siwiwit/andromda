//
// Attention: Generated code! Do not modify by hand!
// Generated by: PatternMatchingExceptionHandler.vsl in andromda-jsf-cartridge.
//
#if ($stringUtils.isNotBlank($managedBeansPackage))
package $managedBeansPackage;
#end

/**
 * <p>
 *  A configurable pattern matching error handler retrieves exception mapping
 *  keys from an exception, and re-throws the exception if a pattern can not be
 *  retrieved.  This is used to retrieve keys from the back-end exceptions
 *  which can be mapped to exception messages keyed in an application resource
 *  file.
 * </p>
 */
public class $patternMatchingExceptionHandler
    implements java.io.Serializable
{
    private static final $patternMatchingExceptionHandler instance = new ${patternMatchingExceptionHandler}();

    private static final java.util.regex.Pattern compiledPattern = java.util.regex.Pattern.compile("$exceptionHandlerPattern");

    /**
     * Gets the shared PatternMatchingExceptionHandler instance.
     *
     * @return the shared instance
     */
    public static PatternMatchingExceptionHandler instance()
    {
        return instance;
    }

    /**
     * Handles Exceptions by retrieving the message and attempting to extract
     * the specified pattern defined within this class. If a string can not be
     * found matching the pattern, the exception is re-thrown
     *
     * @param exception the Exception containing the message to retrieve
     * @return the retrieved string matching the pattern.
     */
    public String handleException(final Throwable throwable) throws Throwable
    {
        final java.lang.Throwable cause =  this.findRootCause(throwable);
        String matched = null;
        if (cause != null && cause.getMessage() != null)
        {
            final java.util.regex.Matcher matcher = compiledPattern.matcher(cause.getMessage().replaceAll("[\\s]+", " "));
            try
            {
                if (matcher.matches())
                {
                    matched = matcher.group(3);
                }
            }
            catch (java.lang.IllegalStateException ex)
            {
                // no match was found ignore
            }
            if (matched != null)
            {
                return matched;
            }
        }
        throw throwable;
    }

    /**
     * Finds the root cause of the parent exception
     * by traveling up the exception hierachy.
     */
    private final java.lang.Throwable findRootCause(Throwable throwable)
    {
        final Throwable rootCause = org.apache.commons.lang.exception.ExceptionUtils.getRootCause(throwable);
        if (rootCause != null)
        {
            throwable = rootCause;
        }
        return throwable;
    }
}