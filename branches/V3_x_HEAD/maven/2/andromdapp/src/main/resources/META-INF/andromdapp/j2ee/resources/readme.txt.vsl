
    
    A n d r o M D A  -  $andromdaVersion


    AndroMDA is an open-source MDA framework distributed under the BSD license.
    Go to http://www.andromda.org/ for more information.

    The project located in this directory has been generated by $projectCreator
    using the andromdapp:generate Maven plugin.

    You should at least be running Maven 2.0 if you want to build your
    project without any Maven-related problems, below is a summary of what has
    been generated and a list of example goals to call from the command line.

    The generated project structure is well-tailored for use in the development
    of J2EE projects. The build process itself makes use of Maven, dependencies
    and often-used goals have been added for your convenience.

    Custom configuration can be done by updating the project.properties files

    /$applicationId J2EE project
         |
         |    The root of the project contains a few files that control the overall
         |    build process and common properties
         |
         |-- pom.xml
         |        contains information about this project, you may add more information
         |        as long as you do not violate the Maven POM schema, see
         |        http://maven.apache.org/reference/project-descriptor.html
         |-- project.properties
         |        common properties that might be changed to configure the project
         |
         +-- /mda
         |     |
         |     |    The MDA module is the heart of this project, this is where
         |     |    AndroMDA is configured to generate the files needed to
         |     |    assemble the application
         |     |
         |     +-- pom.xml
         |     |        contains the AndroMDA dependencies (cartridges, translation-libraries, etc)
         |     +-- mda.properties
         |     |        specific AndroMDA properties, can be configured here,
         |     |        such as toggling the validation errors on/off
         |     +-- /src
         |     |        additional sources such as merge-mappings can be
         |     |        placed here, check out the /main/uml directory, it contains
         |     |        the UML model from which AndroMDA will generate code
         |     +-- /conf/andromda.xml
         |              configures AndroMDA and its components, most
         |              importantly the cartridges which are listed in
         |              their own namespace; global settings are done in the
         |              'default' namespace
         |     
         +-- /common
         |     |
         |     |    The COMMON module collects those resources and classes
         |     |    that are shared between the other modules.
         |     |
         |     +-- pom.xml
         |     |        lists common dependencies
         |     +-- /target
         |              shared resources and java classes are generated here,
         |              such as value objects and exceptions
         |
#if ($ejb)
         +-- /core
         |     |
         |     |    The CORE module collects those resources and classes
         |     |    that use the EJB framework
         |     |
         |     +-- pom.xml
         |     |        lists EJB dependencies
         |     +-- /src/main/java
         |     |        EJB classes that need manual implementation are
         |     |        generated here, they will not be overwritten upon
         |     |        regeneration
         |     +-- /target
         |              the EJB classes here will be overwriten each time
         |              AndroMDA generates new code using the EJB cartridge
         |
#end
#if ($hibernate)
         +-- /core
         |     |
         |     |    The CORE module collects those resources and classes
         |     |    that use the Hibernate framework
         |     |
         |     +-- pom.xml
         |     |        lists Hibernate dependencies
         |     +-- /src/main/java
         |     |        Hibernate classes that need manual implementation are
         |     |        generated here, they will not be overwritten upon
         |     |        regeneration; these are the entities containing
         |     |        business methods
         |     +-- /target
         |              the Hibernate resources and classes here will be
         |              overwriten each time AndroMDA generates new code
         |              using the Hibernate cartridge; this includes both
         |              the entities and the *.hbm.xml mapping files.
         |              You'll also find the DDL for creating and dropping
         |              your schema within this directory.
         |
#end
#if ($spring)
         +-- /core
         |     |
         |     |    The CORE module collects those resources and classes
         |     |    that use the Spring framework, optionally making
         |     |    use of Hibernate and/or EJB under the hood.
         |     |
         |     +-- pom.xml
         |     |        lists Spring dependencies
         |     +-- /src/main/java
         |     |        Spring classes that need manual implementation are
         |     |        generated here, they will not be overwritten upon
         |     |        regeneration; this includes the service, DAO and
         |     |        entity implementations
         |     +-- /target
         |              the Spring resources and classes here will be
         |              overwriten each time AndroMDA generates new code
         |              using the Spring cartridge; this includes both
         |              the Hibernate entities and the correponding
         |              *.hbm.xml mapping files as well as the service
         |              and DAO base classes. You'll also find the DDL 
         |              for creating and dropping your schema within this 
         |              directory.
         |
#end
#if ($workflow)
         +-- /workflow
         |     |
         |     |    The Workflow module collects those resources and classes
         |     |    that are needed to support the workflow engine
         |     |
         |     +-- pom.xml
         |     |        lists Workflow dependencies
         |     +-- /src/main/sar
         |     |        files used to configure the workflow engine connection,
         |     |        please note that these files contain properties
         |     |        that will be dynamically replaced during the build
         |     +-- /target
         |     
#end
#if ($web)
         +-- /web
         |     |
#if ($ear)
         |     |    The WEB module collects those resources and classes
         |     |    that make up the presentation layer.
#else
         |     |    The WEB module collects all resources and classes
         |     |    that make up the presentation layer, as well as 
         |     |    bundling all other modules to create a deployable war.
#end
         |     |
         |     +-- pom.xml
         |     |        lists WebApp dependencies
         |     +-- /src/main/java
         |     |        controller implementations and editable resource bundles
         |     |        will be generated here,
         |     |        you might consider putting your own JSPs here to
         |     |        be copied over the generated ones when bundling the
         |     |        .war file
         |     +-- /target
#if ($ear)
#if ($struts)
         |              any Struts classes, JSPs, resource bundles and
#else
         |              any JSF classes, JSPs, resource bundles and
#end
         |              configuration files are generated here
#else
         |              a deployable war is bundled here
#end
         |
#end
#if ($webservice)
         +-- /webservice
         |     |
         |     |    The WEBSERVICE module collects those resources and
         |     |    classes that use the AXIS framework
         |     |
         |     +-- pom.xml
         |     |        lists any dependencies for webservices
         |     +-- /target
         |              generated files are emitted here
         |
#end
#if ($ear)
         +-- /app
               |
               |    The APP module collects those resources and classes
               |    that are required to actually build the .ear bundle
               |
               +-- pom.xml
               |        lists dependencies to be bundles into the
               |        root of the .ear
               +-- /src
               |        any custom resources that should be deployed
               |        together with the application
               |        (eg. server deployment descriptors)
               +-- /target
                        a deployable application is bundled here
#end



    In order to succesfully build your project you will need to know
    how to invoke the build process for the existing modules, here's a
    list of examples:

        %> mvn install

            simply builds all modules

#if ($ear)
        %> mvn -f app/pom.xml -Ddeploy=true
#else
        %> mvn -f web/pom.xml -Ddeploy=true
#end

            collects all artifacts and builds a deployable .$projectType which is then
            deployed

        %> mvn clean install -Ddeploy=true

            deletes all generated files, rebuilds and deploys; files in /src
            directories are *not* deleted

        %> mvn -N andromdapp:module -Dmodules=core (or mvn -f core/pom.xml)

            only build the core module

#if ($workflow)
        %> mvn -N andromdapp:module -Dmodules=workflow (or mvn -f workflow/pom.xml)

            only build the workflow module

#end
#if ($web)
        %> mvn -N andromdapp:module -Dmodules=web (or mvn -f web/pom.xml)

            only build the web module

#end
        %> mvn nuke

            cleans out all /target directories and removes all Java classes with names
            ending with 'Impl' from the source directories (from the common, core and
            web modules); this goal asks for confirmation, but be careful calling it
            anyway as you will lose your manually edited files

        %>  mvn -f core/pom.xml andromdapp:schema -Dtasks=create

            generates the DDL create code and subsequently tells the database
            to create the schema for the entities

        %> mvn -f core/pom.xml andromdapp:schema -Dtasks=drop

            generates the DDL drop code and subsequently tells the database
            to drop the schema for the entities
            
        %> mvn -f core/pom.xml andromdapp:schema -Dtasks=drop,create

            generates the drop and create DDL code and subsequently tells the database
            to drop and then create the schema for the entities

        %> mvn -N andromdapp:module -Dmodules=mda:[andromda:start-server] (or mvn -f mda/pom.xml andromda:start-server)

            starts the AndroMDA server, with this server running you will be able
            to significantly speedup the generation process although it will require
            you to use another console while it is running

        %> mvn -N andromdapp:module -Dmodules=mda:[andromda:stop-server] (or mvn -f mda/pom.xml andromda:stopt-server)

            stops the AndroMDA server

        %> mvn -N andromdapp:module -Dmodules=mda (or mvn -f mda/pom.xml)

            runs AndroMDA on your model and thereby generating files in
            the subdirectories of the existing modules

        %> mvn -N andromdapp:module -Dmodules=mda -Dfilter=java,hibernate (or mvn -f mda/pom.xml -Dfilter=java,hibernate)

            runs AndroMDA, but this time only using the Java and Hibernate
            cartridges (in that order)

        %> mvn -N andromdapp:module -Dmodules=mda -Dfilter=~java,hibernate (or mvn -f mda/pom.xml -Dfilter=~java,hibernate)

            runs AndroMDA, but this time using all cartridges *except*
            the Java and Hibernate cartridges

        %> mvn -N andromdapp:module -Dmodules=mda,core,web,app -Dfilter=java -Ddeploy=true

            runs AndroMDA using only the Java cartridge, rebuilds the core
            module and then the web module and deploys afterwards


    Please note that you may use the '-o' flag at any time to avoid
    having Maven download the dependencies, only build online when Maven
    complains about missing dependencies.

    Each module will install its artifact into the local Maven repository,
    this might be a directory looking like this:

        (Windows)
        C:\Documents and Settings\\${author}\.m2\repository\\${applicationId}\

        (*nix)
        /home/${author}/.maven/repository/${applicationId}/

    For questions or feature requests please use our forum:
    http://forum.andromda.org/


    Good luck!


        -- The AndroMDA Team


