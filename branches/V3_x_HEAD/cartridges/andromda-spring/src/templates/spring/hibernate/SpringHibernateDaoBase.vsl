#set ($generatedFile = "${entity.packagePath}/${entity.daoBaseName}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end
#set ($daoInheritance = $entity.generalization && $daoInheritanceEnabled)
#if ($daoInheritance)
#set ($rootEntityType = $entity.root.fullyQualifiedEntityName)
#set ($rootDaoType = $entity.root.fullyQualifiedDaoName)
#else
#set ($rootEntityType = $entity.fullyQualifiedEntityName)
#set ($rootDaoType = $entity.fullyQualifiedDaoName)
#end
##get entity collection type
#if ($enableTemplating)
#if ($daoInheritance)
#set ($entityCollectionType = "java.util.Collection<? extends ${rootEntityType}>")
#else
#set ($entityCollectionType = "java.util.Collection<${rootEntityType}>")
#end
#else
#set ($entityCollectionType = "java.util.Collection")
#end
##check for spring version regarding the execute method to use
#if($springVersion.compareTo("2.5") >= 0)
	#set ($executeWithNativeSessionMethodname = "executeWithNativeSession")
	#set ($executeWithNativeSessionParameter = "")
	#else
#set ($executeWithNativeSessionMethodname = "execute")
		#set ($executeWithNativeSessionParameter = ", true")
	#end
##
##
#if($entity.compositeIdentifier)
#set($identifierTypeName="${entity.fullyQualifiedEntityName}PK")
#set($identifierCapitalizedName="${entity.name}Pk")
#set($identifierName=${stringUtils.uncapitalize($identifierCapitalizedName)})
#set($identifierTypePrimitive = false)
#else
#set($identifierTypeName="${entity.identifiers.iterator().next().type.fullyQualifiedName}")
#set($identifierName="${entity.identifiers.iterator().next().name}")
#set($identifierCapitalizedName=${stringUtils.capitalize($identifierName)})
#set($identifierTypePrimitive = $entity.identifiers.iterator().next().type.primitive)
#if($identifierTypePrimitive)
#set($identifierTypeWrapperName = $entity.identifiers.iterator().next().type.wrapperName)
#end
#end

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>$entity.fullyQualifiedEntityName</code>.
 * </p>
 *
 * @see $entity.fullyQualifiedEntityName
 */
public abstract class $entity.daoBaseName
#if ($daoInheritance)
    extends $entity.generalization.fullyQualifiedDaoImplementationName
#else
    extends ${hibernateUtils.springHibernatePackage}.support.HibernateDaoSupport
#end
    implements $entity.fullyQualifiedDaoName
{

#foreach($entityRef in $entity.entityReferences)
    private $entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName;

    /**
     * Sets the reference to <code>$entityRef.daoName</code>.
     */
    public void ${entityRef.daoSetterName}($entityRef.targetElement.fullyQualifiedDaoName $entityRef.daoName)
    {
        this.$entityRef.daoName = $entityRef.daoName;
    }

    /**
     * Gets the reference to <code>$entityRef.daoName</code>.
     */
    protected $entityRef.targetElement.fullyQualifiedDaoName ${entityRef.daoGetterName}()
    {
        return this.$entityRef.daoName;
    }

#end
#set ($identifier = $entity.identifiers.iterator().next())
#set ($argumentName = $stringUtils.uncapitalize($entity.name))
    /**
     * @see ${entity.fullyQualifiedDaoName}#load(int, ${identifierTypeName})
     */
    public java.lang.Object load(final int transform, final ${identifierTypeName} ${identifierName})
    {
#set ($argument = ${identifierName})
#if($identifierTypePrimitive)
#set ($argument = "new ${identifierTypeWrapperName}(${identifierName})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.load - '$argument' can not be null");
        }
#end
#if ($hibernateUtils.xmlPersistenceActive)
#set ($xmlIndent = "    ")
        if (transform == TRANSFORM_XML)
        {
            final java.lang.Object entity = this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
                    new org.springframework.orm.hibernate3.HibernateCallback()
                    {
                        public java.lang.Object doInHibernate(${hibernateUtils.basePackage}.Session hibernateSession)
                            throws ${hibernateUtils.basePackage}.HibernateException
                        {
                            ${hibernateUtils.basePackage}.Session xmlSession = hibernateSession.getSession(${hibernateUtils.basePackage}.EntityMode.DOM4J);
                            return xmlSession.get(${entity.fullyQualifiedEntityImplementationName}.class, $argument);
                        }
                    }${executeWithNativeSessionParameter});
            return entity;
        }
        else
        {
#else
#set ($xmlIndent = "")
#end
$xmlIndent        final java.lang.Object entity = this.getHibernateTemplate().get(${entity.fullyQualifiedEntityImplementationName}.class, $argument);
$xmlIndent        return transformEntity(transform, ($entity.fullyQualifiedName)entity);
#if ($hibernateUtils.xmlPersistenceActive)
        }
#end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#load(${identifierTypeName})
     */
    public $rootEntityType load(${identifierTypeName} ${identifierName})
    {
        return ($entity.fullyQualifiedEntityName)this.load($entity.daoNoTransformationConstantName, ${identifierName});
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll()
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType loadAll()
    {
        return#if($enableTemplating) ($entityCollectionType)#end this.loadAll($entity.daoNoTransformationConstantName);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll(int)
     */
    public java.util.Collection#if($enableTemplating)<?>#end loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll(int, int)
     */
    public java.util.Collection#if($enableTemplating)<?>#end loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll($entity.daoNoTransformationConstantName, pageNumber, pageSize);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#loadAll(int, int, int)
     */
    public java.util.Collection#if($enableTemplating)<?>#end loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final ${hibernateUtils.basePackage}.Criteria criteria = this.getSession(false).createCriteria(${entity.fullyQualifiedEntityImplementationName}.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection#if($enableTemplating)<?>#end results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

## Only add these methods if the entity isn't abstract
#if (!$entity.abstract)
    /**
     * @see ${entity.fullyQualifiedDaoName}#create($entity.fullyQualifiedEntityName)
     */
    public $rootEntityType create($entity.fullyQualifiedEntityName $argumentName)
    {
        return ($entity.fullyQualifiedEntityName)this.create($entity.daoNoTransformationConstantName, $argumentName);
    }

#if ($hibernateUtils.xmlPersistenceActive)
#set ($identifier = $entity.identifiers.iterator().next())
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(org.dom4j.Element)
     */
    public $rootEntityType create(org.dom4j.Element $argumentName)
    {
       return ($entity.fullyQualifiedEntityName)this.create($entity.daoNoTransformationConstantName, $argumentName);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int transform, org.dom4j.Element)
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings({"unchecked"})
#end
    public java.lang.Object create(int transform, final org.dom4j.Element $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }
        java.lang.Object newID = this.getHibernateTemplate().${executeWithNativeSessionMethodname}((
                new org.springframework.orm.hibernate3.HibernateCallback()
                {
                    public java.lang.Object doInHibernate(${hibernateUtils.basePackage}.Session hibernateSession)
                        throws ${hibernateUtils.basePackage}.HibernateException
                    {
                        ${hibernateUtils.basePackage}.Session xmlSession = hibernateSession.getSession(${hibernateUtils.basePackage}.EntityMode.DOM4J);
                        return xmlSession.save("$entity.fullyQualifiedEntityImplementationName", $argumentName);
                    }
                }${executeWithNativeSessionParameter});

        return this.load(transform, (${identifierTypeName})newID);
    }

#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int transform, $entity.fullyQualifiedEntityName)
     */
    public java.lang.Object create(final int transform, final $entity.fullyQualifiedName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - '$argumentName' can not be null");
        }
#if ($hibernateUtils.xmlPersistenceActive)
#set ($identifierProperty = "identifier")
#if($identifierTypePrimitive)
#set ($identifierProperty = "(($identifierTypeWrapperName)$identifierProperty).${identifierTypeName}Value()")
#else
#set ($identifierProperty = "(${identifierTypeName})$identifierProperty")
#end
        java.lang.Object identifier = this.getHibernateTemplate().save($argumentName);
        if (transform == TRANSFORM_XML)
          return this.load(TRANSFORM_XML, (($identifierProperty)));
        else
          return this.transformEntity(transform, $argumentName);
#else
        this.getHibernateTemplate().save($argumentName);
        return this.transformEntity(transform, $argumentName);
#end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create($entityCollectionType)
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings({"unchecked"})
#end
    public $entityCollectionType create(final $entityCollectionType entities)
    {
        return#if($enableTemplating) ($entityCollectionType)#end create($entity.daoNoTransformationConstantName, entities);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int, $entityCollectionType)
     */
    public java.util.Collection#if($enableTemplating)<?>#end create(final int transform, final $entityCollectionType entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
            new ${hibernateUtils.springHibernatePackage}.HibernateCallback()
            {
                public java.lang.Object doInHibernate(${hibernateUtils.basePackage}.Session session)
                    throws ${hibernateUtils.basePackage}.HibernateException
                {
                    for (java.util.Iterator#if($enableTemplating)<$entity.fullyQualifiedEntityName>#end entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform,#if(!$enableTemplating) ($entity.fullyQualifiedEntityName)entityIterator.next()#else entityIterator.next()#end);
                    }
                    return null;
                }
            }${executeWithNativeSessionParameter});
        return entities;
    }

#if ($enableDaoPropertiesCreateMethod.equalsIgnoreCase('true'))
#set ($attributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#if (!$attributes.empty)
    /**
     * @see ${rootDaoType}#create(${entity.getAttributeTypeList(true, false)})
     */
    public $rootEntityType create(
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end

#end
    {
        return ($rootEntityType)this.create($entity.daoNoTransformationConstantName, ${entity.getAttributeNameList(true, $entity.usingAssignedIdentifier)});
    }

    /**
     * @see ${rootDaoType}#create(int, ${entity.getAttributeTypeList(true, false)})
     */
    public java.lang.Object create(
        final int transform,
#foreach($attribute in $attributes)
        $attribute.type.fullyQualifiedName $attribute.name#if($velocityCount != $attributes.size()),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($attribute in $attributes)
        entity.${attribute.setterName}($attribute.name);
#end
        return this.create(transform, entity);
    }

#end
#set ($requiredProperties = $entity.getRequiredProperties(true,false))
#if (!$requiredProperties.empty && $entity.getRequiredAttributes(true,false).size() != $requiredProperties.size())
    /**
     * @see ${entity.fullyQualifiedDaoName}#create(${entity.getRequiredPropertyTypeList(true, false)})
     */
    public $rootEntityType create(
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else)#end

#end
    {
        return ($rootEntityType)this.create($entity.daoNoTransformationConstantName, ${entity.getRequiredPropertyNameList(true,false)});
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#create(int, ${entity.getRequiredPropertyTypeList(true, false)})
     */
    public java.lang.Object create(
        final int transform,
#foreach($property in $requiredProperties)
        $property.getterSetterTypeName $property.name#if($velocityCount != $requiredProperties.size()),#else)#end

#end
    {
        $entity.fullyQualifiedEntityName entity = new ${entity.fullyQualifiedEntityImplementationName}();
#foreach ($property in $requiredProperties)
        entity.${property.setterName}($property.name);
#end
        return this.create(transform, entity);
    }

#end
#end
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#update($entity.fullyQualifiedEntityName)
     */
    public void update($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().update($argumentName);
    }

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * @see ${entity.fullyQualifiedDaoName}#update(org.dom4j.Element)
     */
    public void update(final org.dom4j.Element $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
                new org.springframework.orm.hibernate3.HibernateCallback()
                {
                    public java.lang.Object doInHibernate(${hibernateUtils.basePackage}.Session hibernateSession)
                        throws ${hibernateUtils.basePackage}.HibernateException
                    {
                        ${hibernateUtils.basePackage}.Session xmlSession = hibernateSession.getSession(${hibernateUtils.basePackage}.EntityMode.DOM4J);
                        xmlSession.update("$entity.fullyQualifiedEntityImplementationName", $argumentName);
                        return null;
                    }
                }${executeWithNativeSessionParameter});
    }

#end
    /**
     * @see ${rootDaoType}#update($entityCollectionType)
     */
    public void update(final $entityCollectionType entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
            new ${hibernateUtils.springHibernatePackage}.HibernateCallback()
            {
                public java.lang.Object doInHibernate(${hibernateUtils.basePackage}.Session session)
                    throws ${hibernateUtils.basePackage}.HibernateException
                {
                    for (java.util.Iterator#if($enableTemplating)<$entity.fullyQualifiedEntityName>#end entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update(#if(!$enableTemplating)($entity.fullyQualifiedEntityName)entityIterator.next()#else entityIterator.next()#end);
                    }
                    return null;
                }
            }${executeWithNativeSessionParameter});
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#remove($entity.fullyQualifiedEntityName)
     */
    public void remove($entity.fullyQualifiedEntityName $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().delete($argumentName);
    }

#if ($hibernateUtils.xmlPersistenceActive)
    /**
     * @see ${entity.fullyQualifiedDaoName}#remove(org.dom4j.Element)
     */
    public void remove(final org.dom4j.Element $argumentName)
    {
        if ($argumentName == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '$argumentName' can not be null");
        }
        this.getHibernateTemplate().${executeWithNativeSessionMethodname}(
                new org.springframework.orm.hibernate3.HibernateCallback()
                {
                    public java.lang.Object doInHibernate(${hibernateUtils.basePackage}.Session hibernateSession)
                        throws ${hibernateUtils.basePackage}.HibernateException
                    {
                        ${hibernateUtils.basePackage}.Session xmlSession = hibernateSession.getSession(${hibernateUtils.basePackage}.EntityMode.DOM4J);
                        xmlSession.delete($argumentName);
                        return null;
                    }
                }${executeWithNativeSessionParameter});
    }

#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#remove(${identifierTypeName})
     */
    public void remove(${identifierTypeName} ${identifierName})
    {
#set ($argument = ${identifierName})
#if($identifierTypePrimitive)
#set ($argument = "new ${identifierTypeWrapperName}(${identifierName})")
#else
        if ($argument == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - '${identifierName}' can not be null");
        }
#end
#set ($loadCall = "this.load(${identifierName})")
#if ($entity.generalization && $daoInheritance)
#set ($loadCall = "($entity.fullyQualifiedEntityName)${loadCall}")
#end
        $entity.fullyQualifiedEntityName entity = $loadCall;
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see ${rootDaoType}#remove($entityCollectionType)
     */
    public void remove($entityCollectionType entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "${entity.name}.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
##
## With daoInheritance disabled, only generate the finder methods defined on this entity; do NOT
## include those defined on any of the super-entities.
##
#if ($daoInheritance)
#set ($queryOperations = $entity.getQueryOperations(true))
#else
#set ($queryOperations = $entity.queryOperations)
#end
##
#foreach ($finder in $queryOperations)
#set ($returnType = "${finder.returnType.fullyQualifiedName}#if($enableTemplating && $finder.returnType.collectionType)<${entity.fullyQualifiedEntityName}>#end")
    /**
     * @see ${entity.fullyQualifiedDaoName}#$finder.getSignature(false)
     */
#if ($enableTemplating && $finder.returnType.collectionType)
    @java.lang.SuppressWarnings({"unchecked"})
#end
    $finder.visibility $returnType $finder.signature
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if (!$finder.returnType.collectionType || ($enableTemplating && $finder.returnType.collectionType))
#set ($finderCall = "($returnType)$finderCall")
#end
        return $finderCall
    }

#if ($finder.returnType.collectionType || !$finder.criteriaFinder)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($finder.returnType.collectionType)
#if($enableTemplating)
#set ($returnType = "${finder.returnType.fullyQualifiedName}<?>")
#end
#else
#set ($returnType = "java.lang.Object")
#end
    $finder.visibility $returnType ${finder.name}(final int transform#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#if ($finder.returnType.collectionType)
        return this.${finder.name}(transform, -1, -1#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
#else
        return this.${finder.name}(transform, "$finder.getQuery($entity)"#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
#end
    }
#end

#set ($returnType = "${finder.returnType.fullyQualifiedName}#if($enableTemplating && $finder.returnType.collectionType)<${entity.fullyQualifiedEntityName}>#end")
#if(!$finder.criteriaFinder)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(java.lang.String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($enableTemplating && $finder.returnType.collectionType)
    @java.lang.SuppressWarnings({"unchecked"})
#end
    $finder.visibility $returnType ${finder.name}(final java.lang.String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set ($finderCall = "this.${finder.name}($entity.daoNoTransformationConstantName, queryString#if(!$finder.arguments.empty), ${finder.argumentNames}#end);")
#if (!$finder.returnType.collectionType || ($enableTemplating && $finder.returnType.collectionType))
#set ($finderCall = "($returnType)$finderCall")
#end
        return $finderCall
    }

#if ($finder.returnType.collectionType)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int, int#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings({"unchecked"})
#end
    $finder.visibility $returnType ${finder.name}(final int pageNumber, final int pageSize#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        return#if($enableTemplating) ($returnType)#end this.${finder.name}($entity.daoNoTransformationConstantName, pageNumber, pageSize#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(String, int, int#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings({"unchecked"})
#end
    $finder.visibility $returnType ${finder.name}(final String queryString, final int pageNumber, final int pageSize#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        return#if($enableTemplating) ($returnType)#end this.${finder.name}($entity.daoNoTransformationConstantName, queryString, pageNumber, pageSize#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    }

#if($enableTemplating)
#set ($returnType = "${finder.returnType.fullyQualifiedName}<?>")
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int, String#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(final int transform, final String queryString#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        return this.${finder.name}(transform, queryString, -1, -1#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int, int, int#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
    $finder.visibility $returnType ${finder.name}(final int transform, final int pageNumber, final int pageSize#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        return this.${finder.name}(transform, "$finder.getQuery($entity)", pageNumber, pageSize#if(!$finder.arguments.empty), ${finder.argumentNames}#end);
    }

#else
#set ($returnType = "java.lang.Object")
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int, java.lang.String#if ($finder.returnType.collectionType), int, int#end#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings("unchecked")
#end
    $finder.visibility $returnType ${finder.name}(final int transform, final java.lang.String queryString#if ($finder.returnType.collectionType), int pageNumber, int pageSize#end#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
        try
        {
            ${hibernateUtils.basePackage}.Query queryObject = super.getSession(false).createQuery(queryString);
#foreach($argument in $finder.arguments)
#set ($count = $velocityCount - 1)
#set ($setParameterOperation = "setParameter")
#if ($argument.type.collectionType || $argument.type.arrayType)
#set ($setParameterOperation = "${setParameterOperation}List")
#end
#if ($useNamedParametersInQueries || $finder.useNamedParameters || $argument.type.collectionType || $argument.type.arrayType)
#if (!$argument.type.embeddedValue)
            queryObject.${setParameterOperation}("$argument.name", $springUtils.formatHibernateQueryParameterValue($argument.type, $argument.name));
#else
#foreach ($attribute in $argument.type.getAttributes(true))
#set ($parameterValue = "${argument.name}.${attribute.getterName}()")
            queryObject.${setParameterOperation}("$springUtils.concatNamesCamelCase([$argument.name, $attribute.name])", $springUtils.formatHibernateQueryParameterValue($attribute.type, $parameterValue));
#end
#end
#else
#if (!$argument.type.embeddedValue)
            queryObject.${setParameterOperation}($count, $springUtils.formatHibernateQueryParameterValue($argument.type, $argument.name));
#else
#foreach ($attribute in $argument.type.getAttributes(true))
#set ($parameterValue = "${argument.name}.${attribute.getterName}()")
#set ($count = $count + $velocityCount - 1)
            queryObject.${setParameterOperation}($count, $springUtils.formatHibernateQueryParameterValue($attribute, $parameterValue));
#end
#end
#end
#end
#if ($finder.returnType.collectionType)
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
#end
#if ($finder.returnType.setType || !$finder.returnType.collectionType)
            java.util.Set results = new java.util.LinkedHashSet(queryObject.list());
#else
            java.util.List results = queryObject.list();
#end
#if (!$finder.returnType.collectionType)
            java.lang.Object result = null;
            if (results != null)
            {
                if (results.size() > 1)
                {
                    throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
                        "More than one instance of '${finder.returnType.fullyQualifiedName}"
                            + "' was found when executing query --> '" + queryString + "'");
                }
                else if (results.size() == 1)
                {
                    result = results.iterator().next();
                }
            }
            if(transform != $entity.daoNoTransformationConstantName){ ##with this test we can use queries returning other types than collections or the entity
            	result = transformEntity(transform, ($entity.fullyQualifiedName)result);
            }
            return result;
#else
            transformEntities(transform, results);
            return results;
#end
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
#else
#if($finder.returnType.collectionType)
#set ($returnType = "${finder.returnType.fullyQualifiedName}#if($enableTemplating)<?>#end")
#else
#set ($returnType = "java.lang.Object")
#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#${finder.name}(int, java.lang.String#if ($finder.returnType.collectionType), int, int#end#if(!$finder.arguments.empty), ${finder.argumentTypeNames}#end)
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings("unchecked")
#end
    $finder.visibility $returnType ${finder.name}(final int transform#if ($finder.returnType.collectionType), final int pageNumber, final int pageSize#end#if(!$finder.arguments.empty), ${finder.getTypedArgumentList('final')}#end)
#if ($finder.exceptionsPresent)
        throws $finder.exceptionList
#end
    {
#set($criteriaArgument = $finder.criteriaArgument)
#set($criteriaArgumentName = $criteriaArgument.name)
        try
        {
            ${springTypesPackage}.${criteriaSearchBaseName} criteriaSearch = new ${springTypesPackage}.${criteriaSearchBaseName}(super.getSession(false), ${entity.fullyQualifiedEntityImplementationName}.class);
            criteriaSearch.getConfiguration().setFirstResult(${criteriaArgumentName}.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(${criteriaArgumentName}.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(${criteriaArgumentName}.getMaximumResultSize());
#if ($finder.returnType.collectionType)
            if (pageNumber > 0 && pageSize > 0)
            {
                criteriaSearch.getConfiguration().setFirstResult(new java.lang.Integer(calculateFirstResult(pageNumber, pageSize)));
                criteriaSearch.getConfiguration().setMaximumResultSize(new java.lang.Integer(pageSize));
            }
#end
#set($criteriaClass = $criteriaArgument.type)
#foreach($criteriaAttribute in $criteriaClass.getAttributes(true))
#if($criteriaAttribute.matchModePresent)
#set($matchModeArgument = ", ${hibernateUtils.criterionPackage}.MatchMode.${criteriaAttribute.matchModeConstant}")
#else
#set($matchModeArgument = "")
#end
#if($criteriaAttribute.nullable)
#set($nullableArgument = ", true")
#else
#set($nullableArgument = "")
#end
#if($criteriaAttribute.comparatorPresent)
#set($comparatorArgument = ", ${springTypesPackage}.${criteriaSearchBaseName}Parameter.${criteriaAttribute.comparatorConstant}")
#else
#set($comparatorArgument = "")
#end
#set ($parameterName = "parameter${velocityCount}")
            ${springTypesPackage}.${criteriaSearchBaseName}Parameter $parameterName =
                new ${springTypesPackage}.${criteriaSearchBaseName}Parameter(
                    ${criteriaArgumentName}.${criteriaAttribute.getterName}(),
                    "${criteriaAttribute.attributeName}"${nullableArgument}${comparatorArgument}${matchModeArgument});
#if($criteriaAttribute.orderable)
            ${parameterName}.setOrderDirection(${springTypesPackage}.${criteriaSearchBaseName}Parameter.$criteriaAttribute.orderDirection);
            ${parameterName}.setOrderRelevance($criteriaAttribute.orderRelevance);
#end
            criteriaSearch.addParameter($parameterName);
#end
#if ($finder.returnType.setType)
            java.util.Set results = criteriaSearch.executeAsSet();
#else
            java.util.List results = criteriaSearch.executeAsList();
#end
#if($finder.returnType.collectionType)
            transformEntities(transform, results);
            return results;
#else
            switch(results.size()){
                case 0: return null;
                case 1: return transformEntity(transform, ($entity.fullyQualifiedName)results.iterator().next());
                default: throw new org.hibernate.NonUniqueResultException(results.size());
            }
#end
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
#end

#end
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${operation.getSignature(false)}
     */
    $operation.visibility $returnType.fullyQualifiedName#if($enableTemplating && $returnType.collectionType)<?>#end ${operation.name}(${operation.getTypedArgumentList('final')})
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
#if ($requiredCheckEnabled)
#foreach ($argument in $operation.arguments)
#if ($argument.required && !$argument.type.primitive)
        if ($argument.name == null)
        {
            throw new IllegalArgumentException(
                "${entity.fullyQualifiedDaoName}.${operation.signature} - '${argument.name}' can not be null");
        }
#end
#end
#end
        try
        {
#set ($call = "this.${operation.implementationCall};")
#if ($operation.returnTypePresent)
            return $call
#else
            $call
#end
        }
#foreach($exception in $operation.exceptions)
        catch ($exception.fullyQualifiedName ex)
        {
            throw ex;
        }
#end
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing '${entity.fullyQualifiedDaoName}.${operation.signature}' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #${operation.getSignature(false)}}
      */
    protected abstract $operation.returnType.fullyQualifiedName#if($enableTemplating && $operation.returnType.collectionType)<?>#end $operation.implementationSignature
        throws java.lang.Exception;

#end
    /**
     * @see ${entity.fullyQualifiedDaoName}#transformEntity(int, $entity.fullyQualifiedName)
     */
    public java.lang.Object transformEntity(final int transform, final $entity.fullyQualifiedName entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
## With daoInheritance disabled, only refer to transformation methods defined on this entity
#if($daoInheritance)
#set($transformReferences = $entity.allValueObjectReferences)
#else
#set($transformReferences = $entity.valueObjectReferences)
#end
#foreach ($valueObjectRef in $transformReferences)
                case ${valueObjectRef.transformationConstantName} :
                    target = ${valueObjectRef.transformationMethodName}(entity);
                    break;
#end
                case $entity.daoNoTransformationConstantName : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#transformEntities(int, java.util.Collection#if($enableTemplating)<?>#end)
     */
    public void transformEntities(final int transform, final java.util.Collection#if($enableTemplating)<?>#end entities)
    {
        switch (transform)
        {
#foreach ($valueObjectRef in $transformReferences)
            case ${valueObjectRef.transformationConstantName} :
                ${valueObjectRef.transformationToCollectionMethodName}(entities);
                break;
#end
            case $entity.daoNoTransformationConstantName : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection#if($enableTemplating)<?>#end results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link ${entity.fullyQualifiedEntityName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof $entity.fullyQualifiedEntityName)
                {
                    result = input;
                }
                return result;
            }
        };

    protected $entity.fullyQualifiedEntityName toEntity(java.lang.Object[] row)
    {
        $entity.fullyQualifiedEntityName target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof $entity.fullyQualifiedEntityName)
                {
                    target = ($entity.fullyQualifiedEntityName)object;
                    break;
                }
            }
        }
        return target;
    }

#foreach ($valueObjectRef in $entity.valueObjectReferences)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection)
     */
    public final void ${valueObjectRef.transformationToCollectionMethodName}(java.util.Collection#if($enableTemplating)<?>#end entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, ${valueObjectRef.transformationAnonymousName});
        }
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToArrayMethodName}(java.util.Collection)
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings("unchecked")
#end
    public final ${valueObjectRef.targetElement.fullyQualifiedName}[] ${valueObjectRef.transformationToArrayMethodName}(java.util.Collection#if($enableTemplating)<?>#end entities)
    {
        ${valueObjectRef.targetElement.fullyQualifiedName}[] result = null;
        if (entities != null)
        {
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.${valueObjectRef.transformationToCollectionMethodName}(collection);
            result = (${valueObjectRef.targetElement.fullyQualifiedName}[]) collection.toArray(new ${valueObjectRef.targetElement.fullyQualifiedName}[0]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link $entity.daoImplementationName} class if you intend to use reporting queries.
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
     */
    protected $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(java.lang.Object[] row)
    {
        return this.${valueObjectRef.transformationMethodName}(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link ${valueObjectRef.targetElement.fullyQualifiedName}}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer $valueObjectRef.transformationAnonymousName =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof $entity.fullyQualifiedEntityName)
                {
                    result = ${valueObjectRef.transformationMethodName}(($entity.fullyQualifiedEntityName)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = ${valueObjectRef.transformationMethodName}((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection)
     */
    public final void ${valueObjectRef.transformationToEntityCollectionMethodName}(java.util.Collection#if($enableTemplating)<?>#end instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator#if($enableTemplating)<?>#end iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof $valueObjectRef.targetElement.fullyQualifiedName))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, $valueObjectRef.valueObjectToEntityTransformerName);
        }
    }

    private final org.apache.commons.collections.Transformer $valueObjectRef.valueObjectToEntityTransformerName =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return ${valueObjectRef.transformationToEntityMethodName}(($valueObjectRef.targetElement.fullyQualifiedName)input);
            }
        };


    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName, $valueObjectRef.targetElement.fullyQualifiedName)
     */
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName source,
        $valueObjectRef.targetElement.fullyQualifiedName target)
    {
#set ($entityProperties = $entity.allProperties)
#foreach ($property in $valueObjectRef.targetElement.allProperties)
#* *##foreach ($entityProperty in $entityProperties)
#*    *##if ($property.name.equals($entityProperty.name) && (!$entity.compositeIdentifier || !$entityProperty.identifier))
#*        *##set ($entityPropertyGetterValue = false)
#*        *##set ($entityPropertyGetterValue = $converter.typeConvert($entityProperty.type.fullyQualifiedName, "source.${entityProperty.getterName}()", $property.type.fullyQualifiedName))
#*        *##if ($entityPropertyGetterValue)
        target.${property.setterName}($entityPropertyGetterValue);
#*        *##else
        // No conversion for target.${property.name} (can't convert source.${entityProperty.getterName}():${entityProperty.type.fullyQualifiedName} to $property.type.fullyQualifiedName)
#*        *##end
#*    *##end
#* *##end
#end
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
     */
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(final $entity.fullyQualifiedName entity)
    {
        $valueObjectRef.targetElement.fullyQualifiedName target = null;
        if (entity != null)
        {
            target = new ${valueObjectRef.targetElement.fullyQualifiedName}();
            this.${valueObjectRef.transformationMethodName}(entity, target);
        }
        return target;
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName, $entity.fullyQualifiedEntityName)
     */
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName source,
        $entity.fullyQualifiedEntityName target,
        boolean copyIfNull)
    {
#set ($entityAttributes = $entity.getAttributes(true, $entity.usingAssignedIdentifier))
#foreach ($entityProperty in $entityAttributes)
#* *##if (!$entityProperty.readOnly)
#*    *##foreach ($property in $valueObjectRef.targetElement.allProperties)
#*        *##if ($property.name.equals($entityProperty.name) && (!$entity.compositeIdentifier || !$entityProperty.identifier))
#*            *##set ($propertyGetterValue = false)
#*            *##set ($propertyGetterValue = $converter.typeConvert($property.type.fullyQualifiedName, "source.${property.getterName}()", $entityProperty.type.fullyQualifiedName))
#*            *##if ($propertyGetterValue)
        if (copyIfNull || source.${property.getterName}() != $property.type.javaNullString)
        {
            target.${entityProperty.setterName}($propertyGetterValue);
        }
#*            *##else
        // No conversion for target.${entityProperty.name} (can't convert source.${property.getterName}():${property.type.fullyQualifiedName} to $entityProperty.type.fullyQualifiedName)
#*            *##end
#*        *##end
#*    *##end
#**##end
#end
    }

#end
    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
#if ($externalPrincipalStoreClass)
#* *##set ($principalStoreCall = "#if(!$enableTemplating)(${externalPrincipalStoreGetterType})#end${externalPrincipalStoreClass}.${externalPrincipalStoreGetter};")
#* *##set ($principalStoreType = ${externalPrincipalStoreGetterType})
#else
#* *##set ($principalStoreCall = "${principalStoreName}.get();")
#* *##if($stringUtils.isNotEmpty($springTypesPackage))
#*     *##set ($principalStoreCall = "${springTypesPackage}.${principalStoreCall}")
#* *##end
#* *##set ($principalStoreType = "java.security.Principal")
#end
    protected $principalStoreType getPrincipal()
    {
        return $principalStoreCall
    }

#set ($fullyQualifiedPagingResultName = $springUtils.getFullyQualifiedClassName($springCommonTypesPackage, "PaginationResult"))
#set ($fullyQualifiedSearchClassName = $springUtils.getFullyQualifiedClassName($springTypesPackage, "Search"))
#set ($fullyQualifiedPropertySearchClassName = $springUtils.getFullyQualifiedClassName($springTypesPackage, "PropertySearch"))
    /**
     * @see ${entity.fullyQualifiedDaoName}#search(int, int, int, $fullyQualifiedSearchClassName)
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings("unchecked")
#end
    public $fullyQualifiedPagingResultName search(final int transform, final int pageNumber, final int pageSize, final $fullyQualifiedSearchClassName search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final $fullyQualifiedPropertySearchClassName propertySearch = new $fullyQualifiedPropertySearchClassName(
                this.getSession(false), ${entity.fullyQualifiedEntityImplementationName}.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new $fullyQualifiedPagingResultName(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#search(int, int, $fullyQualifiedSearchClassName)
     */
    public $fullyQualifiedPagingResultName search(final int pageNumber, final int pageSize, final $fullyQualifiedSearchClassName search)
    {
        return this.search($entity.daoNoTransformationConstantName, pageNumber, pageSize, search);
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#search(int, $fullyQualifiedSearchClassName)
     */
    public java.util.Set#if($enableTemplating)<?>#end search(final int transform, final $fullyQualifiedSearchClassName search)
    {
        try
        {
            final $fullyQualifiedPropertySearchClassName propertySearch = new $fullyQualifiedPropertySearchClassName(
                this.getSession(false), ${entity.fullyQualifiedEntityImplementationName}.class, search);
            final#if($enableTemplating) java.util.Set<?>#else java.util.Set#end results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see ${entity.fullyQualifiedDaoName}#search($fullyQualifiedSearchClassName)
     */
#if ($enableTemplating)
    @java.lang.SuppressWarnings("unchecked")
#end
    public java.util.Set#if($enableTemplating)<#if($daoInheritance)? extends #end${rootEntityType}>#end search(final $fullyQualifiedSearchClassName search)
    {
        return#if($enableTemplating) (java.util.Set<#if($daoInheritance)? extends #end${rootEntityType}>)#end this.search($entity.daoNoTransformationConstantName, search);
    }

#if ($enableTemplating)
    @java.lang.SuppressWarnings("unchecked")
#end
   /**
    * Executes and returns the given Hibernate queryObject as a {@link $fullyQualifiedPagingResultName} instance.
    */
    protected $fullyQualifiedPagingResultName getPaginationResult(
        final ${hibernateUtils.basePackage}.Query queryObject,
        final int transform, int pageNumber, int pageSize)
    {
        try
        {
            final int totalCount = queryObject.list().size();
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.Set results = new java.util.LinkedHashSet(queryObject.list());
            transformEntities(transform, results);
            return new ${fullyQualifiedPagingResultName}(results.toArray(new java.lang.Object[0]), totalCount);
        }
        catch (${hibernateUtils.basePackage}.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    // spring-hibernate-dao-base merge-point
}