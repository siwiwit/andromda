#if ($stringUtils.isNotBlank($view.packageName))
package $view.packageName;
#end

import java.io.IOException;

import javax.faces.FactoryFinder;
import javax.faces.context.FacesContext;
import javax.faces.context.FacesContextFactory;
import javax.faces.lifecycle.Lifecycle;
import javax.faces.lifecycle.LifecycleFactory;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

/**
 * This filter handles the population of forms for the <em>$view.name</code>
 * view.
 */
public class $view.populator
    implements Filter
{

    private FilterConfig config;

    /**
     * Initialize the filter
     * 
     * @param config the configuration
     * @see javax.servlet.Filter#setFilterConfig(FilterConfig)
     */
    public void init(FilterConfig config)
    {
        this.config = config;
    }

    /**
     * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,
     *      javax.servlet.ServletResponse, javax.servlet.FilterChain)
     */
    public void doFilter(
        ServletRequest request,
        ServletResponse response,
        FilterChain chain) throws IOException, ServletException
    {
        this.populateFormAndViewVariables(request, response, null);
        chain.doFilter(request, response);
    }
    
    private void populateFormAndViewVariables(final ServletRequest request, final ServletResponse response, Object form)
        throws ServletException
    {
        // - we need to retrieve the faces context differently since we're outside of the
        //   faces servlet
        final LifecycleFactory lifecycleFactory =
            (LifecycleFactory)FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);
        final Lifecycle lifecycle = lifecycleFactory.getLifecycle(LifecycleFactory.DEFAULT_LIFECYCLE);
        final FacesContextFactory facesContextFactory =
            (FacesContextFactory)FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);
        final FacesContext facesContext =
            facesContextFactory.getFacesContext(
                this.config.getServletContext(),
                request,
                response,
                lifecycle);
                
        oracle.adf.view.faces.context.AdfFacesContext adfContext = oracle.adf.view.faces.context.AdfFacesContext.getCurrentInstance();
        final javax.faces.el.VariableResolver variableResolver = facesContext.getApplication().getVariableResolver();
        final javax.servlet.http.HttpSession session = ((javax.servlet.http.HttpServletRequest)request).getSession();
        if (form == null)
        {  
            // - first try getting the form from the ADF processScope
            form = adfContext.getProcessScope().get("$view.formKey");
            // - if the form is null, try getting the current adfContext from the session (and then remove it from the session)
            if (form == null)
            {
                final ${managedBeansPackage}.AdfFacesContextWrapper contextWrapper = 
                    (${managedBeansPackage}.AdfFacesContextWrapper)session.getAttribute("$adfContextAttributeName");
                adfContext = contextWrapper != null ? contextWrapper.getCurrentInstance() : null;    
                form = adfContext != null ? adfContext.getProcessScope().get("$view.formKey") : null;   
#if ($formSerialization) 
                // - if the form is still null, see if we can get it from a serialized state
                if (form == null)
                {
                    form = this.getSerializedForm(session);
                }
#end
                if (form != null)
                {
                    // - add the form to the current process scope since it wasn't in the current one to begin with
                    oracle.adf.view.faces.context.AdfFacesContext.getCurrentInstance().getProcessScope().put("$view.formKey", form);   
                }
            }
            else
            {
                // - remove the ADF context in the event that its present
                session.removeAttribute("AndroMDAADFContext");
            }
        }
        else
        {
            // - since the form argument is not null, set it as the "$view.formKey" in the processScope 
            //   (to replace the existing "$view.formKey" attribute)
            adfContext.getProcessScope().put("$view.formKey", form);
        }
        try
        {
#if (!$view.formActions.empty)
            // - populate the forms
            if (form != null)
            {    
#foreach ($action in $view.formActions) 
                $action.fullyQualifiedFormImplementationName $action.formBeanName =
                    ($action.fullyQualifiedFormImplementationName)variableResolver.resolveVariable(
                    facesContext,
                    "$action.formBeanName");
                // - populate the $action.formBeanName with any parameters from the previous form
                ${managedBeansPackage}.${formPopulatorName}.populateForm(form, $action.formBeanName);
                request.setAttribute("$action.formBeanName", $action.formBeanName);
#end
            }
#end
#if ($formSerialization)
            // - serialize the form
            if (form != null)
            {
                this.serializeForm(session, form);
            }
#end
#if (!$view.variables.empty || !$view.backingValueVariables.empty)
            // - populate the view variables
            if (form != null)
            {    
#foreach ($variable in $view.variables)
#set ($readableVariable = "${variable.name}Readable")
                final boolean $readableVariable = org.apache.commons.beanutils.PropertyUtils.isReadable(form, "$variable.name");
                if ($readableVariable)
                {
                    request.setAttribute("$variable.name", org.apache.commons.beanutils.PropertyUtils.getProperty(form, "$variable.name"));
                }
#end
#foreach ($variable in $view.backingValueVariables)
#if (!$variable.complex)
#renderBackingValuePopulation($variable "")
#end
#foreach ($attribute in $variable.attributes)
#if ($attribute.isSelectable($variable) || $attribute.isBackingValueRequired($variable))
#renderBackingValuePopulation($attribute $variable)
#end
#end
#end
            }
#end
        }
        catch (final Throwable throwable)
        {
            throw new ServletException(throwable);
        }
    }
#if ($formSerialization)

    /**
     * Attempts to serialize the given <code>form</code> to disk so that it
     * can later be retrieved when the user's session times out.
     * @param session the session from which to create the serialization path.
     * @param form the form to serialize.
     */
    private void serializeForm(final javax.servlet.http.HttpSession session, final Object form)
    {
        try
        {
            final java.io.File serializationFile = new java.io.File(this.getFormSerializationPath(session));
            final java.io.File parent = serializationFile.getParentFile();
            if (parent != null)
            {
                parent.mkdirs();
            }
            final java.io.FileOutputStream fileStream = new java.io.FileOutputStream(serializationFile.toString());
            final java.io.ObjectOutputStream objectStream = new java.io.ObjectOutputStream(fileStream);
            objectStream.writeObject(form);
            objectStream.close();
        }
        catch (final Exception exception)
        {
            exception.printStackTrace();
        }
    }
    
    /**
     * Retrieves the current serialized form for the given session.
     * @param session the session.
     * @return the serialized form.
     * @throws Exception
     */
    private Object getSerializedForm(final javax.servlet.http.HttpSession session)
    {
        Object form = null;
        try
        {
            java.io.FileInputStream fileStream = new java.io.FileInputStream(this.getFormSerializationPath(session));
            java.io.ObjectInputStream objectStream = new java.io.ObjectInputStream(fileStream);
            form = objectStream.readObject();
            objectStream.close();
        }
        catch (java.io.FileNotFoundException exception)
        {
            // - ignore, just means the serialized form isn't present
        }
        catch (final Exception exception)
        {
            exception.printStackTrace();
        }
        return form;
    }
    
    /**
     * The name of the file storing the serialized form.
     */
    private static final String SERIALIZED_FORM_FILE_NAME = "/form.ser";

    /**
     * Retrieves the path in which the serialized form will be stored.
     * @param session the session containing the unique id in which to create the path.
     * @return the path to which serialization occurs.
     */
    private String getFormSerializationPath(final javax.servlet.http.HttpSession session)
    {
        return ${managedBeansPackage}.Constants.TEMPORARY_DIRECTORY + session.getId() + SERIALIZED_FORM_FILE_NAME;
    }
#end

    /**
     * @see javax.servlet.Filter#destroy()
     */
    public void destroy()
    {
        this.config = null;
    }
}