#set ($generatedFile = "${action.fullyQualifiedFormImplementationPath}.java")
// license-header java merge-point
package $action.packageName;

/**
$action.getDocumentation(" * ")
 */
public class $action.formImplementationName
    implements java.io.Serializable#if ($stringUtils.isNotBlank($action.formImplementationInterfaceList)), $action.formImplementationInterfaceList#end

{
    public ${action.formImplementationName}()
    {
#foreach ($field in $action.formFields)
#if (!$field.complex)
#renderDateTimeFormatters($field "")
#end
#foreach ($attribute in $field.attributes)
#renderDateTimeFormatters($attribute $field)
#end
#end
        // - setup the default java.util.Date.toString() formatter
        java.text.DateFormat dateFormatter = new java.text.SimpleDateFormat("EEE MMM dd hh:mm:ss zzz yyyy");
        dateFormatter.setLenient(true);
        this.dateTimeFormatters.put(null, dateFormatter);
    }
#foreach ($field in $action.formFields)

#if ($field.type.collectionType)
#set ($fieldTypeName = "java.util.List")
#elseif ($field.type.fileType)
#set ($fieldTypeName = "$fileTypeName")
#else
#set ($fieldTypeName = $field.type.fullyQualifiedName)
#end
    private $fieldTypeName $field.name#if ($field.defaultValuePresent) = $field.defaultValue#end;

    /**
$field.getDocumentation("     * ")
     */
    public $fieldTypeName ${field.getterName}()
    {
#if ($field.type.collectionType || $field.type.arrayType)
#set ($upperCaseFieldName = $stringUtils.capitalize($field.name))
        if (this.$field.name != null)
        {
#if ($field.type.arrayType)
            this.$field.name = ($field.type.fullyQualifiedName)${managedBeansPackage}.CollectionSorter.sort(
                java.util.Arrays.asList(this.$field.name),
                this.get${stringUtils.capitalize($field.tableSortColumnProperty)}(),
                this.is${upperCaseFieldName}SortAscending()).toArray(new ${field.type.fullyQualifiedName}{});
#else
            this.$field.name = ${managedBeansPackage}.CollectionSorter.sort(
                this.$field.name,
                this.get${stringUtils.capitalize($field.tableSortColumnProperty)}(),
                this.is${upperCaseFieldName}SortAscending());
#end
        }
        return this.$field.name;
#else
#if ($field.complex)
        if (this.$field.name == null)
        {
            this.$field.name = new ${field.type.fullyQualifiedName}();
        }
#end
        return this.${field.name};
#end
    }

    /**
     * Keeps track of whether or not the value of $field.name has
     * be populated at least once.
     */
    private boolean $field.formAttributeSetProperty = false;

    /**
     * Indicates whether or not the value for $field.name has been set at least
     * once.
     *
     * @return true/false
     */
    public boolean is${stringUtils.capitalize($field.formAttributeSetProperty)}()
    {
        return this.$field.formAttributeSetProperty;
    }

    /**
$field.getDocumentation("     * ")
     */
    public void ${field.setterName}($fieldTypeName $field.name)
    {
        this.$field.name = $field.name;
        this.$field.formAttributeSetProperty = true;
    }
#if ($field.type.collectionType || $field.type.arrayType)

    /**
     * The name of the sort column for the {@link #${field.name}} collection.
     */
    private String $field.tableSortColumnProperty;

    /**
     * Gets the name of the sort column for the {@link #${field.name}} collection.
     *
     * @return the name of the sort column.
     */
    public String get${stringUtils.capitalize($field.tableSortColumnProperty)}()
    {
        return this.$field.tableSortColumnProperty;
    }

    /**
     * Sets the name of the {@link #${field.name}} sort column.
     *
     * @param $field.tableSortColumnProperty the name of the column by which {@link #${field.name}}
     *        are sorted by.
     */
    public void set${stringUtils.capitalize($field.tableSortColumnProperty)}(final String $field.tableSortColumnProperty)
    {
        this.$field.tableSortColumnProperty = $field.tableSortColumnProperty;
    }

    /**
     * The flag indicating whether or not {@link #${field.name}} should be sorted
     * ascending.
     */
    private boolean $field.tableSortAscendingProperty = false;

    /**
     * Indicates whether or not {@link #${field.name}} should be sorted ascending
     * or not.
     *
     * @return true/false
     */
    public boolean is${stringUtils.capitalize($field.tableSortAscendingProperty)}()
    {
        return this.$field.tableSortAscendingProperty;
    }

    /**
     * Sets whether or not {@link #${field.name}} should be sorted ascending.
     *
     * @param $field.tableSortAscendingProperty true/false
     */
    public void set${stringUtils.capitalize($field.tableSortAscendingProperty)}(final boolean $field.tableSortAscendingProperty)
    {
        this.$field.tableSortAscendingProperty = $field.tableSortAscendingProperty;
    }
#end
#if (!$field.complex && !$field.defaultValuePresent)
#renderBackingListImplSupport($field "")
#end
#foreach ($attribute in $field.attributes)
#renderBackingListImplSupport($attribute $field)
#end

#end
#if ($action.formResetRequired)

    /**
     * Resets any fields of the form that need to be reset.
     */
    public void reset()
    {
#foreach($field in $action.parameters)
#if ($field.reset)
        this.$field.name = $field.type.javaNullString;
#end
#end
    }

#end
    /**
     * Stores any date or time formatters for this form.
     */
    private final java.util.Map dateTimeFormatters = new java.util.HashMap();

    /**
     * Gets any date and time formatters (keyed by property name)
     * for this form.
     *
     * @return the Map containing any date and time formatters.
     */
    public java.util.Map getDateTimeFormatters()
    {
        return this.dateTimeFormatters;
    }
    
    /**
     * The current collection of messages stored within this form.
     */
    private java.util.Collection $formMessagesProperty = new java.util.ArrayList();;
    
    /**
     * Adds a {@link javax.faces.application.FacesMessage} message to the current messages
     * stored within this form.
     * 
     * @param jsfMessage the faces message to add.
     */
    public void add${stringUtils.capitalize($formMessagesProperty)}(javax.faces.application.FacesMessage jsfMessage)
    {
        this.${formMessagesProperty}.add(jsfMessage);
    }
    
    /**
     * Gets the current {@link javax.faces.application.FacesMessage} message 
     * instances stored within this form.
     * 
     * @return the current Faces messages.
     */
    public java.util.Collection get${stringUtils.capitalize($formMessagesProperty)}()
    {
        return this.${formMessagesProperty};
    }

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${action.formSerialVersionUID}L;
}