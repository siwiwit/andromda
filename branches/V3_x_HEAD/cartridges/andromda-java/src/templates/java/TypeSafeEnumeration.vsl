// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: TypeSafeEnumeration.vsl in andromda-java-cartridge.
//
## -- start -- set the map and list types as template parameters if required
#set ($valuesTemplateType = "")
#set ($literalsTemplateType = "")
#set ($namesTemplateType = "")
#if($enableTemplating)
#if($enumeration.literalType.primitive)
#set ($valuesTemplateType = "<${enumeration.literalType.wrapperName}, ${enumeration.name}>")
#set ($literalsTemplateType = "<${enumeration.literalType.wrapperName}>")
#else
#set ($valuesTemplateType = "<${enumeration.literalType.fullyQualifiedName}, ${enumeration.name}>")
#set ($literalsTemplateType = "<${enumeration.literalType.fullyQualifiedName}>")
#end
#set ($namesTemplateType = "<java.lang.String>")
#end
#set ($hasMemberVariables = !(${enumeration.memberVariables.empty()}))
#set ($members = "")
##  -- end --
#if ($stringUtils.isNotBlank($enumeration.packageName))
package $enumeration.packageName;
#end

/**
$enumeration.getDocumentation(" * ")
 */
public enum $enumeration.name
#if ($serializable)
    implements java.io.Serializable
#end
{
#set ($nbLiterals = ${enumeration.literals.size()})
#set ($i = 0)
#foreach ($literal in $enumeration.literals)
#set ($i = $i + 1)
#if ($i == $nbLiterals)
#set ($separator = ";")
#else
#set ($separator = ",")
#end
#set ($literalParameters = ${literal.enumerationLiteralParameters})
#if ($hasMemberVariables && $stringUtils.isNotBlank($literalParameters))
#set ($arguments = "(${literal.enumerationLiteralParameters})")
#else
#set ($arguments = "")
#end
    $literal.name$arguments$separator //$literal.getDocumentation("")
#end

#set ($nbMembers = ${enumeration.memberVariables.size()})
#set ($i = 0)
#foreach ($member in $enumeration.memberVariables)
#set ($i = $i + 1)
#if ($i != $nbMembers)
#set ($separator = ", ")
#else
#set ($separator = "")
#end
#set ($members = "${members} ${member.type.fullyQualifiedName} ${member.name}${separator}")
	/**
$member.getDocumentation("     * ")	
	 */
	private ${member.type.fullyQualifiedName} $member.name;
	
#end

    /**
     * The default constructor allowing
     * super classes to access it.
     */
    private ${enumeration.name}(#if($hasMemberVariables)$members#end)
    {
#foreach ($member in $enumeration.memberVariables)
		this.${member.name} = ${member.name};
#end
    }

#foreach ($member in $enumeration.memberVariables)
	/**
$member.getDocumentation("     * ")	
	 */
	public $member.type.fullyQualifiedName ${member.getterName}()
	{
		return $member.name;
	}
	
#end

	/**
     * Retrieves an instance of $enumeration.name from <code>its name</code>.
     *
     * @param name the name to create the $enumeration.name from.
     * @return The enumeration literal named after the 'name' argument
     */
    public static $enumeration.name fromString(String name)
    {
		return ${enumeration.name}.valueOf(name);
	}
	
	/**
	 * This method is necessary to comply with DaoBase implementation.
	 * @return The name of this literal.
	 */
	public Object getValue()
	{
		return this.name();
	}
}
