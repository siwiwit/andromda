<?xml version="1.0" encoding="iso-8859-1"?>
<document>
    <properties>
        <author email="naresh@andromda.org">Naresh Bhatia</author>
        <title>Complete the TimeTracker Model</title>
    </properties>
    <body>
        <section name="Complete the TimeTracker Model">
            <p>
                In this section we will add the remaining functionality to the TimeTracker model.
                Since you now understand most of the important modeling concepts, we will give detailed
                instructions only when necessary. So roll up your sleeves and let's get started.
            </p>
        </section>

        <section name="Add Remaining Entities">
            <p>
                Open the Domain Objects diagram and add the remaining detail to it as shown below.
            </p>

            <p>
                <div align="center">
                    <img src="images/magicdraw/DomainObjects.jpg"/>
                </div>
            </p>

            <p>
                <ul>
                    <li><code>TimeAllocation</code> represents the period of time for which a person
                    worked on a specific task. This time period is specified using an
                    <code>EmbeddedValue</code> of type <code>TimePeriod</code>. An
                    <code>EmbeddedValue</code> is specified by marking the class with the
                    EmbeddedValue stereotype. Unlike entities, embedded values do not have a separate
                    identity in the database. They are embedded inside entity tables and are considered to be
                    part of the entity. Note that you must create the <code>TimePeriod</code> embedded value
                    before you can specify it as a type inside the <code>TimeAllocation</code> class.</li>

                    <li><code>Timecards</code> may contain several <code>TimeAllocations</code>.
                    A <code>Task</code> can also be associated with many <code>TimeAllocations</code>.</li>

                    <li>The <code>Timecard</code> end of the first association
                    is marked as a composite. This means that a <code>TimeAllocation</code>
                    cannot exist without a <code>Timecard</code>.</li>

                    <li>Since <code>TimeAllocation</code> is so tightly connected to
                    a <code>Timecard</code> we would like to use this fact to simplify our code.
                    When a timecard is saved, all the associated allocations should
                    be saved automatically. Similarly when an allocation is removed
                    from a timecard, it should be automatically deleted form the
                    database. This is specified by setting the <code>andromda-hibernate-cascade</code>
                    tagged value to <code>all-delete-orphan</code>. Follow the appropriate
                    link below to learn how to add a tagged value to the association end.
                    <p>
                        <a href="resources/uml-tools/argouml/create-tagged-value.html" target="_blank">ArgoUML</a>
                        <a href="resources/uml-tools/magicdraw/create-tagged-value.html" target="_blank">MagicDraw</a>
                    </p>
                    </li>
                </ul>
            </p>
        </section>

        <section name="Add Custom Behavior to Entities">
            <p>
                So far we have relied on the default behavior of entities as provided by AndroMDA.
                Every entity is generated as a Plain Old Java Object (POJO) along with a Data Access
                Object (DAO). Both these objects have default behaviors as implemented by the auto-generated
                methods. Let us see how we can instruct AndroMDA to provide hooks for injecting custom
                behavior. Create a new class diagram under the <code>domain</code> package and call it
                "Domain Objects - Behavior". We like to add behavioral details to classes in a separate
                diagram. This way class diagrams that show purely structural detail, such as the diagram
                shown above, are kept simple and easy to understand. Add the custom methods shown below
                in the new diagram you just created. Since <code>Person</code> and <code>Timecard</code>
                entities already exist in our model, they can be simply dragged on to this diagram.
                Then add the methods to the two entities.
            </p>

            <p>
                <div align="center">
                    <img src="images/magicdraw/DomainObjectsBehavior.jpg"/>
                </div>
            </p>

            <p>
                <ul>
                    <li>The <code>findByUsername()</code> method finds a person given their username.
                    The "@" sign in front of the method indicates that this is a query method.
                    Query methods are applicable when you are trying to find one or more entities
                    based on their attributes. The good news is that AndroMDA can completely implement
                    query methods without your help. It will generate the appropriate Hibernate
                    query and return the result as one or more objects depending on the return
                    type you specify.</li>
                </ul>

                <ul>
                    <li>As you know the association between <code>Timecard</code> and <code>TimeAllocation</code>
                    is navigable both ways. So each object must keep a reference to the other. <code>addTimeAllocation()</code>
                    is a convenience method that does just that - all in one shot. AndroMDA will generate
                    a blank implementation of this method in <code>TimecardImpl</code>. We will fill in
                    the details.</li>
                </ul>
            </p>

            <p>Now generate code for your modified model by executing the command <code>maven -o clean install</code>.
            Open the file <code>PersonDaoBase.java</code> under core/target/src/org/andromda/timetracker/domain. You
            will find that AndroMDA has completely implemented the <code>findByUsername()</code> method in this file.
            The Hibernate query that it generates is shown below.</p>

<source language="java">
public Object findByUsername(final int transform, final java.lang.String username)
{
    return this.findByUsername(
        transform,
        "from org.andromda.timetracker.domain.Person as person where person.username = :username", username);
}
</source>

            <p>Now let us complete the implementation of the <code>addTimeAllocation()</code> method.
            Open the file <code>TimecardImpl.java</code> under the src tree (core/src/java/org/andromda/timetracker/domain).
            Locate the dummy implementation of <code>addTimeAllocation()</code> and replace it with the one
            below. This implementation makes sure that <code>Timecard</code> and <code>TimeAllocation</code>
            both have references to each other.</p>

<source language="java">
public void addTimeAllocation(org.andromda.timetracker.domain.TimeAllocation timeAllocation)
{
    getAllocations().add(timeAllocation);
    timeAllocation.setTimecard(this);
}
</source>

            <p>Make sure your code compiles. All you need to do is to build the core package. You can do this
            by executing the command <code>maven -o core</code>.</p>
        </section>

        <section name="Add Remaining Value Objects">
            <p>
                Open the Value Objects diagram and add the remaining detail to it as shown below.
            </p>

            <p>
                <div align="center">
                    <img src="images/magicdraw/ValueObjects.jpg"/>
                </div>
            </p>

            <p>
                There is really nothing new here except that we are providing two views of the <code>Timecard</code>
                entity. The <code>TimecardSummaryVO</code> is very light and can be used to display lists of timecards.
                The <code>TimecardVO</code> is relatively heavier because it includes the contained <code>TimeAllocations</code>
                in addition to the <code>TimecardSummaryVO</code> attributes. This value object will be used when we want
                to show the details of an individual timecard. Note that <code>TimecardVO</code> inherits from
                <code>TimecardSummaryVO</code>, thus inheriting all of its attributes.
            </p>

            <p>Now generate code for your modified model by executing the command <code>maven -o clean install</code>.
            Make sure you get a <code>BUILD SUCCESSFUL</code> message.</p>
        </section>

        <section name="Add TimeTrackingService">
            <p>
                We will now add <code>TimeTrackingService</code> to the model. This service supports all time tracking
                operations that a front-end might use. Open the Services diagram and add <code>TimeTrackingService</code>
                to it as shown below.
            </p>

            <p>
                <div align="center">
                    <img src="images/magicdraw/Services.jpg"/>
                </div>
            </p>

            <p>Now generate code for your modified model by executing the command <code>maven -o clean install</code>.
            Make sure you get a <code>BUILD SUCCESSFUL</code> message.</p>
        </section>

        <section name="Create the Schema">
            <p>Now that the structure of our entities is pretty much finalized, we can create the corresponding
            schema in the database. As you may remember, AndroMDA automatically generates DDL for you. This DDL
            is located at C:/timetracker/core/target/schema-create.sql. Open this file and review its contents.
            You should see the SQL to create all the needed tables and constraints. Execute the command
            <code>maven -o create-schema</code> to create this schema in your database.

                <p class="highlight">
                    Note that PostgreSQL does not like the first statement in schema-create.sql (drop sequence hibernate_sequence).
                    Please comment out this line for PostgreSQL.
                </p>
            </p>
        </section>

        <section name="What's Next?">
            <p>
                We will now enhance the console application to create and read timecards using the <code>TimeTrackingService</code>.
                Click <a href="enhance-console-app.html">here</a> to enhance the console application.
            </p>
        </section>
    </body>
</document>
