#parse("templates/spring/SpringGlobals.vm")
#if (!$ejbsEnabled)
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class ${serviceLocatorName}
{
    /**
     * The default application context location.
     */
    private final String DEFAULT_BEAN_REFERENCE_LOCATION = "$beanRefFactory";

    /**
     * The bean factory reference location.
     */
    private String beanFactoryReferenceLocation;

    protected ${serviceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
     * The shared instance of this ${serviceLocatorName}.
     */
    private final static ${serviceLocatorName} instance = new ${serviceLocatorName}();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final ${serviceLocatorName} instance()
    {
        return instance;
    }

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param contextLocation the location of the context
     */
    public synchronized void init(String beanFactoryReferenceLocation)
    {
        this.beanFactoryReferenceLocation = beanFactoryReferenceLocation;
        this.beanFactoryReference = null;
    }

    /**
     * The bean factory reference instance.
     */
    private org.springframework.beans.factory.access.BeanFactoryReference beanFactoryReference;

    /**
     * Gets the Spring ApplicationContext.
     */
    protected synchronized org.springframework.context.ApplicationContext getContext()
    {
        if (this.beanFactoryReference == null)
        {
            if (this.beanFactoryReferenceLocation == null)
            {
                this.beanFactoryReferenceLocation = DEFAULT_BEAN_REFERENCE_LOCATION;
            }
            org.springframework.beans.factory.access.BeanFactoryLocator beanFactoryLocator =
                org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance(
                    this.beanFactoryReferenceLocation);
            this.beanFactoryReference = beanFactoryLocator.useBeanFactory("$beanRefFactoryId");
        }
        return (org.springframework.context.ApplicationContext)this.beanFactoryReference.getFactory();
    }
    
    /**
     * Shuts down the ${serviceLocatorName} and releases any used resources.
     */
    public synchronized void shutdown() 
    { 
        if (this.beanFactoryReference != null) 
        { 
            this.beanFactoryReference.release(); 
            this.beanFactoryReference = null;
        } 
    } 

#foreach ($service in $services)
    /**
     * Gets an instance of {@link $service.fullyQualifiedName}
     */
    public final ${service.fullyQualifiedName} get${service.name}()
    {
        return (${service.fullyQualifiedName})
            getContext().getBean("$service.beanName");
    }

#end
}
#end