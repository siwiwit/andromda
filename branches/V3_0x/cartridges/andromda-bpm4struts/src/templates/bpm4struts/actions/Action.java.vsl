#parse("templates/bpm4struts/actions/Action.java.vm")
#set ($generatedFile = "${action.fullActionPath}.java")
##
##  CONSTANTS
##
#set ($controllerClass = $action.controller)
#set ($formBeanClassName = $action.formBeanClassName)
#set ($roles = $action.actionRoles)
#set ($resettableActionParameters = $action.resettableActionParameters)
#set ($actionForwards = $action.actionForwards)
#set ($actionExceptions = $action.actionExceptions)
#set ($actionStates = $action.actionStates)
#set ($decisionTransitions = $action.decisionTransitions)
#set ($security = ($security=="true") && ($roles != "") )
##
##  MACROS
##
#macro (saveMessages $transition $indent)
#if ($transition.successMessagesPresent)
#foreach ($message in $transition.successMessages.entrySet())
${indent}${controllerClass.name}Factory.get${controllerClass.name}Instance().saveSuccessMessage(request, "$message.key");
#end
#end
#if ($transition.warningMessagesPresent)
#foreach ($message in $transition.warningMessages.entrySet())
${indent}${controllerClass.name}Factory.get${controllerClass.name}Instance().saveWarningMessage(request, "$message.key");
#end
#end
#end
##
##  START TEMPLATE
##
// license-header java merge-point
package $action.packageName;

/**
$action.getDocumentation(" * ")
 */
public final class $action.actionClassName extends org.apache.struts.action.Action
{
    public org.apache.struts.action.ActionForward execute(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
    {
#if ($action.useCaseStart && !$action.actionFormFields.empty)
        // copy any parameters from the previous form into this one
        // (only those with the same name and type are considered, and only if they can be set in the target form)
        org.apache.commons.beanutils.BeanUtils.populate(form, request.getParameterMap());

#end
        org.apache.struts.action.ActionForward forward = null;

        try
        {
            forward = #processTransition($action)
        }
        catch (java.lang.Exception exception)
        {
#populateCurrentFormOnError()
            throw exception;
        }

#if ($action.formScopeRequest)
        request.setAttribute("$formName", form);

#else
        request.getSession().setAttribute("$formName", form);

#end
#saveMessages($action "        ")
#if (!$resettableActionParameters.empty)

        $formBeanClassName specificForm = ($formBeanClassName)form;
#foreach ($field in $resettableActionParameters)
        specificForm.${field.resetName}();
#end
#end

        return forward;
    }

#foreach ($actionState in $actionStates)
    /**
$actionState.getDocumentation("     * ")
     */
    private org.apache.struts.action.ActionForward ${actionState.actionMethodName}(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
    {
#set ($controllerCalls = $actionState.controllerCalls)
        org.apache.struts.action.ActionForward forward = null;
#if ($controllerCalls.empty)
#saveMessages($actionState.forward "        ")
        forward = #processTransition($actionState.forward)
#else

        try
        {
#foreach ($controllerCall in $controllerCalls)
            ${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerCall.name}(mapping, ($formBeanClassName)form, request, response);
#end
            forward = #processTransition($actionState.forward)
        }
        catch (java.lang.Exception exception)
        {
            final String messageKey = ${exceptionHandlerPackage}.PatternMatchingExceptionHandler.instance().handleException(exception);
            ${controllerClass.name}Factory.get${controllerClass.name}Instance().saveErrorMessage(request, messageKey);
            throw exception;
        }

#saveMessages($actionState.forward "        ")

#end
        return forward;
    }

#end
#foreach ($decisionTransition in $decisionTransitions)
#set ($controllerMethodName = $decisionTransition.operationCall.name)
#set ($decisionMethodName = "__$controllerMethodName")
    /**
$decisionTransition.getDocumentation("     * ")
     */
    private org.apache.struts.action.ActionForward ${decisionMethodName}(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
    {
        final String value = String.valueOf(${controllerClass.name}Factory.get${controllerClass.name}Instance().${controllerMethodName}(mapping, ($formBeanClassName)form, request, response));

#set ($defaultOutcome = false)## keeps track of the last transition
#foreach ($outcome in $decisionTransition.target.outgoing)
#set ($defaultOutcome = $outcome)
        if (value.equals("$outcome.guardName"))
        {
#saveMessages($outcome "            ")
            return #processTransition($outcome)
        }
#end

        // we take the last action in case we have an invalid return value from the controller
        return #processTransition($defaultOutcome)
    }

#end
}
