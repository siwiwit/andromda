<project default="ejb:install"
         xmlns:ant="jelly:ant"
         xmlns:maven="jelly:maven"
         xmlns:j="jelly:core">

    <preGoal name="java:compile">
        
        <!-- only attempt ejbdoclet generation of we have generated source available -->
        <ant:taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask">
            <ant:classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${pom.dependencyClasspath}"/>
            </ant:classpath>
        </ant:taskdef>

        <ant:ejbdoclet
            destdir="${maven.build.src}"
            ejbspec="2.0"
            force="false">

            <ant:fileset dir="${maven.build.src}">
                <ant:include name="**/*Bean.java" />
            </ant:fileset>

            <ant:utilobject kind="physical" />

            <ant:deploymentdescriptor
                destdir="${ejb.descriptor.dir}"/>

            <ant:jboss
                version="3.0"
                xmlencoding="UTF-8"
                typemapping="${jboss.typeMappings}"
                datasource="${dataSource}"
                destdir="${ejb.descriptor.dir}"/>

        </ant:ejbdoclet>

        <!--
             XDoclet stores the *Bean classes into ejb-jar.xml
             but the used andromda templates have created
             subclasses *BeanImpl.  Replace
             the names in the deployment descriptor so that
             everyone is happy.
         -->
        <ant:replace file="${ejb.descriptor.dir}/ejb-jar.xml"
          token="Bean&lt;/ejb-class&gt;"
          value="BeanImpl&lt;/ejb-class&gt;">
        </ant:replace>
        
        <!-- add the paths of the generated source to the
             maven compile path -->
        <ant:path
            id="andromda.ejb.gen.src"
            location="${maven.build.src}"/>
        <maven:addPath
            id="maven.compile.src.set"
            refid="andromda.ejb.gen.src"/>
        
    </preGoal>

</project>