/* Autogenerated by AndroMDA (EntityLocalIntf.vsl) - do not edit */
## Include global definitions. ##
#parse("templates/EJBglobals.vm")
##
#if ($superclass)
#if ($superclass.hasStereotype("Entity"))
## Extend the component interface of the super type if the super type 
## is an <<Entity>>
#set ($parentInterface = "${superclass.fullyQualifiedName}")
#end
#end
#if (!$parentInterface)
#set ($parentInterface = "javax.ejb.EJBLocalObject")
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Local component interface for the $entityname entity bean.
$class.getDocumentation(" * ")
 *
#copyTaggedValues($class " " [ "@andromda.ejb.viewType", "@andromda.ejb.transactionType", "@andromda.ejb.noSyntheticCreateMethod" ])
 *
 */
public interface ${entityname} 
extends $parentInterface 
        #foreach($intf in $class.abstractions),
        $intf.fullyQualifiedName#end

{

    // -- accessors for environment entries and constants --
#foreach($att in $class.staticAttributes)
#set ($visibility = $att.visibility.toString())
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
#set($attType = $att.type.fullyQualifiedName)
    /**
#if($att.hasStereotype("EnvEntry"))
     * Get the ${att.name} environment entry
#else
#set ($ATT_NAME = $att.columnName)
     * Get the $ATT_NAME constant
#end
$att.getDocumentation("     * ")
     */
    public $attType ${att.getterName}();
    
#end
#end

    // ------------- attributes ----------------
    
#foreach ( $att in $class.instanceAttributes)
#set ($visibility = $att.visibility.toString())
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
#set($attType = $att.type.fullyQualifiedName)
    /**
     * Get the ${att.name} property
$att.getDocumentation("     * ")
     */
    public $attType ${att.getterName}();

#if(!$att.readOnly)
    /**
     * Set the ${att.name} property
     * @param value the new value
     */
    public void ${att.setterName}($attType value);
    
#end
#end
#end

    // ------------- relations ------------------

#foreach ( $assoc in $class.entityRelations)
#set ($target = $assoc.otherEnd)
#set ($assocname = $assoc.association.relationName)
#set ($targetTypeName = $assoc.relationType)

   /**
    * Get the ${assoc.otherEnd.name}
$assoc.otherEnd.getDocumentation("    * ")
    */
    public $targetTypeName ${target.getterName}();

   /**
    * Set the ${assoc.otherEnd.name}
    */
    public void ${target.setterName}($targetTypeName ${assoc.otherEnd.name});
#end ## foreach

    // ---------------- business methods  ----------------------

#foreach ( $op in $class.operations)
#if (!$op.hasStereotype("FinderMethod") && !$op.hasStereotype("CreateMethod") && !$op.hasStereotype("SelectMethod"))
#set ($visibility = $op.visibility.toString())
## Only expose public, nonstatic methods (public static methods go on the home
## interface)
#if ($visibility == "public" && !$op.static) 
#set ($msig = $op.signature)
#set ($exceptions = $op.findTaggedValue("@andromda.java.throws"))
#if (!$exceptions)
#set ($exceptions = $defaultException.fullyQualifiedName)
#end
   /**
$op.getDocumentation("    * ")
    */
#set ($returntype = $op.type.fullyQualifiedName)
#if ($exceptions)
    public $returntype ${msig} throws $exceptions;
#else
    $visibility $returntype ${msig};
#end
#end
#end
#end

}
