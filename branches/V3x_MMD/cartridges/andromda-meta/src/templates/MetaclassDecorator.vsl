//
// Attention: generated code (by Metafacade.vsl) - do not modify!
//
#set ($packagename = $class.package.fullyQualifiedName)
package $packagename;

## calculate metaclass and superclass
#set ($decoratedMetaclass = $class.metaclass)
#set ($decoratedMetaclassTypeName = $decoratedMetaclass.fullyQualifiedName)
##
#set ($superclass = $class.superclass)
##
/**
$class.getDocumentation(" ")
 *
 * Metaclass decorator for $decoratedMetaclassTypeName
 *
 */
public abstract class $class.name
       extends org.andromda.core.metadecorators.uml14.DecoratorBase  // preliminary! DecoratorBase has to be moved out of the uml14 package!
       implements $class.fullyQualifiedInterfaceName
{
    protected $decoratedMetaclassTypeName metaObject;
#if ($superclass)
    private $superclass.fullyQualifiedInterfaceName super_;
#end

    public ${class.name} ($decoratedMetaclassTypeName metaObject) {
        super (metaObject);  // just to satisfy the ctor of DecoratorBase -- should be removed later!
#if ($superclass)
        this.super_ =
            (${superclass.fullyQualifiedInterfaceName})
            FacadeSubFactory
                .getInstance()
                .createFacadeImpl(
                    "${superclass.fullyQualifiedInterfaceName}",
                    metaObject);
#end
        this.metaObject = metaObject;
    }
##

#set ($atts = $class.attributes)
#if ($atts.size() > 0)
    // --------------- attributes ---------------------
#foreach ( $att in $atts )
#set ($atttypename = $att.type.fullyQualifiedName)

   /**
$att.getDocumentation("    ")
    *
    */
    public abstract $atttypename ${att.getterName}();
#end
#end

#set ($ops = $class.operations)
#if ($ops.size() > 0)
    // ---------------- real business methods ----------------------

#foreach ( $op in $ops)
   /**
$op.getDocumentation("    ")
    *
    */
    $op.visibility abstract $op.type.fullyQualifiedName ${op.signature};
    
#end
#end
##
#set ($assocEnds = $class.associationEnds)
#if ($assocEnds.size() > 0)
    // ------------- relations ------------------
    
#foreach ( $assocEnd in $assocEnds )
#if ($assocEnd.otherEnd.navigable)
##
#set ($trn = $assocEnd.otherEnd.name)
#set ($utrn = $str.upperCaseFirstLetter($trn))
##
#set ($returnTypeName = $assocEnd.getterSetterTypeName)
##
#if ($assocEnd.one2Many || $assocEnd.many2Many) 
    protected abstract $returnTypeName handleGet${utrn}();
    
   /**
$assocEnd.otherEnd.getDocumentation("    ")
    *
    */
    public $returnTypeName get${utrn}() {
        return decoratedElements(handleGet${utrn}());
    }
#else
    protected abstract java.lang.Object handleGet${utrn}();
    
   /**
$assocEnd.otherEnd.getDocumentation("    ")
    *
    */
    public $returnTypeName get${utrn}() {
        return 
            (${returnTypeName})
            decoratedElement(handleGet${utrn}());
    }
#end

#end
#end
#end
##
#if ($superclass)
    // ----------- delegates to "superclass" ------------
    
#foreach ( $method in $superclass.methodDataForPSM )
	${method.buildMethodDeclaration(true)} {
#if ($method.hasReturnType())
        return super_.${method.buildMethodCall()};
#else
        super_.${method.buildMethodCall()};
#end
	}
#end
#end
##
}
