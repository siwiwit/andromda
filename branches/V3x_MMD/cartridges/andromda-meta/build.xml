<project name="andromda-meta" default="dist">

<!--
  Note:
  This cartridge builds two artifacts:
  1) The cartridge jar itself (like all the other andromda cartridges).
  2) A jar with classes that come from a generation step using this cartridge!
     This second jar is used inside the AndroMDA core (yes! AndroMDA is used
     to compile itself, just like a Java compiler compiles itself!).

  This requires a manual step at the end of the build process:
  - Build this cartridge normally, using the "dist" target.
  - If you are sure that the result is good, copy it into the AndroMDA core,
    using the "copyjar" target.
-->

    <!-- ============================================================= -->
    <!--               Directory settings                              -->
    <!-- ============================================================= -->

    <property name="src.dir"          value="${basedir}/src" />
    <property name="src.cart.dir"     value="${src.dir}/java" />
    <property name="src.fac.gen.dir"  value="${src.dir}/facades/generated" />
    <property name="src.fac.man.dir"  value="${src.dir}/facades/manual" />
    <property name="uml.common.model.dir" value="${basedir}/../../metafacades/uml/common/src/uml"/>
    <property name="uml.dir"          value="${src.dir}/uml" />
    <property name="src.test.dir"     value="${src.dir}/test/" />

    <property name="build.dir"              value="build" />
    <property name="build.cart.dir"         value="build/cartridge" />
    <property name="build.fac.dir"          value="build/decorators" />
    <property name="build.test.dir"         value="${build.dir}/test" />
    <property name="build.test.classes.dir" value="${build.test.dir}/classes" />
    <property name="build.test.reports.dir" value="${build.test.dir}/reports" />

    <property name="dist.dir"         value="dist" />

    <property file="build.properties" />
    <property name="andromda-core.new.home" location="${andromda.new.home}/andromda-core"/>
    <property name="andromda-meta.new.home" location="dist"/>
    <property name="andromda-core.home"     location="${andromda.old.home}/andromda-core"/>
    <property name="andromda-meta.home"     location="${andromda.old.home}/cartridges/andromda-meta"/>
    
    <property name="metafacades.uml.home"        location="${andromda.new.home}/metafacades/uml"/>
    <property name="metafacades.uml.common.home" location="${metafacades.uml.home}/common"/>
    <property name="metafacades.uml.uml14.home"  location="${metafacades.uml.home}/uml14"/>

    <property file="${andromda-core.home}/andromda-core.properties"/>

    <path id="andromda.old.classpath">
       <pathelement location="${andromda-core.home}/andromda.jar"/>
       <pathelement path="${andromda-core.classpath}"/>
    </path>

    <path id="andromda.new.classpath">
       <pathelement location="${andromda-core.new.home}/andromda.jar"/>
       <fileset dir="${andromda-core.new.home}/lib" includes="*.jar" excludes="metadecorators.jar"/>
    </path>

    <!-- Setup directory structure -->
    <target name="init">
        <tstamp/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.cart.dir}"/>
        <mkdir dir="${build.fac.dir}"/>
    </target>

    <!-- Remove directory structure structure -->
    <target name="clean" description="Removes all generated files">
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${dist.dir}"/>
            <fileset dir="${build.dir}"/>
            <fileset dir="${src.fac.gen.dir}"/>
        </delete>
    </target>

    <!-- ============================================================= -->
    <!--               Highlevel user tasks                            -->
    <!-- ============================================================= -->

    <target name="dist" depends="clean,build"
            description="Builds the distribution structure">
      <copy todir="${dist.dir}" >
          <fileset dir="${build.dir}" includes="*.jar" />
          <fileset dir="." includes="andromda-meta.properties" />
      </copy>
    </target>

    <target name="build" depends="compile"
            description="Builds the objects from the sources">
    </target>

    <!-- ============================================================= -->
    <!--               Internal tasks                                  -->
    <!-- ============================================================= -->

    <target name="genjava" depends="init">
        <property file="${andromda-meta.home}/andromda-meta.properties"/>

        <path id="generate.classpath">
           <path refid="andromda.old.classpath" />
           <pathelement path="${andromda-meta.classpath}"/>
        </path>

        <property name="g.cp" refid="generate.classpath"/>
        <echo message="generate.classpath = ${g.cp}"/>

        <taskdef name="andromda"
                 classname="org.andromda.core.anttasks.AndroMDAGenTask"
                 classpathref="generate.classpath"
        />
        
        <property 
        	name="model" 
        	value="jar:file:${uml.dir}/MetaMetafacadeModel.xml.zip!/MetaMetafacadeModel.xml"/>

        <andromda basedir="."
           modelURL="${model}"
           lastModifiedCheck="false"
           processAllModelPackages="false">

			<namespace name="meta">
				<property name="facades" 				 value="${src.fac.gen.dir}" />
				<property name="facade-logics"           value="${src.fac.gen.dir}"/>
				<property name="facade-logic-impls"      value="${src.fac.man.dir}"/>
				<property name="languageMappings"  value="file:${andromda-core.home}/conf/mappings/JavaMappings.xml"/>	
			</namespace>
            
            <modelPackage name="org.andromda.cartridges.meta.metafacades"  shouldProcess="true"/>

			<repository>
				<moduleSearchPath>
					<pathelement location="${uml.common.model.dir}" />
				</moduleSearchPath>
			</repository>

        </andromda>
        
    </target>
    
    <target name="compile" depends="genjava"
            description="Builds the cartridge objects from the sources">
        <javac destdir="${build.cart.dir}" includeAntRuntime="false">
            <src path="${src.cart.dir}" />
            <src path="${src.fac.gen.dir}" />
            <src path="${src.fac.man.dir}" />
            <include name="org/andromda/cartridges/meta/**/*.java" />
            <classpath>
                <path refid="andromda.new.classpath"/>
                <pathelement location="${metafacades.uml.common.home}/andromda-metafacades-uml.jar"/>
            </classpath>
        </javac>

		<copy file="${src.dir}/META-INF/andromda-metafacades.xml" 
		      tofile="${build.cart.dir}/META-INF/andromda-metafacades.xml"
		/>
		
        <jar jarfile="${build.dir}/andromda-meta.jar">
            <fileset dir="${src.dir}" includes="templates/*" />
            <fileset dir="${src.dir}" includes="META-INF/*cartridge.xml" />
            <fileset dir="${build.cart.dir}" includes="META-INF/andromda-metafacades.xml" />
            <fileset dir="${build.cart.dir}" includes="**/*.class" />
        </jar>
        <copy todir="${dist.dir}" >
            <fileset dir="${build.dir}" includes="andromda-meta.jar" />
            <fileset dir="." includes="andromda-meta.properties" />
        </copy>
    </target>

    <target name="test" depends="compile">
        <mkdir dir="${build.test.classes.dir}"/>
        <mkdir dir="${build.test.reports.dir}"/>
        <path id="test.classpath">
	       <pathelement location="${metafacades.uml.common.home}/andromda-metafacades-uml.jar"/>
	       <pathelement location="${metafacades.uml.uml14.home}/andromda-metafacades-uml14.jar"/>
           <pathelement location="${build.test.classes.dir}"/>
           <path refid="generate.classpath" />
        </path>

        <javac debug="true" destdir="${build.test.classes.dir}" includes="**/*.java" includeAntRuntime="false">
            <src path="${src.test.dir}"/>
            <classpath refid="test.classpath"/>
        </javac>
        <junit printsummary="yes" haltonfailure="false">
            <classpath>
                <path refid="test.classpath"/>
            </classpath>

            <formatter type="plain"/>

            <batchtest fork="yes" todir="${build.test.reports.dir}">
                <fileset dir="${src.test.dir}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/Sample*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

</project>
