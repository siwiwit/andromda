#set ($generatedFile = "${class.actionFullPathName}.java")

#macro ( processTransition $transition )
#if ($transition.isTargettingDecisionPoint())
${transition.methodName}(mapping, form, request, response);
#elseif ($transition.isTargettingJsp() || $transition.isTargettingUseCase())
mapping.findForward("$transition.forwardName");
#end
#end




#set ($actionPackage = $class.actionPackageName)
#set ($actionClassName = $class.actionClassName)
#set ($formBeanType = $class.formBeanType)
#set ($formBeanPackage = $class.formBeanPackageName)
#set ($formBeanClassName = $class.formBeanClassName)

#set ($controller = $class.controller)
#set ($controllerType = $controller.controllerHelperType)
#set ($controllerPackage = $controller.controllerHelperPackageName)
#set ($controllerClassName = $controller.controllerHelperClassName)

#set ($roles = $class.actionRoles)

#set ($forwardActionTransitions = $class.forwardActionTransitions)

#set ($isUseCaseStart = $class.isUseCaseStart())

package $class.actionPackageName;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionForward;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

#if ($actionPackage != $formBeanPackage)
import $formBeanType;
#end
#if ($actionPackage != $controllerPackage)
import $controllerType;
#end

/**
$class.getDocumentation(" ")
 *
 * @struts.action
#if ($formBean)
 *        name="$class.actionName"
#end
 *        path="$class.actionPath"
#if ($isUseCaseStart == false)
 *       input="$class.input.fullPathName"
 *    validate="true"
#end
 *       scope="request"
#if ($roles)
 *       roles="$roles"
#end
 *     unknown="false"
 *
#foreach ($forwardActionTransition in $forwardActionTransitions)
 * @struts.action-forward
 *        name="$forwardActionTransition.forwardName"
 *        path="$forwardActionTransition.forwardPath"
 *
#end
 *
#foreach ($exceptionHandler in $class.exceptionHandlers)
 * @struts.action-exception
 *         key="$exceptionHandler.exceptionKey"
 *        type="$exceptionHandler.exceptionType"
 *        path="$exceptionHandler.exceptionPath"
 *       scope="request"
#end
 */
public final class $actionClassName extends Action
{
#set ($methodName = $class.methodName)
    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final ActionForward forward = ${methodName}(mapping, form, request, response);
#if ($class.hasSuccessMessage())

        ActionMessages messages = new ActionMessages();
        ActionMessage message = new ActionMessage($class.successMessageKey);
        messages.add(ActionMessages.GLOBAL_MESSAGE, message);
        saveMessages(request, messages);

#end
        return forward;
    }

#foreach ($transition in $class.forwardActionTransitions)
#set ($methodName = $transition.methodName)
#set ($effectMethodName = $transition.effectMethodName)
    private ActionForward ${methodName}(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#if ($effectMethodName)
        ${controllerClassName}.${effectMethodName}(mapping, form, request, response);
#end
        return #processTransition($transition)
    }

#end
#foreach ($transition in $class.decisionTransitions)
#set ($methodName = $transition.methodName)
#set ($outcomes   = $transition.targetOutcomes)
#set ($effectMethodName = $transition.effectMethodName)
#set ($triggerMethodName = $transition.triggerMethodName)
    private ActionForward ${methodName}(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#if ($effectMethodName)
        ${controllerClassName}.${effectMethodName}(mapping, form, request, response);
#end
        final String value = String.valueOf($controllerClassName.${triggerMethodName}(mapping, form, request, response));

#foreach ($outcome in $outcomes)
        if (value.equals("$outcome.guardName")) return ${outcome.methodName}(mapping, form, request, response);
#end

        return null;    // application bug: invalid return value
    }

#end
}

