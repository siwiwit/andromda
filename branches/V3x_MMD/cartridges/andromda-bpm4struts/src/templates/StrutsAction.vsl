#set ($generatedFile = "${class.fullActionPath}.java")
##
##  MACROS
##
#macro (processTransition $transition)
#set ($target = $transition.target)
#if ($transition.isTargettingFinalState() || $transition.isTargettingPage())
mapping.findForward("$transition.forwardName");
#elseif ($transition.isTargettingDecisionPoint())
${transition.decisionTrigger.controllerCall.name}(mapping, form, request, response);
#else
${target.actionMethodName}(mapping, form, request, response);
#end
#end
##
##  CONSTANTS
##
#set ($controllerClass = $class.controller)
#set ($formBeanClassName = $class.activityGraph.useCase.formBeanClassName)
#set ($roles = $class.actionRoles)
#set ($actionForwards = $class.actionForwards)
#set ($actionExceptions = $class.actionExceptions)
#set ($actionStates = $class.actionStates)
#set ($decisionTransitions = $class.decisionTransitions)
#set ($security = ($securityEnabled=="true") && ($roles != "") )
##
##  START TEMPLATE
##
package $class.packageName;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionForward;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

#if ($class.hasSuccessMessage())
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

#end
/**
$class.getDocumentation(" * ")
 *
 * @struts.action
 *        path="$class.actionPath"
 *        name="$class.actionName"
#if ($class.isUseCaseStart() == false)
 *       input="${class.input.fullPath}.jsp"
#end
 *    validate="true"
 *       scope="request"
 *     unknown="false"
#if ($security)
 *       roles="$roles"
#end
 *
#foreach ($actionForward in $actionForwards)
 * @struts.action-forward
 *        name="$actionForward.forwardName"
 *        path="$actionForward.forwardPath"
 *    redirect="false"
 *
#end
 *
#foreach ($actionException in $class.actionExceptions)
 * @struts.action-exception
 *         key="${class.messageKey}.$actionException.exceptionKey"
 *        type="$actionException.exceptionType"
 *        path="$actionException.exceptionPath"
 *       scope="request"
 *
#end
 */
public final class $class.actionClassName extends Action
{
    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final ActionForward forward = #processTransition($class)
#if ($class.hasSuccessMessage())

        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("$class.successMessageKey"));
        saveMessages(request, messages);

#end
        return forward;
    }
    
#foreach ($actionState in $actionStates)
    /**
$actionState.getDocumentation("     * ")
     */
    private ActionForward ${actionState.actionMethodName}(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#foreach ($controllerCall in $actionState.controllerCalls)
        ${controllerClass.name}.getInstance().${controllerCall.name}(mapping, ($formBeanClassName)form, request, response);
#end
        return #processTransition($actionState.forward)
    }

#end
#foreach ($decisionTransition in $decisionTransitions)
#set ($controllerMethodName = $decisionTransition.decisionTrigger.controllerCall.name)
#set ($decisionMethodName = $controllerMethodName)
    /**
$decisionTransition.getDocumentation("     * ")
     */
    private ActionForward ${decisionMethodName}(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final String value = String.valueOf(${controllerClass.name}.getInstance().${controllerMethodName}(mapping, ($formBeanClassName)form, request, response));
        
#foreach ($outcome in $decisionTransition.target.outgoing)
        if (value.equals("$outcome.guardName")) return #processTransition($outcome)
#end

        // we take the last action in case we have an invalid return value from the controller
        return #processTransition($outcome)
    }

#end
}
