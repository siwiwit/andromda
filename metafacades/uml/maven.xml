<project default="install"
	     xmlns:j="jelly:core"
  		 xmlns:ant="jelly:ant"
  		 xmlns:maven="jelly:maven">
  		 
  	<!-- ==================================================================
  			 Installs all libraries in the local repository                                                    
  		 ================================================================== -->
  	<goal name="install">
		<attainGoal name="multiproject:install"/>	
  	</goal> 
  		 
  	<j:set var="andromda.metafacade.generated.dir" value="${maven.build.src}/andromda/meta"/>
    
    <preGoal name="java:compile"> 
   		<attainGoal name="generate-source"/>
    </preGoal>
    
    <preGoal name="site:run-reports">
    	<attainGoal name="generate-source"/>
    </preGoal>
    
  	<!-- ==================================================================
  			 Generates the source required to build the cartridges.                                                   
  		 ================================================================== -->
    <goal name="generate-source">
    	<j:set var="currentBuildDir" value="${maven.build.src}"/>
    	<!-- keep the generation from executing more than once -->
    	<j:if test="${lastBuildDir != currentBuildDir}">
			
			<attainGoal name="andromda:run-bootstrap"/>
			<!-- add the paths of the generated source to the
				 maven compile path -->
			<ant:path
				id="metafacade.generated.src"
				location="${andromda.metafacade.generated.dir}"/>
			<maven:addPath
				id="maven.compile.src.set"
				refid="metafacade.generated.src"/>     	
			     	
		</j:if>
		<j:set var="lastBuildDir" value="${currentBuildDir}"/>
    </goal>
    
    <!-- ===================================================================
         Intercept the set goal so that we can fake out the javadoc and
         jxr plugins into thinking the basedir is our source directory 
         (since they only handle one source directory per project).  
         The report plugins  really should support multiple source directories but 
         right now the don't so we do this to get around it.                         
         =================================================================== -->
    <preGoal name="site">
		<j:set var="previousSourceDirectory" value="${pom.build.sourceDirectory}"/>
		<j:set var="dummy" value="${pom.build.setSourceDirectory(basedir)}"/>    	
    </preGoal>
    
    <!-- ===================================================================
    	 Reset the pom.build.sourceDirectory back to the real source now
    	 that we're done with the javadoc and jxr reports.
         =================================================================== -->
    <postGoal name="site">
    	<j:set var="dummy" value="${pom.build.setSourceDirectory(previousSourceDirectory)}"/>
    </postGoal>
	
    <!-- ===================================================================
    	 Copy the jxr sources to the correct location since the jxr plugin
    	 won't place them in the correct location since we are saying
    	 the basedir is the sourcedirectory.
         =================================================================== -->	    	
	<postGoal name="maven-jxr-plugin:report">
		
		<!-- move the xref docs to the correct location -->
		<j:set var="jxrDestDir" value="${maven.docs.dest}/xref"/>
		<j:set var="javaSourceJxr" value="${jxrDestDir}/src/java"/>
		<j:set var="generatedSourceJxr" value="${jxrDestDir}/target/src/andromda/meta"/>
		<ant:available 
			property="javaJxrPresent" 
			file="${javaSourceJxr}"/>  
		<ant:available 
			property="generatedJxrPresent" 
			file="${generatedSourceJxr}"/>  
		<ant:move todir="${jxrDestDir}">
			<j:if test="${javaJxrPresent}">
				<ant:fileset dir="${javaSourceJxr}"/>
			</j:if>			
			<j:if test="${generatedJxrPresent}">
				<ant:fileset dir="${generatedSourceJxr}"/>
			</j:if>
		</ant:move>
	</postGoal>
  		 
</project>


