<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Search Criteria Panel</title>
    </properties>
    <body>
        <section name="Search Criteria Panel">
            <p>
                We are finally ready to attack the front-end! In this section, we will use the AndroMDA
                jsf cartridge to develop a javaserver Faces based web front-end. Note that AndroMDA
                offers another cartridge to generate JSF based front-ends. However, if you like
                some other front-end framework better, you can roll your own cartridge! But remember
                to share it with the community :-).
            </p>

            <p>
                The <i>jsf</i> cartridge generates javaserver Faces web pages from a UML model that defines
                the flow of your application. Before we get into modeling our application, please
                read the following material to understand fundamental concepts behind the <i>jsf</i>
                cartridge. The following link are related with the BPM4Struts cartridge but most of the
                concepts are similar to the <i>jsf</i> cartridge.
            </p>
            <ol style="list-style-type: decimal">
                <li>
                    <a href="http://docs.andromda.org/andromda-cartridges/andromda-bpm4struts-cartridge/index.html">Introduction to BPM4Struts</a>:
                    The <i>Introduction</i> and <i>Goal</i> sections provide a good overview of the cartridge.
                </li>
                <li>
                    <a href="http://docs.andromda.org/andromda-cartridges/andromda-bpm4struts-cartridge/howto.html">BPM4Struts How-to Guide</a>: 
                    Quickly look over the concepts behind use-cases, activity graphs and controllers.
                </li>
            </ol>
            <p>

                <img src="images/SearchTimecardsUC.jpg" alt="Search Timecards Use Case"/>
            </p>
            <p>
                As you might have gathered, there are 3 important concepts associated with creating
                a web page: a use case, an activity diagram (that details the use case), and one
                or more controllers (whose methods can be called from the activity diagram). So
                let's discuss how we will model our search screen. We will start with a use case
                called <tt>Search Timecards</tt>. This use case is shown on the right and we
                have marked it with two stereotypes:
            </p>
            <ol style="list-style-type: decimal">
                <li> <tt>FrontEndUseCase</tt>: which means exactly that - it is a front-end use case
                </li>
                <li> <tt>FrontEndApplication</tt>: which means that it is the application's entry
                    point. Note that, for now, we won't worry about security or navigation -- as soon
                    as you point your browser to this web application, it will show the Search Timecards
                    page!
                </li>
            </ol>
            <p>
                We will then add details to this use case by creating an activity diagram. The activity
                diagram is shown below:
            </p>
            <div align="center">
                <img src="images/SearchTimecardsAD1.jpg" alt="Search Timecards Activity Diagram"/>
            </div>
            <p>
                The activity diagram can use the
                <tt>SearchController</tt>
                shown below by calling
                its methods. The key parameter passed to
                <tt>SearchController</tt>
                methods is
                a form interface that provides access to HTTP request parameters. The
                <tt>SearchController</tt>
                can call services in the service layer. Specifically, we have shown here that it
                has access to the <tt>UserService</tt>.
            </p>
            <div align="center">
                <img src="images/SearchControllerToUserService.jpg" alt="Search Controller"/>
            </div>
            <p>
                Now let's enter the use case, the activity diagram and the controller in our model.
                Please follow one of the links below to edit the model with the UML tool of your
                choice.
            </p>
            <ul>
                <li>
                    <a href="resources/uml-tools/argouml/SearchTimecardsUC.html">ArgoUML</a>
                </li>
                <li>
                    <a href="resources/uml-tools/magicdraw/SearchTimecardsUC.html">MagicDraw</a>
                </li>
                <li>
                    <a href="resources/uml-tools/rsm/SearchTimecardsUC.html">RSM/RSA</a>
                </li>
            </ul>
            <p>
                Now let's ask AndroMDA to generate code for the
                <tt>Search Timecards</tt>
                page:
            </p>
            <ol style="list-style-type: decimal">
                <li>Execute the command
                    <tt>mvn install</tt>
                    in the Command Prompt. Make sure you
                    get a
                    <tt>BUILD SUCCESSFUL</tt>
                    message.
                </li>
            </ol>
            <p>
                The only code we need to write by hand is the call from the
                <tt>SearchController</tt>
                to the
                <tt>UserService</tt>
                to populate the drop-downs. So open the
                <tt>SearchControllerImpl</tt>
                class generated at <tt>C:\timetracker\web\src\main\java\org\andromda\timetracker\web\timecardsearch</tt>.
                Add the code shown below:
            </p>
            <source>
<![CDATA[
    // license-header java merge-point
    package org.andromda.timetracker.web.timecardsearch;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Collection;
    import java.util.List;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import org.andromda.timetracker.vo.UserVO;
    import org.andromda.timetracker.vo.UserVOComparator;
    import org.apache.commons.logging.Log;
    import org.apache.commons.logging.LogFactory;
    import org.apache.struts.action.ActionMapping;

    public class SearchControllerImpl extends SearchController
    {
        private Log logger = LogFactory.getLog(SearchControllerImpl.class);
        private static final String ALL_STRING = "-- All --";

        public final void populateSearchScreen(
            ActionMapping mapping,
            org.andromda.timetracker.web.timecardsearch.PopulateSearchScreenForm form,
            HttpServletRequest request,
            HttpServletResponse response)
        throws Exception
        {
            if (logger.isDebugEnabled()) {
                logger.debug("form: " + form);
            }

            // Get list of users and add the "All" option at the top
            Collection<UserVO> users = getUserService().getAllUsers();
            Arrays.sort(users, new UserVOComparator());
            users.add(0, new UserVO(null, ALL_STRING, null, null));

            // Populate submitter and approver dropdowns
            form.setSubmitterBackingList(users, "id", "username");
            form.setApproverBackingList(users, "id", "username");
        }
    }
]]>
            </source>
            <p>
                Note that we sort the
                <tt>users</tt>
                array so that names appear alphabetically
                in the drop-downs. The sorting function uses <tt>UserVOComparator</tt>, which
                is available under <tt>C:\timetracker-completed\common\src\main\java\org\andromda\timetracker\vo</tt>.
                Copy it to your solution using the same directory structure.
            </p>
            <p>
                Now follow the steps below to build and deploy the application to JBoss and test
                it.
            </p>
            <ol style="list-style-type: decimal">
                <li>Build the common and web projects to make sure the code added above is compiled
                    and packaged. Here's how:
                    <br/>
                    <tt>mvn -f common/pom.xml install</tt>
                    <br/>
                    <tt>mvn -f web/pom.xml install</tt>
                </li>
                <li>Start the JBoss server. To do this, open a Command Prompt in the JBoss bin directory
                    ( <tt>C:\Programs\JBoss\51\bin</tt>) and execute the command <tt>run</tt>.
                </li>
                <li>Deploy the application to the JBoss server. Go to the previous Command Prompt (in
                    the directory <tt>C:\timetracker</tt>) and execute the command:
                    <br/>
                    <tt>mvn -f app/pom.xml -Ddeploy</tt>
                    <br/>
                    Look for JBoss console message indicating that the application has started.
                </li>
                <li>Open a browser and make it point to http://localhost:8080/timetracker. The TimeTracker
                    search page should appear. Note that although the look and feel is not what we have
                    in the prototype, the screen is functionally correct. We will worry about the look
                    and feel later, when all the functionality is complete.
                </li>
                <li>Make sure that the submitter and approver drop downs are populated with the complete
                    user list.
                </li>
                <li>Set some values in the search criteria fields and click the Search button. Now look
                    at the JBoss log file to see if the form values are logged correctly. The JBoss
                    log file is located at <tt>C:\Programs\JBoss\51\server\default\log\server.log</tt>.
                    Below is a sample log:
                    <br/>
                </li>
            </ol>
            <source>
<![CDATA[
                2006-06-29 02:47:41,541 DEBUG form:
                org.andromda.timetracker.web.timecardsearch.SearchTimecardsSearchFormImpl@a2bd15
                [startDateMinimum=Tue Jun 13 00:00:00 EDT 2006,
                startDateMaximum=Wed Jun 07 00:00:00 EDT 2006,
                submitter=3,
                status=&lt;null&gt;,
                approver=2]
]]>                
            </source>
            <p>
                Below is a screen shot of the Search screen so far. Isn't it amazing that we were
                able to get all this functionality without much coding? Of course, the look and
                feel is nowhere near what we want, but we will take care of that once the screen
                is fully functional.
            </p>
            <div align="center">
                <img src="images/SearchCriteriaPanel.jpg" alt="Search Criteria Panel"/>
            </div>
            <subsection name="What's Next?">
                <p>
                    Congratulations! You have successfully deployed a complete vertical slice of the
                    application that includes a front-end, middle-tier and a back-end. We are now ready
                    start our second iteration with the goal to build the Search Results panel. Click
                    <a href="timetrackingservice-definition.html">here</a> to start iteration 2.
                </p>
            </subsection>
        </section>
    </body>
</document>
