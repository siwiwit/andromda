<?xml version="1.0" encoding="UTF-8"?>

<document>
  	<properties>
    	<title>Web Service Cartridge Namespace</title>
  	</properties>
  	<body>
    	<section name="Web Service Namespace Properties">
	      	<table>
	        	<tr>
		          	<th>Property</th>         	
		          	<th>Description</th>       	
		          	<th>Required?</th>	   	 
	        	</tr>
				<tr>
					<td>
						applicationName
					</td>
					<td>
						The name of the web application for which these services will be deployed
						(i.e. Security Web Services).
					</td>
					<td>
						Yes
					</td>
				</tr>
                <tr>
                    <td>
                        schemaTypeMappingsUri
                    </td>
                    <td>
                        URI specifying the specific mappings from model types to WSDL Schema types.
                        (i.e. <code>file:${basedir}/XmlSchemaMappings.xml</code>)
                    </td>
                    <td>
                        Yes
                    </td>
                </tr>
				<tr>
					<td>
						wsdlSoapAddress
					</td>
					<td>
				        Defines the location of the WSDL once the application is deployed 
						(i.e. <code>http://localhost:8080/security-service/services</code>).  The 
						service name will be appended to the location to create the complete URL. 
						For example if you have a service named SecurityService within your model, 
						the entire URL to that service in the generated WSDL would be 
						<code><![CDATA[<wsdlsoap:address location="http://localhost:8080/security-service/services/SecurityService"/>]]></code>
						within the <code><![CDATA[<wsdl:service/>]]></code> element.
					</td>
					<td>
						Yes
					</td>
				</tr>
	        	<tr>
		          	<td>
		          		wsdls
		          	</td>
		          	<td>
		          		Specifies the directory to which generated WSDL's will be placed.
		          	</td>
		          	<td>
		          		Yes
		          	</td>
	        	</tr>		
				<tr>
					<td>
						java-types
					</td>
					<td>
						The directory to which any non implementation Java files will be generated.
					</td>
					<td>
						Yes
					</td>
				</tr>    
				<tr>
					<td>
						axis-configuration
					</td>
					<td>
						The directory to which any AXIS specific configuration files 
						are generated (such as the WSDD files, etc).
					</td>
					<td>
						Yes
					</td>
				</tr>   
				<tr>
					<td>
						axis-tests
					</td>
					<td>
						The directory to which AXIS specific tests are generated.
					</td>
					<td>
						No
					</td>
				</tr> 	 
				<tr>
					<td>
						qualifiedNameLocalPartPattern
					</td>
					<td>
					    The pattern to use when a qualified name local part is created.
						<em>{0}</em> represents the name of the classifier (i.e.
						<em>WS{0}</em> would give all your types and services a prefix
						of <em>WS</em>). 
					</td>
					<td>
						No, default is <code>{0}</code>.
					</td>
				</tr>
				<tr>
					<td>
						namespacePattern
				    </td>
					<td>
					    The pattern to use when a namespace is created.
						<em>{0}</em> represents the package name of the classifier (i.e.
						<em>ws.{0}</em> would prefix all your type and service
						namespaces with <em>ws.</em>). 
				    </td>
                    <td>
						No, default is <code>http://{0}</code>			
					</td>
				</tr>     
				<tr>
					<td>
						reverseNamespace
					</td>
					<td>
						Whether or not to reverse the ordering of the namespace.
						The namespace is typically determined by the package
						name of the service or type, this allows you to reverse the package
						name. (i.e. org.andromda.samples would become 
						<em>samples.andromda.org</em> if this was set to <code>true</code>). 
						Value should be <code>true or false</code>. 
					</td>
				    <td>
						No, default is <code>false</code>.
				    </td>
				</tr>      	
				<tr>
					<td>
						ejbJndiNamePrefix
					</td>
					<td>
						The prefix given to the JNDI name of the EJB provider.  This
						may be specified by another cartridge (i.e. the 
						<a href="../andromda-hibernate-cartridge/namespace.html#ejbJndiNamePrefix">Hibernate</a>
						cartridge, <a href="../andromda-ejb-cartridge/namespace.html#jndiName">EJB</a>
						cartridge, etc.) so it must be specified here in order to give 
						the correct JNDI name of an EJB provider.
					</td>
					<td>
						No, default is <code>no prefix</code>.
					</td>
				</tr>    
				<tr>
					<td>
						ejbInterfacePattern
					</td>
					<td>
						The pattern to use when determining the interface of an EJB
						provider: <em>{0}</em> represents the package name of the
						model element and <em>{1}</em> represents the name of the
						model element.
					</td>
					<td>
						No, default is <code>{0}.{1}</code>
					</td>
				</tr>      
				<tr>
					<td>
						ejbHomeInterfacePattern
					</td>
					<td>
						The pattern to use when determining the home interface of 
						an EJB provider: <em>{0}</em> represents the package name 
						of the model element and <em>{1}</em> represents the name 
						of the model element.
					</td>
					<td>
						No, default is <code>{0}.{1}Home</code>
					</td>
				</tr> 
			</table>
			<subsection name="WS-Security Specific Properties">
				<table>
					<tr>
						<td>
							wss4j-configuration
						</td>
						<td>
							The directory to which any <a href="http://ws.apache.org/ws-fx/wss4j/index.html">WSS4J</a>
							specific configuration files are generated. 
						</td>
						<td>
							No
						</td>
					</tr>
					<tr>
						<td>
							signedRequest
						</td>
						<td>
							True or false on whether or not the webservice will expect signed
							requests.  If true, a WSS4J Axis handler will be added to provide
							decryption of signed requests (if this is set to <code>true</code>
							the following properties below MUST be specified.
						</td>
						<td>
							No
						</td>
					</tr>
					<tr>
						<td>
							cryptoKeyStore
						</td>
						<td>
							The location of the key store file (i.e. 
							<em>keys/authorization-service.jks</em>).
						</td>
						<td>
							No, unless WS-Security is being used
						</td>
					</tr>
					<tr>
						<td>
							cryptoKeyStoreType
						</td>
						<td>
							The key store's type (i.e. <em>jks</em>).
						</td>
						<td>
							No, unless WS-Security is being used.
						</td>
					</tr>
					<tr>
						<td>
							cryptoKeyStoreAlias
						</td>
						<td>
							The key store alias name.
						</td>
						<td>
							No, unless WS-Security is being used
						</td>
					</tr>
					<tr>
						<td>
							cryptoAliasPassword
						</td>
						<td>
							The alias password.
						</td>
						<td>
							No, unless WS-Security is being used
						</td>
					</tr>
					<tr>
						<td>
							cryptoKeyStorePassword
						</td>
						<td>
							The key store password.
						</td>
						<td>
							No, unless WS-Security is being used
						</td>
					</tr>
		        </table>
			</subsection> 		        	        	        	     	             	        	
    	</section>
  	</body>
</document>