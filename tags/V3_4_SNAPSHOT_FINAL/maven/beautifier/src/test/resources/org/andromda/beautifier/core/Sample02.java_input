
// Generated file. Do not edit.
// Generated by 
//   org.andromda.codegen.axis2.webservice.Axis2ServiceImplPlugin 
// from 
//   org.andromda.axistest.Service
package org.andromda.axistest.webservice.axis2;

import java.util.Iterator;

import org.apache.axis2.om.OMAbstractFactory;
import org.apache.axis2.om.OMElement;
import org.apache.axis2.om.OMFactory;
import org.apache.axis2.om.OMNamespace;
import org.somepackage.cache.CacheKey;
import org.somepackage.cache.InstanceCache;
import org.somepackage.cache.InstanceCacheKey;
import org.somepackage.typemapping.TypeMapper;
import org.somepackage.typemapping.TypeMapperFactory;
import org.somepackage.xml.helper.NamespaceHelper;

/**
 * Test Input
 */
public class ServiceImpl {
        
    private org.andromda.axistest.Service implementation = null;
    private TypeMapper typeMapper = TypeMapperFactory.createTypeMapper();
    
    public ServiceImpl() {

    }
    
    private org.andromda.axistest.Service _getImplementation() {
        if (implementation == null) {
            synchronized (ServiceImpl.class) {
                if (implementation == null) {
                    CacheKey cacheKey = new InstanceCacheKey(org.andromda.axistest.Service.class);
                    implementation = (org.andromda.axistest.Service) InstanceCache.getCached(cacheKey);
                    
                    if (implementation == null) {
                        implementation = new org.andromda.axistest.ServiceImpl();
                        
                        InstanceCache.cache(cacheKey, implementation);
                    }
                }
            }
        }
        return implementation;
    }

    public OMElement getName0 (OMElement omElement) {

        org.andromda.workengine.helper.
            WorkEngineHelper.initializeWorkEngine();

        OMFactory fac = OMAbstractFactory.getOMFactory();

        

          final java.lang.String[] semResult = new java.lang.String[1];  
          final Throwable[] semThrowable = new Throwable[1];  
        
        org.andromda.workengine.RunnableTask runnableTask = 
            new org.andromda.workengine.AbstractRunnableTask() {
            public void run() {
                try {
                      semResult[0] = _getImplementation().getName(); 
                  } catch (Exception e) {
                    semThrowable[0] = e;
                }
            }
        };

        org.andromda.workengine.helper.
            WorkEngineHelper.scheduleAndWaitForTask(runnableTask);
        
        Throwable e = semThrowable[0];
        if (e != null) {
            throw new RuntimeException(e.getMessage(), e);
        }

        // create return element
        String namespace = NamespaceHelper.getNamespace(org.andromda.axistest.Service.class);
        OMNamespace omNamespace = fac.createOMNamespace(namespace, "ns1");
        OMElement resultElement = fac.createOMElement("result", omNamespace);

        String marschalledReturnVal;
                marschalledReturnVal = typeMapper.marshall(semResult[0]);
          resultElement.setText(marschalledReturnVal);
    return resultElement;
    }        
    
    public OMElement getName1 (OMElement omElement) {

        org.andromda.workengine.helper.
            WorkEngineHelper.initializeWorkEngine();

        OMFactory fac = OMAbstractFactory.getOMFactory();

                Iterator iter = omElement.getChildElements();
        OMElement child;
        
        child = (OMElement) iter.next();
        final java.lang.String id = 
        (java.lang.String) typeMapper.unmarshall(child.getText());


          final java.lang.String[] semResult = new java.lang.String[1];  
          final Throwable[] semThrowable = new Throwable[1];  
        
        org.andromda.workengine.RunnableTask runnableTask = 
            new org.andromda.workengine.AbstractRunnableTask() {
            public void run() {
                try {
                      semResult[0] = _getImplementation().getName(id); 
                  } catch (Exception e) {
                    semThrowable[0] = e;
                }
            }
        };

        org.andromda.workengine.helper.
            WorkEngineHelper.scheduleAndWaitForTask(runnableTask);
        
        Throwable e = semThrowable[0];
        if (e != null) {
            throw new RuntimeException(e.getMessage(), e);
        }

        // create return element
        String namespace = NamespaceHelper.getNamespace(org.andromda.axistest.Service.class);
        OMNamespace omNamespace = fac.createOMNamespace(namespace, "ns1");
        OMElement resultElement = fac.createOMElement("result", omNamespace);

        String marschalledReturnVal;
                marschalledReturnVal = typeMapper.marshall(semResult[0]);
          resultElement.setText(marschalledReturnVal);
    return resultElement;
    }        
    
    public OMElement push0 (OMElement omElement) {

        org.andromda.workengine.helper.
            WorkEngineHelper.initializeWorkEngine();

        OMFactory fac = OMAbstractFactory.getOMFactory();

                Iterator iter = omElement.getChildElements();
        OMElement child;
        
        child = (OMElement) iter.next();
        final org.andromda.axistest.datamodel.ComplexType type = 
        (org.andromda.axistest.datamodel.ComplexType) typeMapper.unmarshall(child.getText());


          final Throwable[] semThrowable = new Throwable[1];  
        
        org.andromda.workengine.RunnableTask runnableTask = 
            new org.andromda.workengine.AbstractRunnableTask() {
            public void run() {
                try {
                      _getImplementation().push(type);
                  } catch (Exception e) {
                    semThrowable[0] = e;
                }
            }
        };

        org.andromda.workengine.helper.
            WorkEngineHelper.scheduleAndWaitForTask(runnableTask);
        
        Throwable e = semThrowable[0];
        if (e != null) {
            throw new RuntimeException(e.getMessage(), e);
        }

        // create return element
        String namespace = NamespaceHelper.getNamespace(org.andromda.axistest.Service.class);
        OMNamespace omNamespace = fac.createOMNamespace(namespace, "ns1");
        OMElement resultElement = fac.createOMElement("result", omNamespace);

    return resultElement;
    }        
    
    public OMElement pop0 (OMElement omElement) {

        org.andromda.workengine.helper.
            WorkEngineHelper.initializeWorkEngine();

        OMFactory fac = OMAbstractFactory.getOMFactory();

        

          final org.andromda.axistest.ResultType[] semResult = new org.andromda.axistest.ResultType[1];  
          final Throwable[] semThrowable = new Throwable[1];  
        
        org.andromda.workengine.RunnableTask runnableTask = 
            new org.andromda.workengine.AbstractRunnableTask() {
            public void run() {
                try {
                      semResult[0] = _getImplementation().pop(); 
                  } catch (Exception e) {
                    semThrowable[0] = e;
                }
            }
        };

        org.andromda.workengine.helper.
            WorkEngineHelper.scheduleAndWaitForTask(runnableTask);
        
        Throwable e = semThrowable[0];
        if (e != null) {
            throw new RuntimeException(e.getMessage(), e);
        }

        // create return element
        String namespace = NamespaceHelper.getNamespace(org.andromda.axistest.Service.class);
        OMNamespace omNamespace = fac.createOMNamespace(namespace, "ns1");
        OMElement resultElement = fac.createOMElement("result", omNamespace);

        String marschalledReturnVal;
                marschalledReturnVal = typeMapper.marshall(semResult[0]);
          resultElement.setText(marschalledReturnVal);
    return resultElement;
    }        
    
    public OMElement pushPop0 (OMElement omElement) {

        org.andromda.workengine.helper.
            WorkEngineHelper.initializeWorkEngine();

        OMFactory fac = OMAbstractFactory.getOMFactory();

                Iterator iter = omElement.getChildElements();
        OMElement child;
        
        child = (OMElement) iter.next();
        final org.andromda.axistest.datamodel.ComplexType type = 
        (org.andromda.axistest.datamodel.ComplexType) typeMapper.unmarshall(child.getText());


          final org.andromda.axistest.ResultType[] semResult = new org.andromda.axistest.ResultType[1];  
          final Throwable[] semThrowable = new Throwable[1];  
        
        org.andromda.workengine.RunnableTask runnableTask = 
            new org.andromda.workengine.AbstractRunnableTask() {
            public void run() {
                try {
                      semResult[0] = _getImplementation().pushPop(type); 
                  } catch (Exception e) {
                    semThrowable[0] = e;
                }
            }
        };

        org.andromda.workengine.helper.
            WorkEngineHelper.scheduleAndWaitForTask(runnableTask);
        
        Throwable e = semThrowable[0];
        if (e != null) {
            throw new RuntimeException(e.getMessage(), e);
        }

        // create return element
        String namespace = NamespaceHelper.getNamespace(org.andromda.axistest.Service.class);
        OMNamespace omNamespace = fac.createOMNamespace(namespace, "ns1");
        OMElement resultElement = fac.createOMElement("result", omNamespace);

        String marschalledReturnVal;
                marschalledReturnVal = typeMapper.marshall(semResult[0]);
          resultElement.setText(marschalledReturnVal);
    return resultElement;
    }        
    
    public OMElement signature0 (OMElement omElement) {

        org.andromda.workengine.helper.
            WorkEngineHelper.initializeWorkEngine();

        OMFactory fac = OMAbstractFactory.getOMFactory();

                Iterator iter = omElement.getChildElements();
        OMElement child;
        
        child = (OMElement) iter.next();
        final float[] f = 
        (float[]) typeMapper.unmarshall(child.getText());


          final int[][] semResult = new int[1][];  
          final Throwable[] semThrowable = new Throwable[1];  
        
        org.andromda.workengine.RunnableTask runnableTask = 
            new org.andromda.workengine.AbstractRunnableTask() {
            public void run() {
                try {
                      semResult[0] = _getImplementation().signature(f); 
                  } catch (Exception e) {
                    semThrowable[0] = e;
                }
            }
        };

        org.andromda.workengine.helper.
            WorkEngineHelper.scheduleAndWaitForTask(runnableTask);
        
        Throwable e = semThrowable[0];
        if (e != null) {
            throw new RuntimeException(e.getMessage(), e);
        }

        // create return element
        String namespace = NamespaceHelper.getNamespace(org.andromda.axistest.Service.class);
        OMNamespace omNamespace = fac.createOMNamespace(namespace, "ns1");
        OMElement resultElement = fac.createOMElement("result", omNamespace);

        String marschalledReturnVal;
                marschalledReturnVal = typeMapper.marshall(semResult[0]);
          resultElement.setText(marschalledReturnVal);
    return resultElement;
    }        
    
    public OMElement getName (OMElement omElement) {

        org.andromda.workengine.helper.
            WorkEngineHelper.initializeWorkEngine();

        OMFactory fac = OMAbstractFactory.getOMFactory();

                Iterator iter = omElement.getChildElements();
        OMElement child;
        
        child = (OMElement) iter.next();
        final java.lang.String p0 = 
        (java.lang.String) typeMapper.unmarshall(child.getText());

        child = (OMElement) iter.next();
        final java.lang.String[] p1 = 
        (java.lang.String[]) typeMapper.unmarshall(child.getText());


          final java.lang.String[] semResult = new java.lang.String[1];  
          final Throwable[] semThrowable = new Throwable[1];  
        
        org.andromda.workengine.RunnableTask runnableTask = 
            new org.andromda.workengine.AbstractRunnableTask() {
            public void run() {
                try {
                      semResult[0] = _getImplementation().getName(p0, p1); 
                  } catch (Exception e) {
                    semThrowable[0] = e;
                }
            }
        };

        org.andromda.workengine.helper.WorkEngineHelper.scheduleAndWaitForTask(runnableTask);
        
        Throwable e = semThrowable[0];
        if (e != null) {
            throw new RuntimeException(e.getMessage(), e);
        }

        // create return element
        String namespace = NamespaceHelper.getNamespace(org.andromda.axistest.Service.class);
        OMNamespace omNamespace = fac.createOMNamespace(namespace, "ns1");
        OMElement resultElement = fac.createOMElement("result", omNamespace);

        String marschalledReturnVal;
                marschalledReturnVal = typeMapper.marshall(semResult[0]);
          resultElement.setText(marschalledReturnVal);
    return resultElement;
    }        
    
}