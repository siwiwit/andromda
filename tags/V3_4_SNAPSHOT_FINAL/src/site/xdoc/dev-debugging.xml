<?xml version="1.0" encoding="iso-8859-1"?>

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>AndroMDA Developer Debugging Hints and Tips</title>
        <author email="martin@andromda.org">Martin West</author>
    </properties>
    <body>
        <section name="AndroMDA Developer Debugging">
            <p>
                This document provides guidelines on debugging the internals of AndroMDA. 
                Logging is managed by 
                <a href="http://www.andromda.org/docs/andromda-core/apidocs/org/andromda/core/common/AndroMDALogger.html">
                    AndroMDALogger
                </a>.
            </p>
        </section>
        <section name="Log4j">
            <subsection name="Overriding log4j settings">
                <p>
                    To override the default log4j settings:.
                </p>
                <ul>
                    <li>Create a file <a href="resources/log4j.txt">log4j.xml</a></li>
                    <li>Add the <em>loggingConfigurationUri</em> property to your <a href="configuration.html">AndroMDA configuration</a>.
                        For example:
                        <source><![CDATA[<property name="loggingConfigurationUri">file:/some_location/log4j.xml</property>]]></source>.
                    </li>
                    <li>
                        Modify as required. For more information consult the 
                        <a href="http://logging.apache.org/log4j/docs/manual.html">log4j
                        documentation</a> or this 
                        <a href="http://www.vipan.com/htdocs/log4jhelp.html">useful 
                        tutorial</a>. For pattern settings see 
                        <a href="http://logging.apache.org/log4j/docs/api/org/apache/log4j/PatternLayout.html">
                            PatternLayout
                        </a> javadoc.
                        The sample one above turns off INFO messages and 
                        limits others to WARN apart from the ejb cartridge which is set
                        to DEBUG.
                    </li>
                </ul>      
            </subsection>
            <subsection name="Log4J Categories">
                <table>
                    <tr>
                        <th>Category</th>
                        <th>Usage</th>
                    </tr>
                    <tr>
                        <td>AndroMDA</td>
                        <td>General Information messages</td>
                    </tr>
                    <tr>
                        <td>namespaces</td>
                        <td>Information messages for namespaces.</td>
                    </tr>
                    <tr>
                        <td>AndroMDA:NAMESPACE_NAME</td>
                        <td>Information messages for the specific namespace.</td>
                    </tr>
                    <tr>
                        <td>org.andromda.namespaces.CARTRIDGE</td>
                        <td>Debug messages for the specific cartridge.</td>
                    </tr>
                </table>
            </subsection>            
            <subsection name="Core Debugging">
                <p>
                    TBC
                </p>
            </subsection>
            <subsection name="Cartridge Debugging">
                <p>
                    The base class, 
                    <a href="http://www.andromda.org/docs/andromda-core/apidocs/org/andromda/core/metafacade/MetafacadeBase.html">
                    MetaFacadeBase</a> of Facade logic classes contains an instance variable logger.
                    This logger will have been initialized to use the appropriate namespace
                    category for the cartridge which contains this class. When using the debug calls
                    the isDebugEnabled method should be used to reduce the overhead of debug calls
                    <source>
if (logger.isDebugEnabled()) 
{
    logger.debug("A debug message '" + metaObject + "," + context + "'");
}
                     </source>
                     The logger instance variable is not initialized until after the object is
                     constructed and therefore not available in the constructor. To circumvent this
                     the following code can be employed:
                     <source>
Logger namespaceLogger = AndroMDALogger.getNamespaceLogger("ejb");
if (namespaceLogger.isDebugEnabled()) 
{
    namespaceLogger.warn("EJBEntityFacadeLogicImpl(" + metaObject + "," + context + ")");
}
                    </source>
                    Replacing "ejb" with the appropriate cartridge/namespace name.
                </p>
            </subsection>
        </section>
    </body>
</document>
