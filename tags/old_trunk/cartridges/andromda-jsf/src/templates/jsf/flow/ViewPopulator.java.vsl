#if ($stringUtils.isNotBlank($view.packageName))
package $view.packageName;
#end

import java.io.IOException;

import javax.faces.FactoryFinder;
import javax.faces.context.FacesContext;
import javax.faces.context.FacesContextFactory;
import javax.faces.lifecycle.Lifecycle;
import javax.faces.lifecycle.LifecycleFactory;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

/**
 * This filter handles the population of forms for the <em>$view.name</code>
 * view.
 */
public class $view.populator
    implements Filter
{

    private FilterConfig config;

    /**
     * Initialize the filter
     * 
     * @param config the configuration
     * @see javax.servlet.Filter#setFilterConfig(FilterConfig)
     */
    public void init(FilterConfig config)
    {
        this.config = config;
    }

    /**
     * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,
     *      javax.servlet.ServletResponse, javax.servlet.FilterChain)
     */
    public void doFilter(
        ServletRequest request,
        ServletResponse response,
        FilterChain chain) throws IOException, ServletException
    {
        this.populateFormAndViewVariables(request, response, null);
        chain.doFilter(request, response);
    }
    
    private void populateFormAndViewVariables(final ServletRequest request, final ServletResponse response, Object form)
        throws ServletException
    {
        // - we need to retrieve the faces context differently since we're outside of the
        //   faces servlet
        final LifecycleFactory lifecycleFactory =
            (LifecycleFactory)FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);
        final Lifecycle lifecycle = lifecycleFactory.getLifecycle(LifecycleFactory.DEFAULT_LIFECYCLE);
        final FacesContextFactory facesContextFactory =
            (FacesContextFactory)FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);
        final FacesContext facesContext =
            facesContextFactory.getFacesContext(
                this.config.getServletContext(),
                request,
                response,
                lifecycle);
        final javax.faces.el.VariableResolver variableResolver = facesContext.getApplication().getVariableResolver();
        if (form == null)
        {  
            form = variableResolver.resolveVariable(facesContext, "$view.formKey");
        }
        else
        {
            // - since the form argument is not null, set it as the "$view.formKey" in the session 
            //   (to replace the existing "$view.formKey" attribute)
            ((javax.servlet.http.HttpSession)facesContext.getExternalContext().getSession(true)).setAttribute("$view.formKey", form);
        }
        try
        {
#if (!$view.formActions.empty)
            // - populate the forms
            if (form != null)
            {    
#foreach ($action in $view.formActions) 
                $action.fullyQualifiedFormImplementationName $action.formBeanName =
                    ($action.fullyQualifiedFormImplementationName)variableResolver.resolveVariable(
                    facesContext,
                    "$action.formBeanName");
                // - populate the $action.formBeanName with any parameters from the previous form
                ${managedBeansPackage}.${formPopulatorName}.populateForm(form, $action.formBeanName);
                request.setAttribute("$action.formBeanName", $action.formBeanName);
#end
            }
#end
#if (!$view.variables.empty || !$view.backingValueVariables.empty)
            // - populate the view variables
            if (form != null)
            {    
                boolean allPropertiesReadable = true;
#foreach ($variable in $view.variables)
#set ($readableVariable = "${variable.name}Readable")
                final boolean $readableVariable = org.apache.commons.beanutils.PropertyUtils.isReadable(form, "$variable.name");
                if ($readableVariable)
                {
                    request.setAttribute("$variable.name", org.apache.commons.beanutils.PropertyUtils.getProperty(form, "$variable.name"));
                }
                else
                {
                    allPropertiesReadable = false;
                }
#end
#foreach ($variable in $view.backingValueVariables)
#if (!$variable.complex)
#renderBackingValuePopulation($variable "")
#end
#foreach ($attribute in $variable.attributes)
#if ($attribute.isSelectable($variable) || $attribute.isBackingValueRequired($variable))
#renderBackingValuePopulation($attribute $variable)
#end
#end
#end
                if (!allPropertiesReadable)
                {
                    ${managedBeansPackage}.FormHistory formHistory = (${managedBeansPackage}.FormHistory)variableResolver.resolveVariable(facesContext, "$formHistoryBeanName");
                    if (formHistory != null)
                    {
                        form = formHistory.getLastFormInHistory();
                        if (form != null)
                        {
                            this.populateFormAndViewVariables(request, response, form);
                            formHistory.addFormToHistory(form);
                        }
                    }                
                }
            } 
#end
        }
        catch (final Throwable throwable)
        {
            throw new ServletException(throwable);
        }
    }


    /**
     * @see javax.servlet.Filter#destroy()
     */
    public void destroy()
    {
        this.config = null;
    }
}
##
##  A macro that renders population of the backing list view variables
##
#macro(renderBackingValuePopulation $variable $ownerParameter)
#if ($variable.backingListName)
#if ($variable.selectable)
#set ($variableName = $variable.backingListName)
#else
#set ($variableName = $variable.backingValueName)
#end
#else
#if ($variable.isSelectable($ownerParameter))
#set ($variableName = $variable.getBackingListName($ownerParameter))
#else
#set ($variableName = $variable.getBackingValueName($ownerParameter))
#end
#end
#set ($readableVariable = "${variableName}Readable")
                final boolean $readableVariable = org.apache.commons.beanutils.PropertyUtils.isReadable(form, "$variableName");
                if ($readableVariable)
                {
                    request.setAttribute("$variableName", org.apache.commons.beanutils.PropertyUtils.getProperty(form, "$variableName"));
                }
                else
                {
                    allPropertiesReadable = false;
                }
#end