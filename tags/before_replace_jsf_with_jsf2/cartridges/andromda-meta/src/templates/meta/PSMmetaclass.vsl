// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: PSMmetaclass.vsl in andromda-meta-cartridge.
//
#if ($stringUtils.isNotBlank($class.packageName))
package $class.packageName;
#set ($pkg = "${class.packageName}.")
#else
#set ($pkg = "")
#end

#if ($serializable)
import java.io.Serializable;

#end
/**
$class.getDocumentation(" * ")
 */
#set($abstract = $class.abstract || $class.operationsPresent)
public#if($abstract) abstract#end class $class.name
#if($class.generalization)
#if ($class.generalization.operationsPresent)
#set ($classExtends = "${class.generalization.fullyQualifiedName}Impl")
#else
#set ($classExtends = "${class.generalization.fullyQualifiedName}")
#end
    extends $classExtends.replace($pkg, "")
#end
#if ($serializable)
    implements Serializable
#end
{
#if ($serializable)
    /**
     * The serial version UID of this class. Needed for serialization. ${class.serialVersionUID}L
     */
    private static final long serialVersionUID = ${class.serialVersionUID}L;

#end

##// requiredConstructorParameters.size = $class.requiredConstructorParameters.size()
###foreach ($property in $class.requiredConstructorParameters)
##    // ${property.name}
###end
##
##// allRequiredConstructorParameters.size = $class.allRequiredConstructorParameters.size()
###foreach ($property in $class.allRequiredConstructorParameters)
##    // ${property.name}
###end
##
##// allProperties.size = $class.allProperties.size()
###foreach ($property in $class.allProperties)
##    // ${property.name}
###end
##
##  default constructor
##
#if ($class.requiredConstructorParameters.size() > 0 || $class.allRequiredConstructorParameters.size() > $class.requiredConstructorParameters.size())
    /**
     * Public default constructor for ${class.name}
     */
    public ${class.name}()
    {
#if($class.generalization)
        super();
#end
#foreach ($property in $class.requiredConstructorParameters)
        this.${property.name} = ${property.type.javaNullString};
#end
    }

#end
##
##  constructor taking only required properties
##
#if ($class.allProperties.size() > $class.allRequiredConstructorParameters.size())
    /**
     * Public constructor for ${class.name} with $class.allRequiredConstructorParameters.size() required properties.
#foreach ($property in $class.allRequiredConstructorParameters)
     * @param ${property.name}In ${property.getterSetterTypeName} $property.getDocumentation("")
#end
     */
    public ${class.name}(## no newline
#set ($comma = "")
#foreach ($property in $class.allRequiredConstructorParameters)
${comma}${property.getterSetterTypeName} ${property.name}## no newline
#set ($comma = ", ")
#end
)
    {
#if($class.generalization)
        super(## no newline
#set ($comma = "")
#foreach ($property in $class.generalization.allRequiredConstructorParameters)
${comma}${property.name}## no newline
#set ($comma = ", ")
#end
);
#end
#foreach ($property in $class.requiredConstructorParameters)
        this.${property.name} = ${property.name};
#end
    }

#end
##
##  constructor taking all properties
##
    /**
     * Public constructor for ${class.name} with all properties.
#foreach ($property in $class.allProperties)
     * @param ${property.name}In ${property.getterSetterTypeName} $property.getDocumentation("")
#end
     */
    public ${class.name}(## no newline
#set ($comma = "")
#foreach ($property in $class.allProperties)
${comma}${property.getterSetterTypeName} ${property.name}In## no newline
#set ($comma = ", ")
#end
)
    {
#if($class.generalization)
        super(## no newline
#set ($comma = "")
#foreach ($property in $class.generalization.allProperties)
${comma}${property.name}In## no newline
#set ($comma = ", ")
#end
);
#end
#foreach ($property in $class.properties)
        this.${property.name} = ${property.name}In;
#end
    }

    /**
     * Copy-constructor from other ${class.name}
     *
     * @param otherBean, cannot be <code>null</code>
     * @throws NullPointerException if the argument is <code>null</code>
     */
    public ${class.name}(${class.name} otherBean)
    {
        this(## no newline
#set ($comma = "")
#foreach ($property in $class.allProperties)
${comma}otherBean.${property.getterName}()## no newline
#set ($comma = ", ")
#end
);
    }

#foreach ($attribute in $class.attributes)
    protected $attribute.getterSetterTypeName $attribute.name#if ($attribute.defaultValuePresent) = $attribute.defaultValue#end;

    /**
$attribute.getDocumentation("     * ")
     * @return this.${attribute.name} $attribute.getterSetterTypeName
     */
    public $attribute.getterSetterTypeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

#if (!$attribute.readOnly)
    /**
$attribute.getDocumentation("     * ")
     * @param ${attribute.name}In $attribute.getterSetterTypeName
     */
    public void ${attribute.setterName}($attribute.getterSetterTypeName ${attribute.name}In)
    {
        this.${attribute.name} = ${attribute.name}In;
    }

#end
#end
## Generate the relation methods.
#foreach ($associationEnd in $class.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable)
    protected $target.getterSetterTypeName $target.name;

    /**
     * Get the $target.name
$target.getDocumentation("     * ")
     * @return this.${target.name} $target.getterSetterTypeName
     */
    public $target.getterSetterTypeName ${target.getterName}()
    {
        return this.${target.name};
    }

#if (!$associationEnd.readOnly)
    /**
     * Sets the $target.name
     * @param ${target.name}In $target.getterSetterTypeName
     */
    public void ${target.setterName}($target.getterSetterTypeName ${target.name}In)
    {
        this.${target.name} = ${target.name}In;
    }

#end
#end
#end
##Generate operations
#foreach ($operation in $class.operations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
$operation.getDocumentation("     * ")
#foreach ($argument in $operation.arguments)
     * @param $argument.name $argument.fullyQualifiedName $argument.getDocumentation("")
#end
     * @return $returnType.fullyQualifiedName
#foreach ($exception in $operation.exceptions)
     * @throws $exception.fullyQualifiedName
#end
     */
#if ($operation.exceptionsPresent)
    $operation.visibility abstract $returnType.fullyQualifiedName $signature
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $returnType.fullyQualifiedName $signature;
#end

#end
}