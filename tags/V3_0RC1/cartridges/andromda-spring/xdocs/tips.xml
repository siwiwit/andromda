<?xml version="1.0" encoding="iso-8859-1"?>

<document>

    <properties>
        <author email="draftdog@users.sourceforge.net">Wouter Zoons</author>
        <title>AndroMDA - Spring - Tips</title>
    </properties>

    <body>

        <section name="Tips for using the AndroMDA Spring cartridge">
            <p>
                This section provides you with some pointers that might prove helpful when using AndroMDA with
                the Spring cartridge.
            </p>
        </section>

        <section name="Exceptions">
            <p>
                It's not needed to model exceptions for all the services you model, the Spring cartridge will
                generate them automatically for you. That way you don't need to keep writing
                <code>try/catch</code> blocks in the <code>handleXXX</code> methods in the service implementation
                classes, just throw any error, it will be handled for you.
            </p>
            <p>
                So basically this snippet is a good example of an implementation of a service operation, there is
                no need to catch any exception and rethrow it:
<source language="java"><![CDATA[
protected PersonDetails handleGet(Long id) throws Exception
{
    return (PersonDetails)getPersonDao().load(PersonDao.TRANSFORM_PERSONDETAILS, id);
}
]]></source>
            </p>
        </section>

        <section name="Running without EJBs">
            <p>
                The Spring cartridge by default uses stateless EJB session beans behind the scenes,
                so you'll need to deploy in a real J2EE container such as
                <a href="http://www.jboss.org/">JBoss</a>. If you prefer to deploy applications
                in <a href="http://jakarta.apache.org/tomcat/">Tomcat</a>, or you just want to make your application
                lighter by dropping EJBs altogether and making use of the Spring transaction manager you can do so
                by uncommenting the <code>session-ejbs</code> outlet.
            </p>
            <p>
                If you generated your project using the
                <a href="../starting.html#My_first_AndroMDA_project">andromdapp:generate</a> Maven plugin you simply
                need to put the outlet in comment like this (this is done in <code>/mda/project.xml</code>):
<source language="xml"><![CDATA[
<dependency>
    <groupId>andromda</groupId>
    <artifactId>andromda-spring-cartridge</artifactId>
    <version>${andromda}</version>
    <type>jar</type>
    <properties>
        ...
        <!--
            <session-ejbs>${maven.andromda.core.generated.dir}</session-ejbs>
        -->
        ...
    </properties>
</dependency>
]]></source>
            </p>
        </section>
        <section name="Beware of lazy loading!">
            <p>
                  Unless an Association is composition-modeled, all associations
                  collections are made <a href="modeling.html#@andromda_hibernate_lazy">lazy</a> by
                  default. While this is very nice to avoid retrieving the whole
                  database on each query, you should be aware that each
                  time you invoke a method on a <a href="howto3.html">Spring Service</a>, a Hibernate
                  Session is opened at the beginning and closed at the end of the call.
            </p>
            <p>
                  The consequence of this is that every persistent object that was retrieved in the body
                  of a Service method is unable to retrieve its associations lazily outside this very call.
            </p>
            <p>
                  For example: if the <code>user</code> parameter in the following code was obtained as the result
                  of calling a Spring service method, and that user has a lazy <code>group</code> association,
                  and the following is another Spring Service method,
                  it would raise a <code>net.sf.hibernate.LazyInitializationException</code>:
            </p>
<source language="java"><![CDATA[
protected boolean doSomethingWithUserGroups(User user) throws Exception
{
    ...
    java.util.Collection userGroups = user.getGroups ();
    java.util.Iterator everyUserGroup = userGroups.iterator(); // this call would generate the exception
    ...
}
]]></source>
        </section>
    </body>
</document>
