// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEnumeration.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${stringUtils.replace($enumeration.packageName, '.', '/')}/${enumeration.enumerationName}.java")
#if ($stringUtils.isNotBlank($enumeration.packageName))
package $enumeration.packageName;
#end

import net.sf.hibernate.HibernateException;

import java.sql.Types;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
$enumeration.getDocumentation(" * ")
 */
public final class $enumeration.enumerationName
    extends $enumeration.name
    implements java.io.Serializable,
               java.lang.Comparable,
               net.sf.hibernate.UserType
{

    private static final int[] SQL_TYPES = {Types.VARCHAR};

    /**
     * Default constructor.  Hibernate needs the default constructor
     * to retrieve an instance of the enum from a JDBC resultset.
     * The instance will be converted to the correct enum instance
     * in {@link #nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)}.
     */
    public ${enumeration.enumerationName}()
    {
        super();
    }

    /**
     *  @see net.sf.hibernate.UserType#sqlTypes()
     */
    public int[] sqlTypes()
    {
        return SQL_TYPES;
    }

    /**
     *  @see net.sf.hibernate.UserType#deepCopy(java.lang.Object)
     */
    public Object deepCopy(Object value) throws HibernateException
    {
        // Enums are immutable - nothing to be done to deeply clone it
        return value;
    }

    /**
     *  @see net.sf.hibernate.UserType#isMutable()
     */
    public boolean isMutable()
    {
        // Enums are immutable
        return false;
    }

    /**
     *  @see net.sf.hibernate.UserType#equals(java.lang.Object, java.lang.Object)
     */
    public boolean equals(Object x, Object y) throws HibernateException
    {
        return (x == y) || (x != null && y != null && y.equals(x));
    }

    /**
     * @see net.sf.hibernate.UserType#returnedClass()
     */
    public Class returnedClass()
    {
        return ${enumeration.name}.class;
    }

    /**
     *  @see net.sf.hibernate.UserType#nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)
     */
    public Object nullSafeGet(ResultSet resultSet, String[] values, Object owner) throws HibernateException, SQLException
    {
        final $enumeration.literalType.fullyQualifiedName value = ($enumeration.literalType.fullyQualifiedName)resultSet.getObject(values[0]);
        return resultSet.wasNull() ? null : ${enumeration.fromOperationName}(value);
    }

    /**
     * @see net.sf.hibernate.UserType#nullSafeSet(java.sql.PreparedStatement, java.lang.Object, int)
     */
    public void nullSafeSet(PreparedStatement statement, Object value, int index) throws HibernateException, SQLException
    {
        if (value == null)
        {
            statement.setNull(index, Types.VARCHAR);
        }
        else
        {
            statement.setObject(index, ${enumeration.literalType.fullyQualifiedName}.valueOf(java.lang.String.valueOf(value)));
        }
    }
}