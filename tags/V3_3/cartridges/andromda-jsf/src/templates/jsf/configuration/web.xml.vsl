<?xml version="1.0" encoding="$xmlEncoding"?>

<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         version="2.4">

#if ($distributable.equalsIgnoreCase("true"))
    <distributable/>

#end
    <context-param>
        <!-- Maximum memory per request (in bytes) -->
        <param-name>oracle.adf.view.faces.UPLOAD_MAX_MEMORY</param-name>
        <param-value>$fileUploadMaxMemoryPerRequest</param-value>
    </context-param>
    <context-param>
        <!-- Maximum disk space per request (in bytes) -->
        <param-name>oracle.adf.view.faces.UPLOAD_MAX_DISK_SPACE</param-name>
        <param-value>$fileUploadMaxDiskSpacePerRequest</param-value>
    </context-param>
#if ($viewTypeIsFacelets)
    <context-param>
        <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
        <param-value>.xhtml</param-value>
    </context-param>
    <context-param>
        <param-name>facelets.VIEW_MAPPINGS</param-name>
        <param-value>*.xhtml</param-value>
    </context-param>

    <!-- ADF Faces has its own ViewHandler, which is a "decorating"
         view handler - for example, it needs to wrap methods like renderView()
         to perform some extra pre- and post-handling.  Facelets, on the other
         hand, is more of a true ViewHandler - it actually implements
         renderView() (yeah, it decorates too, but forget about that
         for a second).  As a result, the world is a better place if
         the ADF Faces ViewHandler runs around the Facelets ViewHandler.
         But since Facelets is registered in WEB-INF/faces-config.xml,
         and ADF's is registered from META-INF/faces-config.xml in its
         JAR, exactly the opposite happens as per the JSF spec.

         Hence, the following config parameter, which ADF Faces
         exposes (as of EA19) to allow pushing a ViewHandler inside
         of ours.  FWIW, you retain the entire delegation stack -
         just flipped around a bit - so that Facelets still decorates
         the standard ViewHandler, and therefore you've still got
         JSP support.
      -->
    <context-param>
        <param-name>oracle.adf.view.faces.ALTERNATE_VIEW_HANDLER</param-name>
        <param-value>com.sun.facelets.FaceletViewHandler</param-value>
    </context-param>

#end
#if ($faceletsDevelopmentSupportEnabled)
    <context-param>
        <param-name>facelets.REFRESH_PERIOD</param-name>
        <param-value>2</param-value>
    </context-param>

    <context-param>
        <param-name>facelets.DEVELOPMENT</param-name>
        <param-value>true</param-value>
    </context-param>

#end
#if ($facesConfigFiles)
    <context-param>
        <description>
            Comma separated list of URIs of (additional) faces config files.
            (e.g. /WEB-INF/jsf-config.xml)
            See JSF 1.0 PRD2, 10.3.2
        </description>
        <param-name>javax.faces.CONFIG_FILES</param-name>
        <param-value>
            $facesConfigFiles
        </param-value>
    </context-param>

#end

    <context-param>
        <description>
            State saving method: "client" or "server" (= default)
            See JSF Specification 2.5.2. In ADF Faces, it is an
            optimized, token-based mechanism that is almost always a
            better choice than the standard JSF server-side state saving.
        </description>
        <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
        <param-value>$stateSavingMethod</param-value>
    </context-param>

    <context-param>
        <description>
            This parameter tells MyFaces if javascript code should be allowed in the
            rendered HTML output.
            If javascript is allowed, command_link anchors will have javascript code
            that submits the corresponding form.
            If javascript is not allowed, the state saving info and nested parameters
            will be added as url parameters.
            Default: "true"
        </description>
        <param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <description>
            If true, rendered HTML code will be formatted, so that it is "human readable".
            i.e. additional line separators and whitespace will be written, that do not
            influence the HTML code.
            Default: "true"
        </description>
        <param-name>org.apache.myfaces.PRETTY_HTML</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
        <param-value>false</param-value>
    </context-param>

    <context-param>
        <description>
            If true, a javascript function will be rendered that is able to restore the
            former vertical scroll on every request. Convenient feature if you have pages
            with long lists and you do not want the browser page to always jump to the top
            if you trigger a link or button action that stays on the same page.
            Default: "false"
        </description>
        <param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
        <param-value>true</param-value>
    </context-param>
    <!-- context-param merge-point -->
    <!-- filter merge-point -->
#if ($securityEnabled && !$roles.empty)
    <filter>
        <filter-name>User Role Filter</filter-name>
        <filter-class>${managedBeansPackage}.UserRoleFilter</filter-class>
    </filter>
#end

    <!-- ADF Faces Filter -->
    <filter>
        <filter-name>ADF Faces Filter</filter-name>
        <filter-class>oracle.adf.view.faces.webapp.AdfFacesFilter</filter-class>
    </filter>

    <!-- Extensions Filter -->
    <filter>
        <filter-name>MyFaces Extensions Filter</filter-name>
#if ($outputLibraries)
        <filter-class>org.apache.myfaces.webapp.filter.ExtensionsFilter</filter-class>
#else
        <filter-class>org.apache.myfaces.component.html.util.ExtensionsFilter</filter-class>
#end
        <init-param>
            <description>
                Set the size limit for uploaded files.

                Format: 10 - 10 bytes
                        10k - 10 KB
                        10m - 10 MB
                        1g - 1 GB
            </description>
            <param-name>uploadMaxFileSize</param-name>
            <param-value>100m</param-value>
        </init-param>
        <init-param>
            <description>
                Set the threshold size - files
                below this limit are stored in memory, files above
                this limit are stored on disk.

                Format: 10 - 10 bytes
                        10k - 10 KB
                        10m - 10 MB
                        1g - 1 GB
            </description>
            <param-name>uploadThresholdSize</param-name>
            <param-value>100k</param-value>
        </init-param>
        <!--
        <init-param>
            <param-name>uploadRepositoryPath</param-name>
            <param-value>/temp</param-value>
            <description>Set the path where the intermediary files will be stored.</description>
        </init-param>
        -->
    </filter>
#foreach ($useCase in $useCases)
#foreach ($view in $useCase.views)
#if ($view.populatorRequired)
    <filter>
        <filter-name>$view.fullyQualifiedPopulator</filter-name>
        <filter-class>$view.fullyQualifiedPopulator</filter-class>
    </filter>
#end
#end
#end
    <!-- filter-mapping merge-point -->
    <filter-mapping>
        <filter-name>ADF Faces Filter</filter-name>
        <url-pattern>*.${facesServletExtension}</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>MyFaces Extensions Filter</filter-name>
        <url-pattern>*.${facesServletExtension}</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>MyFaces Extensions Filter</filter-name>
        <url-pattern>/faces/myFacesExtensionResource/*</url-pattern>
    </filter-mapping>
#if ($securityEnabled && !$roles.empty)
    <filter-mapping>
        <filter-name>User Role Filter</filter-name>
        <url-pattern>*.${facesServletExtension}</url-pattern>
    </filter-mapping>
#end
#foreach ($useCase in $useCases)
#foreach ($view in $useCase.views)
#if ($view.populatorRequired)
    <filter-mapping>
        <filter-name>$view.fullyQualifiedPopulator</filter-name>
        <url-pattern>${view.path}.${facesServletExtension}</url-pattern>
    </filter-mapping>
#end
#end
#end
    <!-- Listener, that does all the startup work (configuration, init). -->
    <listener>
        <listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
    </listener>
    <!-- listener merge-point -->

    <!-- servlet merge-point -->
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- resource loader servlet -->
    <servlet>
        <servlet-name>ADF Resources Servlet</servlet-name>
        <servlet-class>oracle.adf.view.faces.webapp.ResourceServlet</servlet-class>
    </servlet>
#set ($generateLogoutServlet = !$useCases.empty && $securityEnabled)
#if ($generateLogoutServlet)
#set ($logOutServlet = "${managedBeansPackage}.LogOutServlet")
    <servlet>
        <servlet-name>$logOutServlet</servlet-name>
        <servlet-class>$logOutServlet</servlet-class>
    </servlet>
#end
#foreach ($useCase in $useCases)
    <servlet>
        <servlet-name>$useCase.fullyQualifiedActionClassName</servlet-name>
        <servlet-class>$useCase.fullyQualifiedActionClassName</servlet-class>
    </servlet>
#end
    <servlet>
        <servlet-name>AndroMDA JSF Servlet</servlet-name>
        <servlet-class>org.andromda.cartridges.jsf.JSFServlet</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>

    <!-- precompilation merge-point -->
    <servlet-mapping>
        <servlet-name>AndroMDA JSF Servlet</servlet-name>
        <url-pattern>/jsf/*</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.${facesServletExtension}</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>ADF Resources Servlet</servlet-name>
        <url-pattern>/adf/*</url-pattern>
    </servlet-mapping>
#if ($generateLogoutServlet)
    <servlet-mapping>
        <servlet-name>$logOutServlet</servlet-name>
        <url-pattern>/${logoutFileName}.${facesServletExtension}</url-pattern>
    </servlet-mapping>
#end
#foreach ($useCase in $useCases)
    <servlet-mapping>
        <servlet-name>$useCase.fullyQualifiedActionClassName</servlet-name>
        <url-pattern>${useCase.path}.${facesServletExtension}</url-pattern>
    </servlet-mapping>
#end
    <!-- servlet-mapping merge-point -->
    <session-config>
        <session-timeout>$sessionTimeout</session-timeout>
        <!-- session-config merge-point -->
    </session-config>
    <!-- mime-type merge-point -->

    <!-- Welcome files -->
    <welcome-file-list>
        <!-- welcome-file-list merge-point -->
        <welcome-file>$welcomeFileName</welcome-file>
    </welcome-file-list>

    <error-page>
        <error-code>408</error-code>
        <location>/index.jsp</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/403.jsp</location>
    </error-page>
    <!-- error-page merge-point -->
    <!-- taglib merge-point -->
    <!-- resource-ref merge-point -->
    <!-- security-constraint merge-point -->

#if (!$applicationUseCases.empty)
#set($applicationUseCase = $applicationUseCases.iterator().next())
#end
#set ($useCases = $applicationUseCase.allUseCases)
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Raw-JSF-Pages</web-resource-name>
            <description>
                Prevent access to raw pages that are for JSF pages.
                (No roles, so no direct access)
            </description>
#foreach ($useCase in $useCases)
#foreach ($view in $useCase.views)
            <url-pattern>${view.path}.${jsfUtils.viewExtension}</url-pattern>
#end
#end
        </web-resource-collection>
        <auth-constraint>
        </auth-constraint>
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>
#if ($securityEnabled)
#foreach ($applicationUseCase in $applicationUseCases)
#foreach ($useCase in $applicationUseCase.allUseCases)
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>$useCase.name resources</web-resource-name>
            <description>
                This collection secures all views and resources
                as well as the actions called in the "$useCase.name" use-case
            </description>
            <url-pattern>${useCase.pathRoot}/*</url-pattern>
        </web-resource-collection>
#if ($useCase.secured)
        <auth-constraint>
#foreach ($user in $useCase.roles)
            <role-name>$user.name</role-name>
#end
        </auth-constraint>
#end
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

#end
    <login-config>
        <auth-method>FORM</auth-method>
        <realm-name>$securityRealm</realm-name>
        <form-login-config>
            <form-login-page>/${loginFileName}.${facesServletExtension}</form-login-page>
            <form-error-page>/${loginFileName}.${facesServletExtension}?action=error</form-error-page>
        </form-login-config>
    </login-config>

#foreach ($user in $applicationUseCase.allRoles)
    <security-role>
        <role-name>$user.name</role-name>
    </security-role>
#end
    <!-- security-role merge-point -->

#end
#end
</web-app>