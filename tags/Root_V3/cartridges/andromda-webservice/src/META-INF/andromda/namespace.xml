<?xml version="1.0" encoding="ISO-8859-1" ?>

<namespace name="webservice">
    <components>
        <component name="cartridge">
            <path>META-INF/andromda/cartridge.xml</path>
        </component>
        <component name="metafacades">
            <path>META-INF/andromda/metafacades.xml</path>
        </component>
        <component name="profile">
            <path>META-INF/andromda/profile.xml</path>
        </component>
    </components>
    <properties>
        <!-- namespace-propertyGroup merge-point -->
        <propertyGroup name="Outlets">
            <documentation>
                Defines the locations to which output is generated.
            </documentation>
            <property name="wsdls">
                <documentation>
                    Specifies the directory to which generated WSDL's will be placed.
                </documentation>
            </property>
            <property name="java-types">
                <documentation>
                    The directory to which any non implementation Java files will be generated.
                </documentation>
            </property>
            <property name="axis-configuration">
                <documentation>
                    The directory to which any AXIS specific configuration files
                    are generated (such as the WSDD files, etc).
                </documentation>
            </property>
            <property name="axis-tests" required="false">
                <documentation>
                    The directory to which AXIS specific test classes are generated.
                </documentation>
            </property>
            <property name="axis-test-impls" required="false">
                <documentation>
                    The directory to which the AXIS specific test implementation classes are generated.
                </documentation>
            </property>
            <property name="wss4j-configuration" required="false">
                <documentation>
                    The directory to which any <a href="http://ws.apache.org/ws-fx/wss4j/index.html">WSS4J</a>
                    specific configuration files are generated.
                </documentation>
            </property>
            <property name="webservice-types">
                <documentation>
                    The directory to which any extra webservice classes will be generated (i.e. an AttachmentHandler
                    for example).
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="Other">
            <property name="webserviceTypesPackage">
                <default>org.andromda.webservice</default>
                <documentation>
                    The package to which extra types are generated (i.e. AttachmentHandler).
                </documentation>
            </property>
            <property name="attachmentsDirectory" required="false">
                <documentation>
                    The directory where attachments end up. This should be in the syntax appropriate for the target platform.
                </documentation>
            </property>
            <property name="namespacePrefix">
                <default>impl</default>
                <documentation>
                    Defines the prefix to give to the default namespace.
                </documentation>
            </property>
            <property name="qualifiedNameLocalPartPattern">
                <default>{0}</default>
                <documentation>
                    The pattern to use when a qualified name local part is created.
                    <em>{0}</em> represents the name of the classifier (i.e.
                    <em>WS{0}</em> would give all your types and services a prefix
                    of <em>WS</em>).
                </documentation>
            </property>
            <property name="namespacePattern">
                <default>http://{0}</default>
                <documentation>
                    The pattern to use when a namespace is created.
                    <em>{0}</em> represents the package name of the classifier (i.e.
                    <em>ws.{0}</em> would prefix all your type and service
                    namespaces with <em>ws.</em>).
                </documentation>
            </property>
            <property name="reverseNamespace">
                <default>false</default>
                <documentation>
                    Whether or not to reverse the ordering of the namespace.
                    The namespace is typically determined by the package
                    name of the service or type, this allows you to reverse the package
                    name. (i.e. org.andromda.samples would become
                    <em>samples.andromda.org</em> if this was set to <code>true</code>).
                    Value should be <code>true or false</code>.
                </documentation>
            </property>
            <property name="defaultProvider">
                <default>RPC</default>
                <documentation>
                    The default use given all web services (if not defined seperately
                    on each web service). Possible choices are:
                    <ul>
                        <li>RPC</li>
                        <li>EJB</li>
                    </ul>
                </documentation>
            </property>
            <property name="defaultStyle">
                <default>wrapped</default>
                <documentation>
                    The default style given all web services (if not defined seperately
                    on each web service). Possible choices are:
                    <ul>
                        <li>wrapped</li>
                        <li>document</li>
                        <li>rpc</li>
                    </ul>
                </documentation>
            </property>
            <property name="defaultUse">
                <default>literal</default>
                <documentation>
                    The default use given all web services (if not defined seperately
                    on each web service). Possible choices are:
                    <ul>
                        <li>literal</li>
                        <li>encoded</li>
                    </ul>
                </documentation>
            </property>
            <property name="rpcClassNamePattern">
                <default>{0}.{1}Impl</default>
                <documentation>
                    The pattern to use for the class name for a web service using an RPC
                    provider.  It's useful to set this when your RPC service
                    has a non typical name (i.e. you want to use the web service delegator
                    from the spring cartridge).
                    <em>{0}</em> is the service package name and <em>{1}</em> is the service class name.
                </documentation>
            </property>
            <property name="wsdlOperationSortMode">
                <default>name</default>
                <documentation>
                    Specifies how operations should be sorted within the WSDL.
                    Current options are <strong>none</strong> and <strong>name</strong>.
                </documentation>
            </property>
            <property name="testPackageNamePattern">
                <default>{0}.test</default>
                <documentation>
                    The pattern to use when constructing the package name to which tests are generated, where
                    <em>{0}</em> is the current model element package name.
                </documentation>
            </property>
            <property name="testNamePattern">
                <default>{0}Test</default>
                <documentation>
                    The pattern to use when constructing the name's of the tests that should be generated,
                    where <em>{0}</em> is the current model element name.
                </documentation>
            </property>
            <property name="testImplementationNamePattern">
                <default>{0}TestImpl</default>
                <documentation>
                    The pattern used to construct the test implementation name, where <em>{0}</em>
                    is the current model element name.
                </documentation>
            </property>
            <property name="arrayNamePrefix">
                <default>ArrayOf</default>
                <documentation>
                    Specifies the prefix to give to names of WSDL array elements.
                </documentation>
            </property>
            <property name="schemaTypeMappingsUri">
                <documentation>
                    URI specifying the specific mappings from model types to WSDL Schema types.
                    (i.e. <code>file:${basedir}/XmlSchemaMappings.xml</code>)
                </documentation>
            </property>
            <property name="ejbJndiNamePrefix" required="false">
                <documentation>
                    The prefix given to the JNDI name of the EJB provider.  This
                    may be specified by another cartridge (i.e. the
                    <a href="../andromda-hibernate-cartridge/namespace.html#ejbJndiNamePrefix">Hibernate</a>
                    cartridge, <a href="../andromda-ejb-cartridge/namespace.html#jndiName">EJB</a>
                    cartridge, etc.) so it must be specified here in order to give
                    the correct JNDI name of an EJB provider.
                </documentation>
            </property>
            <property name="ejbInterfacePattern">
                <default>{0}.{1}</default>
                <documentation>
                    The pattern to use when determining the interface of an EJB
                    provider: <em>{0}</em> represents the package name of the
                    model element and <em>{1}</em> represents the name of the
                    model element.
                </documentation>
            </property>
            <property name="ejbHomeInterfacePattern">
                <default>{0}.{1}Home</default>
                <documentation>
                    The pattern to use when determining the home interface of
                    an EJB provider: <em>{0}</em> represents the package name
                    of the model element and <em>{1}</em> represents the name
                    of the model element.
                </documentation>
            </property>
            <property name="testImplementationOperationNamePrefix">
                <default>handle</default>
                <documentation>
                    The pattern used to construct the test implementation name, where <em>{0}</em>
                    is the current model element name.
                </documentation>
            </property>
            <property name="applicationName">
                <documentation>
                    The name of the application that this service will run within
                    (i.e. Security Services}
                </documentation>
            </property>
            <property name="wsdlSoapAddress">
                <documentation>
                    The location of where the WSDL will reside (i.e. "http://localhost:8080/security-service/services")
                </documentation>
            </property>
            <property name="securityRealm" required="false">
                <documentation>
                    The security realm to use for securing your web service(s).
                    <strong>NOTE:</strong> this must be set in order to have
                    <strong>ANY</strong> of your web services secured.  A web service
                    will be secured if it has <strong>any</strong> roles (i.e. Actors)
                    have dependencies to it.
                </documentation>
            </property>
            <property name="testServiceLocatorName">
                <default>TestServiceLocator</default>
                <documentation>
                    The name to give the test service locator.
                </documentation>
            </property>
            <property name="testServiceLocatorPackage">
                <default>org.andromda.webservice.test</default>
                <documentation>
                    The package to give the test service locator.
                </documentation>
            </property>
            <property name="servicesPath">
                <default>/services/</default>
                <documentation>
                    The path to the location of the services (relative to the web application context).
                </documentation>
            </property>
            <property name="ejbJndiUrl" required="false">
                <documentation>
                    The JNDI url to use when using EJB as your web service provider.
                </documentation>
            </property>
            <property name="ejbNamingContextFactory">
                <default>org.jnp.interfaces.NamingContextFactory</default>
                <documentation>
                    The JNDI context factory to use when using EJB as your web service provider.
                </documentation>
            </property>
            <property name="sessionTimeout">
                <default>5</default>
                <documentation>
                    The number of minutes the session can be idle before timeout occurs.
                </documentation>
            </property>
            <property name="wsdlSoapNamespace">
                <default>http://schemas.xmlsoap.org/wsdl/soap/</default>
                <documentation>
                </documentation>
            </property>
            <property name="xmlSchemaNamespace">
                <default>http://www.w3.org/2001/XMLSchema</default>
                <documentation>
                </documentation>
            </property>
            <property name="wsdlNamespace">
                <default>http://schemas.xmlsoap.org/wsdl/</default>
                <documentation>
                </documentation>
            </property>
            <property name="documentStyleTransportNamespace">
                <default>http://schemas.xmlsoap.org/soap/http</default>
                <documentation>
                </documentation>
            </property>
            <property name="xmlEncoding">
                <default>UTF-8</default>
                <documentation>
                    Encoding for generated XML files.
                </documentation>
            </property>
        </propertyGroup>
        <propertyGroup name="WSS4J">
            <documentation>
                Defines the properties for configuring support for WSS4J generation.
            </documentation>
           <property name="signedRequest">
                <default>false</default>
                <documentation>
                    True or false on whether or not the webservice will expect signed
                    requests.  If true, a WSS4J Axis handler will be added to provide
                    decryption of signed requests (if this is set to <code>true</code>
                    the following properties below MUST be specified.
                </documentation>
            </property>
            <property name="encryptedRequest">
                <default>false</default>
                <documentation>
                    If true, causes generation of necessary code to that expects the request to be encrypted
                </documentation>
            </property>
            <property name="encryptedResponse">
                <default>false</default>
                <documentation>
                    If true, causes generation of necessary code that encrypts the response.
                </documentation>
            </property>
            <property name="signedResponse">
                <default>false</default>
                <documentation>
                    If true, causes generation of necessary code that signs the response.
                </documentation>
            </property>
            <property name="cryptoKeyStore" required="false">
                <documentation>
                    The location of the key store file (i.e. <em>keys/authorization-service.jks</em>).
                </documentation>
            </property>
            <property name="cryptoKeyStoreType" required="false">
                <documentation>
                    The key store's type (i.e. <em>jks</em>).
                </documentation>
            </property>
            <property name="cryptoKeyStoreAlias" required="false">
                <documentation>
                    The key store alias name.
                </documentation>
            </property>
            <property name="cryptoAliasPassword" required="false">
                <documentation>
                    The alias password.
                </documentation>
            </property>
            <property name="cryptoKeyStorePassword" required="false">
                <documentation>
                    The key store password.
                </documentation>
            </property>
        </propertyGroup>
    </properties>
</namespace>