#set ($className = "FormHistory")
#if ($stringUtils.isNotEmpty($managedBeansPackage))
package $managedBeansPackage;
#end

/**
 * This class keeps track of the history of the flow of the application
 * as the user navigates through, the maximum size of the history can be
 * configured throught the maximumSize property (which is set through the 
 * <em>maximumFormsInHistory</em> namespace property.
 * 
 * @author Chad Brandon
 */
public class $className
    implements java.io.Serializable
{
    /**
     * The max forms kept in history.
     */
    private static final int maximumSize = $maximumFormsInHistory;
    
    /**
     * Keeps the previous forms that have been used in a history.
     */
    private java.util.Stack formHistory = new java.util.Stack();
    
    /**
     * Adds a form to the history.
     *
     * @param form the form to add.
     */
    public void addFormToHistory(final Object form)
    {
        if (form != null)
        {
            if (!this.formHistory.isEmpty())
            {
                // - check to see if the last form is of the same type, if so,
                //   replace the last form with this new form
                final int lastIndex = this.formHistory.size() - 1;
                final Object lastForm = this.formHistory.get(lastIndex);
                if (lastForm != null && lastForm.getClass() == form.getClass())
                {
                    this.formHistory.remove(lastIndex);
                }
                else if (this.formHistory.size() > maximumSize)
                {
                    // otherwise we remove the first form added in the list
                    this.formHistory.remove(0);
                }
            }
            this.formHistory.add(form);
        }
    }

    /**
     * Retrieves the last form from the history and removes it.
     *
     * @return the last form.
     */
    public Object getLastFormInHistory()
    {
        Object lastForm = null;
        if (!this.formHistory.isEmpty())
        {
            final int lastIndex = this.formHistory.size() - 1;
            lastForm = this.formHistory.get(lastIndex);
            this.formHistory.remove(lastIndex);
        }
        return lastForm;
    }
    
    private static final java.util.Map triggersAndFormBeanNamesByUseCase = new java.util.HashMap();
    
#foreach ($useCase in $useCases)
    /**
     * Attemps to retrieve the trigger method name with the $useCase.name 
     * for the given <code>form</code>.
     */ 
    public static java.lang.reflect.Method get${stringUtils.upperCamelCaseName($useCase.name)}TriggerMethod(final Object form)
    {
        final String formName = form != null ? form.getClass().getName() : "";
        java.util.Map map = (java.util.Map)triggersAndFormBeanNamesByUseCase.get("$useCase.name");
        if (map == null)
        {
            final Class controllerClass = ${useCase.controller.fullyQualifiedName}.class;
            try
            {
#foreach ($action in $useCase.actions)
                map.put("$action.fullyQualifiedFormImplementationName", controllerClass.getMethod("$action.triggerName", null));
#end
                triggersAndFormBeanNamesByUseCase.put("$useCase.name", map);
            }
            catch (NoSuchMethodException exception)
            {
                throw new RuntimeException(exception);
            }
        }
        return (java.lang.reflect.Method)map.get(formName);
    }
    
#end
    
}
