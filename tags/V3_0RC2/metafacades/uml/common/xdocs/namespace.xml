<?xml version="1.0" encoding="UTF-8"?>

<document>
  	<properties>
    	<title>UML Metafacades Namespace</title>
  	</properties>
  	<body>
    	<section name="UML Metafacade Namespace Properties">
            <p>
                This pages describes those namespace properties that 
                configure different aspects of the UML Metafacades.
            </p>
            <p>
                <strong>NOTE:</strong> each metafacade listed in the <em>Configures</em>
                column applies to all metafacades specializing this metafacade as well (i.e.
                languageMappingsUri will also apply to ClassifierFacade, sqlMappingsUri would
                also apply to an EJBEntity, etc).
            </p>
            <table>
                <tr>
                    <th>Property</th>
                    <th>Description</th>
                    <th>Configures</th>
                    <th>Required?</th>
                </tr>
                <tr>
                    <td>
                        languageMappingsUri
                    </td>
                    <td>
                        URI specifying the specific mappings from model types to language types. 
                        (i.e. <code>file:${basedir}/JavaMappings.xml</code>)
                    </td>
                    <td>
                        ModelElementFacade
                    </td>
                    <td>
                        Yes
                    </td>
                </tr>
                <tr>
                    <td>
                        wrapperMappingsUri
                    </td>
                    <td>
                        URI specifying primitive type to wrapper types (i.e.
                        <code>int</code> -> <code>java.lang.Integer</code>)
                        (i.e. <code>file:${basedir}/JavaWrapperMappings.xml</code>)
                    </td>
                    <td>
                        ClassifierFacade
                    </td>
                    <td>
                        Yes
                    </td>
                </tr>
                <tr>
                    <td>
                        sqlMappingsUri
                    </td>
                    <td>
                        URI specifying the mappings file to use for mapping from model types to SQL types 
                        for generated entities. 
                        (i.e. <code>file:${basedir}/Oracle9iMappings.xml</code>).
                    </td>
                    <td>
                        Entity
                    </td>
                    <td>
                        Yes
                    </td>
                </tr>
                <tr>
                    <td>
                        sqlNameSeparator
                    </td>
                    <td>
                        Definies what is used for seperating words when SQL names are
                        constructed, for example a model element named CompanyAddress would
                        be translated to COMPANY_ADDRESS if the value of <code>sqlNameSeparator</code>
                        was '<em>_</em>'.
                    </td>
                    <td>
                        Configures any constructed SQL name.
                    </td>
                    <td>
                        No, default is <code>'_'</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        jdbcMappingsUri
                    </td>
                    <td>
                        URI specifying the mappings file to use for mapping from model types to JDBC types 
                        in the generated Entities (i.e. <code>file:${basedir}/JdbcMappings.xml</code>).
                    </td>
                    <td>
                        Entity
                    </td>
                    <td>
                        Yes
                    </td>
                </tr>
                <tr>
                    <td>
                        maxSqlNameLength
                    </td>
                    <td>
                        The maximum length that a SQL name (such as a column name or 
                        table name) may be.  This is useful for databases that have a limit
                        on the lengh that a name used in DDL may be (like Oracle).  If you set 
                        this to <code>30</code> for example, then all names will be truncated
                        after 30 characters when retrieveing the column name or table name.
                    </td>
                    <td>
                        Entity
                    </td>
                    <td>
                        No, default is <code>30</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        tableNamePrefix
                    </td>
                    <td>
                        The prefix to give all persistent entity table names.  For example
                        if you had an entity named <em>Car</em> and you defined the tableNamePrefix
                        as <em>My_</em>, then the table name for the <em>Car</em> entity would be
                        <em>My_Car</em>.
                    </td>
                    <td>
                        Entity
                    </td>
                    <td>
                        No
                    </td>
                </tr>
                <tr>
                    <td>
                        foreignKeySuffix
                    </td>
                    <td>
                        The suffix to use when creating foreign keys for entity associations.
                    </td>
                    <td>
                        EntityAssociationEnd
                    </td>
                    <td>
                        No, default is <code>_FK</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        constraintSuffix
                    </td>
                    <td>
                        The suffix to use when creating constraints such as for entity associations.
                        This is appended to the <code>foreignKeySuffix</code> suffix for foreign
                        key constraint names.
                     </td>
                    <td>
                        EntityAssociationEnd
                    </td>
                    <td>
                         No, default is <code>C</code>
                    </td>
                </tr>
               <tr>
                    <a name="useArraysForMultiplicitiesOfTypeMany"/>
                    <td>
                        useArraysForMultiplicitiesOfTypeMany
                    </td>
                    <td>
                        Whether or not array types should denote multiplicities
                        greater than one for associations between objects where appropriate 
                        (i.e. value objects when exposed as webservices)
                    </td>
                    <td>
                        No, default is <code>false</code>.
                    </td>
                    <td>
                        
                    </td>
                </tr>
                <tr>
                    <td>
                        allowDefaultIdentifiers
                    </td>
                    <td>
                        Specifies whether or not default identifiers should
                        be created for entities that do not have them 
                        modeled.
                    </td>
                    <td>
                        Entity
                    </td>
                    <td>
                        No, default is <code>true</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        defaultIdentifier
                    </td>
                    <td>
                        The name to give default identifiers.
                    </td>
                    <td>
                        Entity
                    </td>
                    <td>
                        No, default is <code>id</code>.
                    </td>
                </tr>
                <tr>
                    <a name="defaultIdentifierType"/>
                    <td>
                        defaultIdentifierType
                    </td>
                    <td>
                        The type to give default identifiers.
                    </td>
                    <td>
                        Entity
                    </td>
                    <td>
                        No, default is <code>datatype::Long</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        defaultIdentifierVisibility
                    </td>
                    <td>
                        The visibility to give default identifiers.
                    </td>
                    <td>
                        Entity
                    </td>
                    <td>
                        No, default is <code>public</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        enumerationSuffix
                    </td>
                    <td>
                        The suffix given to persistent enumeration names.  For example
                        if you had a modeled enumeration named <em>Color</em> and the enumerationSuffix
                        was set to <em>Enum</em> the persistent enumeration name would then
                        be <em>ColorEnum</em>.
                    </td>
                    <td>
                        Entity
                    </td>
                    <td>
                        No, default is <code>Enum</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        pluralizeAssociationEndNames
                    </td>
                    <td>
                        Turns on/off the pluralization of association ends with multiplicities 
                        greater than one.  You'll want to turn off this feature if your model 
                        is in a language other than english.
                    </td>
                    <td>
                        AssociationEndFacade
                    </td>
                    <td>
                        No, default is <code>true</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        namespaceSeparator
                    </td>
                    <td>
                        Used to separate namespaces within the generated code.  For example
                        setting this to <code>'.'</code> causes fully qualified names to be defined as
                        <em>some.package.name.SomeClass</em>.
                    </td>
                    <td>
                        All elements that construct namespace names.
                    </td>
                    <td>
                        No, the default is <code>'.'</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        relationNameSeparator
                    </td>
                    <td>
                        The separator used for constructing a relation name between two associations.
                    </td>
                    <td>
                        EntityAssociation
                    </td>
                    <td>
                        No, the default is <code>2</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        undefinedName
                    </td>
                    <td>
                        When a model element name is unspecified this is
                        the name used (instead of null).
                    </td>
                    <td>
                        Configures undefined model element names in model validation
                        messages.
                    </td>
                    <td>
                        No, the default is <code>undefined</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        enableMetafacadePropertyCaching
                    </td>
                    <td>
                        Used for performance reasons, caching a metafacade's properties
                        significantly speeds up the code generation process. Can be disabled when debugging.
                        This feature can be set on a per cartridge basis.
                    </td>
                    <td>
                        Whether or not to use the caching of metafacade properties.
                    </td>
                    <td>
                        No, the default is <code>true</code>.
                    </td>
                </tr>
                <tr>
                    <td>
                        metaclassImplementationNamePattern
                    </td>
                    <td>
                        The pattern used when determining the metaclass implementation class name
                        from a metaclass interface.
                    </td>
                    <td>
                        The metaclass implementation name to find.
                    </td>
                    <td>
                        No, the default is <code>{0}$Impl</code> and doesn't
                        even need to be considered being changed unless changing 
                        to a different meta model or meta model repository.
                    </td>
                </tr>
                <tr>
                    <td>
                        preconditionNamePattern
                    </td>
                    <td>
                        The pattern used when constructing a name for an operation that can perform
                        a precondition verification (where <em>{0}</em> is the name of the model element).
                    </td>
                    <td>
                        OperationFacade
                    </td>
                    <td>
                        No, the default is <code>{0}Precondition</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        postconditionNamePattern
                    </td>
                    <td>
                        The pattern used when constructing a name for an operation that can perform
                        a post-condition verification (where <em>{0}</em> is the name of the model element).
                    </td>
                    <td>
                        OperationFacade
                    </td>
                    <td>
                        No, the default is <code>{0}Postcondition</code>
                    </td>
                </tr>
                <tr>
                    <td>serviceAccessorPattern</td>
                    <td>
                        The pattern to use when calling services. Suppose your front end referenced
                        a service and you were using an axis webservice client stub to access the
                        service, the value of your serviceAccessorPattern would be:
                        <em>new {0}.ws.{1}Locator().get{1}()</em>, where <em>{0}</em> is
                        the package name of the modeled service and <em>{1}</em> is the
                        name of the modeled service.
                    </td>
                    <td>
                        The pattern of a call to the back-end service layer
                    </td>
                    <td>
                        No, by default no accessors to backend-services are configured.
                    </td>
                </tr>
                <tr>
                    <td>servicePackageNamePattern</td>
                    <td>
                        Used in combination with the <code>serviceAccessorPattern</code> property,
                        this is the pattern to use when constructing the back end service package name.
                        This is useful when your package name may be different than the one
                        in your model (for example when talking to a webservice your client
                        stubs may be in a different package than your modeled ones). If this was the
                        case you'd need to specify something like <em>{0}.ws</em> if your package
                        name was <em>some.package.name</em> and you wanted <em>ws</em> added to each
                        package.
                    </td>
                    <td>
                        The package of the back-end service.
                    </td>
                    <td>
                        No, default is <code>{0}</code>
                    </td>
                </tr>
                <tr>
                    <td>manageablePackageSuffix</td>
                    <td>
                        The name of the subpackage that will be used for the generation of
                        <![CDATA[<<Manageable>>]]> entities.
                    </td>
                    <td>
                        The subpackage name of all <![CDATA[<<Manageable>>]]> entities. 
                    </td>
                    <td>
                        No, default is <code>crud</code>
                    </td>
                </tr>
                <tr>
                    <td>defaultMultiplicity</td>
                    <td>
                        Defines the default multiplicity to use when 
                        no multiplicity is defined for an attribute or association
                        end.
                        <ul>
                            Permitted values are:
                            <li>0</li>
                            <li>1</li>
                        </ul>
                    </td>
                    <td>
                        Attributes and association ends
                    </td>
                    <td>
                        No, default is <code>1</code>.
                    </td>
                </tr>
            </table>
            <subsection name="Name Masking Properties">
                <p>
                    <a name="masking_values"/>
                    Certain namespace properties (the ones listed below) are used to provide masking of names.   For example
                    a name such as "Hospital Visit" given to an enumeration literal could be transformed
                    into <em>HOSPITAL_VISIT</em> during model processing by applying the <em>upperunderscore</em>
                    mask to it.
                    When applicable, the following masks are available:
                    <ul>
                        <li>uppercase - upper cases the name (i.e. "Hospital Visit" would become <em>HOSPITAL VISIT</em>)</li>
                        <li>lowercase - lower cases the name (i.e. "Hospital Visit" would become <em>hosptial visit</em>)</li>
                        <li>upperunderscore - upper cases the name and replaces all non-word characters with an underscore (i.e. "Hospital Visit" would become <em>HOSPITAL_VISIT</em>)</li>
                        <li>lowerunderscore - lower cases the name and replaces all non-word characters with an underscore (i.e. "Hospital Visit" would become <em>hosptial_visit</em>)</li>
                        <li>underscore - replaces all non-word characters with an underscore (i.e. "Hospital Visit" would become <em>Hosptial_Visit</em>)</li>
                        <li>nospace - removes all spaces (i.e. "Hospital Visit" would become <em>HosptialVisit</em>)</li>
                        <li>uppercamelcase - camel cases the word beginning with an upper cased letter (i.e. "Hospital Visit" would become <em>HospitalVisit</em>)</li>
                        <li>lowercamelcase - camel cases the word beginning with a lower cased letter (i.e. "Hospital Visit" would become <em>hospitalVisit</em></li>
                        <li>none - no mask is applied</li>
                    </ul>
                </p>
                <table>
                    <tr>
                        <th>Property</th>
                        <th>Description</th>
                        <th>Configures</th>
                        <th>Required?</th>
                    </tr>
                    <tr>
                        <td>
                            roleNameMask
                        </td>
                        <td>
                            Provides the ability to apply a mask to role names (roles are actors
                            marked with the role stereotype). Please see <a href="#masking_values">above</a>
                            for the available masks that may be applied.
                        </td>
                        <td>
                            Role
                        </td>
                        <td>
                            No, the default is <code>none</code>.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            operationNameMask
                        </td>
                        <td>
                            Provides the ability to apply a mask to all operation names.
                            Please see <a href="#masking_values">above</a>
                            for the available masks that may be applied.
                        </td>
                        <td>
                            OperationFacade
                        </td>
                        <td>
                            No, the default is <code>none</code>.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            parameterNameMask
                        </td>
                        <td>
                            Provides the ability to apply a mask to all parameter names.
                            Please see <a href="#masking_values">above</a>
                            for the available masks that may be applied.
                        </td>
                        <td>
                            ParameterFacade
                        </td>
                        <td>
                            No, the default is <code>none</code>.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            classifierNameMask
                        </td>
                        <td>
                            Provides the ability to apply a mask to all classifier names.
                            Please see <a href="#masking_values">above</a>
                            for the available masks that may be applied.
                        </td>
                        <td>
                            ClassifierFacade
                        </td>
                        <td>
                            No, the default is <code>none</code>.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            classifierPropertyNameMask
                        </td>
                        <td>
                            Provides the ability to apply a mask to all classifier property names.
                            Please see <a href="#masking_values">above</a>
                            for the available masks that may be applied.
                        </td>
                        <td>
                            ClassifierFacade properties (attributes and association ends)
                        </td>
                        <td>
                            No, the default is <code>none</code>.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            enumerationLiteralNameMask
                        </td>
                        <td>
                            Provides the ability to apply a mask to enumeration literal names.
                            Please see <a href="#masking_values">above</a>
                            for the available masks that may be applied.
                        </td>
                        <td>
                            Literals (i.e. attributes) on an EnumerationFacade
                        </td>
                        <td>
                            No, the default is <code>none</code>.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            enumerationNameMask
                        </td>
                        <td>
                            Provides the ability to apply a mask to enumeration names.
                            Please see <a href="#masking_values">above</a>
                            for the available masks that may be applied.
                        </td>
                        <td>
                            EnumerationFacade
                        </td>
                        <td>
                            No, the default is <code>none</code>.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            entityNameMask
                        </td>
                        <td>
                            Provides the ability to apply a mask to enumeration names.
                            Please see <a href="#masking_values">above</a>
                            for the available masks that may be applied.
                        </td>
                        <td>
                            Entity
                        </td>
                        <td>
                            No, the default is <code>none</code>.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            entityPropertyNameMask
                        </td>
                        <td>
                            Provides the ability to apply a mask to entity property names.
                            Please see <a href="#masking_values">above</a>
                            for the available masks that may be applied.
                        </td>
                        <td>
                            Entity properties (attributes and association ends).
                        </td>
                        <td>
                            No, the default is <code>none</code>.
                        </td>
                    </tr>
                </table>
            </subsection>
    	</section>
  	</body>
</document>