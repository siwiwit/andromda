/* Autogenerated by AndroMDA (EntityLocalIntf.vsl) - do not edit */
## Include global definitions. ##
#parse("templates/EJBglobals.vm")
##
#set ($parentClass = $transform.getGeneralization($class.id))
#if ($parentClass)
#set ($parentStereotype = $transform.getStereotype($myClass))
#if ( $parentStereotype == "Entity")
## Extend the component interface of the super type if the super type 
## is an <<Entity>>
#set ($parentInterface = "${transform.findFullyQualifiedName($parentClass)}")
#end
#end
#if (!$parentInterface)
#set ($parentInterface = "javax.ejb.EJBLocalObject")
#end

##################################################################################
##                         The actual template starts here                      ##
##################################################################################
package $packagename;

/**
 * Local component interface for #firstJavadocParagraph(${class} "lower" "the $entityname entity bean.")
#remainingJavadocParagraphs($class " ")
 *
#copyTaggedValues($class " " [ "@andromda.ejb.viewType", "@andromda.ejb.transactionType", "@andromda.ejb.noSyntheticCreateMethod" ])
 *
 */
public interface ${entityname} 
extends $parentInterface 
        #foreach($intf in $transform.getAbstractions($class.id)),
        $transform.findFullyQualifiedName($intf)#end

{

    // -- accessors for environment entries and constants --
#foreach($att in $transform.getStaticAttributes($class))
#set ($visibility = $transform.getVisibility($att))
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
#set($attType = $transform.getFullyQualifiedName($att.type))
#set($AttName = $str.upperCaseFirstLetter($att.name))
    /**
#if($transform.getStereotype($att) == "EnvEntry")
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} environment entry")
#else
#set ($ATT_NAME = $str.toDatabaseAttributeName($att.name, '_'))
     * Get #firstJavadocParagraph(${att} "lower" "the $ATT_NAME constant")
#end
#remainingJavadocParagraphs($att "     ")
     */
    public $attType get$AttName();
    
#end
#end

    // ------------- attributes ----------------
    
#foreach ( $att in $transform.getInstanceAttributes($class))
#set ($visibility = $transform.getVisibility($att))
## Only expose the method to the component interface if it is public.
#if($visibility == "public")
#set($attType = $transform.getFullyQualifiedName($att.type))
#set($AttName = $str.upperCaseFirstLetter($att.name))
    /**
     * Get #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
#remainingJavadocParagraphs($att "     ")
     */
    public $attType get$AttName();

#if(!$transform.isReadOnly($att))
    /**
     * Set #firstJavadocParagraph(${att} "lower" "the ${att.name} property")
     * @param value the new value
     */
    public void set$AttName($attType value);
    
#end
#end
#end

    // ------------- relations ------------------

#foreach ( $assoc in $transform.getEntityRelations($class) )
#set ($assocname = $transform.findEjbRelationName($assoc, $entityname))
#set ($TargetRoleName = ${str.upperCaseFirstLetter($assoc.target.roleName)})
#set ($targetTypeName = $transform.getRelationTargetType($assoc))

   /**
    * Get #firstJavadocParagraph(${assoc.target} "lower" "the ${assoc.target.roleName}")
#remainingJavadocParagraphs($assoc.target "    ")
    */
    public $targetTypeName get$TargetRoleName();

   /**
    * Set #firstJavadocParagraph(${assoc.target} "lower" "the ${assoc.target.roleName}")
    */
    public void set$TargetRoleName($targetTypeName ${assoc.target.roleName});
#end ## foreach

    // ---------------- business methods  ----------------------

#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) != "FinderMethod" && $transform.getStereotype($op.id) != "CreateMethod" && $transform.getStereotype($op.id) != "SelectMethod")
#set ($visibility = $transform.getVisibility($op))
## Only expose public, nonstatic methods (public static methods go on the home
## interface)
#if ($visibility == "public" && !$transform.isStatic($op)) 
#set ($msig = $transform.getOperationSignature($op))
#set ($exceptions = $transform.findTagValue($op, "@andromda.java.throws"))
#if (!$exceptions)
#set ($exceptions = $transform.findFullyQualifiedName($defaultException))
#end
   /**
#generateDocumentation ($op "    ")
    */
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#if ($exceptions)
    public $returntype ${msig} throws $exceptions;
#else
    $visibility $returntype ${msig};
#end
#end
#end
#end

}
