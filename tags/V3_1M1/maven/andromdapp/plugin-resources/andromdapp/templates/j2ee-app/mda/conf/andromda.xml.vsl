<andromda>
    <properties>
        <property name="modelValidation">true</property>
        <property name="cartridgeFilter">${filter}</property>
    </properties>
    <server>
        <host>localhost</host>
        <port>4446</port>
    </server>
    <models>
        <model>
            <uri>${maven.andromda.model.uri}</uri>
            <moduleSearchLocations>
                <location>${maven.repo.local}/andromda/xml.zips</location>
            </moduleSearchLocations>
        </model>
    </models>
    <namespaces>
        <namespace name="default">
            <properties>
                <property name="languageMappingsUri">Java</property>
                <property name="wrapperMappingsUri">JavaWrapper</property>
                <property name="sqlMappingsUri">${sql.mappings}</property>
                <property name="jdbcMappingsUri">JDBC</property>
                <property name="maxSqlNameLength">30</property>
                <property name="foreignKeySuffix">_FK</property>
                <property name="ejbJndiNamePrefix">${application.id}-${application.version}</property>
                 <!-- these masking properties allow you to configure the way
                      your model element names are generated -->
                <property name="classifierNameMask">none</property>
                <property name="operationNameMask">none</property>
                <property name="roleNameMask">none</property>
                <property name="enumerationNameMask">none</property>
                <property name="enumerationLiteralNameMask">upperunderscore</property>
                <property name="entityNameMask">none</property>
                <property name="entityPropertyNameMask">none</property>
                <property name="parameterNameMask">none</property>
#if ($spring)
                <property name="hibernateVersion">$hibernateVersion</property>
#end
            </properties>
        </namespace>
#if ($ejb)
        <namespace name="ejb">
            <properties>
                <property name="entity-beans">${maven.andromda.core.generated.dir}</property>
                <property name="session-beans">${maven.andromda.core.generated.dir}</property>
                <property name="entity-impls">${maven.andromda.core.manual.dir}</property>
                <property name="session-impls">${maven.andromda.core.manual.dir}</property>
            </properties>
        </namespace>
#elseif ($hibernate)
        <namespace name="hibernate">
            <properties>
                <property name="hibernateVersion">$hibernateVersion</property>
                <property name="hibernateTypeMappingsUri">Hibernate</property>
                <property name="dataSource">${dataSource}</property>
                <property name="hibernateShowSql">${hibernate.db.showSql}</property>
                <property name="hibernateDialect">${hibernate.db.dialect}</property>
                <property name="hibernateInheritanceStrategy">subclass</property>
                <property name="hibernateTransactionManagerLookup">${hibernate.transaction.manager.lookup}</property>
                <property name="customTypesPackage">${application.package}</property>
                <property name="hibernateJdbcBatchSize">0</property>
                <property name="hibernateUseQueryCache">false</property>
                <property name="hibernateQueryUseNamedParameters">true</property>
                <property name="compositionDefinesEagerLoading">true</property>
#if ($hibernateVersion=="2")
                <property name="hibernateCacheProvider">net.sf.hibernate.cache.EhCacheProvider</property>
                <property name="hibernateQueryCacheFactory">net.sf.hibernate.cache.StandardQueryCacheFactory</property>
                <property name="hibernateTransactionFactoryClass">net.sf.hibernate.transaction.JTATransactionFactory</a>
#elseif ($hibernateVersion=="3")
                <property name="hibernateCacheProvider">org.hibernate.cache.EhCacheProvider</property>
                <property name="hibernateQueryCacheFactory">org.hibernate.cache.StandardQueryCacheFactory</property>
                <property name="hibernateTransactionFactoryClass">org.hibernate.transaction.JTATransactionFactory</a>
#end
                <property name="entities">${maven.andromda.core.generated.dir}</property>
                <property name="entity-impls">${maven.andromda.core.manual.dir}</property>
                <property name="session-beans">${maven.andromda.core.generated.dir}</property>
                <property name="session-impls">${maven.andromda.core.manual.dir}</property>
                <property name="configuration">${maven.andromda.core.generated.dir}</property>
                <!-- uncomment to enable EJB security -->
                <!-- <property name="securityRealm">${application.id}</property> -->
            </properties>
        </namespace>        
#else
        <namespace name="spring">
            <properties>
#if ($ear)
                <property name="dataSource">${dataSource}</property>
#else
                <property name="username">${dataSource.user}</property>
                <property name="password">${dataSource.password}</property>
                <property name="driver">${dataSource.driver.class}</property>
                <property name="connectionUrl">${dataSource.url}</property>
#end
                <property name="hibernateDialect">${hibernate.db.dialect}</property>
                <property name="hibernateShowSql">${hibernate.db.showSql}</property>
                <property name="hibernateUseQueryCache">false</property>
                <property name="hibernateQueryUseNamedParameters">true</property>
#if ($hibernateVersion=="2")
                <property name="sessionFactory">org.springframework.orm.hibernate.LocalSessionFactoryBean</property>
                <property name="transactionManager">org.springframework.orm.hibernate.HibernateTransactionManager</property>
                <property name="hibernateCacheProvider">net.sf.hibernate.cache.EhCacheProvider</property>
                <property name="hibernateQueryCacheFactory">net.sf.hibernate.cache.StandardQueryCacheFactory</property>
#elseif ($hibernateVersion=="3")
                <property name="sessionFactory">org.springframework.orm.hibernate3.LocalSessionFactoryBean</property>
                <property name="transactionManager">org.springframework.orm.hibernate3.HibernateTransactionManager</property>
                <property name="hibernateCacheProvider">org.hibernate.cache.EhCacheProvider</property>
                <property name="hibernateQueryCacheFactory">org.hibernate.cache.StandardQueryCacheFactory</property>
#end
                <property name="hibernateInheritanceStrategy">${hibernate.inheritance.strategy}</property>
                <property name="springTypesPackage">${application.package}</property>
                <property name="daos">${maven.andromda.core.generated.dir}</property>
                <property name="dao-impls">${maven.andromda.core.manual.dir}</property>
                <property name="spring-configuration">${maven.andromda.core.generated.dir}</property>
                <property name="services">${maven.andromda.core.generated.dir}</property>
                <property name="service-impls">${maven.andromda.core.manual.dir}</property>
#if ($ear)
                <!-- to remove any dependency on EJB, comment the following property -->
                <property name="session-ejbs">${maven.andromda.core.generated.dir}</property>
                <!-- uncomment to enable EJB security -->
                <property name="securityRealm">${application.id}</property>
#end
            </properties>
        </namespace>
        <namespace name="hibernate">
            <properties>
                <property name="hibernateTypeMappingsUri">Hibernate</property>
                <property name="hibernateInheritanceStrategy">${hibernate.inheritance.strategy}</property>
                <property name="defaultHibernateGeneratorClass">${hibernate.generatorClass}</property>
                <property name="hibernateDefaultCascade">none</property>
                <property name="entities">${maven.andromda.core.generated.dir}</property>
                <property name="entity-impls">${maven.andromda.core.manual.dir}</property>
                <property name="customTypesPackage">${application.package}</property>
                <property name="compositionDefinesEagerLoading">true</property>
            </properties>
        </namespace>
#end
#if ($webservice)
        <namespace name="webservice">
            <properties>
                <property name="schemaTypeMappingsUri">AxisWSDLMappings</property>
                <property name="languageMappingsUri">AxisJavaMappings</property>
                <property name="defaultProvider">${default.provider}</property>
                <property name="applicationName">${application.id}</property>
                <property name="wsdlSoapAddress">${wsdl.soap.address}</property>
#if ($hibernate)
                <property name="ejbInterfacePattern">{0}.ejb.{1}</property>
                <property name="ejbHomeInterfacePattern">{0}.ejb.{1}Home</property>
#elseif ($ejb)
                <property name="ejbInterfacePattern">{0}.ejb.{1}</property>
                <property name="ejbHomeInterfacePattern">{0}.ejb.{1}LocalHome</property>
#else
                <property name="rpcClassNamePattern">{0}.{1}WSDelegator</property>
#end                
                
                <property name="wsdls">${maven.andromda.webservice.generated.dir}/wsdl</property>
                <property name="axis-configuration">${maven.andromda.webservice.generated.dir}/axis</property>
            </properties>
        </namespace>
#end
        <namespace name="java">
            <properties>
#if ($webservice)
                <property name="languageMappingsUri">AxisJavaMappings</property>
                <property name="useArraysForMultiplicitiesOfTypeMany">true</property>
#end
                <property name="enumerations">${maven.andromda.common.generated.dir}</property>
                <property name="exceptions">${maven.andromda.common.generated.dir}</property>
                <property name="value-objects">${maven.andromda.common.generated.dir}</property>
            </properties>
        </namespace>
#if ($web)
        <namespace name="bpm4struts">
            <properties>
                <property name="forms">${maven.andromda.web.generated.dir}</property>
                <property name="pages">${maven.andromda.web.generated.dir}</property>
                <property name="actions">${maven.andromda.web.generated.dir}</property>
                <property name="controllers">${maven.andromda.web.generated.dir}</property>
                <property name="controller-impls">${maven.andromda.web.manual.java.dir}</property>
                <property name="decorators">${maven.andromda.web.manual.java.dir}</property>
                <property name="messages">${maven.andromda.web.generated.dir}/WEB-INF/classes</property>
                <property name="configuration">${maven.andromda.web.generated.dir}/WEB-INF</property>
                <property name="security">false</property>
                <property name="securityRealm">other</property>
#if ($ejb)
                <property name="serviceAccessorPattern">{0}.{1}Util.getHome().create()</property>
#else
                <property name="serviceAccessorPattern">${application.package}.ServiceLocator.instance().get{1}()</property>
#end
                <property name="mergeMappingsUri">file:${maven.conf.dir}/mappings/Bpm4StrutsMergeMappings.xml</property>
                <property name="manageableServiceAccessorPattern">${application.package}.ManageableServiceLocator.instance().get{1}()</property>
            </properties>
        </namespace>
#end
    </namespaces>
</andromda>