<?xml version="1.0" encoding="iso-8859-1"?>

<document>
    <properties>
        <author email="naresh@andromda.org">Naresh Bhatia</author>
        <title>Create a Console Application</title>
    </properties>

    <body>
        <section name="Create a Console Application">
            <p>
                In this section we will try out the <code>PeopleService</code> using a simple console application.

                <ol>
                    <li>Download the <a href="resources/sample-code/timetracker/console1.zip">console application project</a>
                    and unzip it in the timetracker directory (C:/timetracker). You will get a new directory
                    called C:/timetracker/console. This directory contains three files - <code>project.xml</code>,
                    <code>maven.xml</code> (Maven project files) and <code>TimeTrackerConsole.java</code> (the console
                    application, under src/java/org/andromda/timetracker/console).</li>

                    <li>Add two new targets in C:/timetracker/maven.xml (the top-level maven.xml file) - these targets allow
                    you to build and run the console application from the C:/timetracker directory. The two new targets
                    are called <code>ttconsole</code> and <code>run</code>. Place these targets after the <code>mda</code>
                    target as shown below:
<source language="xml"><![CDATA[
    <!-- ==================================================================
            Runs the MDA component
         ================================================================== -->
    <goal name="mda">
        <maven:maven
            descriptor="mda/project.xml"
            goals="pom:install"/>
    </goal>

    <!-- ==================================================================
            Builds the Console component
         ================================================================== -->
    <goal name="ttconsole">
        <maven:maven
            descriptor="console/project.xml"
            goals="jar:install"/>
    </goal>

    <!-- ==================================================================
            Runs the Console component
         ================================================================== -->
    <goal name="run">
        <maven:maven
            descriptor="console/project.xml"
            goals="run"/>
    </goal>
]]></source>
                    </li>

                    <li>Review the console application in <code>TimeTrackerConsole.java</code>.
                    Key methods of this application are shown below:
<source language="java">
public static void main(String[] args) {
    // Get services
    serviceLocator = ServiceLocator.instance();
    peopleService = serviceLocator.getPeopleService();

    // Create people
    PersonVO naresh = createPerson("nbhatia", "Naresh", "Bhatia");
    PersonVO louis = createPerson("lcoude", "Louis", "Coude");
    PersonVO john = createPerson("jsmith", "John", "Smith");

    // Fetch and show all objects created above
    PersonVO[] people = peopleService.getAllPeople();
    showPeople(people);
}

private static PersonVO createPerson(String username, String firstName, String lastName) {
    PersonVO person = new PersonVO(null, username, firstName, lastName);
    person.setId(peopleService.createPerson(person));
    System.out.println("Person " + person.getId() + " created - " + person.getUsername());
    return person;
}
</source>
                    As you can see the logic of the console application is very simple.
                    We first need to get a reference to the <code>PeopleService</code>.
                    We do this by using the <code>ServiceLocator</code>, a helper class
                    generated by AndroMDA that uses the Spring framework to locate services.
                    Now we create three people in the database using the <code>PeopleService</code>.
                    Following that we fetch all the people that exist in the database,
                    again using the <code>PeopleService</code>, and display them.</li>

                    <li>Build the console application by executing the <code>ttconsole</code>
                    target as follows: <code>maven -o ttconsole</code>.</li>

                    <li>Run the console application by executing the <code>run</code>
                    target as follows: <code>maven -o run</code>. The console output
                    is shown below.
                        <pre class="console">
C:/timetracker>maven -o run
    ...
    [java] Person 1 created - nbhatia
    [java] Person 2 created - lcoude
    [java] Person 3 created - jsmith
    [java] People:
    [java] 1: nbhatia - Naresh Bhatia
    [java] 2: lcoude - Louis Coude
    [java] 3: jsmith - John Smith
    [java]
BUILD SUCCESSFUL
Total time: 8 seconds
Finished at: Mon Jan 30 01:41:58 EST 2006
C:/timetracker>
                        </pre>
                    </li>

                    <li>Drop the database schema in preparation for the following sections
                    of the tutorial where we will add more tables to our timetracker
                    database. To do this, execute the <code>drop-schema</code> target
                    as follows: <code>maven -o drop-schema</code>.</li>
                </ol>
            </p>
        </section>

        <section name="What's Next?">
            <p>
                Now that we have a running console application with 1 entity, 1 value object and 1 service,
                we are ready to implement more TimeTracker functionality. Click <a href="create-association.html">here</a>
                to add a <code>Timecard</code> object to TimeTracker and learn how to model associations in AndroMDA.
                application.
            </p>
        </section>
    </body>
</document>
