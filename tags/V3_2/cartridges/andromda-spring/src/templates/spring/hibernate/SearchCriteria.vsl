#if ($criteria)
#set ($outlet = "criteria")
#else
#set ($outlet = "daos")
#end
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SearchCriteria.vsl in andromda-spring-cartridge.
//
#if ($stringUtils.isNotBlank($class.packageName))
package $class.packageName;
#end

/**
$class.getDocumentation(" * ")
 */
public class $class.name
#if($class.generalization)
    extends ${class.generalization.fullyQualifiedName}
#end
    implements java.io.Serializable
{
#if (!$class.properties.empty)

    public ${class.name}()
    {
    }
#end

    /**
     * Constructor taking all properties.
     */
#set ($parenthesis = "(")
#if ($class.properties.empty)
#set ($parenthesis = "()")
#end
    public ${class.name}${parenthesis}
#foreach ($property in $class.properties)
#set ($typeName = $property.type.fullyQualifiedName)
#if ($property.many)
#set ($typeName = "java.util.Collection")
#end
        $typeName ${property.name}#if($velocityCount != $class.properties.size()),#else)
#end

#end
    {
#foreach ($property in $class.properties)
        this.${property.name} = ${property.name};
#end
    }

    /**
     * Copies constructor from other ${class.name}
     */
    public ${class.name}(${class.name} otherBean)
    {
        if (otherBean != null)
        {
#foreach ( $property in $class.properties)
            this.${property.name} = otherBean.${property.getterName}();
#end
        }
    }

    /**
     * The first result to retrieve.
     */
    private java.lang.Integer firstResult;

    /**
     * Gets the first result to retrieve.
     *
     * @return the first result to retrieve
     */
    public java.lang.Integer getFirstResult()
    {
        return this.firstResult;
    }

    /**
     * Sets the first result to retrieve.
     *
     * @param firstResult the first result to retrieve
     */
    public void setFirstResult(java.lang.Integer firstResult)
    {
        this.firstResult = firstResult;
    }

    /**
     * The fetch size.
     */
    private java.lang.Integer fetchSize;

    /**
     * Gets the fetch size.
     *
     * @return the fetch size
     */
    public java.lang.Integer getFetchSize()
    {
        return this.fetchSize;
    }

    /**
     * Sets the fetch size.
     *
     * @param fetchSize the fetch size
     */
    public void setFetchSize(java.lang.Integer fetchSize)
    {
        this.fetchSize = fetchSize;
    }

    /**
     * The maximum size of the result set.
     */
    private java.lang.Integer maximumResultSize;

    /**
     * Gets the maximum size of the search result.
     *
     * @return the maximum size of the search result.
     */
    public java.lang.Integer getMaximumResultSize()
    {
        return this.maximumResultSize;
    }

    /**
     * Sets the maxmimum size of the result.
     *
     * @param maximumResultSize A number indicating how many results will be returned.
     */
    public void setMaximumResultSize(java.lang.Integer maximumResultSize)
    {
        this.maximumResultSize = maximumResultSize;
    }

#foreach ( $attribute in $class.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
    private $typeName $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $typeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

    $attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name)
    {
        this.${attribute.name} = $attribute.name;
    }

#end
## Generate the relation methods.
#foreach ( $associationEnd in $class.associationEnds )
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable)
    private $target.getterSetterTypeName $target.name;

    /**
     * Get the $target.name
$target.getDocumentation("     * ")
     */
    public $target.getterSetterTypeName ${target.getterName}()
    {
        return this.${target.name};
    }

    /**
     * Set the $target.name
     */
    public void ${target.setterName}($target.getterSetterTypeName $target.name)
    {
        this.${target.name} = ${target.name};
    }
#end
#end
}