<?xml version="1.0" encoding="iso-8859-1"?>

<document>

  <properties>
    <author email="mbohlen@mbohlen.de">Matthias Bohlen</author>
    <title>AndroMDA - What is it?</title>
    <gennews>yes</gennews>
  </properties>

  <body>

    <section name="What is AndroMDA?">

      <p class="std">
        In short, AndroMDA is a code generator framework - it takes a Unified
        Modeling Language (UML) model from a CASE-tool in XMI format and
        generates custom components. It comes with a set of sample templates
        that generate classes attributed with XDoclet tags. One build step
        later, the XDoclet tool generates full-blown components
        that can readily be deployed in the JBoss
        application server (and the other servers that XDoclet can feed).
      </p>
      <p class="std">
        <b>Why would you want to use it?</b>
      </p>
      <p class="std">
        Often, developers write components by hand or
        let a wizard generate them (from inside some Java IDE).
        However, the features of these wizards are often very
        limited: they usually allow to generate
        one class/component at a time but not a complete set
        of them, connected by persistent relationships.
      </p>
      <p class="std">
        <b>Do you know XDoclet?</b>
      </p>
      <p class="std">
        The XDoclet tool was already a significant step forward. Using XDoclet,
        a developer can code a class, insert deployment metainformation for
        persistent attributes, persistent relationships to other classes,
        database mapping, and so on. The bean developer codes the deployment
        information as special @javadoc-tags which she puts in front of a Java
        class, attribute or method. XDoclet will collect these tags and builds
        all the necessary interfaces (e.g. EJB home, local, remote) as well as a
        deployment descriptor. This was already very good and made continuous
        integration possible. However, writing correct tags to get persistent
        relationships between classes is still quite difficult with XDoclet.
      </p>
      <p  class="std">
        <b>How does AndroMDA work?</b>
      </p>
      <p  class="std">
        AndroMDA builds upon XDoclet as a solid foundation and takes
        the process of component generation to the next level. It starts from
        a graphical model, drawn in Unified Modeling Language (UML) and
        translates the classes in the model into XDoclet-ready Java files.
        This allows the developer to think in terms of classes, attributes,
        methods and relationships without having to worry about the correct
        @tag syntax.
      </p>
      <p  class="std">
        You want to see what AndroMDA looks like?
        Proceed <a href="lookandfeel.html">here</a>.
      </p>
    </section>

    <news name="What is XDoclet?" href="http://xdoclet.sourceforge.net">
      <p>
        XDoclet is an extended Javadoc Doclet engine. It's a generic
        Java tool that lets you create custom Javadoc @tags and
        based on those @tags generate source code or other files
        (such as xml-ish deployment descriptors) using a template
        engine it provides. XDoclet supports a set of common
        standard tasks such as web.xml or ejb-jar.xml generation,
        users and contributors can create other templates and @tags
        and add support for other technologies, too.
      </p>
    </news>

    <news name="Continuous Integration" href="http://www.martinfowler.com/articles/continuousIntegration.html">
      <p>
        Software development is full of best practices which are often
        talked about but seem to be rarely done. One of the most basic,
        and valuable, of these is a fully automated build and test
        process that allows a team to build and test their software many
        times a day. The idea of a daily build has been talked about a
        lot. McConnell recommends it as a best practice and it's been
        long known as a feature of the Microsoft development approach.
        Martin Fowler and the folks from ThoughtWorks agree with the XP
        community, however, in saying that daily builds
        are a minimum. A fully automated process that allows you to build
        several times a day is both achievable and well worth the effort.
      </p>
    </news>

  </body>
</document>
