<?xml version="1.0" encoding="iso-8859-1"?>

<document>

  <properties>
    <author email="mbohlen@mbohlen.de">Matthias Bohlen</author>
    <title>AndroMDA - The sample application</title>
    <gennews>no</gennews>
  </properties>

  <body>

    <freetext name="Section 1">
      <h1>The Car Rental System sample application</h1>
      <p class="std">
        AndroMDA would be difficult to understand without a full
        blown sample application. Therefore, the distribution package
        includes a fictitious car rental system with a UML model and
        and an implementation in the form of J2EE components.
      </p>
      <p class="std">
        <b>Where can I find the sample?</b>
      </p>
      <p class="std">
        The model and the source code of the sample are located
        in the subdirectory <code>samples/car-rental-system/</code> of the AndroMDA source distribution package.
        The binary distribution contains the deployable *.ear files for JBoss.
        You will notice that the source ZIP does <b>not</b> contain all the classes because
        most of them are generated automatically. So, please run AndroMDA
        using <code>ant -f build.xml</code> to see the whole thing!
        The source code in the distribution contains only the hand-written
        classes.
      </p>
      <p class="std">
        We have designed the model using the CASE tool Poseidon - you will find
        the model inside the file <code>CarRentalSystem.zargo</code>. You can open this
        file with the Poseidon tool if you want. You will find a free community edition (called "CE")
        of the tool on <a href="http://www.gentleware.com">Gentleware's web site</a>.
        Although Poseidon CE is free, not everybody has got it. Therefore, I have
        used Poseidon PE to generate an HTML/JPEG representation of the car rental system sample model
        (called <code>umldoc</code>) so that everybody can read it with his/her browser.
        You may click <a href="../umldoc/index.html">here</a> to browse it.
      </p>
      <p class="std">
        <b>What's in the UML model?</b>
      </p>
      <p class="std">
        The model consists
        of a package with use cases, explaining what the main actors (users)
        of the application might be and what they can do with the system.
        The main actors are an administrator who creates a lot of stuff
        like car types and cars, a customer who reserves cars for a certain
        date, a call center who can do the same on the phone and register
        car accidents, too. Last, not least, there are car handout desk
        and car reception desk who do what their names imply. :-)
        Each use case has an activity diagram attached to it which explains
        the message flow of that particular use case.
      </p>
      <p class="std">
        The rest of the model contains all the design level packages with the
        class diagrams inside. The design level packages are <code>admins</code>,
        <code>contracts</code>, <code>customers</code> and <code>inventory</code>.
      </p>
      <p class="std">
        See the full model in the Poseidon tool or the umldoc representation
        <a href="../umldoc/index.html">here</a>.
      </p>
      <p class="std">
        <b>What happens when I start AndroMDA on the sample UML model?</b>
      </p>
      <p class="std">
        Before you launch the generator, make sure to install and prepare
        <code>build.properties</code> properly (otherwise the classpath will
        not be set correctly, and it won't run). For a description how to do this
        see <a href="install.html">How to install AndroMDA</a> on this website.
      </p>
      <p class="std">
        OK, now when you invoke AndroMDA, it will generate all the Enterprise JavaBean
        classes and all the Struts-based classes for the web-based J2EE application.
        Of course,
        it cannot generate files where your own business, control or presentation
        logic should be. In that case, it generates a frame where you can fill
        in your own code. (On the bottom line, you'll want to write some real
        code, won't you?)
      </p>
      <p class="std">
        I have written some code that implements the logic of the car rental system.
        When you start the generator using <code>ant -f build.xml</code>
        or simply <code>ant</code>, you
        will get a file called <code>car-rental-system.ear</code> which you can
        deploy directly in JBoss (simply by copying it into JBoss's subdirectory
        <code>server/default/deploy</code>).
      </p>
      <p class="std">
        <b>How do I invoke the sample app?</b>
      </p>
      <p class="std">
        Start the JBoss server and watch it load the application. At the end, it
        says something like "JBoss started in xxx seconds". Now, point your browser
        to <a href="http://localhost:8080/carrental-ejb">http://localhost:8080/carrental-ejb</a>
        to start the web app (replace the word "ejb" by "hibernate" if you
        deployed the Hibernate version of the car rental system. You will notice that the web app comes up in your
        preferred language (currently available: Brazilian Portuguese, Finnish, and German)
        or in English if your language is not supported. This is due to the fact
        that the sample app uses Struts localized message resources.
      </p>
      <p class="std">
        You may now begin to explore the sample app. Login as an administrator,
        create some useful stuff such as car types, then cars, then customers.
        Logout. Then, login as a customer and reserve these cars for a certain
        date. Finally, you may start a JDBC browser to have a look at the database tables
        with their beautiful CMR relationships in the disguise of foreign keys.
      </p>
      <p class="std">
        <b>Attention:</b> When you log in as an administrator for the first time (no other
        administrator is in the database), the car rental system creates a new
        administrator with the login and password you supply. So, please memorize
        it for the next time you log in.
      </p>
      <p class="std">
        <b>Have fun and tell us what happened!</b>
      </p>
      <p class="std">
        That's it! Have fun with the sample.
        In case of difficulties, ask a question on the
            <a href="http://lists.sourceforge.net/lists/listinfo/andromda-user">
               andromda-user
            </a>mailing list.
      </p>
    </freetext>

  </body>
</document>
