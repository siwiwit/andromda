<?xml version="1.0" encoding="iso-8859-1"?>

<document>

  <properties>
    <author email="mbohlen@mbohlen.de">Matthias Bohlen</author>
    <title>AndroMDA - Writing your own templates</title>
    <gennews>no</gennews>
  </properties>

  <body>

    <freetext name="Section 1">
      <h1>Writing templates for AndroMDA</h1>
      <p class="std">
        AndroMDA with its current template set follows a particular
        pattern to generate the classes which are necessary for a
        complete Enterprise JavaBean. If this pattern does not meet
        your needs or if you want to extend it, write your own pattern!
      </p>
      <p class="std">
        <b>The template script language</b>
      </p>
      <p class="std">
        This is the Velocity Template Language (VTL). You can find a reference
        of this language
        <a href="http://jakarta.apache.org/velocity/vtl-reference-guide.html">
        here</a>. This will show you how to write templates in general.
      </p>
      <p class="std">
        <b>The scripting object model</b>
      </p>
      <p class="std">
        AndroMDA passes the following objects to the script:
      </p>

      <table border="1" cellpadding="2" cellspacing="0">

        <tr>
          <td valign="top" class="std"><b>Name of object</b></td>
          <td valign="top" class="std"><b>Description</b></td>
          <td align="left" valign="top" class="std"><b>More info</b></td>
        </tr>

        <tr>
          <td valign="top" class="std">$model</td>
          <td valign="top" class="std">Contains the model that was
                           built in the case tool, in the form a
                           UML v1.4 model.
          </td>
          <td align="left" valign="top" class="std">
            <a href="http://www.gentleware.com/support/developer/jmi-uml1.4/org/omg/uml/UmlPackage.html">
               <code>Model</code>
            </a>
          </td>
        </tr>

        <tr>
          <td valign="top" class="std">$class</td>
          <td valign="top" class="std">
                           Provides a reference to the UML model element for which code should be generated.
                           
          </td>
          <td align="left" valign="top" class="std">
          	In general that object will be of type
            <a href="../javadoc/org/andromda/core/simpleuml/PModelElement.html">
               <code>PModelElement</code>
            </a>
            and in the case of a class it will be of type
            <a href="../javadoc/org/andromda/core/simpleuml/PClassifier.html">
               <code>PClassifier</code>
            </a>
          </td>
        </tr>

        <tr>
          <td valign="top" class="std">$transform</td>
          <td valign="top" class="std">
                           Helper object that can transform
                           model objects into a printable form
                           that can be used easily from a VTL script.
          </td>
          <td align="left" valign="top" class="std">
            <a href="../javadoc/org/andromda/core/simpleuml/SimpleOOHelper.html">
               <code>ScriptOOHelper</code>
            </a>
          </td>
        </tr>

        <tr>
          <td valign="top" class="std">$str</td>
          <td valign="top" class="std">
                           Helper object that can perform string
                           formatting.
          </td>
          <td align="left" valign="top" class="std">
            <a href="../javadoc/org/andromda/core/common/StringUtilsHelper.html">
               <code>StringUtilsHelper</code>
            </a>
          </td>
        </tr>

        <tr>
          <td valign="top" class="std">$date</td>
          <td valign="top" class="std">
                           The current date.
          </td>
          <td align="left" valign="top" class="std">
            <code>java.util.Date</code>
          </td>
        </tr>

      </table>

      <p class="std">
        Read the templates which are included with the distribution and
        compare the usage of the scripting objects to the info above.
        You'll understand.
      </p>

    </freetext>

  </body>
</document>
