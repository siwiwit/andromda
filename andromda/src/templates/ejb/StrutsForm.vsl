#set ($packagename = $transform.findPackageName(${class.package}))
package $packagename;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;

import org.andromda.samples.carrental.webutils.FormFieldMapper;
import java.text.ParseException;

#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end

#set ($primKey = $transform.getPrimaryKeyAttribute($class))
#set ($primKeyTypeName = $transform.findFullyQualifiedName($primKey.type))

#foreach ( $assocLink in $class.associationLinks )
    #set ($adata = $transform.getAssociationData($assocLink))
#if ($adata.target.navigable == "true")
    #set ($class2 = $adata.target.type)
    #if ($class2)
        #set ($class2packagename = $transform.findPackageName(${class2.package}))
        #if ($class2packagename != $packagename)
import $transform.findFullyQualifiedName(${class2});
        #end
    #end
#end
#end

#foreach ( $dep in $class.dependencies )
    #set ($class2 = $transform.findClassById($dep.targetType))
    #if ($class2)
        #set ($class2packagename = $transform.findPackageName(${class2.package}))
        #if ($class2packagename != $packagename)
import $transform.findFullyQualifiedName(${class2});
        #end
    #end
#end

/**
#generateDocumentation ($class " ")
 *
 * @struts:form name="$class.name"
 *
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag != "documentation")
#if ($tgv.tag == "---")
    #set ($tag = "")
#else
    #set ($tag = $tgv.tag)
#end
 * $tag    $tgv.value
#end
#end
 *
 */
public class ${class.name} extends ActionForm
{
#foreach ( $att in $class.attributes )
#set ($attfqtypename = $transform.findFullyQualifiedName($att.type))
#if ($attfqtypename == "java.util.Collection")
  #set ($attJavaType = "java.util.Collection")
#else
  #set ($attJavaType = "String")
#end
    private $attJavaType ${att.name};
#end

#foreach ( $att in $class.attributes )
#set ($attfqtypename = $transform.findFullyQualifiedName($att.type))
#set ($atttypename = $transform.convertToType($att.type).name)
#if ($attfqtypename == "java.util.Collection")
  #set ($attJavaType = "java.util.Collection")
#else
  #set ($attJavaType = "String")
#end

   /**
#generateDocumentation ($att "    ")
    *
    */
#if ($attfqtypename != "java.util.Collection")
    public String get${str.upperCaseFirstLetter(${att.name})}()
    {
        return this.${att.name};
    }

    public void set${str.upperCaseFirstLetter(${att.name})}(String newValue)
    {
        this.${att.name} = newValue;
    }

    public $attfqtypename getDecoded${str.upperCaseFirstLetter(${att.name})}()
        throws ParseException
    {
#if ($attfqtypename == "java.lang.String")
        return this.${att.name};
#else
        return (this.${att.name} == null) ? null : FormFieldMapper.mapTo${atttypename}(this.${att.name});
#end
    }

    public void setDecoded${str.upperCaseFirstLetter(${att.name})}(${attfqtypename} newValue)
    {
#if ($attfqtypename == "java.lang.String")
        this.${att.name} = newValue;
#else
        this.${att.name} = (newValue == null) ? null : FormFieldMapper.mapFrom${atttypename}(newValue);
#end
    }

#else   ## Collection
    public $attJavaType get${str.upperCaseFirstLetter(${att.name})}()
    {
        return this.${att.name};
    }

    public void set${str.upperCaseFirstLetter(${att.name})}($attJavaType newValue)
    {
        this.${att.name} = newValue;
    }
#end

#end
}
