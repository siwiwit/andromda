package org.andromda.cartridges.interfaces;

import java.io.File;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * This class implements the <code>&lt;template&gt;</code> tag
 * in a cartridge descriptor file.
 * 
 * @author <a href="http://www.mbohlen.de">Matthias Bohlen</a>
 * @author Anthony Mowers
 * @author Chad Brandon
 */
public class TemplateConfiguration
{

    /**
     * The default constructor used by the XmlObjectFactory to 
     * instantiate the template configuration.
     */
    public TemplateConfiguration() {}
    
    /**
    * Adds a stereotype that tells us the stereotype(s) 
    * in the model that should drive code generation with this template.
    * 
    * @param stereotype the name of the stereotype
    */
    public void addStereotype(String stereotype)
    {
        this.stereotypes.add(stereotype);
    }

    /**
     * Tells us the stereotype(s) in the model that
     * should drive code generation with this template.
     * 
     * @return List all stereotypes which this template
     *         should process.
     */
    public List getStereotypes()
    {
        return stereotypes;
    }

    /**
     * Tells us which VelocityTemplateEngine stylesheet to use as a template.
     * @param sheet points to the script
     */
    public void setSheet(String sheet)
    {
        this.sheet = sheet;
    }

    /**
     * Tells us which VelocityTemplateEngine stylesheet to use as a template.
     * @return File points to the script
     */
    public String getSheet()
    {
        return sheet;
    }

    /**
     * Sets the pattern that is used to build the
     * name of the output file.
     * @param outputPattern the pattern in java.text.MessageFormat syntax
     */
    public void setOutputPattern(String outputPattern)
    {
        this.outputPattern = outputPattern;
    }

    /**
     * Gets the pattern that is used to build the
     * name of the output file.
     * @return String the pattern in java.text.MessageFormat syntax
     */
    public String getOutputPattern()
    {
        return outputPattern;
    }

    /**
     * Sets the outlet where the output file that is generated from this
     * template should be placed,
     * @param outlet points to the outlet
     */
    public void setOutlet(String outlet)
    {
        this.outlet = outlet;
    }

    /**
     * Gets the outlet where the output file that is generated from this
     * template should be placed.
     * @return String the outlet alias name
     */
    public String getOutlet()
    {
        return outlet;
    }

    /**
     * Tells us whether output files generated by this
     * template should be overwritten if they already exist.
     * @param overwrite overwrite the file yes/no
     */
    public void setOverwrite(boolean overwrite)
    {
        this.overwrite = overwrite;
    }

    /**
     * Tells us whether output files generated by this
     * template should be overwritten if they already exist.
     * @return boolean
     */
    public boolean isOverwrite()
    {
        return overwrite;
    }

    /**
     * Tells us whether output files should be generated if this
     * template does not produce any output.
     * @param generateEmptyFiles generate files for empty output yes/no
     */
    public void setGenerateEmptyFiles(boolean generateEmptyFiles)
    {
        this.generateEmptyFiles = generateEmptyFiles;
    }

    /**
     * Tells us whether output files are generated by this
     * template if the template produces empty output.
     * @return boolean
     */
    public boolean isGenerateEmptyFiles()
    {
        return generateEmptyFiles;
    }
    
    /**
     * If output to single file is <code>true</code>
     * then all model elements found by the processor (i.e.
     * all those having matching stereotypes) will be 
     * output to one file.
     * 
     * @return Returns the outputToSingleFile.
     */
    public boolean isOutputToSingleFile() 
    {
        return outputToSingleFile;
    }
    /**
     * @param outputToSingleFile The outputToSingleFile to set.
     * 
     * @see isOutputToSingleFile()
     */
    public void setOutputToSingleFile(boolean outputToSingleFile) 
    {
        this.outputToSingleFile = outputToSingleFile;
    }

    /**
     * Returns the fully qualified output file, that means:
     * <ul>
     * <li>the output pattern has been translated</li>
     * <li>the output dir name has been prepended</li>
     * </ul>
     * 
     * @param inputClassName name of the class from the UML model
     * @param inputPackageName name of the package from the UML model 
     *                         in which the class is contained
     * @param oldict the dictionary where outlet names can be resolved to
     *               physical  directories
     * @return File absolute file
     */
    public File getFullyQualifiedOutputFile(
        String inputClassName,
        String inputPackageName,
        String directory)
    {
        int dotIndex = sheet.indexOf(".");
        String sheetBaseName = sheet.substring(0, dotIndex);

        Object[] arguments =
            {
                inputPackageName.replace('.', File.separatorChar),
                inputClassName,
                sheetBaseName};

        String outputFileName =
            MessageFormat.format(outputPattern, arguments);
            
        File outputLocation = null;
        if (StringUtils.isNotEmpty(directory)) {
        	outputLocation = new File(directory, outputFileName);
        }
        return outputLocation;
    }

    /**
     * Just for debugging.
     * @see java.lang.Object#toString()
     */
    public String toString()
    {
        return ToStringBuilder.reflectionToString(this);
    }

    private List stereotypes = new ArrayList();
    private String sheet;
    private String outputPattern;
    private String outlet;
    private boolean overwrite;
    private boolean generateEmptyFiles;
    private boolean outputToSingleFile = false;

}
