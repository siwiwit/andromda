/* 
    This OCL file contains valid OCL syntax which the parser should 
    be able to successfully parse. 
*/

package org::andromda

-- BODY

context LoyaltyAccount::getCustomerName() : String
    body: Membership.card.owner.name

context Bookpart::findAllParts() : Collection (Bookpart)
    body findAllParts :
	    self.allInstances() -> select(la : Bookpart, la2 : SomeType, la3 : AnotherType | la.title = 'test' and la2.title = 'test')
	   
-- DEF

context Customer
    def: initial : String = name.substring(1,1)

context CustomerCard
    def: getTotalPoints( d: Date ) : Integer =
        transactions->select( date.isAfter(d) ).points->sum()
	    
-- DERIVE

context TransactionReportLine::partnerName : String
    derive: transaction.generatedBy.partner.name
    
context TransactionReport::totalEarned : Integer
    derive: TransactionReport.allInstances().points->sum()
	
-- INV
	
context Person
inv: Person::allInstances()->isUnique(socSecNr)

context ProgramPartner
    inv totalPoints:
        deliveredServices.transactions.points->sum() < 10000
        
context ProgramPartner
    inv: deliveredServices.transactions->select( isOclType( Burning ) )
        ->collect( points )->sum() < 10000

context Interface
    inv: features->select(f | f.oclIsKindOf( Attribute ) )->isEmpty()
    
/* 
    The following invariant states that the maximum number of points
    that may be earned by all services of a program partner is equal
    to 10,000 
*/
context ProgramPartner
    inv totalPointsEarning:
        deliveredServices.transactions   -- all transactions
            ->select( Earning )          -- select earning ones
                .points -> sum()         -- sum all points
                    < 100000             -- sum smaller than 10,000
                    
context CustomerCard
    inv: let correctDate : Boolean =
        self.validFrom.isBefore(Date::now) and
        self.goodThru.isAfter(Date::now)
    in
        if valid then
            correctDate = false
        else
            correctDate = true
        endif

-- PRE AND POST
        
context Person::getMortgage(security : House)
    pre: self.mortgages.monthlyPayment -> sum() <= self.salary * 0.30
   
context Person::getMortgage(security : House)
    pre: security.value >= security.mortgages.principal -> sum()
        
context LoyaltyAccount::isEmpty() : Boolean
    post: result = (points = 0)
        
context LoyaltyProgram::enroll(c : Customer)
    pre : c.name <> ''
    post: participants = participants@pre->including( c )
    
context Service::upgradePointsEarned(amount: Integer)
    post: calcPoints() = calcPoints@pre() + amount
    
context Subject::hasChanged()
    post: observer^update(12, 14)
    
context File::save()
    post: self.project.builders->forAll( b : Builder |
    b^incrementalBuild() )
  
context ServiceLevel   
  inv: program.partners .isEmpty()
  inv: Set { Set { 1, 2 }, Set { 2, 3 }, Set { 4, 5, 6 } } .isEmpty()
  inv: Set { 1, 2, 3, 4, 5, 6 } .isEmpty()
  inv: Bag { Set { 1, 2 }, Set { 1, 2 }, Set { 4, 5, 6 } } .isEmpty()
  inv: Bag { 1, 1, 2, 2, 4, 5, 6 } .isEmpty()
  inv: Sequence { Set { 1, 2 }, Set { 2, 3 }, Set { 4, 5, 6 } } .isEmpty()
  inv: Sequence { 2, 1, 2, 3, 5, 6, 4 } .isEmpty()
  inv: Set{1,4,7,10} - Set{4,7} = Set{1,10} 
  
context Customer
  inv: age.oclIsKindOf(java::lang::Integer)
  
context Customer
  inv: age.oclIsTypeOf(java::lang::Integer)
    
endpackage